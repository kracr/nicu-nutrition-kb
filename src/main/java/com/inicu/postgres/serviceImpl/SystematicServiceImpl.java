
package com.inicu.postgres.serviceImpl;

import au.com.bytecode.opencsv.CSVReader;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.Lists;
import com.google.gson.Gson;
import com.inicu.his.data.acquisition.HISReceiver;
import com.inicu.models.*;
import com.inicu.postgres.dao.InicuDao;
import com.inicu.postgres.dao.NotesDAO;
import com.inicu.postgres.dao.PatientDao;
import com.inicu.postgres.dao.SystematicDAO;
import com.inicu.postgres.entities.*;
import com.inicu.postgres.service.LogsService;
import com.inicu.postgres.service.SystematicService;
import com.inicu.postgres.utility.*;
//import com.sun.xml.internal.ws.policy.jaxws.SafePolicyReader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Repository;

import javax.mail.Message.RecipientType;
//import javax.persistence.Basic;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigInteger;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
//import java.time.format.DateTimeFormatter;
import java.time.LocalDate;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static com.inicu.postgres.utility.BasicUtils.postgresUtil;
import static java.lang.Integer.parseInt;

@Repository
public class SystematicServiceImpl implements SystematicService {

	@Autowired
	SystematicDAO sysDAO;

	@Autowired
	InicuDao inicuDao;

	@Autowired
	LogsService logService;

	@Autowired
	PatientDao patientDao;

	@Autowired
	NotesDAO notesDao;

	@Autowired
	private InicuDatabaseExeption databaseException;

	@Autowired
	InicuPostgresUtililty inicuPostgresUtility;

	SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy hh:mm a");

	ObjectMapper mapper = new ObjectMapper();

    private static final Logger logger = LoggerFactory.getLogger(SystematicServiceImpl.class);

	@SuppressWarnings("unchecked")
	@Override
	public SysJaundJSON getJaundice(String uhid, String loggedUser) throws InicuDatabaseExeption {
		SysJaundJSON json = new SysJaundJSON();
		SaJaundice oldJaundiceObj = json.getJaundice();
		Long timeHours = null;
		int offset = TimeZone.getTimeZone(BasicConstants.CLIENT_TIME_ZONE).getRawOffset()
				- TimeZone.getDefault().getRawOffset();


		List<SaJaundice> list = getJaundiceRiskFactor(uhid);
		if (!BasicUtils.isEmpty(list)) {
			oldJaundiceObj = getJaundiceRiskFactor(uhid).get(0);
		}

		// get age at onset....in hours and weeks/..
		Calendar birthDateCal = null;
		Integer gestation = null;
		try {
			
			int offsetnew = TimeZone.getTimeZone(BasicConstants.CLIENT_TIME_ZONE).getRawOffset()
					- TimeZone.getDefault().getRawOffset();

			String queryBabyDetails = "select obj from BabyDetail obj where uhid='" + uhid + "'";
            String querybindscore = "select bindscore from ScoreBind where uhid='" + uhid + "' and bindscore IS NOT NULL order by creationtime desc";
            String queryAssessmentTime = "select assessmentTime from SaJaundice where uhid='" + uhid + "' and assessmentTime IS NOT NULL order by assessment_time desc";
            String queryPrevPhotoType = "select phototherapyType from SaJaundice where uhid = '" + uhid + "' and phototherapyType IS NOT NULL order by creationtime desc";
//			String querybindscore = "select bindscore from ScoreBind where uhid='" + uhid + "' and bindscore IS NOT NULL order by creationtime desc";
//			String queryAssessmentTime = "select assessment_time from SaJaundice where uhid='" + uhid + "' order by assessment_time desc";
			List<Integer> bindscoredetail = inicuDao.getListFromMappedObjQuery(querybindscore);
			List<BabyDetail> babyDetailsLsit = inicuDao.getListFromMappedObjQuery(queryBabyDetails);
			List<Timestamp> assessmentTime = inicuDao.getListFromMappedObjQuery(queryAssessmentTime);
			List<String> prevPhotoType = inicuDao.getListFromMappedObjQuery(queryPrevPhotoType);

			if (!BasicUtils.isEmpty(prevPhotoType)) {
                json.setPrevPhotoType(prevPhotoType.get(0).toString());
            }
			
			if (!BasicUtils.isEmpty(assessmentTime)) {
              Timestamp bindScoreAssessmentTime = new Timestamp(assessmentTime.get(0).getTime() +  offsetnew);
              json.setPastBindScoredate(bindScoreAssessmentTime.toString());
			}

            if (!BasicUtils.isEmpty(bindscoredetail)) {
                json.setBindscore(bindscoredetail.get(0));
            }

			if (!BasicUtils.isEmpty(babyDetailsLsit)) {
				BabyDetail babyDetails = babyDetailsLsit.get(0);

				// setting gestation here....
				gestation = babyDetails.getActualgestationweek();
				Date dob = babyDetails.getDateofbirth();
				String timeOfBirth = babyDetails.getTimeofbirth();
				String[] timeArr = new String[3];
				if (!BasicUtils.isEmpty(timeOfBirth)) {
					timeArr = timeOfBirth.split(",");
				}
				birthDateCal = Calendar.getInstance();
				birthDateCal.setTime(dob);
				System.out.println(birthDateCal.getTime());
				if (timeArr.length >= 3 && !BasicUtils.isEmpty(timeArr[1])) {

					if (!BasicUtils.isEmpty(timeArr[2]) && timeArr[2].equalsIgnoreCase("AM")) {
						if (!BasicUtils.isEmpty(timeArr[0])) {
							if (Integer.valueOf(timeArr[0]) == 12) {
								birthDateCal.set(Calendar.HOUR, Integer.valueOf(timeArr[0]) - 12);
							} else {
								birthDateCal.set(Calendar.HOUR, Integer.valueOf(timeArr[0]));
							}
						}
					} else if (!BasicUtils.isEmpty(timeArr[2]) && timeArr[2].equalsIgnoreCase("PM")) {
						if (!BasicUtils.isEmpty(timeArr[0])) {
							if (Integer.valueOf(timeArr[0]) == 12) {
								birthDateCal.set(Calendar.HOUR, Integer.valueOf(timeArr[0]));
							} else {
								birthDateCal.set(Calendar.HOUR, Integer.valueOf(timeArr[0]) + 12);
							}
						}
					}
					if (!BasicUtils.isEmpty(timeArr[1]))
						birthDateCal.set(Calendar.MINUTE, Integer.valueOf(timeArr[1]));
				} else {
					birthDateCal.set(Calendar.HOUR, Integer.valueOf("0"));
					birthDateCal.set(Calendar.MINUTE, Integer.valueOf("0"));
					birthDateCal.set(Calendar.SECOND, Integer.valueOf("0"));
				}

				Calendar cal2 = Calendar.getInstance();
				Long timeDiffHours = cal2.getTime().getTime() - birthDateCal.getTime().getTime();
				int offset1 = TimeZone.getTimeZone(BasicConstants.CLIENT_TIME_ZONE).getRawOffset()
						- TimeZone.getDefault().getRawOffset();
				if (offset != 0) {
					timeDiffHours += 19800000;
				}
				timeHours = timeDiffHours / (3600 * 1000) + 1;
			}

			// get mother blood group
			String antentalHistoryDetails = "select obj from AntenatalHistoryDetail obj where uhid='" + uhid + "'";
			String motherBloodGroup = "";
			List<AntenatalHistoryDetail> antentalHistoryList = inicuDao
					.getListFromMappedObjQuery(antentalHistoryDetails);

			if (!BasicUtils.isEmpty(antentalHistoryList)) {
				AntenatalHistoryDetail obj = antentalHistoryList.get(0);
				if (!BasicUtils.isEmpty(obj.getMotherBloodGroupAbo())) {
					motherBloodGroup = obj.getMotherBloodGroupAbo();
					if (!BasicUtils.isEmpty(obj.getMotherBloodGroupRh())) {
						motherBloodGroup = motherBloodGroup
								+ (obj.getMotherBloodGroupRh().equalsIgnoreCase("positive") ? " +ve"
										: (obj.getMotherBloodGroupRh().equalsIgnoreCase("negative")) ? " -ve" : "");
					}
					json.setMotherBloodGroup(motherBloodGroup);
				}
			}

			// get baby blood group
			String babyDetailsQuery = "select obj from BabyDetail obj where uhid='" + uhid + "'";
			String babyBloodGroup = "";
			List<BabyDetail> babyDetailsList = inicuDao.getListFromMappedObjQuery(babyDetailsQuery);
			if (!BasicUtils.isEmpty(babyDetailsList)) {
				BabyDetail obj = babyDetailsList.get(0);
				if (!BasicUtils.isEmpty(obj.getBloodgroup())) {
					babyBloodGroup = obj.getBloodgroup();
				}
				json.setBabyBloodGroup(babyBloodGroup);
			}

			List<SaJaundice> jaundList = new ArrayList<SaJaundice>();
			String query = "SELECT jaund FROM SaJaundice AS jaund WHERE uhid='" + uhid
					+ "' order by assessmentTime desc, sajaundiceid desc";

			jaundList = inicuDao.getListFromMappedObjQuery(query);

			if (!BasicUtils.isEmpty(jaundList)) {
                try {
                    if (jaundList.get(0).getJaundicestatus().equalsIgnoreCase("No")) {
                        json.setInactiveProgressNote(generateInactiveNotesJaundice(null, uhid, ""));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    logger.error("Exception while generating inactive note", e);
                }
            }

			// get dropdown values

			String getCauseJaund = "SELECT causeofjaundiceid, causeofjaundice FROM ref_causeofjaundice "
					+ "where causeofjaundiceid!='JAU0006'";

			List<KeyValueObj> causeofJaund = getRefObj(getCauseJaund);
			// adding other cause..
			KeyValueObj keyValOther = new KeyValueObj();
			keyValOther.setKey("JAU0006");
			keyValOther.setValue("Others");
			causeofJaund.add(keyValOther);

			JaundDropDownsJSON dropDown = new JaundDropDownsJSON();
			dropDown.setCauseOfJaundice(causeofJaund);

			// icd causes.
			String getIcdCauseJaund = "SELECT code, cause FROM ref_icd_code " + "where assessment='Jaundice'";

			List<KeyValueObj> icdCauseofJaund = getRefObj(getIcdCauseJaund);
			dropDown.setIcdCauseOfJaundice(icdCauseofJaund);

			String getRiskFactor = "";
			if (!BasicUtils.isEmpty(gestation) && gestation < 34) {
				getRiskFactor = "SELECT riskfactorid, riskfactor FROM ref_jaundiceriskfactor where isNiceCharts = 'true' order by sequence";
			} else {
				getRiskFactor = "SELECT riskfactorid, riskfactor FROM ref_jaundiceriskfactor order by sequence";
			}

			List<KeyValueObj> riskFactor = getRefObj(getRiskFactor);
			dropDown.setRiskFactor(riskFactor);

			String queryOrderInvestigation = "SELECT testid, testname FROM ref_testslist";
			List<KeyValueObj> orderInvestigation = getRefObj(queryOrderInvestigation);
			dropDown.setOrderInvestigation(orderInvestigation);

			String queryAssessmentJaundice = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment where category='Jaundice' ";
			List<KeyValueObj> assessmentJaundice = getRefObj(queryAssessmentJaundice);
			dropDown.setTreatmentAction(assessmentJaundice);
			
			String queryGetFrequencyRef = "select obj from RefMedfrequency obj order by frequency_int";
			List<RefMedfrequency> freqList = inicuDao.getListFromMappedObjQuery(queryGetFrequencyRef);
			dropDown.setMedicineFrequency(freqList);

			// getting hours data....
			List<String> hours = new ArrayList<String>();
			for (int i = 0; i <= 23; i++) {
				if (i < 10) {
					hours.add("0" + i);
				} else {
					hours.add(String.valueOf(i));
				}
			}
			// dropDown.setHours(hours);

			List<String> hoursValues = getTime(BasicConstants.HOURS);
			dropDown.setHours(hoursValues);
			List<String> minutesValues = getTime(BasicConstants.MINUTES);
			dropDown.setMinutes(minutesValues);

			// get tests list from ref table...
			String queryRefTestsList = "select obj from RefTestslist as obj where not (obj.assesmentCategory like ('%None%')) order by assesmentCategory, testid asc";
			List<RefTestslist> listRefTests = inicuDao.getListFromMappedObjQuery(queryRefTestsList);
			// populate drop down hash map for the tests list...
			HashMap<Object, List<RefTestslist>> testsListMap = new HashMap<Object, List<RefTestslist>>();
			for (RefTestslist test : listRefTests) {
				List categoryList = null;
				if (testsListMap.get(test.getAssesmentCategory()) != null) {
					categoryList = testsListMap.get(test.getAssesmentCategory());

				} else {
					categoryList = new ArrayList<RefTestslist>();
				}
				categoryList.add(test);
				testsListMap.put(test.getAssesmentCategory(), categoryList);
			}

			dropDown.setTestsList(testsListMap);
			json.setDropDowns(dropDown);
			// timestamp format with time zone...
			/*
			 * for (SaJaundice jaund : jaundList) { String timestr =
			 * CalendarUtility.getTimeStampFormatUI(CalendarUtility. CLIENT_CRUD_OPERATION)
			 * .format(jaund.getCreationtime()); jaund.setCreationTimeStr(timestr); }
			 */
			json.setListJaundice(jaundList);
			if (!BasicUtils.isEmpty(jaundList) && !BasicUtils.isEmpty(jaundList.get(0).getPhototherapyvalue())
					&& (jaundList.get(0).getPhototherapyvalue().equals("Start")
							|| jaundList.get(0).getPhototherapyvalue().equals("Continue"))) {

				String queryPhototherapyDuration = "select date_part('day', (now() - assessment_time)) from sa_jaundice where uhid='"
						+ uhid + "' and episode_number =" + jaundList.get(0).getEpisodeNumber()
						+ " and phototherapyvalue ='Start'";
				List<Object> listPhototherapyDuration = inicuDao.getListFromNativeQuery(queryPhototherapyDuration);
				if (!BasicUtils.isEmpty(listPhototherapyDuration)) {
					json.setPhototherapyDuration(listPhototherapyDuration.get(0));
				}

			}
			SaJaundice joundiceCurrent = new SaJaundice();

			// getting graph data...
			HashMap<Object, List<Object[]>> jaundiceGraphData = getJaundiceGraphData(birthDateCal, uhid);
			json.setJaundiceGraphData(jaundiceGraphData);

			joundiceCurrent.setRiskfactor(oldJaundiceObj.getRiskfactor());

			String tsbQuery = "select obj from RefTestslist as obj where assesmentCategory!=null and testname = 'TSB '";
			listRefTests = inicuDao.getListFromMappedObjQuery(tsbQuery);
			if(!BasicUtils.isEmpty(listRefTests)) {
				String fetchType = "SELECT vendortestid FROM TestslistMapping as obj WHERE obj.inicutestid='"
						+ listRefTests.get(0).getTestid().trim() + "'";
				List result = inicuDao.getListFromMappedObjQuery(fetchType);

				if(!BasicUtils.isEmpty(result)) {
					String queryMaxTsbTime = "select lab_report_date,itemValue from test_result where itemid = '" + result.get(0).toString().trim() + "' and prn='" + uhid + "' order by lab_report_date desc;";
					Timestamp tsbTime = null;
					Float tsbValue = null;

					List<Object[]> resultList = inicuDao.getListFromNativeQuery(queryMaxTsbTime);
					if (!BasicUtils.isEmpty(resultList)) {
						if (!BasicUtils.isEmpty(resultList.get(0))) {
							if (!BasicUtils.isEmpty(resultList.get(0)[0])) {

								tsbTime = (Timestamp) (resultList.get(0)[0]);
								tsbTime = new Timestamp(tsbTime.getTime() -  offset);
							}
							if (!BasicUtils.isEmpty((resultList.get(0)[1]).toString())) {

								tsbValue = Float.parseFloat((resultList.get(0)[1]).toString());
							}
						}

					}
					joundiceCurrent.setTbcvalue(tsbValue);
					joundiceCurrent.setLabTestDateTime(tsbTime);

					String getAllTestResults = "select lab_report_date,itemvalue,itemunit from test_result where itemid = '" + result.get(0).toString().trim() + "' and prn = '" + uhid + "'";
					List<Object[]> allResults = inicuDao.getListFromNativeQuery(getAllTestResults);
					if(!BasicUtils.isEmpty(allResults)) {
						//Timestamp timeObj = null;
						for(int i=0;i<allResults.size();i++) {
							Timestamp lab_date=(Timestamp) allResults.get(i)[0];
							lab_date = new Timestamp(lab_date.getTime() - offset);

							Object[] tempObject=new Object[3];
							tempObject[0]= lab_date;
							tempObject[1]=allResults.get(i)[1];
							tempObject[2]=allResults.get(i)[2];

							allResults.remove(i);
							allResults.add(i,tempObject);
						}

						joundiceCurrent.setTestResultList(allResults);
					}
				}
			}

			Float maxTcB = Float.valueOf("0");
			List<SaJaundice> jaundiceListTemp = new ArrayList<SaJaundice>();
			for (int index = 0; index < jaundList.size(); index++) { // do some
				SaJaundice jaund = jaundList.get(index);
				if (!BasicUtils.isEmpty(jaund.getTbcvalue())) {
					Float tbcValue = Float.valueOf(jaund.getTbcvalue());
					if (tbcValue > maxTcB) {
						maxTcB = tbcValue;
					}
				}

				String causeOfJaundiceStr = jaund.getCauseofjaundice();
				if (!BasicUtils.isEmpty(causeOfJaundiceStr)) {
					String[] listSymtoms = causeOfJaundiceStr.replace(" ", "").trim().replace("[", "").replace("]", "")
							.split(",");
					ArrayList<String> symtomsList = new ArrayList<String>(Arrays.asList(listSymtoms));
					jaund.setCauseofjaundiceList(symtomsList);
				}

				String icdCauseOfJaundiceStr = jaund.getIcdCauseofjaundice();
				if (!BasicUtils.isEmpty(icdCauseOfJaundiceStr)) {
					String[] listSymtoms = icdCauseOfJaundiceStr.replace(" ", "").trim().replace("[", "")
							.replace("]", "").split(",");
					ArrayList<String> symtomsList = new ArrayList<String>(Arrays.asList(listSymtoms));
					jaund.setIcdCauseofjaundiceList(symtomsList);
				}

				String actionTypeStr = jaund.getActiontype();
				if (!BasicUtils.isEmpty(actionTypeStr)) {
					String[] listSymtoms = actionTypeStr.replace(" ", "").trim().replace("[", "").replace("]", "")
							.split(",");
					ArrayList<String> symtomsList = new ArrayList<String>(Arrays.asList(listSymtoms));
					jaund.setActiontypeList(symtomsList);
				}

				String queryInvestigationOrder = "Select obj from InvestigationOrdered obj where uhid='" + uhid
						+ "' and assesment_type='Jaundice' and assesmentid='" + jaund.getSajaundiceid()
						+ "' order by creationtime desc";
				List<InvestigationOrdered> investigationOrderList = inicuDao
						.getListFromMappedObjQuery(queryInvestigationOrder);
				ArrayList<String> investOrder = new ArrayList<>();
				if (!BasicUtils.isEmpty(investigationOrderList)) {
					for (InvestigationOrdered order : investigationOrderList) {
						if (!BasicUtils.isEmpty(order.getTestname())) {
							investOrder.add(order.getTestname());
						}
					}
					jaund.setOrderinvestigationList(investOrder);
				}

				String riskFactorStr = jaund.getRiskfactor();
				if (!BasicUtils.isEmpty(riskFactorStr)) {
					String[] listRiskFactor = riskFactorStr.replace(" ", "").trim().replace("[", "").replace("]", "")
							.split(",");
					ArrayList<String> listRiskFactorList = new ArrayList<String>(Arrays.asList(listRiskFactor));
					jaund.setRiskFactorList(listRiskFactorList);
				}
				jaundiceListTemp.add(jaund);
			}
			if (maxTcB > 0) {
				json.setMaxTcB(maxTcB);
			}

			try {
				HashMap<Object, Object> babyInfo = getBabyInformation(uhid);
				Integer ageAtAssessment = Integer.valueOf(babyInfo.get(BasicConstants.AGE_AT_ONSET).toString());
				joundiceCurrent.setAgeofonset(Math.round(Float.valueOf(babyInfo.get(BasicConstants.AGE_AT_ONSET).toString())));
				joundiceCurrent.setAgeatassesment(ageAtAssessment);
				if (!BasicUtils.isEmpty(babyDetailsLsit)) {
					joundiceCurrent.setDateofbirth(babyDetailsLsit.get(0).getDateofbirth());
				}
			}catch (Exception e){
				System.out.println("Exception Caught : "+e);
			}

			if (!BasicUtils.isEmpty(jaundiceListTemp)) { // set previous data
				// entry here...
				SaJaundice jaund = jaundiceListTemp.get(0);
				joundiceCurrent.setJaundicestatus(jaund.getJaundicestatus());
				joundiceCurrent.setActiontypeList(new ArrayList<String>());
			}

			// keep previous age of onset boolean and value
			// ONLY if same episode is continuing
			if (!BasicUtils.isEmpty(jaundList)) {
				if (jaundList.get(0).getJaundicestatus() != null
						&& !jaundList.get(0).getJaundicestatus().equalsIgnoreCase("inactive")) {
					joundiceCurrent.setAgeofonset(jaundList.get(0).getAgeofonset());
					joundiceCurrent.setIsageofonsetinhours(jaundList.get(0).getIsageofonsetinhours());
				}
			}

			joundiceCurrent.setGestation(gestation);

			// set past order investigation and treatment....
			if (!BasicUtils.isEmpty(jaundList)) {

				Long assessmentId = jaundList.get(0).getSajaundiceid();
				String pastInvestigationOrderStr = "";
				java.sql.Date sqlTodayDate = new java.sql.Date(new Date().getTime());
				String queryPastOrderInvestigation = "Select obj from InvestigationOrdered obj where uhid='" + uhid
						+ "' and assesmentid='" + assessmentId + "' order by creationtime desc";
				List<InvestigationOrdered> pastOrderInvestigationList = inicuDao
						.getListFromMappedObjQuery(queryPastOrderInvestigation);
				// past order investigation
				if (!BasicUtils.isEmpty(pastOrderInvestigationList)) {
					for (InvestigationOrdered order : pastOrderInvestigationList) {
						if (!BasicUtils.isEmpty(order.getTestname())) {
							if (!BasicUtils.isEmpty(pastInvestigationOrderStr)) {
								pastInvestigationOrderStr = pastInvestigationOrderStr + ", " + order.getTestname();
							} else {
								pastInvestigationOrderStr = order.getTestname();
							}
						}
					}
					joundiceCurrent.setPastOrderInvestigationStr(pastInvestigationOrderStr);
				}

			}

			json.setJaundice(joundiceCurrent);

			Date todayDate = new Date();
			// joundiceCurrent.setAssessmentDate(todayDate);
			// joundiceCurrent.setAssessmentTime(new
			// Timestamp(System.currentTimeMillis()));
			int todayHours = todayDate.getHours();
			int todayMins = todayDate.getMinutes();

			if (todayHours > 12) {
				todayHours -= 12;
				joundiceCurrent.setAssessmentMeridiem(false);
				if (todayHours < 10)
					joundiceCurrent.setAssessmentHour("0" + Integer.toString(todayHours));
				else
					joundiceCurrent.setAssessmentHour(Integer.toString(todayHours));
			} else {
				joundiceCurrent.setAssessmentMeridiem(true);
				if (todayHours < 10)
					joundiceCurrent.setAssessmentHour("0" + Integer.toString(todayHours));
				else
					joundiceCurrent.setAssessmentHour(Integer.toString(todayHours));
			}
			if (todayMins < 10)
				joundiceCurrent.setAssessmentMin("0" + Integer.toString(todayMins));
			else
				joundiceCurrent.setAssessmentMin(Integer.toString(todayMins));

			// System.out.println(joundiceCurrent.toString());;

			// get jaundice nice chart data
			JaundiceInNeoNatesGraphObj jaundiceNiceGraphData = getJaundiceInNeonatesGraphData();

			json.setJaundicePhototherapyGraph(jaundiceNiceGraphData);

			// json.setAssociatedEvents(listAssociatedEvents);

			DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date currentDate = new Date();
			String currentDateFinal = dateFormat.format(currentDate);

			String calDate = CalculateDate48HoursAgo(currentDate);

			// get past prescriptions
			json.setPrescriptionList(getPastPrescriptionList(uhid, calDate, currentDateFinal));

			// Icd Code List For Diagonis
			String pastIcdCode = getIcdCodeList(uhid);
			if (!BasicUtils.isEmpty(pastIcdCode)) {
				json.setPastIcdCodeList(pastIcdCode);
			}

		} catch (Exception e) {
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser, uhid,
					"SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return json;
	}

	private HashMap<Object, List<Object[]>> getJaundiceGraphData(Calendar birthDateCal, String uhid)
			throws ParseException {

		HashMap<Object, List<Object[]>> mapJaundicePastDataGraph = new HashMap<Object, List<Object[]>>();
		if (!BasicUtils.isEmpty(uhid) && birthDateCal != null) {

			String query = "SELECT jaund FROM SaJaundice AS jaund WHERE uhid='" + uhid
					+ "' order by assessmentTime desc";
			List<SaJaundice> jaundiceList = inicuDao.getListFromMappedObjQuery(query);
			String prevDate = "";
			String currentDate = "";
			Long diffTimeDays = null;
			Long diffTimeHo = null;
			HashMap<Object, Object> tcbMapDays = new LinkedHashMap<Object, Object>();
			HashMap<Object, Object> tcbMapHours = new LinkedHashMap<Object, Object>();
			HashMap<Object, Object> tsbMapDays = new LinkedHashMap<Object, Object>();
			HashMap<Object, Object> tsbMapHours = new LinkedHashMap<Object, Object>();
			List<Object[]> tcbMapDaysList = new ArrayList<Object[]>();
			List<Object[]> tsbMapDaysList = new ArrayList<Object[]>();
			List<Object[]> tsbMapHoursList = new ArrayList<Object[]>();
			Integer maxTcB = 0;
			Boolean isInActive = false;
			if (!BasicUtils.isEmpty(jaundiceList)) {
				for (SaJaundice jaundice : jaundiceList) {

					// calculating range of
					//if (!isInActive) {
//						if (!BasicUtils.isEmpty(jaundice.getJaundicestatus())
//								&& jaundice.getJaundicestatus().equalsIgnoreCase("Inactive")) {
//							isInActive = true;
						//} else {
							Integer ageHours = 0;
							Integer ageDays = 0;
							if (jaundice.getIsageofassesmentinhours() != null && jaundice.getAgeatassesment() != null) {
								if (jaundice.getIsageofassesmentinhours()) {
									ageHours = jaundice.getAgeatassesment();
									ageDays = Math.round(jaundice.getAgeatassesment() / 24);
								} else {
									ageHours = jaundice.getAgeatassesment() * 24;
									ageDays = jaundice.getAgeatassesment();
								}
								if(jaundice.getTcbortsb()!=null && jaundice.getTcbortsb()==true) {
									if (!BasicUtils.isEmpty(jaundice.getTbcvalue())) {
										if (tcbMapHours.get(ageHours) == null) {
											tcbMapHours.put(ageHours, jaundice.getTbcvalue());
										} else if (Float.valueOf(tcbMapHours.get(ageHours).toString()) < jaundice
												.getTbcvalue()) {
											tcbMapHours.put(ageHours, jaundice.getTbcvalue());
										}

										if (tcbMapDays.get(ageDays) == null) {
											tcbMapDays.put(ageDays, jaundice.getTbcvalue());
										} else if (Float.valueOf(tcbMapDays.get(ageDays).toString()) < jaundice
												.getTbcvalue()) {
											tcbMapDays.put(ageDays, jaundice.getTbcvalue());
										}

									}
								}

								if(jaundice.getTcbortsb()!=null && jaundice.getTcbortsb()==false) {
									if (!BasicUtils.isEmpty(jaundice.getTbcvalue())) {
										if (tsbMapHours.get(ageHours) == null) {
											tsbMapHours.put(ageHours, jaundice.getTbcvalue());
										} else if (Float.valueOf(tsbMapHours.get(ageHours).toString()) < jaundice
												.getTbcvalue()) {
											tsbMapHours.put(ageHours, jaundice.getTbcvalue());
										}

										if (tsbMapDays.get(ageDays) == null) {
											tsbMapDays.put(ageDays, jaundice.getTbcvalue());
										} else if (Float.valueOf(tsbMapDays.get(ageDays).toString()) < jaundice
												.getTbcvalue()) {
											tsbMapDays.put(ageDays, jaundice.getTbcvalue());
										}

									}
								}
							}
						//}
					//}
				}
			}

			Set<Object> keySet = tcbMapDays.keySet();
			SortedSet<Integer> sortedKeySetDays = new TreeSet<Integer>();

			Iterator<Object> iteratorDays = keySet.iterator();
			while (iteratorDays.hasNext()) {
				sortedKeySetDays.add((Integer) iteratorDays.next());
			}
			Iterator<Integer> iteratorSortedDays = sortedKeySetDays.iterator();
			while (iteratorSortedDays.hasNext()) {
				Object[] graphDataArray = new Object[2];
				Object key = iteratorSortedDays.next();
				Object value = tcbMapDays.get(key);
				graphDataArray[0] = key;
				graphDataArray[1] = value;
				tcbMapDaysList.add(graphDataArray);
			}

			Set<Object> keySet1 = tsbMapDays.keySet();
			SortedSet<Integer> sortedKeySetDays1 = new TreeSet<Integer>();

			Iterator<Object> iteratorDays1 = keySet1.iterator();
			while (iteratorDays1.hasNext()) {
				sortedKeySetDays1.add((Integer) iteratorDays1.next());
			}
			Iterator<Integer> iteratorSortedDays1 = sortedKeySetDays1.iterator();
			while (iteratorSortedDays1.hasNext()) {
				Object[] graphDataArray = new Object[2];
				Object key = iteratorSortedDays1.next();
				Object value = tsbMapDays.get(key);
				graphDataArray[0] = key;
				graphDataArray[1] = value;
				tsbMapDaysList.add(graphDataArray);
			}

			Set<Object> keySetHours = tcbMapHours.keySet();
			SortedSet<Integer> sortedKeySetHours = new TreeSet<Integer>();

			Iterator<Object> iteratorHours = keySetHours.iterator();
			while (iteratorHours.hasNext()) {
				sortedKeySetHours.add((Integer) iteratorHours.next());
			}

			Iterator<Integer> iteratorSortedHours = sortedKeySetHours.iterator();
			List<Object[]> tcbMapHoursList = new ArrayList<Object[]>();
			while (iteratorSortedHours.hasNext()) {
				Object[] graphDataArray = new Object[2];
				Object key = iteratorSortedHours.next();
				Object value = tcbMapHours.get(key);
				graphDataArray[0] = key;
				graphDataArray[1] = value;
				tcbMapHoursList.add(graphDataArray);
			}


			Set<Object> keySetHours1 = tsbMapHours.keySet();
			SortedSet<Integer> sortedKeySetHours1= new TreeSet<Integer>();

			Iterator<Object> iteratorHours1 = keySetHours1.iterator();
			while (iteratorHours1.hasNext()) {
				sortedKeySetHours1.add((Integer) iteratorHours1.next());
			}
			Iterator<Integer> iteratorSortedHours1 = sortedKeySetHours1.iterator();
			while (iteratorSortedHours1.hasNext()) {
				Object[] graphDataArray = new Object[2];
				Object key = iteratorSortedHours1.next();
				Object value = tsbMapHours.get(key);
				graphDataArray[0] = key;
				graphDataArray[1] = value;
				tsbMapHoursList.add(graphDataArray);
			}

			mapJaundicePastDataGraph.put("days", tcbMapDaysList);
			mapJaundicePastDataGraph.put("hours", tcbMapHoursList);
			mapJaundicePastDataGraph.put("daysTsb", tsbMapDaysList);
			mapJaundicePastDataGraph.put("hoursTsb", tsbMapHoursList);

		}
		return mapJaundicePastDataGraph;
	}

	@Override
	public ResponseMessageObject saveJaundice(SysJaundJSON sysJaundObj, String userId) throws InicuDatabaseExeption {
		ResponseMessageObject obj = new ResponseMessageObject();

		SaJaundice jaundice = sysJaundObj.getJaundice();
		if (BasicUtils.isEmpty(jaundice.getEpisodeid()) && !BasicUtils.isEmpty(jaundice.getUhid())) {
			String queryAssociatedEvents = "select episodeid from sa_jaundice where uhid='"
					+ jaundice.getUhid() + "' order by creationtime desc";
			List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

			if (!BasicUtils.isEmpty(listAssociatedEvents)) {
				jaundice.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
			}
		}
		Timestamp assessmentTime = jaundice.getAssessmentTime();
        String loggedUser = jaundice.getLoggeduser();
		if (!BasicUtils.isEmpty(assessmentTime)) {
			jaundice.setAssessmentTime(assessmentTime);
		}

		obj.setMessage("Save successfully.");
		obj.setType(BasicConstants.MESSAGE_SUCCESS);
		try {
			String uhid = jaundice.getUhid();
			if (jaundice.getJaundicestatus() != null && !jaundice.getJaundicestatus().equalsIgnoreCase("Yes")) {
				SaJaundice jaundicenew = new SaJaundice();
				jaundicenew.setJaundicestatus(jaundice.getJaundicestatus());
				jaundicenew.setAgeofonset(jaundice.getAgeofonset());
				jaundicenew.setIsageofonsetinhours(jaundice.getIsageofonsetinhours());
				jaundicenew.setAgeatassesment(jaundice.getAgeatassesment());
				jaundicenew.setAssessmentHour(jaundice.getAssessmentHour());
				jaundicenew.setAssessmentMin(jaundice.getAssessmentMin());
				jaundicenew.setWeightloss(jaundice.getWeightloss());
                jaundicenew.setIsNewEntry(jaundice.getIsNewEntry());

				if (jaundicenew.getJaundicestatus().equalsIgnoreCase("No")) {

					jaundicenew.setAssessmentTime(jaundice.getAssessmentTime());

					if (!BasicUtils.isEmpty(jaundice.getMedicationStr())) {
						jaundicenew.setMedicationStr(jaundice.getMedicationStr());
					}
					// String progressNotes = "";
					// progressNotes = "No significant clinical jaundice. ";
					// if (!BasicUtils.isEmpty(jaundice.getMedicationStr())) {
					// 	progressNotes += jaundice.getMedicationStr() + ". ";
					// }
					// if (!BasicUtils.isEmpty(sysJaundObj.getOrderSelectedText())) {
					// 	progressNotes += "Investigation ordered are - " + sysJaundObj.getOrderSelectedText() + ". ";
					// }
					jaundicenew.setComment(jaundice.getComment());
					jaundicenew.setEpisodeNumber(jaundice.getEpisodeNumber());

				} else if (jaundicenew.getJaundicestatus().equalsIgnoreCase("Inactive")) {
					List<SaJaundice> jaundList = new ArrayList<SaJaundice>();
					String query = "SELECT jaund FROM SaJaundice AS jaund WHERE uhid='" + uhid
							+ "' and jaundicestatus='Inactive' " + "order by assessmentTime desc";
					jaundList = inicuDao.getListFromMappedObjQuery(query);
					Long inActiveJaundiceId = null;
					if (jaundList != null && jaundList.size() > 0) {
						inActiveJaundiceId = jaundList.get(0).getSajaundiceid();
					} else {
						inActiveJaundiceId = (long) 0;
					}

					List<SaJaundice> jaundListToCalculate = new ArrayList<SaJaundice>();
					String queryToCalculate = "SELECT jaund FROM SaJaundice AS jaund WHERE uhid='" + uhid
							+ "' and sajaundiceid>'" + inActiveJaundiceId + "' " + "order by assessmentTime desc";
					jaundListToCalculate = inicuDao.getListFromMappedObjQuery(queryToCalculate);
					if (!BasicUtils.isEmpty(jaundListToCalculate)) {
						SaJaundice firstJaundice = jaundListToCalculate.get(jaundListToCalculate.size() - 1);
						SaJaundice lastJaundice = jaundListToCalculate.get(0);
						long assessmentDuration = (lastJaundice.getAssessmentTime().getTime()
								- firstJaundice.getAssessmentTime().getTime()) / (1000 * 60 * 60 * 24);
						int durationOfPhototherapyMins = 0;
						int durationOfExchange = 0;
						int totalIvigValue = 0;
						Timestamp photoStopDate = null;
						Timestamp photoStartDate = null;
						Timestamp exchangePlannedDate = null;
						Timestamp exchangeDoneDate = null;
						for (int i = 0; i < jaundListToCalculate.size(); i++) {
							if (!BasicUtils.isEmpty(jaundListToCalculate.get(i).getIvigvalue())) {
								totalIvigValue = totalIvigValue
										+ Integer.valueOf(jaundListToCalculate.get(i).getIvigvalue());
							}

							if (!BasicUtils.isEmpty(jaundListToCalculate.get(i).getPhototherapyvalue())) {
								if (jaundListToCalculate.get(i).getPhototherapyvalue().equalsIgnoreCase("Stop")) {
									photoStopDate = jaundListToCalculate.get(i).getAssessmentTime();
								} else if (jaundListToCalculate.get(i).getPhototherapyvalue()
										.equalsIgnoreCase("Start")) {
									photoStartDate = jaundListToCalculate.get(i).getAssessmentTime();
								}

								if (photoStartDate != null && photoStopDate != null) {
									long currentPhotoMins = (photoStopDate.getTime() - photoStartDate.getTime())
											/ (1000 * 60);
									if (currentPhotoMins > 0) {
										durationOfPhototherapyMins = (int) (durationOfPhototherapyMins
												+ currentPhotoMins);
										photoStartDate = null;
										photoStopDate = null;
									}

								}
							}

							if (!BasicUtils.isEmpty(jaundListToCalculate.get(i).getExchangetrans())) {
								if (!jaundListToCalculate.get(i).getExchangetrans()) {
									exchangeDoneDate = jaundListToCalculate.get(i).getAssessmentTime();
								} else {
									exchangePlannedDate = jaundListToCalculate.get(i).getAssessmentTime();
								}

								if (exchangePlannedDate != null && exchangeDoneDate != null) {
									durationOfExchange = durationOfExchange + 1;
									exchangePlannedDate = null;
									exchangeDoneDate = null;
								}
							}
						}

						jaundice.setDurationOfEpisode((int) assessmentDuration);
						jaundice.setDurationOfPhototherapy(durationOfPhototherapyMins);
						jaundice.setNumberOfExchangeTransfusion(durationOfExchange);
						jaundice.setTotalDoseOfIVIG(totalIvigValue);

                        jaundicenew.setComment(jaundice.getComment());
						//jaundicenew.setComment(generateInactiveNotesJaundice(null, uhid, continuedMedication));
					}
					jaundicenew.setAssessmentTime(jaundice.getAssessmentTime());
					jaundicenew.setEpisodeNumber(jaundice.getEpisodeNumber());
				}
				jaundice = jaundicenew;
			} else {

				// setting list to string
				List causeOfJaundiceList = jaundice.getCauseofjaundiceList();
				if (!BasicUtils.isEmpty(causeOfJaundiceList)) {
					jaundice.setCauseofjaundice(causeOfJaundiceList.toString());
				}

				List icdCauseOfJaundiceList = jaundice.getIcdCauseofjaundiceList();
				if (!BasicUtils.isEmpty(icdCauseOfJaundiceList)) {
					jaundice.setIcdCauseofjaundice(icdCauseOfJaundiceList.toString());
				}

				List actionTypeList = jaundice.getActiontypeList();
				if (!BasicUtils.isEmpty(actionTypeList)) {
					jaundice.setActiontype(actionTypeList.toString());
				}

				List orderInvList = jaundice.getOrderinvestigationList();
				if (!BasicUtils.isEmpty(orderInvList)) {
					jaundice.setOrderinvestigation(orderInvList.toString());
				}

				List riskFactorList = jaundice.getRiskFactorList();
				if (!BasicUtils.isEmpty(riskFactorList)) {
					jaundice.setRiskfactor(riskFactorList.toString());
				}

				SaJaundice jaundicenew = new SaJaundice();
				jaundicenew.setWeightloss(jaundice.getWeightloss());
			}

			if (!BasicUtils.isEmpty(uhid)) {
				jaundice.setUhid(uhid);
				{
					if (userId != null) {
						jaundice.setLoggeduser(userId);

						// logic for max tcb.....
						if (jaundice.getTcbortsb() == false) {// then its a
																// tsb...
							if (!BasicUtils.isEmpty(jaundice.getTbcvalue())) {
								float tcbInt = jaundice.getTbcvalue();
								if (BasicUtils.isEmpty(sysJaundObj.getListJaundice())) {
									jaundice.setMaxTcb(tcbInt);
								} else {
									Float prevMaxTcb = sysJaundObj.getListJaundice().get(0).getMaxTcb();
									if (tcbInt > prevMaxTcb) {
										jaundice.setMaxTcb(tcbInt);
									} else {
										jaundice.setMaxTcb(prevMaxTcb);
									}
								}
							} else {
								if (jaundice.getJaundicestatus().equalsIgnoreCase("No")) {
									if (BasicUtils.isEmpty(sysJaundObj.getListJaundice())) {
										jaundice.setMaxTcb(Float.valueOf(0));
									} else {
										Float prevMaxTcb = sysJaundObj.getListJaundice().get(0).getMaxTcb();
										jaundice.setMaxTcb(prevMaxTcb);
									}
								} else if (jaundice.getJaundicestatus().equalsIgnoreCase("Inactive")) {
									jaundice.setMaxTcb(Float.valueOf(0));
								}
							}
						}

						// set progress notes
						if (!BasicUtils.isEmpty(jaundice.getComment())) {
								jaundice.setComment(jaundice.getComment());
						}

						NurseExecutionOrders order = new NurseExecutionOrders();

						if (!BasicUtils.isEmpty(jaundice.getComment())) {
								if(!BasicUtils.isEmpty(jaundice.getComment()) && jaundice.getComment().indexOf(jaundice.getLoggeduser())==-1) {
									jaundice.setComment(jaundice.getComment());
									order.setLoggeduser(jaundice.getLoggeduser());
							 }
							}


						if(!BasicUtils.isEmpty(jaundice.getPlanOther())) {
							order.setEventname("Jaundice");
							order.setIsExecution(false);
							order.setOrderText(jaundice.getPlanOther());
							order.setAssessmentdate(jaundice.getAssessmentTime());
							order.setUhid(uhid);
							inicuDao.saveObject(order);
						}

						if(!BasicUtils.isEmpty(jaundice.getPhototherapyvalue())) {
							order = new NurseExecutionOrders();
							order.setEventname("Jaundice");
							order.setIsExecution(false);
							if(!BasicUtils.isEmpty(jaundice.getPhototherapyType() )) {
								order.setOrderText(jaundice.getPhototherapyvalue() + " phototherapy "+"("+jaundice.getPhototherapyType()+")");
							}
							else {
								order.setOrderText(jaundice.getPhototherapyvalue() + " phototherapy ");
							}
							order.setAssessmentdate(jaundice.getAssessmentTime());
							order.setUhid(uhid);
							inicuDao.saveObject(order);
						}
//						if (!BasicUtils.isEmpty(jaundice.getComment())) {
//							jaundice.setComment(jaundice.getComment() + "( " + jaundice.getLoggeduser() + " )");
//						}

						if (!BasicUtils.isEmpty(sysJaundObj.getJaundice().getIsNewEntry())) {
							if (sysJaundObj.getJaundice().getIsNewEntry()) {
								jaundice.setSajaundiceid(null); // due to list
																// is not
																// deatched..
								jaundice.setCreationtime(null);
                                jaundice = (SaJaundice) sysDAO.saveObject(jaundice);
							} else {
                                if (jaundice.getJaundicestatus().equalsIgnoreCase("Inactive")) {
                                    try {
                                        String query = "update sa_jaundice set comment = '" + sysJaundObj.getJaundice().getComment()
                                                + "' where sajaundiceid = '" + sysJaundObj.getJaundice().getSajaundiceid()  + "'";
                                        inicuDao.updateOrDeleteNativeQuery(query);
                                    } catch (Exception ex) {
                                        ex.printStackTrace();
                                        System.out.println("Exception occured while updating progressnotes for inactive state of Jaundice.");
                                    }
                                } else {
                                    jaundice.setSajaundiceid(sysJaundObj.getJaundice().getSajaundiceid());
                                    jaundice.setCreationtime(sysJaundObj.getJaundice().getCreationtime());
                                    jaundice = (SaJaundice) sysDAO.saveObject(jaundice);
                                }
							}
						}

						if (!jaundice.getJaundicestatus().equalsIgnoreCase("Inactive")) {
							List<BabyPrescription> prescriptionList = sysJaundObj.getPrescriptionList();
							if (!BasicUtils.isEmpty(prescriptionList)) {
								this.savePrescriptionList(null, prescriptionList, "Jaundice",
										jaundice.getSajaundiceid(), jaundice.getAssessmentTime());
							}
						}
						// update past progress notes for episode number
						if (!BasicUtils.isEmpty(sysJaundObj.getListJaundice())
								&& jaundice.getJaundicestatus().equalsIgnoreCase("inactive")) {
							updatePastJaundiceProgressNotes(jaundice, sysJaundObj.getListJaundice());
						}

						// for each of the order ordered, update to the database
						saveOrderInvestigation(sysJaundObj.getDropDowns().getTestsList(), jaundice.getSajaundiceid(),
								jaundice.getUhid(), userId, "Jaundice", jaundice.getAssessmentTime());

						// saving nursing order jaundice... not required now
						//
						// NursingOrderJaundice nursingJaundiceOrder = new
						// NursingOrderJaundice();
						//
						// nursingJaundiceOrder.setSajaundiceid(String.valueOf(jaundice.getSajaundiceid()));
						// nursingJaundiceOrder.setUhid(jaundice.getUhid());
						// if
						// (jaundice.getJaundicestatus().equalsIgnoreCase("Yes"))
						// {
						// if (!BasicUtils.isEmpty(jaundice.getActiontype())) {
						// String actionType = jaundice.getActiontype();
						// nursingJaundiceOrder.setActiontype(actionType);
						// if
						// (!BasicUtils.isEmpty(jaundice.getPhototherapyvalue())
						// && actionType.contains("TRE001"))
						// nursingJaundiceOrder.setPhototherapyvalue(jaundice.getPhototherapyvalue());
						// if (!BasicUtils.isEmpty(jaundice.getExchangetrans())
						// &&
						// actionType.contains("TRE002"))
						// nursingJaundiceOrder.setExchangetrans(jaundice.getExchangetrans());
						// if (!BasicUtils.isEmpty(jaundice.getIvigvalue()) &&
						// actionType.contains("TRE003"))
						// nursingJaundiceOrder.setIvigvalue(jaundice.getIvigvalue());
						// inicuDao.saveObject(nursingJaundiceOrder);
						// }
						// } else {
						// inicuDao.saveObject(nursingJaundiceOrder);
						// }

					} else {
						obj.setMessage("logged user id is coming as null");
						obj.setType(BasicConstants.MESSAGE_FAILURE);
					}

				}
			} else {
				obj.setMessage("uhid is coming as null");
				obj.setType(BasicConstants.MESSAGE_FAILURE);
			}

			// save logs
			String desc = mapper.writeValueAsString(jaundice);

			String action = BasicConstants.INSERT;

			if (jaundice.isEdit() != null && jaundice.isEdit()) {
				action = BasicConstants.UPDATE;
			}

			/**
			 * this condition to be removed once data is coming from front end.
			 */

			String loggeduser = null;
			if (!BasicUtils.isEmpty(userId)) {
				loggeduser = userId;
			} else {
				loggeduser = "1234"; // setting dummy user as of now needs to be
				// removed
			}

			String pageName = BasicConstants.SA_JAUNDICE;
			logService.saveLog(desc, action, loggeduser, uhid, pageName);
		} catch (Exception e) {
			obj.setType(BasicConstants.MESSAGE_FAILURE);
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, userId,
					jaundice.getUhid(), "SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return obj;
	}

	public void saveOrderInvestigation(HashMap<Object, List<RefTestslist>> testsList, Long assessmentdid, String uhid,
			String userId, String pageName, Timestamp investigationOrderTime) throws Exception {

		if (!BasicUtils.isEmpty(testsList)) {
			Set<Object> keySetToAssess = testsList.keySet();
			Iterator<Object> iterator = keySetToAssess.iterator();
			while (iterator.hasNext()) {
				Object key = iterator.next();
				List<RefTestslist> listAssessCategoryTestsList = testsList.get(key);
				for (RefTestslist tests : listAssessCategoryTestsList) {

					if (tests.getIsSelected() != null && tests.getIsSelected()) {

						// check if the same tess is already registered or given update that test with the current value
						String queryinvOrderedList = "select obj from InvestigationOrdered obj " + " WHERE uhid='" + uhid + "' and upper(testname)='"+ tests.getTestname().toUpperCase()+"' and senttolab_time is null";
						List<InvestigationOrdered> investigationOrderedList=patientDao.getListFromMappedObjNativeQuery(queryinvOrderedList);
						InvestigationOrdered investigationOrder=null;

						if(investigationOrderedList!=null && !BasicUtils.isEmpty(investigationOrderedList)){
							investigationOrder = investigationOrderedList.get(0);
						}else{
							investigationOrder = new InvestigationOrdered();
						}

						investigationOrder.setAssesment_type(pageName);
						investigationOrder.setAssesmentid(String.valueOf(assessmentdid));
						investigationOrder.setUhid(uhid);
						investigationOrder.setCategory(tests.getAssesmentCategory());
						investigationOrder.setTestcode(tests.getTestcode());
						investigationOrder.setTestname(tests.getTestname());
						investigationOrder.setTestslistid(tests.getTestid());
						investigationOrder.setInvestigationorder_user(userId);
						investigationOrder.setOrder_status("ordered");
						investigationOrder.setInvestigationorder_time(investigationOrderTime);
						investigationOrder.setsamplevisible(CheckSampleSelected(tests.getTestname()));
						inicuDao.saveObject(investigationOrder);

					}

				}
			}
		}
	}



	private boolean CheckSampleSelected(String TestName)
	{
		List<String> names = BasicUtils.getNameOfTestWithoutSample();
		String LowerTestName = TestName.toLowerCase();
		for(String name : names)
		{
			if(LowerTestName.contains(name))
			{
				return false;
			}
		}

		return true;

	}

	@SuppressWarnings("unchecked")
	@Override
	public AssessmentRespSystemPOJO getRespSystem(String uhid, String loggedUser) throws InicuDatabaseExeption {

		AssessmentRespSystemPOJO respSystemObj = new AssessmentRespSystemPOJO();
		// get drop downs for the respiratory Stress....
		RespSystemDropDowns respDropDowns = getRespiratoryDropDowns(uhid);

		respSystemObj.setDropDowns(respDropDowns);

		RespiratorySystemEventPOJO respSystemEventObj = new RespiratorySystemEventPOJO();

		// getPastEventList for table
		respSystemEventObj.setPastTableList(getPastRespEventList(uhid));

		// getTodayLastRespSupport
		respSystemEventObj.setRespSupport(getLastRespSupport(uhid));

		// get surfactant dose count
		respSystemEventObj.setSurfactantDose(getSurfactantDoseCount(uhid));

		// get Downes Score
		respSystemEventObj.setPastDownesScore(getDownesScore(uhid));
		respSystemEventObj.setPastDownesTime(lastDownesTime(uhid));

		// get silverman score

        List<ScoreSilverman> silvermanList = getSilvermanScoreList(uhid);
        if(!BasicUtils.isEmpty(silvermanList) && silvermanList.size()>0) {
//            ScoreSilverman silvermanObject =  silvermanList.get(0);
            respSystemEventObj.setScoreSilvermenList(silvermanList);
        }

        respSystemEventObj.setPastSilverScore(getSilvermanScore(uhid));
        respSystemEventObj.setPastSilverTime(lastSilvermanTime(uhid));

		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date currentDate = new Date();
		String currentDateFinal = dateFormat.format(currentDate);

		String calDate = CalculateDate48HoursAgo(currentDate);

		// get past prescriptions
		respSystemEventObj.setPastPrescriptionList(getPastPrescriptionList(uhid, calDate, currentDateFinal));

		// get respiratory usage.....

		respSystemEventObj.setRespUsage(getRespSupportUsage(uhid));

		// Respiratory distress event pojo....
		RespiratoryDistressPOJO respiratoryDistress = getRespiratoryDistressObj(uhid);
		respSystemEventObj.setRespiratoryDistress(respiratoryDistress);

		// PPHN event pojo....
		PphnPOJO pphn = getPphnObj(uhid);
		respSystemEventObj.setPphn(pphn);

		// Apnea event pojo....
		ApneaPOJO apnea = getApneaObj(uhid);
		respSystemEventObj.setApnea(apnea);

		// Bpd pojo.
		RespSysBpdPOJO bpd = getRespiratoryBpdObject(uhid);
		respSystemEventObj.setBpd(bpd);

		// resp other pojo
		RespSysOtherPOJO other = getRespiratoryOtherObj(uhid);
		respSystemEventObj.setOthers(other);

		// pneumothorax pojo
		PneumothoraxPOJO pneumothorax = getPneumothorax(uhid);
		respSystemEventObj.setPneumothorax(pneumothorax);

		respSystemObj.setRespSystemObject(respSystemEventObj);

		String queryCurrentBabyVisit = "select obj from BabyVisit as obj where uhid='" + uhid
				+ "' order by creationtime desc";
		List<BabyVisit> currentBabyVisitList = inicuDao.getListFromMappedObjQuery(queryCurrentBabyVisit);
		if (currentBabyVisitList != null && currentBabyVisitList.size() > 0) {
			Float weight = currentBabyVisitList.get(0).getWorkingweight();
			if (weight != null) {
				weight = weight / 1000;
				respSystemObj.setWorkingWeight(weight + "");
			} else {
				respSystemObj.setWorkingWeight(weight);
			}
		}

		// getting age at onset...
		try {
			HashMap<Object, Object> babyInfo = getBabyInformation(uhid);
			respSystemObj.setAgeAtOnset(babyInfo.get(BasicConstants.AGE_AT_ONSET));
			respSystemObj.setGestation(babyInfo.get(BasicConstants.GESTATION));

			String queryPma = "select obj from DashboardFinalview obj where uhid='" + uhid
					+ "' and dayoflife is not null order by creationtime desc";
			List<DashboardFinalview> pmaList = inicuDao.getListFromMappedObjQuery(queryPma);
			if (!BasicUtils.isEmpty(pmaList)) {
				respSystemObj.setPma(pmaList.get(0).getDayoflife());
			}

			String querybpdRespNote = "select obj from RespSupport obj where uhid='" + uhid
					+ "' and bpdRespNote is not null order by creationtime desc";
			List<RespSupport> bpdRespNoteList = inicuDao.getListFromMappedObjQuery(querybpdRespNote);
			if (!BasicUtils.isEmpty(bpdRespNoteList)) {
				respSystemObj.setBpdRespTemplate(bpdRespNoteList.get(0).getBpdRespNote());
			}
			String queryCurrentGestation = "select gestationweek,gestationdays from baby_visit" + " where uhid='" + uhid
					+ "' order by creationtime desc";
			List<Object[]> currentGestationList = inicuDao.getListFromNativeQuery(queryCurrentGestation);
			if (!BasicUtils.isEmpty(currentGestationList)) {
				respSystemObj.setCurrentGestationWeek(currentGestationList.get(0)[0]);
				respSystemObj.setCurrentGestationDay(currentGestationList.get(0)[1]);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return respSystemObj;
	}

	private List<RespSupport> getRespSupportUsage(String uhid) {
		String queryRespUsage = "select obj from RespSupport obj where uhid='" + uhid
				+ "' order by creationtime asc";
		//List<VwRespiratoryUsageFinal> newRespUsageList = new ArrayList<VwRespiratoryUsageFinal>();
		List<RespSupport> respUsageList = inicuDao.getListFromMappedObjQuery(queryRespUsage);
		
		List<RespSupport> respUsageListFinal = new ArrayList<RespSupport>();
		int i =1;
		String initialMode = "";
		Timestamp startTime = null;
		List<String> eventNames = new ArrayList<String>();
		for(RespSupport resp : respUsageList) {
			if(i==1) {
				startTime = resp.getCreationtime();
				if(!BasicUtils.isEmpty(resp.getRsVentType()) && !BasicUtils.isEmpty(resp.getEventname())) {
					initialMode = resp.getRsVentType();
					i=2;
					respUsageListFinal.add(resp);
					eventNames.add(resp.getEventname());
					//Insert without end date

				}
			}else if(!BasicUtils.isEmpty(startTime)){
				if(!BasicUtils.isEmpty(resp.getIsactive()) && resp.getIsactive() && !BasicUtils.isEmpty(resp.getRsVentType())) {
					if(initialMode.equalsIgnoreCase(resp.getRsVentType())) {
						//Insert without end
						if(!BasicUtils.isEmpty(resp.getEventname()) && !eventNames.contains(resp.getEventname())) {
							eventNames.add(resp.getEventname());
							int length = respUsageListFinal.size();
							String previouseventName = respUsageListFinal.get(length-1).getEventname();
							previouseventName = previouseventName + ", " + resp.getEventname();
							respUsageListFinal.get(length-1).setEventname(previouseventName);
						}
						
					}else {
						//Pick last-> calculate end time and insert new without end date
						Long diffInMinutes = (resp.getCreationtime().getTime() - startTime.getTime()) / (1000 * 60);
						int length = respUsageListFinal.size();
						respUsageListFinal.get(length-1).setEndtime(resp.getCreationtime());
						respUsageListFinal.get(length-1).setDifferenceinmins(diffInMinutes);
						eventNames = new ArrayList<String>();
						startTime = resp.getCreationtime();
						initialMode = resp.getRsVentType();
						respUsageListFinal.add(resp);
						eventNames.add(resp.getEventname());
					}
					
				}else if((!BasicUtils.isEmpty(startTime)) && ((!BasicUtils.isEmpty(resp.getIsactive()) && resp.getIsactive() == false) || (BasicUtils.isEmpty(resp.getIsactive())))){
					//Pick last-> calculate end time
					Long diffInMinutes = (resp.getCreationtime().getTime() - startTime.getTime()) / (1000 * 60);
					int length = respUsageListFinal.size();
					respUsageListFinal.get(length-1).setDifferenceinmins(diffInMinutes);
					respUsageListFinal.get(length-1).setEndtime(resp.getCreationtime());
					eventNames = new ArrayList<String>();
					i=1;
				}
			}
			
		}
		/*VwRespiratoryUsageFinal TempRespUsageObject = null;
		int length = respUsageList.size();
		boolean TempisActive=false;
		int i=0;
		while(i<length && BasicUtils.isEmpty(respUsageList.get(i).getRsVentType())) {
			i++;
		}
		for(int j=i;j<length;j++)
		{
			if(BasicUtils.isEmpty(TempRespUsageObject) || !TempisActive)
			{
				TempRespUsageObject = respUsageList.get(j);
				TempisActive = respUsageList.get(j).getIsactive();
				TempRespUsageObject.setEndtime(null);
				newRespUsageList.add(0,new VwRespiratoryUsageFinal(TempRespUsageObject));
			}
			if(TempRespUsageObject.getIsactive().equals(true) && respUsageList.get(j).getIsactive().equals(false))
			{
				TempRespUsageObject.setEndtime(respUsageList.get(j).getCreationtime());
				newRespUsageList.add(0,new VwRespiratoryUsageFinal(TempRespUsageObject));
				TempisActive = false;
			}
			else
			{
				if(j<length-1 &&  !BasicUtils.isEmpty(respUsageList.get(j+1).getRsVentType()) && !respUsageList.get(j+1).getRsVentType().equals(respUsageList.get(j).getRsVentType())) {
					TempRespUsageObject.setEndtime(respUsageList.get(j+1).getCreationtime());
					newRespUsageList.add(0,new VwRespiratoryUsageFinal(TempRespUsageObject));
					TempRespUsageObject = null;
				}

			}
		}*/
		//respUsageList = null;
		return respUsageListFinal;
	}

	@SuppressWarnings("unchecked")
	public AssessmentRespSystemPOJO getRespiratorySupportProgressNotes(AssessmentRespSystemPOJO respSystemObj) {
		try {

			int respSupportDuration = 0;
			int lfDuration = 0;
			int hfDuration = 0;
			int cpapDuration = 0;
			int mvDuration = 0;
			int hfoDuration = 0;

			String eventName = respSystemObj.getRespSystemObject().getEventName();

			String queryRespSupportToFindLastActive = "Select obj from RespSupport obj where uhid='"
					+ respSystemObj.getUhid() + "' and isactive='true' order by creationtime desc";

			List<RespSupport> respSupportActiveList = inicuDao
					.getListFromMappedObjQuery(queryRespSupportToFindLastActive);
			// get all after latest start...
			Long lastactiveId = (long) 0;
			if (!BasicUtils.isEmpty(respSupportActiveList)) {
				lastactiveId = respSupportActiveList.get(0).getRespsupportid();
			}

			String queryRespSupportToFindProgressNotes = "Select obj from RespSupport obj where uhid='"
					+ respSystemObj.getUhid() + "' and respsupportid>='" + lastactiveId + "'order by creationtime desc";

			List<RespSupport> respSupportToFindProgressNotesList = inicuDao
					.getListFromMappedObjQuery(queryRespSupportToFindProgressNotes);

			if (!BasicUtils.isEmpty(respSupportActiveList)) {
				Timestamp endTime = new Timestamp(System.currentTimeMillis());
				if (respSystemObj.getRespSystemObject().getEventName().equalsIgnoreCase("respDistress")) {
					endTime = respSystemObj.getRespSystemObject().getRespiratoryDistress().getCurrentRespDistress()
							.getAssessmentTime();
				} else if (respSystemObj.getRespSystemObject().getEventName().equalsIgnoreCase("apnea")) {
					endTime = respSystemObj.getRespSystemObject().getApnea().getCurrentApnea().getAssessmentTime();
				} else if (respSystemObj.getRespSystemObject().getEventName().equalsIgnoreCase("pphn")) {
					endTime = respSystemObj.getRespSystemObject().getPphn().getCurrentPphn().getAssessmentTime();
				} else if (respSystemObj.getRespSystemObject().getEventName().equalsIgnoreCase("pneumothorax")) {
					endTime = respSystemObj.getRespSystemObject().getPneumothorax().getCurrentRespPneumo()
							.getAssessmentTime();
				}

				for (int i = 0; i < respSupportActiveList.size(); i++) {
					RespSupport obj = respSupportActiveList.get(i);
					if (!obj.getIsactive()) {
						break;
					}
					long currentDuration = (endTime.getTime() - obj.getCreationtime().getTime()) / (60 * 1000);
					respSupportDuration += currentDuration;

					if (obj.getRsVentType().equalsIgnoreCase("Low Flow O2")) {
						lfDuration += currentDuration;
					} else if (obj.getRsVentType().equalsIgnoreCase("High Flow O2")) {
						hfDuration += currentDuration;
					} else if (obj.getRsVentType().equalsIgnoreCase("CPAP")) {
						cpapDuration += currentDuration;
					} else if (obj.getRsVentType().equalsIgnoreCase("Mechanical Ventilation")) {
						mvDuration += currentDuration;
					} else if (obj.getRsVentType().equalsIgnoreCase("HFO")) {
						hfoDuration += currentDuration;
					}
					endTime = obj.getCreationtime();
				}

				if (respSupportDuration > 0) {
					respSupportDuration += 1;
					if (respSupportDuration < 60) {
						if (respSupportDuration == 1) {
							respSystemObj.setRespSupportDuration(respSupportDuration + " minute.");
						} else {
							respSystemObj.setRespSupportDuration(respSupportDuration + " minutes.");
						}
					} else if ((respSupportDuration / 60) < 24) {
						if ((respSupportDuration / 60) == 1) {
							respSystemObj.setRespSupportDuration((respSupportDuration / 60) + " hour.");
						} else {
							respSystemObj.setRespSupportDuration((respSupportDuration / 60) + " hours.");
						}
					} else {
						if ((respSupportDuration / (24 * 60)) == 1) {
							respSystemObj.setRespSupportDuration((respSupportDuration / (24 * 60)) + " day.");
						} else {
							respSystemObj.setRespSupportDuration((respSupportDuration / (24 * 60)) + " days.");
						}
					}
				}

				if (lfDuration > 0) {
					lfDuration += 1;
					if (lfDuration < 60) {
						if (lfDuration == 1) {
							respSystemObj.setLfDuration(lfDuration + " minute.");
						} else {
							respSystemObj.setLfDuration(lfDuration + " minutes.");
						}
					} else if ((lfDuration / 60) < 24) {
						if ((lfDuration / 60) == 1) {
							respSystemObj.setLfDuration((lfDuration / 60) + " hour.");
						} else {
							respSystemObj.setLfDuration((lfDuration / 60) + " hours.");
						}
					} else {
						if ((lfDuration / (24 * 60)) == 1) {
							respSystemObj.setLfDuration((lfDuration / (24 * 60)) + " day.");
						} else {
							respSystemObj.setLfDuration((lfDuration / (24 * 60)) + " days.");
						}
					}
				}

				if (hfDuration > 0) {
					hfDuration += 1;
					if (hfDuration < 60) {
						if (hfDuration == 1) {
							respSystemObj.setHfDuration(hfDuration + " minute.");
						} else {
							respSystemObj.setHfDuration(hfDuration + " minutes.");
						}
					} else if ((hfDuration / 60) < 24) {
						if ((hfDuration / 60) == 1) {
							respSystemObj.setHfDuration((hfDuration / 60) + " hour.");
						} else {
							respSystemObj.setHfDuration((hfDuration / 60) + " hours.");
						}
					} else {
						if ((hfDuration / (24 * 60)) == 1) {
							respSystemObj.setHfDuration((hfDuration / (24 * 60)) + " day.");
						} else {
							respSystemObj.setHfDuration((hfDuration / (24 * 60)) + " days.");
						}
					}
				}

				if (cpapDuration > 0) {
					cpapDuration += 1;
					if (cpapDuration < 60) {
						if (cpapDuration == 1) {
							respSystemObj.setCpapDuration(cpapDuration + " minute.");
						} else {
							respSystemObj.setCpapDuration(cpapDuration + " minutes.");
						}
					} else if ((cpapDuration / 60) < 24) {
						if ((cpapDuration / 60) == 1) {
							respSystemObj.setCpapDuration((cpapDuration / 60) + " hour.");
						} else {
							respSystemObj.setCpapDuration((cpapDuration / 60) + " hours.");
						}
					} else {
						if ((cpapDuration / (24 * 60)) == 1) {
							respSystemObj.setCpapDuration((cpapDuration / (24 * 60)) + " day.");
						} else {
							respSystemObj.setCpapDuration((cpapDuration / (24 * 60)) + " days.");
						}
					}
				}

				if (mvDuration > 0) {
					mvDuration += 1;
					if (mvDuration < 60) {
						if (mvDuration == 1) {
							respSystemObj.setMvDuration(mvDuration + " minute.");
						} else {
							respSystemObj.setMvDuration(mvDuration + " minutes.");
						}
					} else if ((mvDuration / 60) < 24) {
						if ((mvDuration / 60) == 1) {
							respSystemObj.setMvDuration((mvDuration / 60) + " hour.");
						} else {
							respSystemObj.setMvDuration((mvDuration / 60) + " hours.");
						}
					} else {
						if ((mvDuration / (24 * 60)) == 1) {
							respSystemObj.setMvDuration((mvDuration / (24 * 60)) + " day.");
						} else {
							respSystemObj.setMvDuration((mvDuration / (24 * 60)) + " days.");
						}
					}
				}

				if (hfoDuration > 0) {
					hfoDuration += 1;
					if (hfoDuration < 60) {
						if (hfoDuration == 1) {
							respSystemObj.setHfoDuration(hfoDuration + " minute.");
						} else {
							respSystemObj.setHfoDuration(hfoDuration + " minutes.");
						}
					} else if ((hfoDuration / 60) < 24) {
						if ((hfoDuration / 60) == 1) {
							respSystemObj.setHfoDuration((hfoDuration / 60) + " hour.");
						} else {
							respSystemObj.setHfoDuration((hfoDuration / 60) + " hours.");
						}
					} else {
						if ((hfoDuration / (24 * 60)) == 1) {
							respSystemObj.setHfoDuration((hfoDuration / (24 * 60)) + " day.");
						} else {
							respSystemObj.setHfoDuration((hfoDuration / (24 * 60)) + " days.");
						}
					}
				}
			}

		} catch (Exception ex) {
			ex.printStackTrace();

		}
		return respSystemObj;
	}

	private RespSysBpdPOJO getRespiratoryBpdObject(String uhid) {
		RespSysBpdPOJO bpdObj = new RespSysBpdPOJO();

		String queryRespBpdPast = "Select obj from SaRespBpd obj where uhid='" + uhid + "' order by creationtime desc";
		List<SaRespBpd> pastBpdList = inicuDao.getListFromMappedObjQuery(queryRespBpdPast);
		bpdObj.setPastBpdList(pastBpdList);

		SaRespBpd currentBpd = bpdObj.getCurrentBpd();

		try {
			HashMap<Object, Object> babyInfo = getBabyInformation(uhid);
			currentBpd.setAgeatassesment((String) babyInfo.get(BasicConstants.AGE_AT_ASSESSMENT));
			if (!BasicUtils.isEmpty(babyInfo.get(BasicConstants.GESTATION)))
				currentBpd.setGestationalage(babyInfo.get(BasicConstants.GESTATION).toString());

			bpdObj.setPMA(babyInfo.get(BasicConstants.PMA)); // set PMA

		} catch (Exception e) {
			e.printStackTrace();
		}

		// get cumulative ventilator count
		String queryCumVentilatorCount = "select count(distinct date(creationtime)) from respsupport where uhid = '"
				+ uhid + "'";
		List<BigInteger> cumVentilatorCount = inicuDao.getListFromNativeQuery(queryCumVentilatorCount);
		String cumulativeVentilatorCount = cumVentilatorCount.get(0).toString();
		// System.out.println("cumulativeVentilatorCount"+cumulativeVentilatorCount);
		currentBpd.setCumulativedaysonventilator(cumulativeVentilatorCount);

		// String queryCumOxygenCount = "SELECT count(distinct
		// date(creationtime)) from
		// respsupport where uhid='"+uhid+"' "
		// + "AND rs_vent_type IN ('Low Flow O2', 'High Flow O2' ) ";
		String queryCumOxygenCount = "SELECT count(distinct date(creationtime)) from respsupport where rs_vent_type LIKE 'High%' OR  rs_vent_type LIKE 'Low%' ";
		List<BigInteger> cumOxyentCount = inicuDao.getListFromNativeQuery(queryCumOxygenCount);
		String cumulativeOxygenCount = cumOxyentCount.get(0).toString();
		currentBpd.setCumulativedaysonoxygen(cumulativeOxygenCount);

		return bpdObj;

	}

	private RespiratoryDistressPOJO getRespiratoryDistressObj(String uhid) {
		int counterBpd = 0;
		RespiratoryDistressPOJO respiratoryDistressObj = new RespiratoryDistressPOJO();
		String queryGetPrvRespDistress = "select obj from SaRespRds as obj where uhid= '" + uhid
				+ "' order by assessment_time desc, resprdsid desc";
		List<SaRespRds> rdsRespList = inicuDao.getListFromMappedObjQuery(queryGetPrvRespDistress);

		List<SaRespRds> prevRespDistressList=new ArrayList<>();

		if (!BasicUtils.isEmpty(rdsRespList)) {
			for (int index = 0; index < rdsRespList.size(); index++) {

				SaRespRds respDistress = respiratoryDistressObj.getCurrentRespDistress();
				respDistress = rdsRespList.get(index);

					String causeOfRdsStr = respDistress.getCauseofrds();
					if (!BasicUtils.isEmpty(causeOfRdsStr)) {
						String[] listSymtoms = causeOfRdsStr.replace(" ", "").trim().replace("[", "").replace("]", "")
								.split(",");
						ArrayList<String> symtomsList = new ArrayList<String>(Arrays.asList(listSymtoms));
						respDistress.setRdsCauseList(symtomsList);
					}

					if(respDistress.getEventstatus().equalsIgnoreCase("YES")) {
						List<SaRespRds> list = getRiskPastList(uhid);
						if (!BasicUtils.isEmpty(list)) {
							respDistress.setRiskfactorOther(getRiskPastList(uhid).get(0).getRiskfactorOther());
						}
					}

					String queryInvestigationOrder = "Select obj from InvestigationOrdered obj where uhid='" + uhid
							+ "' and assesmentid='" + respDistress.getResprdsid()
							+ "' and assesment_type='Respiratory' order by creationtime desc";

					List<InvestigationOrdered> investigationOrderList = inicuDao
							.getListFromMappedObjQuery(queryInvestigationOrder);

					ArrayList<String> investOrder = new ArrayList<>();
					ArrayList<String> investOrderStrList = new ArrayList<>();

					if (!BasicUtils.isEmpty(investigationOrderList)) {
						for (InvestigationOrdered order : investigationOrderList) {
							if (!BasicUtils.isEmpty(order.getTestslistid())) {
								investOrder.add(order.getTestslistid());
								investOrderStrList.add(order.getTestname());
							}
						}
						respDistress.setOrderInvestigationList(investOrder);
						respDistress.setOrderInvestigationStringList(investOrderStrList);
					}

					// past respiratory support for rds
					if (!(null == prevRespDistressList || prevRespDistressList.isEmpty())) {
						String queryGetPrvRespSupport = "select obj from RespSupport as obj where uhid= '" + uhid
								+ "' and (eventname='Respiratory Distress') and eventid='" + respDistress.getResprdsid()
								+ "'";
						List<RespSupport> prevRespSupportList = inicuDao.getListFromMappedObjQuery(queryGetPrvRespSupport);
						if (!BasicUtils.isEmpty(prevRespSupportList)) {
							RespSupport respSupport = prevRespSupportList.get(0);
							respDistress.setRespSupport(respSupport);
						}
					}
					// past prescription list.
					String queryPastPrescriptionList = "select obj from BabyPrescription as obj where isactive='true' and uhid='"
							+ uhid + "' and eventid='" + respDistress.getResprdsid()
							+ "' and (eventname='RDS' or eventname='rds') order by creationtime desc";
					List<BabyPrescription> pastPrescriptionList = inicuDao
							.getListFromMappedObjQuery(queryPastPrescriptionList);
					if (!BasicUtils.isEmpty(pastPrescriptionList)) {
						respDistress.setBabyPrescription(pastPrescriptionList);
					}

					if (!BasicUtils.isEmpty(respDistress.getDownesscoreid())) {
						String fetchDownesScore = "SELECT obj FROM ScoreDownes as obj where uhid='" + uhid
								+ "' and downesscoreid='" + respDistress.getDownesscoreid()
								+ "' order by creationtime desc";
						List<ScoreDownes> downesScoreList = inicuDao.getListFromMappedObjQuery(fetchDownesScore);
						if (!BasicUtils.isEmpty(downesScoreList)) {
							ScoreDownes downesScore = downesScoreList.get(0);
							respDistress.setDownesScore(downesScore);
						}
					}

				prevRespDistressList.add(respDistress);

                if (index == 0) {
                    try {
                        if (respDistress.getEventstatus().equalsIgnoreCase("No")) {
                            respiratoryDistressObj.setInactiveProgressNote(generateInactiveNotesRds(null, uhid, "", null, ""));
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        logger.error("Exception while generating inactive note", e);
                    }
                }
			}
		}

		respiratoryDistressObj.setPastRespDistress(prevRespDistressList);

		SaRespRds currentResp = new SaRespRds();
		HashMap<Object, Object> babyInfo = getBabyInformation(uhid);
		if (babyInfo.get(BasicConstants.AGE_AT_ONSET) != null) {
			currentResp.setIsageofassesmentinhours(true);
			currentResp.setAgeinhoursdays(true);
			currentResp.setAgeatassesment(Integer.parseInt(babyInfo.get(BasicConstants.AGE_AT_ONSET).toString()));
			currentResp.setAgeatonset(babyInfo.get(BasicConstants.AGE_AT_ONSET).toString());
		}

		if(prevRespDistressList.size()>0) {
			currentResp.setRiskfactor(prevRespDistressList.get(0).getRiskfactor());
			currentResp.setRiskfactorOther(prevRespDistressList.get(0).getRiskfactorOther());
		}
		// setting age at assessment manual current today
		Date todayDate = new Date();
		// joundiceCurrent.setAssessmentDate(todayDate);
		currentResp.setAssessmentTime(new Timestamp(System.currentTimeMillis()));
		int todayHours = todayDate.getHours();
		int todayMins = todayDate.getMinutes();

		if (todayHours > 12) {
			todayHours -= 12;
			currentResp.setAssessmentMeridiem(false);
			if (todayHours < 10)
				currentResp.setAssessmentHour("0" + Integer.toString(todayHours));
			else
				currentResp.setAssessmentHour(Integer.toString(todayHours));
		} else {
			currentResp.setAssessmentMeridiem(true);
			if (todayHours < 10)
				currentResp.setAssessmentHour("0" + Integer.toString(todayHours));
			else
				currentResp.setAssessmentHour(Integer.toString(todayHours));
		}
		if (todayMins < 10)
			currentResp.setAssessmentMin("0" + Integer.toString(todayMins));
		else
			currentResp.setAssessmentMin(Integer.toString(todayMins));

		System.out.println(currentResp);

		if (!BasicUtils.isEmpty(prevRespDistressList)) {
			SaRespRds respDistress1 = prevRespDistressList.get(0);
			currentResp.setEventstatus(respDistress1.getEventstatus());
			if (!respDistress1.getEventstatus().equalsIgnoreCase("Inactive")) {

				// assessment status is not inactive  update the age at onset
				currentResp.setAgeatonset(respDistress1.getAgeatonset());
				currentResp.setAgeinhoursdays(respDistress1.getAgeinhoursdays());
			}
		}
		respiratoryDistressObj.setCurrentRespDistress(currentResp);
        return respiratoryDistressObj;
	}

	// method to get graph data for respiratory distress.
	private List<RespDistressGraph> getRespiratoryDistressGraphData(String uhid) {
		List<RespDistressGraph> respDistressGraphList = new ArrayList<>();

		return respDistressGraphList;
	}

	@Override
	public PneumothoraxPOJO getPneumothorax(String uhid) {
		PneumothoraxPOJO pneumoObj = new PneumothoraxPOJO();

		SaRespPneumo pneumothorax = pneumoObj.getCurrentRespPneumo();
		SaRespPneumo pneumoThoraxRisk = pneumoObj.getCurrentRespPneumo();

		String queryGetPrvPneumo = "select obj from SaRespPneumo as obj where uhid= '" + uhid
				+ "' order by assessment_time desc, resppneumothoraxid desc";
		List<SaRespPneumo> prevPneumoList = inicuDao.getListFromMappedObjQuery(queryGetPrvPneumo);

		List<SaRespPneumo> list = getRiskPastListPneumo(uhid);
		if (!BasicUtils.isEmpty(list)) {
			pneumoThoraxRisk = getRiskPastListPneumo(uhid).get(0);
		}

		// past respiratory support for pneumothorax
		if (!(null == prevPneumoList || prevPneumoList.isEmpty())) {
			String queryGetPrvRespSupport = "select obj from RespSupport as obj where uhid= '" + uhid
					+ "' and eventname='Pneumothorax'";
			List<RespSupport> prevRespSupportList = inicuDao.getListFromMappedObjQuery(queryGetPrvRespSupport);
			if (!(null == prevRespSupportList || prevRespSupportList.isEmpty())) {
				Iterator<RespSupport> itr = prevRespSupportList.iterator();
				while (itr.hasNext()) {
					RespSupport obj = itr.next();
					pneumoObj.getPastRespSupport().put(obj.getEventid(), obj);
				}
			}
		}

		if (!BasicUtils.isEmpty(prevPneumoList)) {
			for (int index = 0; index < prevPneumoList.size(); index++) {
				pneumothorax = prevPneumoList.get(index);

				String causeOfPneumoStr = pneumothorax.getCauseofpneumothorax();
				if (!BasicUtils.isEmpty(causeOfPneumoStr)) {
					String[] listSymtoms = causeOfPneumoStr.replace(" ", "").trim().replace("[", "").replace("]", "")
							.split(",");
					ArrayList<String> symtomsList = new ArrayList<String>(Arrays.asList(listSymtoms));
					pneumothorax.setPneumothoraxCauseList(symtomsList);
				}

				String queryInvestigationOrder = "Select obj from InvestigationOrdered obj where uhid='" + uhid
						+ "' and assesmentid='" + pneumothorax.getResppneumothoraxid()
						+ "' and assesment_type='Pneumothorax' order by creationtime desc";
				List<InvestigationOrdered> investigationOrderList = inicuDao
						.getListFromMappedObjQuery(queryInvestigationOrder);
				ArrayList<String> investOrder = new ArrayList<>();
				ArrayList<String> investOrderStrList = new ArrayList<>();
				if (!BasicUtils.isEmpty(investigationOrderList)) {
					for (InvestigationOrdered order : investigationOrderList) {
						if (!BasicUtils.isEmpty(order.getTestslistid())) {
							investOrder.add(order.getTestslistid());
							investOrderStrList.add(order.getTestname());
						}
					}
					pneumothorax.setOrderInvestigationList(investOrder);
					pneumothorax.setOrderInvestigationStringList(investOrderStrList);
				}

				String queryGetPrvRespSupport = "select obj from RespSupport as obj where uhid= '" + uhid
						+ "' and (eventname='pneumothorax' or eventname='Pneumothorax') and eventid='"
						+ pneumothorax.getResppneumothoraxid() + "'";
				List<RespSupport> prevRespSupportList = inicuDao.getListFromMappedObjQuery(queryGetPrvRespSupport);
				if (!BasicUtils.isEmpty(prevRespSupportList)) {
					RespSupport respSupport = prevRespSupportList.get(0);
					pneumothorax.setRespSupport(respSupport);
				}

				// past prescription list.
				String queryPastPrescriptionList = "select obj from BabyPrescription as obj where isactive='true' and uhid='"
						+ uhid + "' and eventid='" + pneumothorax.getResppneumothoraxid()
						+ "' and (eventname='Pneumothorax' or eventname='pneumothorax') order by creationtime desc";
				List<BabyPrescription> pastPrescriptionList = inicuDao
						.getListFromMappedObjQuery(queryPastPrescriptionList);
				if (!BasicUtils.isEmpty(pastPrescriptionList)) {
					pneumothorax.setBabyPrescription(pastPrescriptionList);
				}

				if (!BasicUtils.isEmpty(pneumothorax.getDownesscoreid())) {
					String fetchDownesScore = "SELECT obj FROM ScoreDownes as obj where uhid='" + uhid
							+ "' and downesscoreid='" + pneumothorax.getDownesscoreid()
							+ "' order by creationtime desc";
					List<ScoreDownes> downesScoreList = inicuDao.getListFromMappedObjQuery(fetchDownesScore);
					if (!BasicUtils.isEmpty(downesScoreList)) {
						ScoreDownes downesScore = downesScoreList.get(0);
						pneumothorax.setDownesScore(downesScore);
					}

				}

                if (index == 0) {
                    try {
                        if (pneumothorax.getEventstatus().equalsIgnoreCase("No")) {
                            pneumoObj.setInactiveProgressNote(generateInactiveNotesPneumothorax(null, uhid, "", null, ""));
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        logger.error("Exception while generating inactive note", e);
                    }
                }

			}
		}

		pneumoObj.setPastRespPneumo(prevPneumoList);

		if (!(null == prevPneumoList) && prevPneumoList.size() > 0) {
			SaRespPneumo pneumoThorax = prevPneumoList.get(0);
			String queryGetPrvRespSupport = "Select obj from RespSupport as obj where uhid='" + uhid
					+ "' and eventname ='Pneumothorax' order by creationtime desc";
			List<RespSupport> prevRespSupportList = inicuDao.getListFromMappedObjQuery(queryGetPrvRespSupport);
			if (prevRespSupportList != null && prevRespSupportList.size() > 0) {
				Iterator<RespSupport> prevRespSupportIterator = prevRespSupportList.iterator();
				while (prevRespSupportIterator.hasNext()) {
					RespSupport respSuppotObj = prevRespSupportIterator.next();
					pneumoObj.getPastRespSupport().put(respSuppotObj.getEventid(), respSuppotObj);
				}
			}

			if (!pneumoThorax.getEventstatus().equalsIgnoreCase("Inactive")) {
				String fetchChestTubeList = "Select obj from ProcedureChesttube as obj where uhid='" + uhid
						+ "' and isactive='true'";
				List<ProcedureChesttube> pastRespChestTube = inicuDao.getListFromMappedObjQuery(fetchChestTubeList);

				if (!BasicUtils.isEmpty(pastRespChestTube)) {
					Iterator<ProcedureChesttube> chestTubeIterator = pastRespChestTube.iterator();
					while (chestTubeIterator.hasNext()) {
						ProcedureChesttube chestTubeObj = chestTubeIterator.next();
						if (!BasicUtils.isEmpty(chestTubeObj.getIsTubeRemoved()) && !chestTubeObj.getIsTubeRemoved()) {
							if (!BasicUtils.isEmpty(chestTubeObj.getChesttubeValue())
									&& BasicUtils.isEmpty(chestTubeObj.getChestTubeAdjustedValue())) {
								chestTubeObj.setIsTubeReadyToAdjust(true);
							}
							if (!BasicUtils.isEmpty(chestTubeObj.getChestTubeAdjustedValue())
									&& chestTubeObj.getChestTubeAdjustedValue().equalsIgnoreCase("clamp")) {
								chestTubeObj.setIsClampReadyToAdjust(true);
							}
							if (!BasicUtils.isEmpty(chestTubeObj.getIschesttubeLeft())
									&& chestTubeObj.getIschesttubeLeft()) {
								pneumoObj.getChestTubeObj().getLeftTubes().add(chestTubeObj);
							} else if (!BasicUtils.isEmpty(chestTubeObj.getIschesttubeRight())
									&& chestTubeObj.getIschesttubeRight()) {
								pneumoObj.getChestTubeObj().getRightTubes().add(chestTubeObj);
							}
						}
					}
				}
			}
		}
		SaRespPneumo currentPneumo = null;
		if (!BasicUtils.isEmpty(prevPneumoList)) {
			SaRespPneumo pneumoThorax = prevPneumoList.get(0);
			currentPneumo = new SaRespPneumo();
			currentPneumo.setEventstatus(pneumoThorax.getEventstatus());
			currentPneumo.setRiskfactor(pneumoThoraxRisk.getRiskfactor());
			if (!pneumoThorax.getEventstatus().equalsIgnoreCase("Inactive")) {

				// changed as per discussion 31-07-2017

				String rightStatus = pneumoThorax.getStatusOfPneumothoraxRight();
				if (!BasicUtils.isEmpty(rightStatus) && !rightStatus.equalsIgnoreCase("Resolved")) {
					currentPneumo.setStatusOfPneumothoraxRight(rightStatus);
				}

				Boolean pastRightTransilimunation = pneumoThorax.getRighttransillumination();
				if (!BasicUtils.isEmpty(pastRightTransilimunation)) {

					if (rightStatus == null || rightStatus.isEmpty()) {
						currentPneumo.setRighttransillumination(pastRightTransilimunation);
					} else if (!rightStatus.equalsIgnoreCase("Resolved")) {
						currentPneumo.setRighttransillumination(pastRightTransilimunation);
					} else {
						currentPneumo.setRighttransillumination(false);
					}

					if (currentPneumo.getRighttransillumination()) {
						pneumoObj.getChestTubeObj().setIsPastTubeRight(true);
					}
				}

				String leftStatus = pneumoThorax.getStatusOfPneumothoraxLeft();
				if (!BasicUtils.isEmpty(leftStatus) && !leftStatus.equalsIgnoreCase("Resolved")) {
					currentPneumo.setStatusOfPneumothoraxLeft(leftStatus);
				}
				Boolean pastLeftTransilimunation = pneumoThorax.getLefttransillumination();
				if (!BasicUtils.isEmpty(pastLeftTransilimunation)) {
					if (leftStatus == null || leftStatus.isEmpty()) {
						currentPneumo.setLefttransillumination(pastLeftTransilimunation);
					} else if (!leftStatus.equalsIgnoreCase("Resolved")) {
						currentPneumo.setLefttransillumination(pastLeftTransilimunation);
					} else {
						currentPneumo.setLefttransillumination(false);
					}

					if (currentPneumo.getLefttransillumination()) {
						pneumoObj.getChestTubeObj().setIsPastTubeLeft(true);
					}
				}

				currentPneumo.setAgeatonset(prevPneumoList.get(0).getAgeatonset());
				currentPneumo.setAgeinhoursdays(prevPneumoList.get(0).getAgeinhoursdays());
			}
			pneumoObj.setCurrentRespPneumo(currentPneumo);

		} else {
			currentPneumo = new SaRespPneumo();
			currentPneumo.setAgeinhoursdays(true);
			currentPneumo.setRiskfactor(pneumoThoraxRisk.getRiskfactor());
			pneumoObj.setCurrentRespPneumo(currentPneumo);
		}

		try {
			HashMap<Object, Object> babyInfo = getBabyInformation(uhid);

			if (BasicUtils.isEmpty(prevPneumoList)
					|| prevPneumoList.get(0).getEventstatus().equalsIgnoreCase("Inactive")) {
				if (babyInfo.get(BasicConstants.AGE_AT_ONSET) != null) {
					currentPneumo.setAgeatonset(babyInfo.get(BasicConstants.AGE_AT_ONSET).toString());
				}
				currentPneumo.setAgeinhoursdays(true);
			} else {
				SaRespPneumo pastPneumo = prevPneumoList.get(0);
				currentPneumo.setAgeatonset(pastPneumo.getAgeatonset());
				currentPneumo.setAgeinhoursdays(pastPneumo.getAgeinhoursdays());
			}

			if (babyInfo.get(BasicConstants.AGE_AT_ONSET) != null) {
				currentPneumo.setAgeatassesment(Integer.valueOf(babyInfo.get(BasicConstants.AGE_AT_ONSET).toString()));
			}
			currentPneumo.setAgeAtAssessmentInhoursDays(true);
			pneumoObj.setCurrentRespPneumo(currentPneumo);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return pneumoObj;
	}

	@SuppressWarnings("unchecked")
	private PphnPOJO getPphnObj(String uhid) {
		PphnPOJO pphnObj = new PphnPOJO();
		String queryGetPrvPphn = "select obj from SaRespPphn as obj where uhid= '" + uhid
				+ "' order by assessment_time desc, resppphnid desc";
		List<SaRespPphn> prevRespPphnList = inicuDao.getListFromMappedObjQuery(queryGetPrvPphn);
		SaRespPphn currentPphn = pphnObj.getCurrentPphn();
		currentPphn.setAgeinhoursdays(true);

		for (int index = 0; index < prevRespPphnList.size(); index++) {
			SaRespPphn pphn = prevRespPphnList.get(index);

			String causeOfPphnStr = pphn.getCauseofpphn();
			if (!BasicUtils.isEmpty(causeOfPphnStr)) {
				String[] listSymtoms = causeOfPphnStr.replace(" ", "").trim().replace("[", "").replace("]", "")
						.split(",");
				ArrayList<String> symtomsList = new ArrayList<String>(Arrays.asList(listSymtoms));
				pphn.setPphnCauseList(symtomsList);
			}

			List<SaRespPphn> list = getRiskPastListPphn(uhid);
			if (!BasicUtils.isEmpty(list)) {
				currentPphn = getRiskPastListPphn(uhid).get(0);
			}
			// currentPphn.setRiskfactor(oldPphnObj);
			currentPphn.setMedicationStr(null);
			currentPphn.setOthercomments(null);
			currentPphn.setReassestime(null);
			currentPphn.setReassestimeType(null);
			
			
			pphnObj.setCurrentPphn(currentPphn);

			String queryInvestigationOrder = "Select obj from InvestigationOrdered obj where uhid='" + uhid
					+ "' and assesmentid='" + pphn.getResppphnid()
					+ "' and assesment_type='pphn' order by creationtime desc";
			List<InvestigationOrdered> investigationOrderList = inicuDao
					.getListFromMappedObjQuery(queryInvestigationOrder);
			ArrayList<String> investOrder = new ArrayList<>();
			ArrayList<String> investOrderStr = new ArrayList<>();
			if (!BasicUtils.isEmpty(investigationOrderList)) {
				for (InvestigationOrdered order : investigationOrderList) {
					if (!BasicUtils.isEmpty(order.getTestname())) {
						investOrder.add(order.getTestslistid());
						investOrderStr.add(order.getTestname());
					}
				}
				pphn.setOrderInvestigationList(investOrder);
				pphn.setOrderInvestigationListStr(investOrderStr);

			}

			// past respiratory support for pphn
			String queryGetPrvRespSupport = "select obj from RespSupport as obj where uhid= '" + uhid
					+ "' and (eventname='pphn' or eventname='PPHN') and eventid='" + pphn.getResppphnid() + "'";
			List<RespSupport> prevRespSupportList = inicuDao.getListFromMappedObjQuery(queryGetPrvRespSupport);
			if (!BasicUtils.isEmpty(prevRespSupportList)) {
				RespSupport respSupport = prevRespSupportList.get(0);
				pphn.setRespSupport(respSupport);
			}

			// past prescription list.
			String queryPastPrescriptionList = "select obj from BabyPrescription as obj where isactive='true' and uhid='"
					+ uhid + "' and eventid='" + pphn.getResppphnid()
					+ "' and (eventname='pphn' or eventname='PPHN') order by creationtime desc";
			List<BabyPrescription> pastPrescriptionList = inicuDao.getListFromMappedObjQuery(queryPastPrescriptionList);
			if (!BasicUtils.isEmpty(pastPrescriptionList)) {
				pphn.setBabyPrescription(pastPrescriptionList);
			}

			if (!BasicUtils.isEmpty(pphn.getDownesscoreid())) {
				String fetchDownesScore = "SELECT obj FROM ScoreDownes as obj where uhid='" + uhid
						+ "' and downesscoreid='" + pphn.getDownesscoreid() + "' order by creationtime desc";
				List<ScoreDownes> downesScoreList = inicuDao.getListFromMappedObjQuery(fetchDownesScore);
				if (!BasicUtils.isEmpty(downesScoreList)) {
					ScoreDownes downesScore = downesScoreList.get(0);
					pphn.setDownesScore(downesScore);
				}

			}

            if (index == 0) {
                try {
                    if (pphn.getEventstatus().equalsIgnoreCase("No")) {
                        pphnObj.setInactiveProgressNote(generateInactiveNotesPPHN(null, uhid, "", null, ""));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    logger.error("Exception while generating inactive note", e);
                }
            }
		}

		if (!BasicUtils.isEmpty(prevRespPphnList)
				&& !prevRespPphnList.get(0).getEventstatus().equalsIgnoreCase("Inactive")) {
			currentPphn.setAgeatonset(prevRespPphnList.get(0).getAgeatonset());
			currentPphn.setAgeinhoursdays(prevRespPphnList.get(0).getAgeinhoursdays());
			currentPphn.setAgeatassesment(prevRespPphnList.get(0).getAgeatassesment());
			currentPphn.setEventstatus(prevRespPphnList.get(0).getEventstatus());
			currentPphn.setInoStatus(prevRespPphnList.get(0).getInoStatus());
		}else {
			try {
				HashMap<Object, Object> babyInfo = getBabyInformation(uhid);
				if (babyInfo.get(BasicConstants.AGE_AT_ONSET) != null) {
					Integer ageAtAssessment = Integer.valueOf(babyInfo.get(BasicConstants.AGE_AT_ONSET).toString());
					currentPphn.setAgeatassesment(ageAtAssessment);
					currentPphn.setAgeatonset(babyInfo.get(BasicConstants.AGE_AT_ONSET).toString());
					currentPphn.setIsageofassesmentinhours(true);
					currentPphn.setAgeinhoursdays(true);
					if (!BasicUtils.isEmpty(prevRespPphnList)) {
						currentPphn.setEventstatus(prevRespPphnList.get(0).getEventstatus());
						currentPphn.setInoStatus(prevRespPphnList.get(0).getInoStatus());
//						currentPphn.setAgeatonset(prevRespPphnList.get(0).getAgeatonset());
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		// INO Code
		try {
			int offset = TimeZone.getTimeZone(BasicConstants.CLIENT_TIME_ZONE).getRawOffset()
					- TimeZone.getDefault().getRawOffset();
			Timestamp currentDate = new Timestamp((new java.util.Date().getTime()));
			Timestamp previousDate = new Timestamp((new java.util.Date().getTime()) - (10 * 60 * 1000));

			currentDate = new Timestamp(currentDate.getTime() - offset);
			previousDate = new Timestamp(previousDate.getTime() - offset);

//			String query = "SELECT obj FROM DeviceMonitorDetail as obj WHERE " + "uhid ='" + uhid.trim() + "' "
//					+ "AND starttime >= '" + previousDate + "' AND starttime <= '" + currentDate + "' "
//					+ " order by starttime";
//
//			List<DeviceMonitorDetail> resultSet = patientDao.getListFromMappedObjNativeQuery(query);
//			if (!BasicUtils.isEmpty(resultSet)) {
//				List<String> spo2List = new ArrayList<String>();
//				for (DeviceMonitorDetail obj : resultSet) {
//					if (!BasicUtils.isEmpty(obj.getSpo2()))
//						spo2List.add(obj.getSpo2());
//				}
//				int spo2Mode = calMode(spo2List, spo2List.size());
//				currentPphn.setSpo2(spo2Mode);
//				currentPphn.setSpo2Time(previousDate);
//			} else {
//				query = "SELECT obj FROM DeviceMonitorDetail as obj WHERE " + "uhid ='" + uhid.trim() + "' "
//						+ " order by starttime desc";
//				resultSet = patientDao.getListFromMappedObjNativeQuery(query);
//				if (!BasicUtils.isEmpty(resultSet) && !BasicUtils.isEmpty(resultSet.get(0).getSpo2())) {
//					currentPphn.setSpo2(Integer.parseInt(resultSet.get(0).getSpo2()));
//					currentPphn.setSpo2Time(resultSet.get(0).getStarttime());
//				}
//			}
//
//			query = "SELECT obj FROM DeviceVentilatorData as obj WHERE " + "uhid ='" + uhid.trim() + "' "
//					+ "AND start_time >= '" + previousDate + "' AND start_time <= '" + currentDate + "' "
//					+ " order by start_time";
//
//			List<DeviceVentilatorData> resultSet1 = patientDao.getListFromMappedObjNativeQuery(query);
//			if (!BasicUtils.isEmpty(resultSet1)) {
//				List<String> mapList = new ArrayList<String>();
//				List<String> fio2List = new ArrayList<String>();
//				for (DeviceVentilatorData obj : resultSet1) {
//					if (!BasicUtils.isEmpty(obj.getMap()))
//						mapList.add(obj.getMap());
//					if (!BasicUtils.isEmpty(obj.getFio2()))
//						fio2List.add(obj.getFio2());
//				}
//				float mapMode = calMode(mapList, mapList.size());
//				int fio2Mode = calMode(fio2List, fio2List.size());
//				currentPphn.setMap(mapMode);
//				currentPphn.setFio2(fio2Mode);
//				currentPphn.setFio2Time(previousDate);
//			} else {
//				query = "SELECT obj FROM DeviceVentilatorData as obj WHERE " + "uhid ='" + uhid.trim() + "' "
//						+ " order by start_time desc";
//				resultSet1 = patientDao.getListFromMappedObjNativeQuery(query);
//				if (!BasicUtils.isEmpty(resultSet1) && !BasicUtils.isEmpty(resultSet1.get(0).getFio2())) {
//					currentPphn.setFio2(Integer.parseInt(resultSet1.get(0).getFio2()));
//					currentPphn.setFio2Time(resultSet1.get(0).getStart_time());
//				}
//				if (!BasicUtils.isEmpty(resultSet1) && !BasicUtils.isEmpty(resultSet1.get(0).getMap())) {
//					currentPphn.setMap(Float.parseFloat(resultSet1.get(0).getMap()));
//				}
//
//			}
			String query = "SELECT obj FROM NursingBloodGas as obj WHERE " + "uhid ='" + uhid.trim() + "' "
					+ " order by entryDate desc";
			List<NursingBloodGas> resultSet2 = patientDao.getListFromMappedObjNativeQuery(query);
			if (!BasicUtils.isEmpty(resultSet2)) {
				if (!BasicUtils.isEmpty(resultSet2.get(0).getPco2())) {
					currentPphn.setPao2(Float.parseFloat(resultSet2.get(0).getPco2()));
					currentPphn.setPao2Time(resultSet2.get(0).getEntryDate());
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

//		List<String> associatedEventsOptions = new ArrayList<>();
		pphnObj.setPastPphn(prevRespPphnList);
		return pphnObj;
	}

	@Override
	public SaRespPphn getInoData(String uhid, String loggedUser) {
		SaRespPphn currentPphn = new SaRespPphn();

		// INO Code
		try {
			String queryGetPrvPphn = "select obj from SaRespPphn as obj where uhid= '" + uhid
					+ "' order by assessment_time desc, resppphnid desc";
			List<SaRespPphn> prevRespPphnList = inicuDao.getListFromMappedObjQuery(queryGetPrvPphn);
			currentPphn.setInoStatus(prevRespPphnList.get(0).getInoStatus());

			int offset = TimeZone.getTimeZone(BasicConstants.CLIENT_TIME_ZONE).getRawOffset()
					- TimeZone.getDefault().getRawOffset();
			Timestamp currentDate = new Timestamp((new java.util.Date().getTime()));
			Timestamp previousDate = new Timestamp((new java.util.Date().getTime()) - (10 * 60 * 1000));

			currentDate = new Timestamp(currentDate.getTime() - offset);
			previousDate = new Timestamp(previousDate.getTime() - offset);

			String query = "SELECT obj FROM DeviceMonitorDetail as obj WHERE " + "uhid ='" + uhid.trim() + "' "
					+ "AND starttime >= '" + previousDate + "' AND starttime <= '" + currentDate + "' "
					+ " order by starttime";

			List<DeviceMonitorDetail> resultSet = patientDao.getListFromMappedObjNativeQuery(query);
			if (!BasicUtils.isEmpty(resultSet)) {
				List<String> spo2List = new ArrayList<String>();
				for (DeviceMonitorDetail obj : resultSet) {
					if (!BasicUtils.isEmpty(obj.getSpo2()))
						spo2List.add(obj.getSpo2());
				}
				int spo2Mode = calMode(spo2List, spo2List.size());
				currentPphn.setSpo2(spo2Mode);
				currentPphn.setSpo2Time(previousDate);
			} else {
				query = "SELECT obj FROM DeviceMonitorDetail as obj WHERE " + "uhid ='" + uhid.trim() + "' "
						+ " order by starttime desc";
				resultSet = patientDao.getListFromMappedObjNativeQuery(query);
				if (!BasicUtils.isEmpty(resultSet) && !BasicUtils.isEmpty(resultSet.get(0).getSpo2())) {
					currentPphn.setSpo2(Integer.parseInt(resultSet.get(0).getSpo2()));
					currentPphn.setSpo2Time(resultSet.get(0).getStarttime());
				}
			}

			query = "SELECT obj FROM DeviceVentilatorData as obj WHERE " + "uhid ='" + uhid.trim() + "' "
					+ "AND start_time >= '" + previousDate + "' AND start_time <= '" + currentDate + "' "
					+ " order by start_time";

			List<DeviceVentilatorData> resultSet1 = patientDao.getListFromMappedObjNativeQuery(query);
			if (!BasicUtils.isEmpty(resultSet1)) {
				List<String> mapList = new ArrayList<String>();
				List<String> fio2List = new ArrayList<String>();
				for (DeviceVentilatorData obj : resultSet1) {
					if (!BasicUtils.isEmpty(obj.getMap()))
						mapList.add(obj.getMap());
					if (!BasicUtils.isEmpty(obj.getFio2()))
						fio2List.add(obj.getFio2());
				}
				float mapMode = calMode(mapList, mapList.size());
				int fio2Mode = calMode(fio2List, fio2List.size());
				currentPphn.setMap(mapMode);
				currentPphn.setFio2(fio2Mode);
				currentPphn.setFio2Time(previousDate);
			} else {
				query = "SELECT obj FROM DeviceVentilatorData as obj WHERE " + "uhid ='" + uhid.trim() + "' "
						+ " order by start_time desc";
				resultSet1 = patientDao.getListFromMappedObjNativeQuery(query);
				if (!BasicUtils.isEmpty(resultSet1) && !BasicUtils.isEmpty(resultSet1.get(0).getFio2())) {
					currentPphn.setFio2(Integer.parseInt(resultSet1.get(0).getFio2()));
					currentPphn.setFio2Time(resultSet1.get(0).getStart_time());
				}
				if (!BasicUtils.isEmpty(resultSet1) && !BasicUtils.isEmpty(resultSet1.get(0).getMap())) {
					currentPphn.setMap(Float.parseFloat(resultSet1.get(0).getMap()));
				}

			}
			query = "SELECT obj FROM NursingBloodGas as obj WHERE " + "uhid ='" + uhid.trim() + "' "
					+ " order by entryDate desc";
			List<NursingBloodGas> resultSet2 = patientDao.getListFromMappedObjNativeQuery(query);
			if (!BasicUtils.isEmpty(resultSet2)) {
				if (!BasicUtils.isEmpty(resultSet2.get(0).getPco2())) {
					currentPphn.setPao2(Float.parseFloat(resultSet2.get(0).getPco2()));
					currentPphn.setPao2Time(resultSet2.get(0).getEntryDate());
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return currentPphn;
	}

	int calMode(List<String> devDetail, int n) {
		int maxValue = 0, maxCount = 0, i, j;

		for (i = 0; i < n; ++i) {
			int count = 0;
			for (j = 0; j < n; ++j) {
				if (devDetail.get(j) == devDetail.get(i))
					++count;
			}

			if (count > maxCount) {
				maxCount = count;
				maxValue = Integer.parseInt(devDetail.get(i));
			}
		}
		return maxValue;
	}


@SuppressWarnings("unchecked")
	private ApneaPOJO getApneaObj(String uhid) {
		ApneaPOJO apneaObj = new ApneaPOJO();
		// TimeZone.setDefault(TimeZone.getTimeZone(CalendarUtility.UTC_TIME_ZONE_ID));

		Timestamp firstAssessmentTime = null;
		Timestamp lastInactiveTime = null;
		Timestamp currentTime = new Timestamp(System.currentTimeMillis());
		int episodeNumber = 1;
		SimpleDateFormat serverTimeZoneFormat = CalendarUtility
				.getTimeStampFormat(CalendarUtility.SERVER_CRUD_OPERATION);
		int offset = TimeZone.getTimeZone(BasicConstants.CLIENT_TIME_ZONE).getRawOffset()
				- TimeZone.getDefault().getRawOffset();
		List<NursingEpisode> currentEpisodeList = new ArrayList<NursingEpisode>();
		String queryApneaEpisode = "Select obj from NursingEpisode as obj where uhid='" + uhid
				+ "' and apnea='true' order by creationtime";
		String queryGetPrvApnea = "select obj from SaRespApnea as obj where uhid= '" + uhid
				+ "' order by assessment_time desc, apneaid desc";
		List<SaRespApnea> prevRespApneaList = inicuDao.getListFromMappedObjQuery(queryGetPrvApnea);
		if(!BasicUtils.isEmpty(prevRespApneaList)) {
			if(!prevRespApneaList.get(0).getEventstatus().equalsIgnoreCase("Inactive")) {
				episodeNumber = prevRespApneaList.get(0).getEpisodeNumber();
				queryGetPrvApnea = "select obj from SaRespApnea as obj where uhid= '" + uhid
						+ "' and episode_number = " + episodeNumber + " order by assessment_time asc, apneaid asc";
				List<SaRespApnea> currentApneaList = inicuDao.getListFromMappedObjQuery(queryGetPrvApnea);
				
				if(!BasicUtils.isEmpty(currentApneaList)) {
					String queryCurrentApneaEpisode = "Select obj from NursingEpisode as obj where uhid='" + uhid
						+ "' and apnea='true' and creationtime >= '" + serverTimeZoneFormat.format(currentApneaList.get(0).getAssessmentTime().getTime()) + "' order by creationtime";
					currentEpisodeList = inicuDao.getListFromMappedObjQuery(queryCurrentApneaEpisode);
	
				}
			}

            try {
                if (prevRespApneaList.get(0).getEventstatus().equalsIgnoreCase("No")) {
                    apneaObj.setInactiveProgressNote(generateInactiveNotesApnea(null, uhid, "", null, ""));
                }
            } catch (Exception e) {
                e.printStackTrace();
                logger.error("Exception while generating inactive note for Apnea", e);
            }
		}

		// new query added for Caffeine calculation
		String queryGetBabyPrescription = "select obj from BabyPrescription as obj where (medicinename='Caffeine' OR medicinename='Caffeine (loading)') and uhid='"
				+ uhid + "' order by creationtime desc";
		List<BabyPrescription> prevRespAneaListTest = inicuDao.getListFromMappedObjQuery(queryGetBabyPrescription);

		SaRespApnea currentApnea = apneaObj.getCurrentApnea();
		currentApnea.setAgeinhours(true);
		apneaObj.setPastApnea(prevRespApneaList);

		if (!(null == prevRespApneaList || prevRespApneaList.isEmpty())) {

			SaRespApnea lastObject = prevRespApneaList.get(0);
			if (lastObject.getIsProphylacticCaffeineEnabled() != null) {
				currentApnea.setIsProphylacticCaffeineEnabled(lastObject.getIsProphylacticCaffeineEnabled());
			}

			int numberOfmins = 0;
			int numberOfSpontaneous = 0;
			int numberOfStimulation = 0;
			int numberOfPPV = 0;

			Iterator<SaRespApnea> itrEvent = prevRespApneaList.iterator();
			while (itrEvent.hasNext()) {
				SaRespApnea obj = itrEvent.next();
				if (lastInactiveTime == null && obj.getEventstatus().equalsIgnoreCase("inactive")) {
					lastInactiveTime = obj.getAssessmentTime();
					queryApneaEpisode = "Select obj from NursingEpisode as obj where uhid='" + uhid
							+ "' and apnea='true' and creationtime >='"
							+ serverTimeZoneFormat.format(lastInactiveTime.getTime()) + "' order by creationtime";
				} else if (firstAssessmentTime == null && obj.getEventstatus().equalsIgnoreCase("yes")) {
					firstAssessmentTime = obj.getAssessmentTime();
					if (firstAssessmentTime != null) {
						int cummulativeDaysOfApnea = ((Long) ((currentTime.getTime() - firstAssessmentTime.getTime())
								/ (24 * 60 * 60 * 1000))).intValue();
						apneaObj.setCummulativeDaysOfApnea(cummulativeDaysOfApnea + 1);
					}
				}
				if (firstAssessmentTime != null && lastInactiveTime != null) {
					break;
				}

				String queryInvestigationOrder = "Select obj from InvestigationOrdered obj where uhid='" + uhid
						+ "' and assesmentid='" + obj.getApneaid()
						+ "' and assesment_type='Apnea' order by creationtime desc";
				List<InvestigationOrdered> investigationOrderList = inicuDao
						.getListFromMappedObjQuery(queryInvestigationOrder);
				ArrayList<String> investOrder = new ArrayList<>();
				ArrayList<String> investOrderStrList = new ArrayList<>();
				if (!BasicUtils.isEmpty(investigationOrderList)) {
					for (InvestigationOrdered order : investigationOrderList) {
						if (!BasicUtils.isEmpty(order.getTestslistid())) {
							investOrder.add(order.getTestslistid());
							investOrderStrList.add(order.getTestname());
						}
					}
					obj.setOrderInvestigationList(investOrder);
					obj.setOrderInvestigationStringList(investOrderStrList);
				}

				// past respiratory support for rds

				String queryGetPrvRespSupport = "select obj from RespSupport as obj where uhid= '" + uhid
						+ "' and (eventname='apnea' or eventname='Apnea') and eventid='" + obj.getApneaid() + "'";
				List<RespSupport> prevRespSupportList = inicuDao.getListFromMappedObjQuery(queryGetPrvRespSupport);
				if (!BasicUtils.isEmpty(prevRespSupportList)) {
					RespSupport respSupport = prevRespSupportList.get(0);
					obj.setRespSupport(respSupport);
				}
			}

			Timestamp lastAssessmentTime = prevRespApneaList.get(0).getAssessmentTime();
			numberOfmins = ((Long) ((currentTime.getTime() - lastAssessmentTime.getTime()) / (60 * 1000))).intValue();
			apneaObj.setNumberOfHours(numberOfmins);

			String queryApneaEpisodeLastAssess = "Select obj from NursingEpisode as obj where uhid='" + uhid
					+ "' and apnea='true' and creationtime >='"
					+ serverTimeZoneFormat.format(lastAssessmentTime.getTime()) + "' order by creationtime desc";
			List<NursingEpisode> pastNursingEpisode = inicuDao.getListFromMappedObjQuery(queryApneaEpisodeLastAssess);

			if (pastNursingEpisode != null) {
				for (NursingEpisode obj : pastNursingEpisode) {
					System.out.println(obj.getCreationtime() + "offset Episode");
					obj.setCreationtime(new Timestamp(obj.getCreationtime().getTime() - offset));
				}
			}

			if (!BasicUtils.isEmpty(pastNursingEpisode)) {
				Iterator<NursingEpisode> itrEpisode = pastNursingEpisode.iterator();

				while (itrEpisode.hasNext()) {
					NursingEpisode obj = itrEpisode.next();
					if (null != obj.getRecovery()) {
						if (obj.getRecovery().equalsIgnoreCase("Spontaneous")) {
							numberOfSpontaneous++;
						} else if (obj.getRecovery().equalsIgnoreCase("Physical stimulation")) {
							numberOfStimulation++;
						} else {
							numberOfPPV++;
						}
					}
				}
			}

			// apneaObj.setNumberOfEpisode(pastNursingEpisode.size());
			apneaObj.setNumberOfSpontaneous(numberOfSpontaneous);
			apneaObj.setNumberOfStimulation(numberOfStimulation);
			apneaObj.setNumberOfPPV(numberOfPPV);

			// past respiratory support for apnea
			String queryGetPrvRespSupport = "select obj from RespSupport as obj where uhid= '" + uhid
					+ "' and eventname='apnea'";
			List<RespSupport> prevRespSupportList = inicuDao.getListFromMappedObjQuery(queryGetPrvRespSupport);
			if (!(null == prevRespSupportList || prevRespSupportList.isEmpty())) {
				Iterator<RespSupport> itrResp = prevRespSupportList.iterator();
				while (itrResp.hasNext()) {
					RespSupport obj = itrResp.next();
					apneaObj.getPastRespSupportMap().put(obj.getEventid(), obj);
				}
			}
		}

		int currentAgeOnset = 0;
		try {
			HashMap<Object, Object> babyInfo = getBabyInformation(uhid);
			if (babyInfo.get(BasicConstants.AGE_AT_ONSET) != null) {
				currentAgeOnset = ((Long) babyInfo.get(BasicConstants.AGE_AT_ONSET)).intValue();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		List<NursingEpisode> pastNursingEpisode = inicuDao.getListFromMappedObjQuery(queryApneaEpisode);
		if (!BasicUtils.isEmpty(pastNursingEpisode)) {
			for (NursingEpisode obj : pastNursingEpisode) {
				System.out.println(obj.getCreationtime() + "offset Episode");
				obj.setCreationtime(new Timestamp(obj.getCreationtime().getTime() - offset));
			}
		}
		apneaObj.setPastNursingEpisode(Lists.reverse(pastNursingEpisode));
		if (BasicUtils.isEmpty(prevRespApneaList)
				|| prevRespApneaList.get(0).getEventstatus().equalsIgnoreCase("Inactive")) {

			currentApnea.setAgeatonset(currentAgeOnset + "");
			currentApnea.setAgeinhours(true);
		} else { // continue visit
			currentApnea.setAgeatonset(prevRespApneaList.get(0).getAgeatonset());
			currentApnea.setAgeinhours(prevRespApneaList.get(0).getAgeinhours());

			Timestamp yesterdayTime = new Timestamp(new Date().getTime() - (24 * 60 * 60 * 1000));
			System.out.println("Today time .." + new Date() + "Yesterday time" + yesterdayTime);
			String queryApneaEpisodeDay = "Select obj from NursingEpisode as obj where uhid='" + uhid
					+ "' and apnea='true' and creationtime>='" + yesterdayTime + "' order by creationtime desc";
			List<NursingEpisode> pastNursingEpisodeDay = inicuDao.getListFromMappedObjQuery(queryApneaEpisodeDay);

			if (!(pastNursingEpisodeDay == null || pastNursingEpisodeDay.isEmpty())) {
				// apneaObj.setPastNursingEpisode(pastNursingEpisodeDay);
				// currentApnea.setNoOfApneaInaDay(pastNursingEpisodeDay.size());
			} else {
				// currentApnea.setNoOfApneaInaDay(0);
			}
		}

		currentApnea.setAgeatassesment(currentAgeOnset);
		currentApnea.setIsageofassesmentinhours(true);

		if (!(currentEpisodeList == null || currentEpisodeList.isEmpty())) {
			currentApnea.setTotalnoofapnea(currentEpisodeList.size());
			currentApnea.setCummulative_number_of_episodes(currentEpisodeList.size());
		} else {
			apneaObj.setApneaEvent(true);
			currentApnea.setTotalnoofapnea(0);
			currentApnea.setCummulative_number_of_episodes(0);
		}

		int cummulative_apnea_free_on_caffeine = 0;
		int continuous_apnea_free_on_caffeine = 0;
		int cummulative_apnea_free_after_caffeine = 0;
		int cummulative_days_of_caffeine = 0;
		int caffeineStartHrs = 0;
		int caffeineStopHrs = currentAgeOnset;
		boolean caffeineFlag = true;
		boolean calFlag = true;
		int babyDOB = 0;

		String queryGetBabyPrescriptionTest = "select obj from BabyPrescription as obj where (medicinename='Caffeine' OR medicinename='Caffeine (loading)') and uhid='"
				+ uhid + "' order by creationtime desc";
		List<BabyPrescription> prevRespAneaTest = inicuDao.getListFromMappedObjQuery(queryGetBabyPrescription);

		String getDOB = "select obj from BabyDetail as obj where uhid='" + uhid + "' order by creationtime desc";
		List<BabyDetail> babyDetailResult = inicuDao.getListFromMappedObjQuery(getDOB);
	
		BabyDetail dobResult = babyDetailResult.get(0);
		boolean isCaffeineStarted = false;
		Long maxEndTime = (long) -1;
		
		for (int index = 0; index < prevRespAneaTest.size(); index++) {

//			SaRespApnea apnea = prevRespApneaList.get(index);
			BabyPrescription apneaCaffeine = prevRespAneaTest.get(index);// new object added
//			BabyDetail dobResult = babyDetailResult.get(0);
			

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
			SimpleDateFormat sdfWithoutHours = new SimpleDateFormat("yyyy/MM/dd");
			// getting start time in milliseconds (caffeineStartHrs) from BabyPrescription
			// table
//		
//				Date date = sdf.parse(apneaCaffeine.getStartdate().toString());
//				Date dateDOB = sdfWithoutHours.parse(dobResult.getDateofbirth().toString());

//				caffeineStartHrs = (int) date.getTime();
//				babyDOB = (int) dateDOB.getTime();

			caffeineStartHrs = (int) (apneaCaffeine.getStartdate().getTime() - dobResult.getDateofbirth().getTime())
					/ (1000 * 60 * 60);

			// getting end time in milliseconds (caffeineStopHrs) from BabyPrescription
			// table

//				Date date = sdf.parse(apneaCaffeine.getEnddate().toString());
//				Date dateDOB = sdfWithoutHours.parse(dobResult.getDateofbirth().toString());

//				caffeineStopHrs = (int) date.getTime();
//				babyDOB = (int) dateDOB.getTime();
			if (apneaCaffeine.getEnddate() != null) {
				caffeineStopHrs = (int)(apneaCaffeine.getEnddate().getTime() - apneaCaffeine.getStartdate().getTime()) / (1000 * 60 * 60);
				if (caffeineStopHrs >= caffeineStartHrs) {
					cummulative_days_of_caffeine += ((caffeineStopHrs) / 24);
				}
				if(apneaCaffeine.getEnddate().getTime() > maxEndTime)
					maxEndTime = apneaCaffeine.getEnddate().getTime();
			}
			else {
				caffeineStopHrs = 0;
				isCaffeineStarted = true;
				cummulative_days_of_caffeine += ((currentTime.getTime() - apneaCaffeine.getStartdate().getTime()) / (1000 * 60 * 60 * 24));
			}
		

		}
		if(!isCaffeineStarted && maxEndTime > 0) {
			String queryLastApneaEpisodeAfterCaffeine = "Select obj from NursingEpisode as obj where uhid='" + uhid
					+ "' and apnea='true' and creationtime >= '" + serverTimeZoneFormat.format(maxEndTime) + "' order by creationtime desc";
				List<NursingEpisode> pastEpisodeListAfterCaffeine = inicuDao.getListFromMappedObjQuery(queryLastApneaEpisodeAfterCaffeine);
				if(!BasicUtils.isEmpty(pastEpisodeListAfterCaffeine)) {
					cummulative_apnea_free_after_caffeine = (int) ((currentTime.getTime() - pastEpisodeListAfterCaffeine.get(0).getCreationtime().getTime()) / (24 * 60 * 60 * 1000));
				}else {
					cummulative_apnea_free_after_caffeine = (int) ((currentTime.getTime() - maxEndTime) / (24 * 60 * 60 * 1000));
				}
			
		}else {
			cummulative_apnea_free_after_caffeine = 0;
		}
		try {

			Date caffiene_start_time = null;
			Date caffiene_stop_time = null;

			String caffieneStartStr = null;
			String caffieneStopStr = null;

			String queryGetBabyPrescriptionTest2 = "select obj from BabyPrescription as obj where (medicinename='Caffeine' OR medicinename='Caffeine (loading)') and uhid='"
					+ uhid + "' order by creationtime desc";

			List<BabyPrescription> prevRespAneaTest2 = inicuDao.getListFromMappedObjQuery(queryGetBabyPrescription);

			for (int index = prevRespAneaTest2.size() - 1; index >= 0; index--) {
				// SaRespApnea apnea = prevRespApneaList.get(index);
				BabyPrescription apneaCaffeine = prevRespAneaTest.get(index);// new object added

				caffieneStartStr = serverTimeZoneFormat.format(apneaCaffeine.getStartdate());
				caffiene_start_time = serverTimeZoneFormat.parse(caffieneStartStr);

				if(apneaCaffeine.getEnddate() != null) {
					caffieneStopStr = serverTimeZoneFormat.format(apneaCaffeine.getEnddate());
					caffiene_stop_time = serverTimeZoneFormat.parse(caffieneStopStr);
				}
				
				

				if (null == caffieneStopStr && index == 0) {
					caffieneStopStr = new Timestamp(System.currentTimeMillis()).toString();
					caffiene_stop_time = serverTimeZoneFormat.parse(caffieneStopStr);
				}

				if (caffiene_start_time != null && caffiene_stop_time != null) {
					
					String queryApnea = "Select obj from NursingEpisode as obj where uhid='" + uhid
							+ "' and apnea='true' and creationtime between '" + caffieneStartStr + "' and '"
							+ caffieneStopStr + "'";
					List<NursingEpisode> apneaEvent = inicuDao.getListFromMappedObjQuery(queryApnea);
					if (BasicUtils.isEmpty(apneaEvent)) {
						Long timeDiff = (caffiene_stop_time.getTime() - caffiene_start_time.getTime());
						continuous_apnea_free_on_caffeine = ((Long) (timeDiff / (24*  60 * 60 * 1000))).intValue();

						cummulative_apnea_free_on_caffeine += continuous_apnea_free_on_caffeine;
					}else {
						for (int i = 0; i < apneaEvent.size(); i++) {
							if (i == apneaEvent.size() - 1) {
								if ((apneaEvent.get(i).getCreationtime().getTime()
										- caffiene_start_time.getTime()) > (24 * 60 * 60 * 1000)) {
									continuous_apnea_free_on_caffeine = ((Long) ((apneaEvent.get(i).getCreationtime()
											.getTime() - caffiene_start_time.getTime()) / (24 * 60 *  60 * 1000)))
													.intValue();
									cummulative_apnea_free_on_caffeine += continuous_apnea_free_on_caffeine;

									caffieneStartStr = serverTimeZoneFormat.format(apneaEvent.get(i).getCreationtime());
									caffiene_start_time = serverTimeZoneFormat.parse(caffieneStartStr);
								}
								if ((caffiene_stop_time.getTime() - apneaEvent.get(i).getCreationtime().getTime()) > (24
										* 60 * 60 * 1000)) {
									continuous_apnea_free_on_caffeine = ((Long) ((caffiene_stop_time.getTime()
											- apneaEvent.get(i).getCreationtime().getTime()) / (24 * 60 * 60 * 1000)))
													.intValue();
									cummulative_apnea_free_on_caffeine += continuous_apnea_free_on_caffeine;
								}
							} else if ((apneaEvent.get(i).getCreationtime().getTime()
									- caffiene_start_time.getTime()) > (24 * 60 *  60 * 1000)) {
								continuous_apnea_free_on_caffeine = ((Long) ((apneaEvent.get(i).getCreationtime()
										.getTime() - caffiene_start_time.getTime()) / (24 * 60 *  60 * 1000)))
												.intValue();
								cummulative_apnea_free_on_caffeine += continuous_apnea_free_on_caffeine;

								caffieneStartStr = serverTimeZoneFormat.format(apneaEvent.get(i).getCreationtime());
								caffiene_start_time = serverTimeZoneFormat.parse(caffieneStartStr);
							}else if ((apneaEvent.get(i).getCreationtime().getTime()
									- caffiene_start_time.getTime()) <= (24 * 60 *  60 * 1000)) {
								

								caffieneStartStr = serverTimeZoneFormat.format(apneaEvent.get(i).getCreationtime());
								caffiene_start_time = serverTimeZoneFormat.parse(caffieneStartStr);
							}
						}
					}
					caffiene_start_time = null;
					caffiene_stop_time = null;

				} else {
					continue;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();

			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER, "sourabh_verma@oxyent.com" };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, "", uhid,
					"Caffeine calculation", BasicUtils.convertErrorStacktoString(e));
		}

		if (0 == continuous_apnea_free_on_caffeine) {
			continuous_apnea_free_on_caffeine = 0;
		}
		currentApnea.setCummulative_apnea_on_caffeine(cummulative_apnea_free_on_caffeine);
		currentApnea.setContinuous_apnea_on_caffeine(continuous_apnea_free_on_caffeine);
		currentApnea.setApnea_free_days_after_caffeine(cummulative_apnea_free_after_caffeine);

		if (0 == cummulative_days_of_caffeine) {
			currentApnea.setCummulative_days_of_caffeine(0);
		} else {
			currentApnea.setCummulative_days_of_caffeine(cummulative_days_of_caffeine + 1);
		}

		// current apnea setting manual age at assessment to today
		Date todayDate = new Date();
		// joundiceCurrent.setAssessmentDate(todayDate);
		currentApnea.setAssessmentTime(new Timestamp(System.currentTimeMillis()));
		int todayHours = todayDate.getHours();
		int todayMins = todayDate.getMinutes();

		if (todayHours > 12) {
			todayHours -= 12;
			currentApnea.setAssessmentMeridiem(false);
			if (todayHours < 10)
				currentApnea.setAssessmentHour("0" + Integer.toString(todayHours));
			else
				currentApnea.setAssessmentHour(Integer.toString(todayHours));
		} else {
			currentApnea.setAssessmentMeridiem(true);
			if (todayHours < 10)
				currentApnea.setAssessmentHour("0" + Integer.toString(todayHours));
			else
				currentApnea.setAssessmentHour(Integer.toString(todayHours));
		}
		if (todayMins < 10)
			currentApnea.setAssessmentMin("0" + Integer.toString(todayMins));
		else
			currentApnea.setAssessmentMin(Integer.toString(todayMins));

		System.out.println(currentApnea);

		return apneaObj;
	}
// 	@SuppressWarnings("unchecked")
// 	private ApneaPOJO getApneaObj(String uhid) {
// 		ApneaPOJO apneaObj = new ApneaPOJO();
// 		// TimeZone.setDefault(TimeZone.getTimeZone(CalendarUtility.UTC_TIME_ZONE_ID));

// 		Timestamp firstAssessmentTime = null;
// 		Timestamp lastInactiveTime = null;
// 		Timestamp currentTime = new Timestamp(System.currentTimeMillis());
// 		int episodeNumber = 1;
// 		SimpleDateFormat serverTimeZoneFormat = CalendarUtility
// 				.getTimeStampFormat(CalendarUtility.SERVER_CRUD_OPERATION);
// 		int offset = TimeZone.getTimeZone(BasicConstants.CLIENT_TIME_ZONE).getRawOffset()
// 				- TimeZone.getDefault().getRawOffset();
// 		List<NursingEpisode> currentEpisodeList = new ArrayList<NursingEpisode>();
// 		String queryApneaEpisode = "Select obj from NursingEpisode as obj where uhid='" + uhid
// 				+ "' and apnea='true' order by creationtime";
// 		String queryGetPrvApnea = "select obj from SaRespApnea as obj where uhid= '" + uhid
// 				+ "' order by assessment_time desc, apneaid desc";
// 		List<SaRespApnea> prevRespApneaList = inicuDao.getListFromMappedObjQuery(queryGetPrvApnea);
// 		if(!BasicUtils.isEmpty(prevRespApneaList)) {
// 			if(!prevRespApneaList.get(0).getEventstatus().equalsIgnoreCase("Inactive")) {
// 				episodeNumber = prevRespApneaList.get(0).getEpisodeNumber();
// 				queryGetPrvApnea = "select obj from SaRespApnea as obj where uhid= '" + uhid
// 						+ "' and episode_number = " + episodeNumber + " order by assessment_time asc, apneaid asc";
// 				List<SaRespApnea> currentApneaList = inicuDao.getListFromMappedObjQuery(queryGetPrvApnea);
				
// 				if(!BasicUtils.isEmpty(currentApneaList)) {
// 					String queryCurrentApneaEpisode = "Select obj from NursingEpisode as obj where uhid='" + uhid
// 						+ "' and apnea='true' and creationtime >= '" + serverTimeZoneFormat.format(currentApneaList.get(0).getAssessmentTime().getTime()) + "' order by creationtime";
// 					currentEpisodeList = inicuDao.getListFromMappedObjQuery(queryCurrentApneaEpisode);
	
// 				}
// 			}

//             try {
//                 if (prevRespApneaList.get(0).getEventstatus().equalsIgnoreCase("No")) {
//                     apneaObj.setInactiveProgressNote(generateInactiveNotesApnea(null, uhid, "", null));
//                 }
//             } catch (Exception e) {
//                 e.printStackTrace();
//                 logger.error("Exception while generating inactive note for Apnea", e);
//             }
// 		}

// 		// new query added for Caffeine calculation
// 		String queryGetBabyPrescription = "select obj from BabyPrescription as obj where medicinename='Caffeine' and uhid='"
// 				+ uhid + "' order by creationtime desc";
// 		List<BabyPrescription> prevRespAneaListTest = inicuDao.getListFromMappedObjQuery(queryGetBabyPrescription);

// 		SaRespApnea currentApnea = apneaObj.getCurrentApnea();
// 		currentApnea.setAgeinhours(true);
// 		apneaObj.setPastApnea(prevRespApneaList);

// 		if (!(null == prevRespApneaList || prevRespApneaList.isEmpty())) {

// 			SaRespApnea lastObject = prevRespApneaList.get(0);
// 			if (lastObject.getIsProphylacticCaffeineEnabled() != null) {
// 				currentApnea.setIsProphylacticCaffeineEnabled(lastObject.getIsProphylacticCaffeineEnabled());
// 			}

// 			int numberOfmins = 0;
// 			int numberOfSpontaneous = 0;
// 			int numberOfStimulation = 0;
// 			int numberOfPPV = 0;

// 			Iterator<SaRespApnea> itrEvent = prevRespApneaList.iterator();
// 			while (itrEvent.hasNext()) {
// 				SaRespApnea obj = itrEvent.next();
// 				if (lastInactiveTime == null && obj.getEventstatus().equalsIgnoreCase("inactive")) {
// 					lastInactiveTime = obj.getAssessmentTime();
// 					queryApneaEpisode = "Select obj from NursingEpisode as obj where uhid='" + uhid
// 							+ "' and apnea='true' and creationtime >='"
// 							+ serverTimeZoneFormat.format(lastInactiveTime.getTime()) + "' order by creationtime";
// 				} else if (firstAssessmentTime == null && obj.getEventstatus().equalsIgnoreCase("yes")) {
// 					firstAssessmentTime = obj.getAssessmentTime();
// 					if (firstAssessmentTime != null) {
// 						int cummulativeDaysOfApnea = ((Long) ((currentTime.getTime() - firstAssessmentTime.getTime())
// 								/ (24 * 60 * 60 * 1000))).intValue();
// 						apneaObj.setCummulativeDaysOfApnea(cummulativeDaysOfApnea + 1);
// 					}
// 				}
// 				if (firstAssessmentTime != null && lastInactiveTime != null) {
// 					break;
// 				}

// 				String queryInvestigationOrder = "Select obj from InvestigationOrdered obj where uhid='" + uhid
// 						+ "' and assesmentid='" + obj.getApneaid()
// 						+ "' and assesment_type='Apnea' order by creationtime desc";
// 				List<InvestigationOrdered> investigationOrderList = inicuDao
// 						.getListFromMappedObjQuery(queryInvestigationOrder);
// 				ArrayList<String> investOrder = new ArrayList<>();
// 				ArrayList<String> investOrderStrList = new ArrayList<>();
// 				if (!BasicUtils.isEmpty(investigationOrderList)) {
// 					for (InvestigationOrdered order : investigationOrderList) {
// 						if (!BasicUtils.isEmpty(order.getTestslistid())) {
// 							investOrder.add(order.getTestslistid());
// 							investOrderStrList.add(order.getTestname());
// 						}
// 					}
// 					obj.setOrderInvestigationList(investOrder);
// 					obj.setOrderInvestigationStringList(investOrderStrList);
// 				}

// 				// past respiratory support for rds

// 				String queryGetPrvRespSupport = "select obj from RespSupport as obj where uhid= '" + uhid
// 						+ "' and (eventname='apnea' or eventname='Apnea') and eventid='" + obj.getApneaid() + "'";
// 				List<RespSupport> prevRespSupportList = inicuDao.getListFromMappedObjQuery(queryGetPrvRespSupport);
// 				if (!BasicUtils.isEmpty(prevRespSupportList)) {
// 					RespSupport respSupport = prevRespSupportList.get(0);
// 					obj.setRespSupport(respSupport);
// 				}
// 			}

// 			Timestamp lastAssessmentTime = prevRespApneaList.get(0).getAssessmentTime();
// 			numberOfmins = ((Long) ((currentTime.getTime() - lastAssessmentTime.getTime()) / (60 * 1000))).intValue();
// 			apneaObj.setNumberOfHours(numberOfmins);

// 			String queryApneaEpisodeLastAssess = "Select obj from NursingEpisode as obj where uhid='" + uhid
// 					+ "' and apnea='true' and creationtime >='"
// 					+ serverTimeZoneFormat.format(lastAssessmentTime.getTime()) + "' order by creationtime desc";
// 			List<NursingEpisode> pastNursingEpisode = inicuDao.getListFromMappedObjQuery(queryApneaEpisodeLastAssess);

// 			if (pastNursingEpisode != null) {
// 				for (NursingEpisode obj : pastNursingEpisode) {
// 					System.out.println(obj.getCreationtime() + "offset Episode");
// 					obj.setCreationtime(new Timestamp(obj.getCreationtime().getTime() - offset));
// 				}
// 			}

// 			if (!BasicUtils.isEmpty(pastNursingEpisode)) {
// 				Iterator<NursingEpisode> itrEpisode = pastNursingEpisode.iterator();

// 				while (itrEpisode.hasNext()) {
// 					NursingEpisode obj = itrEpisode.next();
// 					if (null != obj.getRecovery()) {
// 						if (obj.getRecovery().equalsIgnoreCase("Spontaneous")) {
// 							numberOfSpontaneous++;
// 						} else if (obj.getRecovery().equalsIgnoreCase("Physical stimulation")) {
// 							numberOfStimulation++;
// 						} else {
// 							numberOfPPV++;
// 						}
// 					}
// 				}
// 			}

// 			// apneaObj.setNumberOfEpisode(pastNursingEpisode.size());
// 			apneaObj.setNumberOfSpontaneous(numberOfSpontaneous);
// 			apneaObj.setNumberOfStimulation(numberOfStimulation);
// 			apneaObj.setNumberOfPPV(numberOfPPV);

// 			// past respiratory support for apnea
// 			String queryGetPrvRespSupport = "select obj from RespSupport as obj where uhid= '" + uhid
// 					+ "' and eventname='apnea'";
// 			List<RespSupport> prevRespSupportList = inicuDao.getListFromMappedObjQuery(queryGetPrvRespSupport);
// 			if (!(null == prevRespSupportList || prevRespSupportList.isEmpty())) {
// 				Iterator<RespSupport> itrResp = prevRespSupportList.iterator();
// 				while (itrResp.hasNext()) {
// 					RespSupport obj = itrResp.next();
// 					apneaObj.getPastRespSupportMap().put(obj.getEventid(), obj);
// 				}
// 			}
// 		}

// 		int currentAgeOnset = 0;
// 		try {
// 			HashMap<Object, Object> babyInfo = getBabyInformation(uhid);
// 			if (babyInfo.get(BasicConstants.AGE_AT_ONSET) != null) {
// 				currentAgeOnset = ((Long) babyInfo.get(BasicConstants.AGE_AT_ONSET)).intValue();
// 			}
// 		} catch (Exception e) {
// 			e.printStackTrace();
// 		}

// 		List<NursingEpisode> pastNursingEpisode = inicuDao.getListFromMappedObjQuery(queryApneaEpisode);
// 		if (!BasicUtils.isEmpty(pastNursingEpisode)) {
// 			for (NursingEpisode obj : pastNursingEpisode) {
// 				System.out.println(obj.getCreationtime() + "offset Episode");
// 				obj.setCreationtime(new Timestamp(obj.getCreationtime().getTime() - offset));
// 			}
// 		}
// 		apneaObj.setPastNursingEpisode(Lists.reverse(pastNursingEpisode));
// 		if (BasicUtils.isEmpty(prevRespApneaList)
// 				|| prevRespApneaList.get(0).getEventstatus().equalsIgnoreCase("Inactive")) {

// 			currentApnea.setAgeatonset(currentAgeOnset + "");
// 			currentApnea.setAgeinhours(true);
// 		} else { // continue visit
// 			currentApnea.setAgeatonset(prevRespApneaList.get(0).getAgeatonset());
// 			currentApnea.setAgeinhours(prevRespApneaList.get(0).getAgeinhours());

// 			Timestamp yesterdayTime = new Timestamp(new Date().getTime() - (24 * 60 * 60 * 1000));
// 			System.out.println("Today time .." + new Date() + "Yesterday time" + yesterdayTime);
// 			String queryApneaEpisodeDay = "Select obj from NursingEpisode as obj where uhid='" + uhid
// 					+ "' and apnea='true' and creationtime>='" + yesterdayTime + "' order by creationtime desc";
// 			List<NursingEpisode> pastNursingEpisodeDay = inicuDao.getListFromMappedObjQuery(queryApneaEpisodeDay);

// 			if (!(pastNursingEpisodeDay == null || pastNursingEpisodeDay.isEmpty())) {
// 				// apneaObj.setPastNursingEpisode(pastNursingEpisodeDay);
// 				// currentApnea.setNoOfApneaInaDay(pastNursingEpisodeDay.size());
// 			} else {
// 				// currentApnea.setNoOfApneaInaDay(0);
// 			}
// 		}

// 		currentApnea.setAgeatassesment(currentAgeOnset);
// 		currentApnea.setIsageofassesmentinhours(true);

// 		if (!(currentEpisodeList == null || currentEpisodeList.isEmpty())) {
// 			currentApnea.setTotalnoofapnea(currentEpisodeList.size());
// 			currentApnea.setCummulative_number_of_episodes(currentEpisodeList.size());
// 		} else {
// 			apneaObj.setApneaEvent(true);
// 			currentApnea.setTotalnoofapnea(0);
// 			currentApnea.setCummulative_number_of_episodes(0);
// 		}

// 		int cummulative_apnea_free_on_caffeine = 0;
// 		int continuous_apnea_free_on_caffeine = 0;
// 		int cummulative_apnea_free_after_caffeine = 0;
// 		int cummulative_days_of_caffeine = 0;
// 		int caffeineStartHrs = 0;
// 		int caffeineStopHrs = currentAgeOnset;
// 		boolean caffeineFlag = true;
// 		boolean calFlag = true;
// 		int babyDOB = 0;

// 		String queryGetBabyPrescriptionTest = "select obj from BabyPrescription as obj where medicinename='Caffeine' and uhid='"
// 				+ uhid + "' order by creationtime desc";
// 		List<BabyPrescription> prevRespAneaTest = inicuDao.getListFromMappedObjQuery(queryGetBabyPrescription);

// 		String getDOB = "select obj from BabyDetail as obj where uhid='" + uhid + "' order by creationtime desc";
// 		List<BabyDetail> babyDetailResult = inicuDao.getListFromMappedObjQuery(getDOB);
	
// 		BabyDetail dobResult = babyDetailResult.get(0);
// 		boolean isCaffeineStarted = false;
// 		Long maxEndTime = (long) -1;
		
// 		for (int index = 0; index < prevRespAneaTest.size(); index++) {

// //			SaRespApnea apnea = prevRespApneaList.get(index);
// 			BabyPrescription apneaCaffeine = prevRespAneaTest.get(index);// new object added
// //			BabyDetail dobResult = babyDetailResult.get(0);
			

// 			SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
// 			SimpleDateFormat sdfWithoutHours = new SimpleDateFormat("yyyy/MM/dd");
// 			// getting start time in milliseconds (caffeineStartHrs) from BabyPrescription
// 			// table
// //		
// //				Date date = sdf.parse(apneaCaffeine.getStartdate().toString());
// //				Date dateDOB = sdfWithoutHours.parse(dobResult.getDateofbirth().toString());

// //				caffeineStartHrs = (int) date.getTime();
// //				babyDOB = (int) dateDOB.getTime();

// 			caffeineStartHrs = (int) (apneaCaffeine.getStartdate().getTime() - dobResult.getDateofbirth().getTime())
// 					/ (1000 * 60 * 60);

// 			// getting end time in milliseconds (caffeineStopHrs) from BabyPrescription
// 			// table

// //				Date date = sdf.parse(apneaCaffeine.getEnddate().toString());
// //				Date dateDOB = sdfWithoutHours.parse(dobResult.getDateofbirth().toString());

// //				caffeineStopHrs = (int) date.getTime();
// //				babyDOB = (int) dateDOB.getTime();
// 			if (apneaCaffeine.getEnddate() != null) {
// 				caffeineStopHrs = (int)(apneaCaffeine.getEnddate().getTime() - dobResult.getDateofbirth().getTime()) / (1000 * 60 * 60);
// 				if (caffeineStopHrs >= caffeineStartHrs) {
// 					cummulative_days_of_caffeine += ((caffeineStopHrs - caffeineStartHrs) / 24);
// 				}
// 				if(apneaCaffeine.getEnddate().getTime() > maxEndTime)
// 					maxEndTime = apneaCaffeine.getEnddate().getTime();
// 			}
// 			else {
// 				caffeineStopHrs = 0;
// 				isCaffeineStarted = true;
// 				cummulative_days_of_caffeine += ((currentAgeOnset - caffeineStartHrs) / 24);
// 			}
		

// 		}
// 		if(!isCaffeineStarted && maxEndTime > 0) {
// 			String queryLastApneaEpisodeAfterCaffeine = "Select obj from NursingEpisode as obj where uhid='" + uhid
// 					+ "' and apnea='true' and creationtime >= '" + serverTimeZoneFormat.format(maxEndTime) + "' order by creationtime desc";
// 				List<NursingEpisode> pastEpisodeListAfterCaffeine = inicuDao.getListFromMappedObjQuery(queryLastApneaEpisodeAfterCaffeine);
// 				if(!BasicUtils.isEmpty(pastEpisodeListAfterCaffeine)) {
// 					cummulative_apnea_free_after_caffeine = (int) ((currentTime.getTime() - pastEpisodeListAfterCaffeine.get(0).getCreationtime().getTime()) / (24 * 60 * 60 * 1000));
// 				}else {
// 					cummulative_apnea_free_after_caffeine = (int) ((currentTime.getTime() - maxEndTime) / (24 * 60 * 60 * 1000));
// 				}
			
// 		}else {
// 			cummulative_apnea_free_after_caffeine = 0;
// 		}
// 		try {

// 			Date caffiene_start_time = null;
// 			Date caffiene_stop_time = null;

// 			String caffieneStartStr = null;
// 			String caffieneStopStr = null;

// 			String queryGetBabyPrescriptionTest2 = "select obj from BabyPrescription as obj where medicinename='Caffeine' and uhid='"
// 					+ uhid + "' order by creationtime desc";

// 			List<BabyPrescription> prevRespAneaTest2 = inicuDao.getListFromMappedObjQuery(queryGetBabyPrescription);

// 			for (int index = prevRespAneaTest2.size() - 1; index >= 0; index--) {
// 				// SaRespApnea apnea = prevRespApneaList.get(index);
// 				BabyPrescription apneaCaffeine = prevRespAneaTest.get(index);// new object added

// 				caffieneStartStr = serverTimeZoneFormat.format(apneaCaffeine.getStartdate());
// 				caffiene_start_time = serverTimeZoneFormat.parse(caffieneStartStr);

// 				if(apneaCaffeine.getEnddate() != null) {
// 					caffieneStopStr = serverTimeZoneFormat.format(apneaCaffeine.getEnddate());
// 					caffiene_stop_time = serverTimeZoneFormat.parse(caffieneStopStr);
// 				}
				
				

// 				if (null == caffieneStopStr && index == 0) {
// 					caffieneStopStr = new Timestamp(System.currentTimeMillis()).toString();
// 					caffiene_stop_time = serverTimeZoneFormat.parse(caffieneStopStr);
// 				}

// 				if (caffiene_start_time != null && caffiene_stop_time != null) {
					
// 					String queryApnea = "Select obj from NursingEpisode as obj where uhid='" + uhid
// 							+ "' and apnea='true' and creationtime between '" + caffieneStartStr + "' and '"
// 							+ caffieneStopStr + "'";
// 					List<NursingEpisode> apneaEvent = inicuDao.getListFromMappedObjQuery(queryApnea);
// 					if (BasicUtils.isEmpty(apneaEvent)) {
// 						Long timeDiff = (caffiene_stop_time.getTime() - caffiene_start_time.getTime());
// 						continuous_apnea_free_on_caffeine = ((Long) (timeDiff / (24 * 60 * 60 * 1000))).intValue() + 1;

// 						cummulative_apnea_free_on_caffeine += continuous_apnea_free_on_caffeine;
// 					}else {
// 						for (int i = 0; i < apneaEvent.size(); i++) {
// 							if (i == apneaEvent.size() - 1) {
// 								if ((apneaEvent.get(i).getCreationtime().getTime()
// 										- caffiene_start_time.getTime()) > (24 * 60 * 60 * 1000)) {
// 									continuous_apnea_free_on_caffeine = ((Long) ((apneaEvent.get(i).getCreationtime()
// 											.getTime() - caffiene_start_time.getTime()) / (24 * 60 * 60 * 1000)))
// 													.intValue();
// 									cummulative_apnea_free_on_caffeine += continuous_apnea_free_on_caffeine;

// 									caffieneStartStr = serverTimeZoneFormat.format(apneaEvent.get(i).getCreationtime());
// 									caffiene_start_time = serverTimeZoneFormat.parse(caffieneStartStr);
// 								}
// 								if ((caffiene_stop_time.getTime() - apneaEvent.get(i).getCreationtime().getTime()) > (24
// 										* 60 * 60 * 1000)) {
// 									continuous_apnea_free_on_caffeine = ((Long) ((caffiene_stop_time.getTime()
// 											- apneaEvent.get(i).getCreationtime().getTime()) / (24 * 60 * 60 * 1000)))
// 													.intValue();
// 									cummulative_apnea_free_on_caffeine += continuous_apnea_free_on_caffeine;
// 								}
// 							} else if ((apneaEvent.get(i).getCreationtime().getTime()
// 									- caffiene_start_time.getTime()) > (24 * 60 * 60 * 1000)) {
// 								continuous_apnea_free_on_caffeine = ((Long) ((apneaEvent.get(i).getCreationtime()
// 										.getTime() - caffiene_start_time.getTime()) / (24 * 60 * 60 * 1000)))
// 												.intValue();
// 								cummulative_apnea_free_on_caffeine += continuous_apnea_free_on_caffeine;

// 								caffieneStartStr = serverTimeZoneFormat.format(apneaEvent.get(i).getCreationtime());
// 								caffiene_start_time = serverTimeZoneFormat.parse(caffieneStartStr);
// 							}
// 						}
// 					}
// 					caffiene_start_time = null;
// 					caffiene_stop_time = null;

// 				} else {
// 					continue;
// 				}
// 			}
// 		} catch (Exception e) {
// 			e.printStackTrace();

// 			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER, "sourabh_verma@oxyent.com" };
// 			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, "", uhid,
// 					"Caffeine calculation", BasicUtils.convertErrorStacktoString(e));
// 		}

// 		if (0 == continuous_apnea_free_on_caffeine) {
// 			continuous_apnea_free_on_caffeine = 0;
// 		}
// 		currentApnea.setCummulative_apnea_on_caffeine(cummulative_apnea_free_on_caffeine);
// 		currentApnea.setContinuous_apnea_on_caffeine(continuous_apnea_free_on_caffeine);
// 		currentApnea.setApnea_free_days_after_caffeine(cummulative_apnea_free_after_caffeine);

// 		if (0 == cummulative_days_of_caffeine) {
// 			currentApnea.setCummulative_days_of_caffeine(0);
// 		} else {
// 			currentApnea.setCummulative_days_of_caffeine(cummulative_days_of_caffeine);
// 		}

// 		// current apnea setting manual age at assessment to today
// 		Date todayDate = new Date();
// 		// joundiceCurrent.setAssessmentDate(todayDate);
// 		currentApnea.setAssessmentTime(new Timestamp(System.currentTimeMillis()));
// 		int todayHours = todayDate.getHours();
// 		int todayMins = todayDate.getMinutes();

// 		if (todayHours > 12) {
// 			todayHours -= 12;
// 			currentApnea.setAssessmentMeridiem(false);
// 			if (todayHours < 10)
// 				currentApnea.setAssessmentHour("0" + Integer.toString(todayHours));
// 			else
// 				currentApnea.setAssessmentHour(Integer.toString(todayHours));
// 		} else {
// 			currentApnea.setAssessmentMeridiem(true);
// 			if (todayHours < 10)
// 				currentApnea.setAssessmentHour("0" + Integer.toString(todayHours));
// 			else
// 				currentApnea.setAssessmentHour(Integer.toString(todayHours));
// 		}
// 		if (todayMins < 10)
// 			currentApnea.setAssessmentMin("0" + Integer.toString(todayMins));
// 		else
// 			currentApnea.setAssessmentMin(Integer.toString(todayMins));

// 		System.out.println(currentApnea);

// 		return apneaObj;
// 	}

	private AssessmentRespSystemPOJO calculationApneaDetail(AssessmentRespSystemPOJO respSystem) throws ParseException {

		ApneaPOJO apneaObj = respSystem.getRespSystemObject().getApnea();
		SaRespApnea currentApnea = apneaObj.getCurrentApnea();
		List<SaRespApnea> prevRespApneaList = apneaObj.getPastApnea();
		Timestamp assessmentTime = currentApnea.getAssessmentTime();
		int currentAgeOnset = currentApnea.getAgeatassesment();
		if (!currentApnea.getIsageofassesmentinhours()) {
			currentAgeOnset *= 24;
		}

		Timestamp lastInactiveTime = null;
		Timestamp firstAssessmentTime = null;
		ListIterator<SaRespApnea> itrEvent = prevRespApneaList.listIterator(prevRespApneaList.size());
		while (itrEvent.hasPrevious()) {
			SaRespApnea obj = itrEvent.previous();
			if (lastInactiveTime == null && obj.getEventstatus().equalsIgnoreCase("inactive")) {
				lastInactiveTime = obj.getAssessmentTime();
			} else if (firstAssessmentTime == null && obj.getEventstatus().equalsIgnoreCase("yes")) {
				firstAssessmentTime = obj.getAssessmentTime();
				if (firstAssessmentTime != null) {
					int cummulativeDaysOfApnea = ((Long) ((assessmentTime.getTime() - firstAssessmentTime.getTime())
							/ (24 * 60 * 60 * 1000))).intValue();
					apneaObj.setCummulativeDaysOfApnea(cummulativeDaysOfApnea + 1);
				}
			}
			if (firstAssessmentTime != null && lastInactiveTime != null) {
				break;
			}
		}

		Integer cummulative_days_of_caffeine = null;
		int caffeineStartHrs = 0;
		int caffeineStopHrs = currentAgeOnset;
		boolean calFlag = true;
		for (int index = 0; index < prevRespApneaList.size(); index++) {
			SaRespApnea apnea = prevRespApneaList.get(index);
			if (apnea.getEventstatus().equalsIgnoreCase("inactive")) {
				calFlag = false;
			}
			if (calFlag && apnea.getEventstatus().equalsIgnoreCase("yes")) {
				if (null != apnea.getActiontype() && apnea.getActiontype().contains("TRE008")
						&& null != apnea.getCaffeineAction()) {
					if (apnea.getCaffeineAction().equalsIgnoreCase("Start")) {
						if (null == cummulative_days_of_caffeine) {
							cummulative_days_of_caffeine = 0;
						}
						if (apnea.getIsageofassesmentinhours()) {
							caffeineStartHrs = apnea.getAgeatassesment();
						} else {
							caffeineStartHrs = apnea.getAgeatassesment() * 24;
						}

						if (caffeineStopHrs >= caffeineStartHrs) {
							cummulative_days_of_caffeine += ((caffeineStopHrs - caffeineStartHrs) / 24);
						} else {
							cummulative_days_of_caffeine += ((currentAgeOnset - caffeineStartHrs) / 24);
						}
					} else if (apnea.getCaffeineAction().equalsIgnoreCase("Stop")) {
						if (apnea.getIsageofassesmentinhours()) {
							caffeineStopHrs = apnea.getAgeatassesment();
						} else {
							caffeineStopHrs = apnea.getAgeatassesment() * 24;
						}
					}
				}
			}
		}

		if (null == cummulative_days_of_caffeine) {
			currentApnea.setCummulative_days_of_caffeine(0);
		} else {
			currentApnea.setCummulative_days_of_caffeine(cummulative_days_of_caffeine + 1);
		}
		return respSystem;
	}

	@SuppressWarnings("unchecked")
	private RespSysOtherPOJO getRespiratoryOtherObj(String uhid) {
		RespSysOtherPOJO otherObj = new RespSysOtherPOJO();

		String queryRespOtherPast = "Select obj from SaRespOther obj where uhid='" + uhid
				+ "' order by creationtime desc";
		List<SaRespOther> pastOtherList = inicuDao.getListFromMappedObjQuery(queryRespOtherPast);
		otherObj.setPastOtherList(pastOtherList);

		for (int index = 0; index < pastOtherList.size(); index++) {
			SaRespOther other = pastOtherList.get(index);

			String queryInvestigationOrder = "Select obj from InvestigationOrdered obj where uhid='" + uhid
					+ "' and assesmentid='" + other.getRespotherid()
					+ "' and assesment_type='other' order by creationtime desc";
			List<InvestigationOrdered> investigationOrderList = inicuDao
					.getListFromMappedObjQuery(queryInvestigationOrder);
			ArrayList<String> investOrder = new ArrayList<>();
			if (!BasicUtils.isEmpty(investigationOrderList)) {
				for (InvestigationOrdered order : investigationOrderList) {
					if (!BasicUtils.isEmpty(order.getTestname())) {
						investOrder.add(order.getTestname());
					}
				}
				other.setOrderInvestigationList(investOrder);
			}
		}

		// past respiratory support for other
		if (!(null == pastOtherList || pastOtherList.isEmpty())) {
			String queryGetPrvRespSupport = "select obj from RespSupport as obj where uhid= '" + uhid
					+ "' and eventname='other'";
			List<RespSupport> prevRespSupportList = inicuDao.getListFromMappedObjQuery(queryGetPrvRespSupport);
			if (!(null == prevRespSupportList || prevRespSupportList.isEmpty())) {
				Iterator<RespSupport> itr = prevRespSupportList.iterator();
				while (itr.hasNext()) {
					RespSupport obj = itr.next();
					otherObj.getPastRespSupportMap().put(obj.getEventid(), obj);
				}
			}
		}

		SaRespOther currentOther = new SaRespOther();
		HashMap<Object, Object> babyInfo = getBabyInformation(uhid);
		if (babyInfo.get(BasicConstants.AGE_AT_ONSET) != null) {
			currentOther.setIsageofassesmentinhours(true);
			currentOther.setAgeatassesment(Integer.parseInt(babyInfo.get(BasicConstants.AGE_AT_ONSET).toString()));
		}

		if (!BasicUtils.isEmpty(pastOtherList)) {
			SaRespOther respOtherPast = pastOtherList.get(0);
			// currentResp = new SaRespRds();
			currentOther.setAgeinhours(true);
			currentOther.setEventstatus(respOtherPast.getEventstatus());

			if (!respOtherPast.getEventstatus().equalsIgnoreCase("inactive")) {
				currentOther.setAgeatonset(respOtherPast.getAgeatonset());
				currentOther.setAgeinhours(respOtherPast.getAgeinhours());
			} else {
				try {
					if (babyInfo.get(BasicConstants.AGE_AT_ONSET) != null) {
						currentOther.setAgeatonset(babyInfo.get(BasicConstants.AGE_AT_ONSET).toString());
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			otherObj.setCurrentOther(currentOther);
		} else {
			// currentResp = new SaRespRds();
			currentOther.setAgeinhours(true);
			otherObj.setCurrentOther(currentOther);
			try {
				if (babyInfo.get(BasicConstants.AGE_AT_ONSET) != null) {
					currentOther.setAgeatonset(babyInfo.get(BasicConstants.AGE_AT_ONSET).toString());
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		return otherObj;
	}

	@SuppressWarnings("unchecked")
	@Override
	public AssessmentCNSSystemPOJO getCnsSystemObj(String uhid, String loggedUser, String eventName) {

		AssessmentCNSSystemPOJO cnsObj = new AssessmentCNSSystemPOJO();
		CNSSystemEventPOJO cnsSystemEventObj = new CNSSystemEventPOJO();
		cnsObj.setCNSEventObject(cnsSystemEventObj);
		Object ageAtOnset = 0;

		String queryCurrentBabyVisit = "select obj from BabyVisit as obj where uhid='" + uhid
				+ "' order by creationtime desc";
		List<BabyVisit> currentBabyVisitList = inicuDao.getListFromMappedObjQuery(queryCurrentBabyVisit);
		if (currentBabyVisitList != null && currentBabyVisitList.size() > 0) {
			Float weight = currentBabyVisitList.get(0).getWorkingweight();
			if (weight != null) {
				weight = weight / 1000;
				cnsObj.setWorkingWeight(weight + "");
			} else {
				cnsObj.setWorkingWeight(weight + "");
			}
		}
		try {
			cnsObj.setDropDowns(getCnsSystemDropdowns(uhid));

			// get respiratory usage.....
			String queryRespUsage = "select obj from VwRespiratoryUsageFinal obj where uhid='" + uhid + "'";
			List<VwRespiratoryUsageFinal> respUsageList = inicuDao.getListFromMappedObjQuery(queryRespUsage);
			cnsSystemEventObj.getCommonEventsInfo().setRespUsage(respUsageList);

			cnsObj.getCNSEventObject().getCommonEventsInfo().setPastCnsHistory(getCnsPastHistory(uhid));

			// getTodayLastRespSupport
			cnsSystemEventObj.getCommonEventsInfo().setRespSupport(getLastRespSupport(uhid));

//			// current medicine list
//			String queryMedicine = "select obj from BabyPrescription as obj where uhid='" + uhid
//					+ "' and isactive ='true' order by startdate desc";
//			List<BabyPrescription> listBabyPrescription = inicuDao.getListFromMappedObjQuery(queryMedicine);
			DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date currentDate1 = new Date();
			System.out.println(dateFormat.format(currentDate1));
			String currentDateFinal = dateFormat.format(currentDate1);

			String calDate = CalculateDate48HoursAgo(currentDate1);
			cnsSystemEventObj.getCommonEventsInfo()
					.setPastPrescriptionList(getPastPrescriptionList(uhid, calDate, currentDateFinal));

			HashMap<Object, Object> babyBasicInformation = getBabyInformation(uhid);
			ageAtOnset = babyBasicInformation.get(BasicConstants.AGE_AT_ONSET);
			cnsObj.setAgeAtOnset(ageAtOnset.toString());
		} catch (Exception e) {
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser, uhid,
					"Getting CNS drop downs ", BasicUtils.convertErrorStacktoString(e));
		}

		// levene score structure
		try {
			cnsSystemEventObj.getCommonEventsInfo().setLeveneObj(getLeveneScore(null));
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		// seizures
		try {
			Timestamp lastInactiveTime = null;
			Timestamp lastAssessmentTime = null;
			String querySeziuresEpisode = "Select obj from NursingEpisode as obj where uhid='" + uhid
					+ "' and seizures='true' order by creationtime desc";
			SimpleDateFormat serverTimeZoneFormat = CalendarUtility
					.getTimeStampFormat(CalendarUtility.SERVER_CRUD_OPERATION);

			SeizuresEventPOJO seizuresEventObj = new SeizuresEventPOJO();
			SaCnsSeizures currentSeizures = seizuresEventObj.getCurrentEvent().getCurrentSeizures();

			String queryGetSeizures = "select obj from SaCnsSeizures as obj where uhid='" + uhid
					+ "' order by assessment_time desc, sacnsseizuresid desc";
			List<SaCnsSeizures> listSeizures = inicuDao.getListFromMappedObjQuery(queryGetSeizures);

			currentSeizures.setAgeatassesment(((Long) ageAtOnset).intValue());
			currentSeizures.setIsageofassesmentinhours(true);

			if (!BasicUtils.isEmpty(listSeizures)) {

				lastAssessmentTime = listSeizures.get(0).getAssessmentTime();

				if (listSeizures.get(0).getEventstatus().equalsIgnoreCase("Inactive")) {
					currentSeizures.setAgeatonset(ageAtOnset + "");
					currentSeizures.setAgeinhoursdays(true);
					lastInactiveTime = listSeizures.get(0).getAssessmentTime();
				} else {
					currentSeizures.setAgeatonset(listSeizures.get(0).getAgeatonset());
					currentSeizures.setAgeinhoursdays(listSeizures.get(0).getAgeinhoursdays());

					Iterator<SaCnsSeizures> itrEvent = listSeizures.iterator();
					while (itrEvent.hasNext()) {
						SaCnsSeizures obj = itrEvent.next();
						if (lastInactiveTime == null && obj.getEventstatus().equalsIgnoreCase("inactive")) {
							lastInactiveTime = obj.getAssessmentTime();
							break;
						}
					}
				}

				if (lastInactiveTime != null) {
					querySeziuresEpisode = "Select obj from NursingEpisode as obj where uhid='" + uhid
							+ "' and seizures='true' and creationtime >='"
							+ serverTimeZoneFormat.format(lastInactiveTime.getTime()) + "' order by creationtime desc";
				}

				String eventStatus = listSeizures.get(0).getEventstatus();

				if (!BasicUtils.isEmpty(eventStatus) && eventStatus.equalsIgnoreCase(BasicConstants.YES)) {
					cnsSystemEventObj.setEventName(BasicConstants.SEIZURES);
				}

				currentSeizures.setEventstatus(listSeizures.get(0).getEventstatus());

				if (!BasicUtils.isEmpty(listSeizures)) {
					for (int index = 0; index < listSeizures.size(); index++) {
						SaCnsSeizures saCns = listSeizures.get(index);

						if (!BasicUtils.isEmpty(saCns.getTreatmentSelectedText())) {
							String queryGetPrvRespSupport = "select obj from RespSupport as obj where uhid= '" + uhid
									+ "' and eventname='Seizures' and eventid='" + saCns.getSacnsseizuresid() + "'"
									+ " order by creationtime desc";
							List<RespSupport> prevRespSupportList = inicuDao
									.getListFromMappedObjQuery(queryGetPrvRespSupport);
							if (!BasicUtils.isEmpty(prevRespSupportList)) {
								RespSupport respSupport = prevRespSupportList.get(0);
								saCns.setRespSupport(respSupport);
							}
						}

						String queryPastPrescriptionList = "select obj from BabyPrescription as obj where isactive='true' and uhid='"
								+ uhid + "' and eventid='" + saCns.getSacnsseizuresid()
								+ "' and eventname='Seizures' order by creationtime desc";
						List<BabyPrescription> pastPrescriptionList = inicuDao
								.getListFromMappedObjQuery(queryPastPrescriptionList);
						if (!BasicUtils.isEmpty(pastPrescriptionList)) {
							saCns.setBabyPrescription(pastPrescriptionList);
						}
					}
				}

				seizuresEventObj.getPastEvents().setPastSeizuresEvents(listSeizures);

				// get all investigation orders..
				String queryInvestigationOrdered = "select obj from InvestigationOrdered as obj where uhid='" + uhid
						+ "' and assesment_type = 'Seizures'";
				List<InvestigationOrdered> listPastInvestigations = inicuDao
						.getListFromMappedObjQuery(queryInvestigationOrdered);
				seizuresEventObj.getPastEvents().setPastInvestigations(listPastInvestigations);
			} else {
				currentSeizures.setAgeatonset(ageAtOnset + "");
				currentSeizures.setAgeinhoursdays(true);
			}

			List<NursingEpisode> pastEpisodeList = inicuDao.getListFromMappedObjQuery(querySeziuresEpisode);
			seizuresEventObj.getPastEvents().setPastEpisodeList(pastEpisodeList);

			if (null == lastAssessmentTime) {
				currentSeizures.setNoofseizures(pastEpisodeList.size() + "");
			} else {
				String queryAssessmentSeziuresEpisode = "Select obj from NursingEpisode as obj where uhid='" + uhid
						+ "' and seizures='true' and creationtime >='"
						+ serverTimeZoneFormat.format(lastAssessmentTime.getTime()) + "' order by creationtime desc";
				List<NursingEpisode> pastAssessmentEpisodeList = inicuDao
						.getListFromMappedObjQuery(queryAssessmentSeziuresEpisode);
				currentSeizures.setNoofseizures(pastAssessmentEpisodeList.size() + "");
			}
			
			List<BabyPrescription> prescriptionList = cnsSystemEventObj.getSeizuresEvent()
					.getPrescriptionList();
			String continuedMedication = "";
			if (!BasicUtils.isEmpty(prescriptionList)) {
				for (int i = 0; i < prescriptionList.size(); i++) {
					BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
					if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
							&& babyPrescription.getContinueReason() != null && babyPrescription.getIsactive()) {
						continuedMedication += babyPrescription.getMedicinename() + " ";
						if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
							continuedMedication += babyPrescription.getDose() + "("
									+ babyPrescription.getDose_unit() + "/"
									+ babyPrescription.getDose_unit_time() + ") ";
						}
						continuedMedication += "prescribed on "
								+ getDateFromTimestamp(babyPrescription.getStartdate())
								+ " and continued due to " + babyPrescription.getContinueReason() + ". ";
					}
				}
				this.savePrescriptionList(null, prescriptionList, "Seizures", null,
						currentSeizures.getAssessmentTime());
			}
			
			if (currentSeizures.getEventstatus()!=null && currentSeizures.getEventstatus().equalsIgnoreCase("No")) {
				seizuresEventObj.setInactiveProgressNote(generateInactiveNotesSeizure(null, uhid, continuedMedication,""));
            }

			cnsSystemEventObj.setSeizuresEvent(seizuresEventObj);
		} catch (Exception ex) {
			ex.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser, uhid,
					"Getting Seizures ", BasicUtils.convertErrorStacktoString(ex));
		}

		// IVH
		try {
			IVHEventPOJO ivhEventObj = new IVHEventPOJO();
			SaCnsIvh currentIvh = ivhEventObj.getCurrentEvent().getCurrentIvh();

			if (!BasicUtils.isEmpty(ageAtOnset)) {
				currentIvh.setAgeatonset(ageAtOnset.toString());
				currentIvh.setAgeinhoursdays(true);
				currentIvh.setAgeatassesment(((Long) ageAtOnset).intValue());
				currentIvh.setIsageofassesmentinhours(true);
			}

			String queryGetIvh = "select obj from SaCnsIvh as obj where uhid='" + uhid
					+ "' order by creationtime desc, id desc";
			List<SaCnsIvh> listIvh = inicuDao.getListFromMappedObjQuery(queryGetIvh);

			if (!BasicUtils.isEmpty(listIvh)) {

				String eventStatus = listIvh.get(0).getEventstatus();
				if (!BasicUtils.isEmpty(eventStatus) && eventStatus.equalsIgnoreCase(BasicConstants.YES)) {
					cnsSystemEventObj.setEventName(BasicConstants.IVH);
				}
//				if (listIvh.get(0).getEventstatus().equalsIgnoreCase(BasicConstants.INACTIVE)) {
//					if (!BasicUtils.isEmpty(ageAtOnset)) {
//						currentIvh.setAgeatonset(ageAtOnset.toString());
//						currentIvh.setAgeinhoursdays(true);
//					}
//				} else {
//
//					currentIvh.setAgeatonset(listIvh.get(0).getAgeatonset());
//					currentIvh.setAgeinhoursdays(listIvh.get(0).getAgeinhoursdays());
//
//				}
				currentIvh.setEventstatus(listIvh.get(0).getEventstatus());

				//currentIvh.setEventstatus(listIvh.get(0).getEventstatus());
				ivhEventObj.getPastEvents().setPastIvhEvent(listIvh);

				if (!BasicUtils.isEmpty(listIvh.get(0).getVolpescoreId())) {
					cnsObj.getCNSEventObject().getCommonEventsInfo()
							.setPastIvhScore(getLastIvhScore(uhid, listIvh.get(0).getVolpescoreId()));
				}

				if (!BasicUtils.isEmpty(listIvh.get(0).getPapilescoreId())) {
					cnsObj.getCNSEventObject().getCommonEventsInfo()
							.setPastPapileScore(getLastPapileScore(uhid, listIvh.get(0).getPapilescoreId()));
				}

				// get all investigation orders..
				String queryInvestigationOrdered = "select obj from InvestigationOrdered as obj where uhid='" + uhid
						+ "' and assesment_type = 'IVH'";
				List<InvestigationOrdered> listPastInvestigations = inicuDao
						.getListFromMappedObjQuery(queryInvestigationOrdered);
				ivhEventObj.getPastEvents().setPastInvestigations(listPastInvestigations);
			}

			cnsSystemEventObj.setIvhEvent(ivhEventObj);
		} catch (Exception ex) {
			ex.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser, uhid,
					"Getting IVH ", BasicUtils.convertErrorStacktoString(ex));
		}

		// asphyxia
		try {
			AsphyxiaEventPOJO asphyxiaEventObj = new AsphyxiaEventPOJO();
			SaCnsAsphyxia currentAsphyxia = asphyxiaEventObj.getCurrentEvent().getSaCnsAsphyxia();

			if (!BasicUtils.isEmpty(ageAtOnset)) {
				currentAsphyxia.setAgeatonset(ageAtOnset.toString());
				currentAsphyxia.setAgeinhoursdays(true);
				currentAsphyxia.setAgeatassesment(((Long) ageAtOnset).intValue());
				currentAsphyxia.setIsageofassesmentinhours(true);
			}

			List<SaCnsAsphyxia> list = getAsphyxiaRiskFactorList(uhid);

			if (!BasicUtils.isEmpty(list)) {
				SaCnsAsphyxia currentAsphyxia2 = getAsphyxiaRiskFactorList(uhid).get(0);
				String risk = currentAsphyxia2.getRiskfactor();
				currentAsphyxia.setRiskfactor(risk);
			}

			String queryGetAsphyxia = "select obj from SaCnsAsphyxia as obj where uhid='" + uhid
					+ "' order by assessment_time desc, sacnsasphyxiaid desc";
			List<SaCnsAsphyxia> listAsphyxia = inicuDao.getListFromMappedObjQuery(queryGetAsphyxia);

			if (!BasicUtils.isEmpty(listAsphyxia)) {
				SaCnsAsphyxia lastObject=listAsphyxia.get(0);
				String eventStatus = listAsphyxia.get(0).getEventstatus();

				if (!lastObject.getEventstatus().equalsIgnoreCase(BasicConstants.INACTIVE)) {
					if(!BasicUtils.isEmpty(lastObject.getAgeatonset())) {
						currentAsphyxia.setAgeatonset(lastObject.getAgeatonset().toString());
						currentAsphyxia.setAgeinhoursdays(lastObject.getAgeinhoursdays());
					}
				}

				if (!BasicUtils.isEmpty(eventStatus) && eventStatus.equalsIgnoreCase(BasicConstants.YES)) {
					cnsSystemEventObj.setEventName(BasicConstants.ASPHYXIA);
				}
				currentAsphyxia.setEventstatus(listAsphyxia.get(0).getEventstatus());

				if (!BasicUtils.isEmpty(listAsphyxia)) {
					for (int index = 0; index < listAsphyxia.size(); index++) {
						SaCnsAsphyxia saCns = listAsphyxia.get(index);
						if (!BasicUtils.isEmpty(saCns.getDownesscoreid())) {
							String fetchDownesScore = "SELECT obj FROM ScoreDownes as obj where uhid='" + uhid
									+ "' and downesscoreid='" + saCns.getDownesscoreid()
									+ "' order by creationtime desc";
							List<ScoreDownes> downesScoreList = inicuDao.getListFromMappedObjQuery(fetchDownesScore);
							if (!BasicUtils.isEmpty(downesScoreList)) {
								ScoreDownes downesScore = downesScoreList.get(0);
								saCns.setDownesScore(downesScore);
							}
						}

						if (!BasicUtils.isEmpty(saCns.getLevenescoreid())) {
							String fetchLeveneScore = "SELECT obj FROM ScoreLevene as obj where uhid='" + uhid
									+ "' and levenescoreid='" + saCns.getLevenescoreid()
									+ "' order by creationtime desc";
							List<ScoreLevene> leveneScoreList = inicuDao.getListFromMappedObjQuery(fetchLeveneScore);
							if (!BasicUtils.isEmpty(leveneScoreList)) {
								ScoreLevene leveneScore = leveneScoreList.get(0);
								saCns.setLeveneScore(leveneScore);
							}
						}

						if (!BasicUtils.isEmpty(saCns.getSarnatscoreid())) {
							String fetchSarnatScore = "SELECT obj FROM ScoreSarnat as obj where uhid='" + uhid
									+ "' and sarnatscoreid='" + saCns.getSarnatscoreid()
									+ "' order by creationtime desc";
							List<ScoreSarnat> sarnatScoreList = inicuDao.getListFromMappedObjQuery(fetchSarnatScore);
							if (!BasicUtils.isEmpty(sarnatScoreList)) {
								ScoreSarnat sarnatScore = sarnatScoreList.get(0);
								saCns.setSarnatScore(sarnatScore);
							}
						}

						if (!BasicUtils.isEmpty(saCns.getThompsonscoreid())) {
							String fetchThompsonScore = "SELECT obj FROM ScoreThompson as obj where uhid='" + uhid
									+ "' and thompsonscoreid='" + saCns.getThompsonscoreid()
									+ "' order by creationtime desc";
							List<ScoreThompson> thompsonScoreList = inicuDao
									.getListFromMappedObjQuery(fetchThompsonScore);
							if (!BasicUtils.isEmpty(thompsonScoreList)) {
								ScoreThompson thompsonScore = thompsonScoreList.get(0);
								saCns.setThompsonScore(thompsonScore);
								;
							}
						}

						if (!BasicUtils.isEmpty(saCns.getTreatmentSelectedText())) {
							String queryGetPrvRespSupport = "select obj from RespSupport as obj where uhid= '" + uhid
									+ "' and eventname='Asphyxia' and eventid='" + saCns.getSacnsasphyxiaid() + "'"
									+ " order by creationtime desc";
							List<RespSupport> prevRespSupportList = inicuDao
									.getListFromMappedObjQuery(queryGetPrvRespSupport);
							if (!BasicUtils.isEmpty(prevRespSupportList)) {
								RespSupport respSupport = prevRespSupportList.get(0);
								saCns.setRespSupport(respSupport);
							}
						}

						String queryPastPrescriptionList = "select obj from BabyPrescription as obj where isactive='true' and uhid='"
								+ uhid + "' and eventid='" + saCns.getSacnsasphyxiaid()
								+ "' and eventname='Asphyxia' order by creationtime desc";
						List<BabyPrescription> pastPrescriptionList = inicuDao
								.getListFromMappedObjQuery(queryPastPrescriptionList);
						if (!BasicUtils.isEmpty(pastPrescriptionList)) {
							saCns.setBabyPrescription(pastPrescriptionList);
						}
					}
				}

				asphyxiaEventObj.getPastEvents().setPastAsphyxiaEvent(listAsphyxia);

				// get all investigation orders..
				String queryInvestigationOrdered = "select obj from InvestigationOrdered as obj where uhid='" + uhid
						+ "' and assesment_type = 'Asphyxia'";
				List<InvestigationOrdered> listPastInvestigations = inicuDao
						.getListFromMappedObjQuery(queryInvestigationOrdered);
				asphyxiaEventObj.getPastEvents().setPastInvestigations(listPastInvestigations);
			}
			List<BabyPrescription> prescriptionList = asphyxiaEventObj.getPrescriptionList();
			String continuedMedication = "";
			if (!BasicUtils.isEmpty(prescriptionList)) {
				for (int i = 0; i < prescriptionList.size(); i++) {
					BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
					if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
							&& babyPrescription.getContinueReason() != null && babyPrescription.getIsactive()) {
						continuedMedication += babyPrescription.getMedicinename() + " ";
						if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
							continuedMedication += babyPrescription.getDose() + "("
									+ babyPrescription.getDose_unit() + "/"
									+ babyPrescription.getDose_unit_time() + ") ";
						}
						continuedMedication += "prescribed on "
								+ getDateFromTimestamp(babyPrescription.getStartdate())
								+ " and continued due to " + babyPrescription.getContinueReason() + ". ";
					}
				}
				this.savePrescriptionList(null, prescriptionList, "Asphyxia", null,
						currentAsphyxia.getAssessmentTime());
			}
			
			
		     if (currentAsphyxia.getEventstatus()!=null && currentAsphyxia.getEventstatus().equalsIgnoreCase("No")) {
		    	 asphyxiaEventObj.setInactiveProgressNote(generateInactiveNotesAsphyxia(null, uhid, continuedMedication,""));
             }
			asphyxiaEventObj.getCurrentEvent().setSaCnsAsphyxia(currentAsphyxia);

			// Get the Details for the Therapeutic Hypothermia
			TherapeuticHypothermia currentTherapeuticHypoObj = asphyxiaEventObj.getTherapeuticHypothermiaEvent()
					.getCurrentEvent().getTherapeutic_hypothermia_object();

			// get GA
			String getGaQuery = "select obj from BabyDetail obj where uhid='" + uhid + "'order by creationtime desc";

			List<BabyDetail> gaResult = inicuDao.getListFromMappedObjQuery(getGaQuery);

			String finalDate = "";
			if (!BasicUtils.isEmpty(gaResult)) {
				Integer ga = gaResult.get(0).getActualgestationweek();
				currentTherapeuticHypoObj.setGestationAge(ga.toString());

				// get the time of admission
				Date dateofBirth = gaResult.get(0).getDateofadmission();
				String timeOfBirth = gaResult.get(0).getTimeofadmission();

				String[] newtime = timeOfBirth.split(",", 3);

				int hour = 0;
				int minutes = 0;
				int tempHour = Integer.parseInt(newtime[0]);
				int tempMinutes = Integer.parseInt(newtime[1]);

				if (newtime[2].equalsIgnoreCase("PM")) {
					if (tempHour == 12)
						http: // localhost:8000/sys/saveCns/
						hour = tempHour + 1;
					else
						hour = tempHour + 12 + 1;

					minutes = tempMinutes + 0;

				} else if (newtime[2].equalsIgnoreCase("AM")) {
					if (tempHour == 12)
						hour = 1;
					else
						hour = tempHour;

					minutes = tempMinutes + 0;
				}

				String finalTime = "";
				if (hour != 0) {
					finalTime = Integer.toString(hour) + ":" + Integer.toString(minutes);
				}

				DateFormat formatter = new SimpleDateFormat("HH:mm");

				if (finalTime != "") {
					java.sql.Time timeValue = new java.sql.Time(formatter.parse(finalTime).getTime());
					finalDate = dateofBirth.toString() + " " + timeValue.toString();
				}

				System.out.println("Date is :" + finalDate);
			}

			// get Age

			// get Apgar at
			String getApgarQuery = "select obj from BirthToNicu obj where uhid='" + uhid
					+ "' and apgar_fivemin<'5' order by creationtime desc";
			List<BirthToNicu> resultSet = inicuDao.getListFromMappedObjQuery(getApgarQuery);

			if (!BasicUtils.isEmpty(resultSet)) {
				currentTherapeuticHypoObj.setApgarAt(resultSet.get(0).getApgarFivemin().toString());
			}

			// get PPV

			// get Ph of first one hour after birth
			String getPhQuery = "select obj from NursingBloodGas obj where uhid='" + uhid
					+ "' and ph<'7' and be<'16' and entrydate <'" + finalDate + "' order by creationtime desc";
			List<NursingBloodGas> bloodGasResult = inicuDao.getListFromMappedObjQuery(getPhQuery);
			if (!BasicUtils.isEmpty(bloodGasResult)) {
				currentTherapeuticHypoObj.setPh(bloodGasResult.get(0).getPh());
				currentTherapeuticHypoObj.setBaseExcess(bloodGasResult.get(0).getBe());
			}

			asphyxiaEventObj.getTherapeuticHypothermiaEvent().getCurrentEvent()
					.setTherapeutic_hypothermia_object(currentTherapeuticHypoObj);

			// get the past data of the Hypopthermia

			String getPastDataQuery = "select obj from TherapeuticHypothermia obj where uhid='" + uhid
					+ "' order by creationtime desc";
			List<TherapeuticHypothermia> PastHypoResult = inicuDao.getListFromMappedObjQuery(getPastDataQuery);
			if (!BasicUtils.isEmpty(PastHypoResult)) {
				asphyxiaEventObj.getTherapeuticHypothermiaEvent().getPastEvents()
						.setPastTherapeuticHypothermia(PastHypoResult);
			}

			cnsSystemEventObj.setAsphyxiaEvent(asphyxiaEventObj);

		} catch (Exception ex) {
			ex.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser, uhid,
					"Getting Asphyxia ", BasicUtils.convertErrorStacktoString(ex));
		}

		// Encephalopathy
		try {
			EncephalopathyEventPOJO encephalopathyEventObj = new EncephalopathyEventPOJO();
			SaCnsEncephalopathy currentEncephalopathy = encephalopathyEventObj.getCurrentEvent()
					.getCurrentEncephalopathy();

			if (!BasicUtils.isEmpty(ageAtOnset)) {
				currentEncephalopathy.setAgeatassesment(((Long) ageAtOnset).intValue());
				currentEncephalopathy.setIsageofassesmentinhours(true);
			}

			String queryGetencephalopathy = "select obj from SaCnsEncephalopathy as obj where uhid='" + uhid
					+ "' order by assessment_time desc, saencephalopathyid desc";
			List<SaCnsEncephalopathy> listencephalopathy = inicuDao.getListFromMappedObjQuery(queryGetencephalopathy);

			if (!BasicUtils.isEmpty(listencephalopathy)) {

				String eventStatus = listencephalopathy.get(0).getEventstatus();
				if (!BasicUtils.isEmpty(eventStatus) && eventStatus.equalsIgnoreCase(BasicConstants.YES)) {
					cnsSystemEventObj.setEventName(BasicConstants.ENCEPHALOPATHY);
				}

				if (listencephalopathy.get(0).getEventstatus().equalsIgnoreCase(BasicConstants.INACTIVE)) {
					if (!BasicUtils.isEmpty(ageAtOnset)) {
						currentEncephalopathy.setAgeatonset(ageAtOnset.toString());
						currentEncephalopathy.setAgeinhoursdays(true);
					}
				} else {

					currentEncephalopathy.setAgeatonset(listencephalopathy.get(0).getAgeatonset());
					currentEncephalopathy.setAgeinhoursdays(listencephalopathy.get(0).getAgeinhoursdays());

				}
				currentEncephalopathy.setEventstatus(listencephalopathy.get(0).getEventstatus());

				if (!BasicUtils.isEmpty(listencephalopathy)) {
					for (int index = 0; index < listencephalopathy.size(); index++) {
						SaCnsEncephalopathy saCns = listencephalopathy.get(index);

						// past respiratory support for rds

						if (!BasicUtils.isEmpty(saCns.getTreatmentSelectedText())) {
							String queryGetPrvRespSupport = "select obj from RespSupport as obj where uhid= '" + uhid
									+ "' and eventname='encephalopathy' and eventid='"
									+ saCns.getSaCnsEncephalopathyid() + "'" + " order by creationtime desc";
							List<RespSupport> prevRespSupportList = inicuDao
									.getListFromMappedObjQuery(queryGetPrvRespSupport);
							if (!BasicUtils.isEmpty(prevRespSupportList)) {
								RespSupport respSupport = prevRespSupportList.get(0);
								saCns.setRespSupport(respSupport);
							}
						}

						String queryPastPrescriptionList = "select obj from BabyPrescription as obj where isactive='true' and uhid='"
								+ uhid + "' and eventid='" + saCns.getSaCnsEncephalopathyid()
								+ "' and eventname='encephalopathy' order by creationtime desc";
						List<BabyPrescription> pastPrescriptionList = inicuDao
								.getListFromMappedObjQuery(queryPastPrescriptionList);
						if (!BasicUtils.isEmpty(pastPrescriptionList)) {
							saCns.setBabyPrescription(pastPrescriptionList);
						}
					}
				}

				encephalopathyEventObj.getPastEvents().setPastEncephalopathyEvents(listencephalopathy);

				// get all investigation orders..
				String queryInvestigationOrdered = "select obj from InvestigationOrdered as obj where uhid='" + uhid
						+ "' and assesment_type = 'encephalopathy'";
				List<InvestigationOrdered> listPastInvestigations = inicuDao
						.getListFromMappedObjQuery(queryInvestigationOrdered);
				encephalopathyEventObj.getPastEvents().setPastInvestigations(listPastInvestigations);
			} else {
				if (!BasicUtils.isEmpty(ageAtOnset)) {
					currentEncephalopathy.setAgeatonset(ageAtOnset.toString());
					currentEncephalopathy.setAgeinhoursdays(true);
				}
			}

			cnsSystemEventObj.setEncephalopathyEvent(encephalopathyEventObj);

		} catch (Exception ex) {
			ex.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser, uhid,
					"Getting encephalopathy ", BasicUtils.convertErrorStacktoString(ex));
		}

		// Neuromuscular Disorders
		try {
			NeuromuscularDisordersEventPOJO neuromuscularDisordersEventObj = new NeuromuscularDisordersEventPOJO();
			SaCnsNeuromuscularDisorders currentNeuromuscularDisorders = neuromuscularDisordersEventObj.getCurrentEvent()
					.getCurrentNeuromuscularDisorders();

			if (!BasicUtils.isEmpty(ageAtOnset)) {
				currentNeuromuscularDisorders.setAgeatassesment(((Long) ageAtOnset).intValue());
				currentNeuromuscularDisorders.setIsageofassesmentinhours(true);
			}

			String queryGetNeuromuscularDisorders = "select obj from SaCnsNeuromuscularDisorders as obj where uhid='"
					+ uhid + "' order by assessment_time desc, sa_neuromuscular_disorderid desc";
			List<SaCnsNeuromuscularDisorders> listNeuromuscularDisorders = inicuDao
					.getListFromMappedObjQuery(queryGetNeuromuscularDisorders);

			if (!BasicUtils.isEmpty(listNeuromuscularDisorders)) {

				String eventStatus = listNeuromuscularDisorders.get(0).getEventstatus();
				if (!BasicUtils.isEmpty(eventStatus) && eventStatus.equalsIgnoreCase(BasicConstants.YES)) {
					cnsSystemEventObj.setEventName(BasicConstants.NEUROMUSCULARDISORDER);
				}

				if (listNeuromuscularDisorders.get(0).getEventstatus().equalsIgnoreCase(BasicConstants.INACTIVE)) {
					if (!BasicUtils.isEmpty(ageAtOnset)) {
						currentNeuromuscularDisorders.setAgeatonset(ageAtOnset.toString());
						currentNeuromuscularDisorders.setAgeinhoursdays(true);
					}
				} else {

					currentNeuromuscularDisorders.setAgeatonset(listNeuromuscularDisorders.get(0).getAgeatonset());
					currentNeuromuscularDisorders
							.setAgeinhoursdays(listNeuromuscularDisorders.get(0).getAgeinhoursdays());

				}
				currentNeuromuscularDisorders.setEventstatus(listNeuromuscularDisorders.get(0).getEventstatus());

				if (!BasicUtils.isEmpty(listNeuromuscularDisorders)) {
					for (int index = 0; index < listNeuromuscularDisorders.size(); index++) {
						SaCnsNeuromuscularDisorders saCns = listNeuromuscularDisorders.get(index);

						// past respiratory support for rds

						if (!BasicUtils.isEmpty(saCns.getTreatmentSelectedText())) {
							String queryGetPrvRespSupport = "select obj from RespSupport as obj where uhid= '" + uhid
									+ "' and eventname='NeuromuscularDisorders' and eventid='"
									+ saCns.getSaCnsNeuromuscularDisordersid() + "'" + " order by creationtime desc";
							List<RespSupport> prevRespSupportList = inicuDao
									.getListFromMappedObjQuery(queryGetPrvRespSupport);
							if (!BasicUtils.isEmpty(prevRespSupportList)) {
								RespSupport respSupport = prevRespSupportList.get(0);
								saCns.setRespSupport(respSupport);
							}
						}

						String queryPastPrescriptionList = "select obj from BabyPrescription as obj where isactive='true' and uhid='"
								+ uhid + "' and eventid='" + saCns.getSaCnsNeuromuscularDisordersid()
								+ "' and eventname='NeuromuscularDisorders' order by creationtime desc";
						List<BabyPrescription> pastPrescriptionList = inicuDao
								.getListFromMappedObjQuery(queryPastPrescriptionList);
						if (!BasicUtils.isEmpty(pastPrescriptionList)) {
							saCns.setBabyPrescription(pastPrescriptionList);
						}
					}
				}

				neuromuscularDisordersEventObj.getPastEvents()
						.setPastNeuromuscularDisordersEvents(listNeuromuscularDisorders);

				// get all investigation orders..
				String queryInvestigationOrdered = "select obj from InvestigationOrdered as obj where uhid='" + uhid
						+ "' and assesment_type = 'NeuromuscularDisorders'";
				List<InvestigationOrdered> listPastInvestigations = inicuDao
						.getListFromMappedObjQuery(queryInvestigationOrdered);
				neuromuscularDisordersEventObj.getPastEvents().setPastInvestigations(listPastInvestigations);
			} else {
				if (!BasicUtils.isEmpty(ageAtOnset)) {
					currentNeuromuscularDisorders.setAgeatonset(ageAtOnset.toString());
					currentNeuromuscularDisorders.setAgeinhoursdays(true);
				}
			}

			cnsSystemEventObj.setNeuromuscularDisorderEvent(neuromuscularDisordersEventObj);

		} catch (Exception ex) {
			ex.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser, uhid,
					"Getting NeuromuscularDisorders ", BasicUtils.convertErrorStacktoString(ex));
		}

		// Hydrocephalus
		try {
			HydrocephalusEventPOJO hydrocephalusEventObj = new HydrocephalusEventPOJO();
			SaCnsHydrocephalus currentHydrocephalus = hydrocephalusEventObj.getCurrentEvent().getCurrentHydrocephalus();

			if (!BasicUtils.isEmpty(ageAtOnset)) {
				currentHydrocephalus.setAgeatonset(ageAtOnset.toString());
				currentHydrocephalus.setAgeinhoursdays(true);
				currentHydrocephalus.setAgeatassesment(((Long) ageAtOnset).intValue());
				currentHydrocephalus.setIsageofassesmentinhours(true);
			}

			String queryGetHydrocephalus = "select obj from SaCnsHydrocephalus as obj where uhid='" + uhid
					+ "' order by assessment_time desc, sacnshydrocephalusid desc";
			List<SaCnsHydrocephalus> listHydrocephalus = inicuDao.getListFromMappedObjQuery(queryGetHydrocephalus);

			if (!BasicUtils.isEmpty(listHydrocephalus)) {
				String eventStatus = listHydrocephalus.get(0).getEventstatus();
				if (!BasicUtils.isEmpty(eventStatus) && eventStatus.equalsIgnoreCase(BasicConstants.YES)) {
					cnsSystemEventObj.setEventName(BasicConstants.HYDROCEPHALUS);
				}


//				if (listHydrocephalus.get(0).getEventstatus().equalsIgnoreCase(BasicConstants.INACTIVE)) {
//					if (!BasicUtils.isEmpty(ageAtOnset)) {
//						currentHydrocephalus.setAgeatonset(ageAtOnset.toString());
//						currentHydrocephalus.setAgeinhoursdays(true);
//					}
//				} else {
//
//					currentHydrocephalus.setAgeatonset(listHydrocephalus.get(0).getAgeatonset());
//					currentHydrocephalus.setAgeinhoursdays(listHydrocephalus.get(0).getAgeinhoursdays());
//
//				}
				currentHydrocephalus.setEventstatus(listHydrocephalus.get(0).getEventstatus());

				if (!BasicUtils.isEmpty(listHydrocephalus)) {
					for (int index = 0; index < listHydrocephalus.size(); index++) {
						SaCnsHydrocephalus saCns = listHydrocephalus.get(index);

						// past respiratory support for rds

						if (!BasicUtils.isEmpty(saCns.getTreatmentSelectedText())) {
							String queryGetPrvRespSupport = "select obj from RespSupport as obj where uhid= '" + uhid
									+ "' and eventname='Hydrocephalus' and eventid='" + saCns.getSacnshydrocephalusid()
									+ "'" + " order by creationtime desc";
							List<RespSupport> prevRespSupportList = inicuDao
									.getListFromMappedObjQuery(queryGetPrvRespSupport);
							if (!BasicUtils.isEmpty(prevRespSupportList)) {
								RespSupport respSupport = prevRespSupportList.get(0);
								saCns.setRespSupport(respSupport);
							}
						}

						String queryPastPrescriptionList = "select obj from BabyPrescription as obj where isactive='true' and uhid='"
								+ uhid + "' and eventid='" + saCns.getSacnshydrocephalusid()
								+ "' and eventname='Hydrocephalus' order by creationtime desc";
						List<BabyPrescription> pastPrescriptionList = inicuDao
								.getListFromMappedObjQuery(queryPastPrescriptionList);
						if (!BasicUtils.isEmpty(pastPrescriptionList)) {
							saCns.setBabyPrescription(pastPrescriptionList);
						}
					}
				}

				hydrocephalusEventObj.getPastEvents().setPastHydrocephalusEvent(listHydrocephalus);

				// get all investigation orders..
				String queryInvestigationOrdered = "select obj from InvestigationOrdered as obj where uhid='" + uhid
						+ "' and assesment_type = 'Hydrocephalus'";
				List<InvestigationOrdered> listPastInvestigations = inicuDao
						.getListFromMappedObjQuery(queryInvestigationOrdered);
				hydrocephalusEventObj.getPastEvents().setPastInvestigations(listPastInvestigations);
			} else {
				if (!BasicUtils.isEmpty(ageAtOnset)) {
					currentHydrocephalus.setAgeatonset(ageAtOnset.toString());
					currentHydrocephalus.setAgeinhoursdays(true);
				}
			}


			cnsSystemEventObj.setHydrocephalusEvent(hydrocephalusEventObj);

			if (!BasicUtils.isEmpty(eventName)) {
				cnsSystemEventObj.setEventName(eventName);
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser, uhid,
					"Getting Hydrocephalus ", BasicUtils.convertErrorStacktoString(ex));
		}

		return cnsObj;
	}

	@Override
	public SepsisMasterJSON getSepsis(String uhid, String loggedUser) throws InicuDatabaseExeption {
		SepsisMasterJSON masterJson = new SepsisMasterJSON();
		ResponseMessageObject resp = new ResponseMessageObject();
		resp.setMessage("retrieve successfull");
		resp.setType(BasicConstants.MESSAGE_SUCCESS);
		try {
			String listSepsis = "SELECT sepsis FROM SaSepsi as sepsis WHERE uhid = '" + uhid
					+ "' order by creationtime desc";
			List<SaSepsi> resultSet = sysDAO.executeObjectQuery(listSepsis);
			List<SaSepsi> newResultSet = new ArrayList<SaSepsi>();
			if (!BasicUtils.isEmpty(resultSet)) {
				Iterator<SaSepsi> sepsisIterator = resultSet.iterator();
				while (sepsisIterator.hasNext()) {
					SaSepsi saSepsis = sepsisIterator.next();

					if (!BasicUtils.isEmpty(saSepsis.getSymptoms())) {
						String[] listSymtoms = saSepsis.getSymptoms().replace(" ", "").trim().replace("[", "")
								.replace("]", "").split(",");
						ArrayList<String> symtomsList = new ArrayList<String>(Arrays.asList(listSymtoms));
						saSepsis.setSymtoms(symtomsList);
					}

					if (!BasicUtils.isEmpty(saSepsis.getUrineAntibiotics())) {
						String[] listUrineAntibiotic = saSepsis.getUrineAntibiotics().replace(" ", "").trim()
								.replace("[", "").replace("]", "").split(",");
						ArrayList<String> urineAntibioticList = new ArrayList<String>(
								Arrays.asList(listUrineAntibiotic));
						saSepsis.setUrineAntibiotic(urineAntibioticList);
					}

					if (!BasicUtils.isEmpty(saSepsis.getBloodAntibiotics())) {
						String[] listBloodAntibiotic = saSepsis.getBloodAntibiotics().replace(" ", "").trim()
								.replace("[", "").replace("]", "").split(",");
						ArrayList<String> bloodAntibioticList = new ArrayList<String>(
								Arrays.asList(listBloodAntibiotic));
						saSepsis.setBloodAntibiotic(bloodAntibioticList);
					}

					if (!BasicUtils.isEmpty(saSepsis.getCsfAntibiotics())) {
						String[] listCSFAntibiotic = saSepsis.getCsfAntibiotics().replace(" ", "").trim()
								.replace("[", "").replace("]", "").split(",");
						ArrayList<String> CSFAntibioticList = new ArrayList<String>(Arrays.asList(listCSFAntibiotic));
						saSepsis.setCsfAntibiotic(CSFAntibioticList);
					}

				}

			}

			masterJson.setListSepsis(resultSet);

			// set drop downs
			SepsisDropDowns dropDowns = new SepsisDropDowns();
			/*
			 * List<KeyValueObj> eosDropDown = new ArrayList<>(); String fetchEOS =
			 * "SELECT presentationeosid, presentationeos FROM ref_presentationeos" ;
			 * List<Object[]> resultEOS = sysDAO.executeNativeQuery(fetchEOS);
			 * if(!BasicUtils.isEmpty(resultEOS)){ for(Object[] objarr: resultEOS){
			 * KeyValueObj keyVal = new KeyValueObj(); if(!BasicUtils.isEmpty(objarr[0])){
			 * keyVal.setKey(objarr[0].toString()); } if(!BasicUtils.isEmpty(objarr[1])){
			 * keyVal.setValue(objarr[1].toString()); }
			 *
			 * eosDropDown.add(keyVal); } } dropDowns.setpEOS(eosDropDown);
			 */

			List<KeyValueObj> pDropDown = new ArrayList<>();
			String presQuery = "SELECT presentationsymid, presentationsymptoms FROM ref_presentationsymptoms";
			List<Object[]> resultPrest = sysDAO.executeNativeQuery(presQuery);
			if (!BasicUtils.isEmpty(resultPrest)) {
				for (Object[] objarr : resultPrest) {
					KeyValueObj keyVal = new KeyValueObj();
					if (!BasicUtils.isEmpty(objarr[0])) {
						keyVal.setKey(objarr[0].toString());
					}
					if (!BasicUtils.isEmpty(objarr[1])) {
						keyVal.setValue(objarr[1].toString());
					}

					pDropDown.add(keyVal);
				}
			}
			dropDowns.setpSymptoms(pDropDown);

			List<KeyValueObj> antiDropDown = new ArrayList<>();
			String antiQuery = "SELECT antibioticsid, antibiotics FROM ref_antibiotics";
			List<Object[]> antiResult = sysDAO.executeNativeQuery(antiQuery);
			if (!BasicUtils.isEmpty(antiResult)) {
				for (Object[] objarr : antiResult) {
					KeyValueObj keyVal = new KeyValueObj();
					if (!BasicUtils.isEmpty(objarr[0])) {
						keyVal.setKey(objarr[0].toString());
					}
					if (!BasicUtils.isEmpty(objarr[1])) {
						keyVal.setValue(objarr[1].toString());
					}

					antiDropDown.add(keyVal);
				}
			}
			dropDowns.setAntibiotics(antiDropDown);

			List<KeyValueObj> orgDropDown = new ArrayList<>();
			String orgQuery = "SELECT organismsid, organisms FROM ref_organisms where organismsid !='ORG007'order by organisms";
			List<Object[]> orgResult = sysDAO.executeNativeQuery(orgQuery);
			if (!BasicUtils.isEmpty(orgResult)) {
				for (Object[] objarr : orgResult) {
					KeyValueObj keyVal = new KeyValueObj();
					if (!BasicUtils.isEmpty(objarr[0])) {
						keyVal.setKey(objarr[0].toString());
					}
					if (!BasicUtils.isEmpty(objarr[1])) {
						keyVal.setValue(objarr[1].toString());
					}

					orgDropDown.add(keyVal);
				}
			}
			// moving others at end ...
			KeyValueObj otherOrganism = new KeyValueObj();
			otherOrganism.setKey("ORG007");
			otherOrganism.setValue("Others");
			orgDropDown.add(otherOrganism);

			dropDowns.setOrganisms(orgDropDown);

			SaSepsi sepsis = new SaSepsi();
			sepsis.setIsEdit(false);
			masterJson.setSepsis(sepsis);
			sepsis.setUhid(uhid);

			masterJson.setDropDown(dropDowns);
		} catch (Exception e) {
			resp.setMessage(e.getMessage());
			resp.setType(BasicConstants.MESSAGE_FAILURE);

			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser, uhid,
					"SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}

		masterJson.setResponse(resp);
		return masterJson;
	}

	@Override
	public ResponseMessageObject saveSepsis(SaSepsi sepsis, String userId) throws InicuDatabaseExeption {
		ResponseMessageObject response = new ResponseMessageObject();
		response.setMessage("save successful");
		response.setType(BasicConstants.MESSAGE_SUCCESS);
		try {
			if (!BasicUtils.isEmpty(sepsis)) {
				SaSepsi saSepsis = new SaSepsi();
				// map sepsis value to its table values and save or update
				if (sepsis.getIsEdit()) {
					SaSepsi saSepsi = inicuPostgresUtility.getEntityManager().find(SaSepsi.class, sepsis.getSepsisid());
					sepsis.setSepsisid(saSepsi.getSepsisid());
					sepsis.setCreationtime(saSepsi.getCreationtime());

				}

				// add other symtoms..
				if (!BasicUtils.isEmpty(sepsis.getSymtoms()))
					sepsis.setSymptoms(sepsis.getSymtoms().toString());

				if (!BasicUtils.isEmpty(sepsis.getUrineAntibiotic()))
					sepsis.setUrineAntibiotics(sepsis.getUrineAntibiotic().toString());

				if (!BasicUtils.isEmpty(sepsis.getBloodAntibiotic()))
					sepsis.setBloodAntibiotics(sepsis.getBloodAntibiotic().toString());

				if (!BasicUtils.isEmpty(sepsis.getCsfAntibiotic()))
					sepsis.setCsfAntibiotics(sepsis.getCsfAntibiotic().toString());

				// setting here values for sepsis..changed on 09 march 2017
				// ..handling other part of organism..
				Boolean isUrineOrgnismOther = false;
				Boolean isBloodOrgnismOther = false;
				Boolean isCSFOrgnismOther = false;
				String otherOrganism = null;
				if (!BasicUtils.isEmpty(sepsis.getUrineOrganisms())) {
					if (sepsis.getUrineOrganisms().equalsIgnoreCase("ORG007")) {
						// save 'others'
						otherOrganism = addNewOrganism(sepsis.getOtherUrineOrganisms());
						sepsis.setUrineOrganisms(otherOrganism);
						isUrineOrgnismOther = true;
					}
				}

				// handling other part of organism..
				if (!BasicUtils.isEmpty(sepsis.getBloodOrganisms())) {
					if (sepsis.getBloodOrganisms().equalsIgnoreCase("ORG007")) {
						// save 'others'
						if (isUrineOrgnismOther
								&& sepsis.getOtherBloodOrganisms().equalsIgnoreCase(sepsis.getOtherUrineOrganisms())) {
							sepsis.setBloodOrganisms(otherOrganism);
						} else {
							otherOrganism = addNewOrganism(sepsis.getOtherBloodOrganisms());
							isBloodOrgnismOther = true;
							sepsis.setBloodOrganisms(otherOrganism);
						}

					}
				}

				// handling other part of organism..
				if (!BasicUtils.isEmpty(sepsis.getCsfOrganisms())) {
					if (sepsis.getCsfOrganisms().equalsIgnoreCase("ORG007")) {
						// save 'others'
						if (isUrineOrgnismOther
								&& sepsis.getOtherCSFOrganisms().equalsIgnoreCase(sepsis.getOtherUrineOrganisms())) {
							sepsis.setCsfOrganisms(otherOrganism);
						} else if (isBloodOrgnismOther
								&& sepsis.getOtherCSFOrganisms().equalsIgnoreCase(sepsis.getOtherBloodOrganisms())) {
							sepsis.setCsfOrganisms(otherOrganism);
						} else {
							otherOrganism = addNewOrganism(sepsis.getOtherCSFOrganisms());
							isBloodOrgnismOther = true;
							sepsis.setCsfOrganisms(otherOrganism);
						}
						isCSFOrgnismOther = true;
					}
				}

				if (userId != null)
					sepsis.setLoggeduser(userId);

				sysDAO.saveObject(sepsis);

				// save logs
				String desc = mapper.writeValueAsString(saSepsis);

				String action = BasicConstants.INSERT;
				if (sepsis.getIsEdit()) {
					action = BasicConstants.UPDATE;
				}

				/**
				 * this condition to be removed once data is coming from front end.
				 */

				String loggeduser = null;
				if (!BasicUtils.isEmpty(userId)) {
					loggeduser = userId;
				} else {
					loggeduser = "1234"; // setting dummy user as of now needs
					// to be removed
				}

				String pageName = BasicConstants.SA_SEPSIS;

				// logService.saveLog(desc,action,loggeduser,uhid,pageName);
			}

		} catch (Exception e) {
			response.setType(BasicConstants.MESSAGE_FAILURE);
			response.setMessage(e.getMessage());
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, userId,
					sepsis.getUhid(), "SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}

		return response;
	}

	private String addNewOrganism(String otherOrganismName) throws Exception {
		String fetchId = "Select organismsid FROM ref_organisms order by organismsid desc limit 1";
		List<String> resultId = sysDAO.executeNativeQuery(fetchId);
		if (!BasicUtils.isEmpty(resultId)) {
			String id = resultId.get(0).toString();
			if (!BasicUtils.isEmpty(id)) {
				// tokenise the string to get the val.
				id = id.replace("ORG", "");
				Integer intVal = Integer.parseInt(id);
				if (!BasicUtils.isEmpty(intVal)) {
					intVal = intVal + 1;
					String intValStr = String.format("%03d", intVal);
					String insertType = "insert into ref_organisms " + "values('" + "ORG" + intValStr + "','"
							+ otherOrganismName + "','" + otherOrganismName + "')";
					sysDAO.insertnativeQuery(insertType);
					return "ORG" + intValStr;
					// saSepsis.setUrineOrganisms("ORG"+intValStr);
				}
			}
		}
		return null;
	}

	private String addNewCauseOfSeizures(String otherSeizures) throws Exception {
		String fetchId = "Select seizurescauseid FROM ref_seizures_cause order by seizurescauseid desc limit 1";
		List<String> resultId = sysDAO.executeNativeQuery(fetchId);
		if (!BasicUtils.isEmpty(resultId)) {
			String id = resultId.get(0).toString();
			if (!BasicUtils.isEmpty(id)) {
				// tokenise the string to get the val.
				id = id.replace("SC", "");
				Integer intVal = Integer.parseInt(id);
				if (!BasicUtils.isEmpty(intVal)) {
					intVal = intVal + 1;
					String intValStr = String.format("%03d", intVal);
					String insertType = "insert into ref_seizures_cause " + "values('" + "SC" + intValStr + "','"
							+ otherSeizures + "','" + otherSeizures + "')";
					sysDAO.insertnativeQuery(insertType);
					return "SC" + intValStr;
					// saSepsis.setUrineOrganisms("ORG"+intValStr);
				}
			}
		}
		return null;
	}

	private String addNewMedicationForSeizures(String otherSeizures) throws Exception {
		String fetchId = "Select seizuresmediid FROM ref_seizures_medication order by seizuresmediid desc limit 1";
		List<String> resultId = sysDAO.executeNativeQuery(fetchId);
		if (!BasicUtils.isEmpty(resultId)) {
			String id = resultId.get(0).toString();
			if (!BasicUtils.isEmpty(id)) {
				// tokenise the string to get the val.
				id = id.replace("SMD", "");
				Integer intVal = Integer.parseInt(id);
				if (!BasicUtils.isEmpty(intVal)) {
					intVal = intVal + 1;
					String intValStr = String.format("%03d", intVal);
					String insertType = "insert into ref_seizures_medication " + "values('" + "SMD" + intValStr + "','"
							+ otherSeizures + "','" + otherSeizures + "')";
					sysDAO.insertnativeQuery(insertType);
					return "SMD" + intValStr;
					// saSepsis.setUrineOrganisms("ORG"+intValStr);
				}
			}
		}
		return null;
	}

	private String addNewMetabolicSymptoms(String symptomsName) throws Exception {
		String fetchId = "Select metabolicsymid FROM ref_metabolicsymptoms order by metabolicsymid desc limit 1";
		List<String> resultId = sysDAO.executeNativeQuery(fetchId);
		if (!BasicUtils.isEmpty(resultId)) {
			String id = resultId.get(0).toString();
			if (!BasicUtils.isEmpty(id)) {
				// tokenise the string to get the val.
				id = id.replace("MS", "");
				Integer intVal = Integer.parseInt(id);
				if (!BasicUtils.isEmpty(intVal)) {
					intVal = intVal + 1;
					String intValStr = String.format("%03d", intVal);
					String insertType = "insert into ref_metabolicsymptoms " + "values('" + "MS" + intValStr + "','"
							+ symptomsName + "','" + symptomsName + "')";
					sysDAO.insertnativeQuery(insertType);
					return "MS" + intValStr;
					// saSepsis.setUrineOrganisms("ORG"+intValStr);
				}
			}
		}
		return null;
	}

	private String addNewCauseOfJaundice(String causeName) throws Exception {
		String fetchId = "Select causeofjaundiceid FROM ref_causeofjaundice order by causeofjaundiceid desc limit 1";
		List<String> resultId = sysDAO.executeNativeQuery(fetchId);
		if (!BasicUtils.isEmpty(resultId)) {
			String id = resultId.get(0).toString();
			if (!BasicUtils.isEmpty(id)) {
				// tokenise the string to get the val.
				id = id.replace("JAU", "");
				Integer intVal = Integer.parseInt(id);
				if (!BasicUtils.isEmpty(intVal)) {
					intVal = intVal + 1;
					String intValStr = String.format("%03d", intVal);
					String insertType = "insert into ref_causeofjaundice " + "values('" + "JAU" + intValStr + "','"
							+ causeName + "','" + causeName + "')";
					sysDAO.insertnativeQuery(insertType);
					return "JAU" + intValStr;
					// saSepsis.setUrineOrganisms("ORG"+intValStr);
				}
			}
		}
		return null;
	}

	@Override
	public CardiacMasterJSON getCardiac(String uhid, String loggedUser) throws InicuDatabaseExeption {
		CardiacMasterJSON masterJson = new CardiacMasterJSON();
		ResponseMessageObject resp = new ResponseMessageObject();
		resp.setMessage("retrieve successful");
		resp.setType(BasicConstants.MESSAGE_SUCCESS);
		List<SaCardiac> listofCardiac = new ArrayList<>();
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
		try {
			String listQuery = "SELECT cardiac FROM SaCardiac AS cardiac WHERE uhid = '" + uhid.trim()
					+ "' ORDER BY creationtime DESC";
			List<SaCardiac> resultSet = sysDAO.executeObjectQuery(listQuery);
			if (!BasicUtils.isEmpty(resultSet)) {
				if (!BasicUtils.isEmpty(resultSet)) {
					for (SaCardiac sc : resultSet) {
						Date createDate = new Date(sc.getCreationtime().getTime());
						sc.setCreationDate(sdf.format(createDate));

						if (!BasicUtils.isEmpty(sc.getChd())) {
							String fetchChd = "SELECT chd FROM ref_chd WHERE chdid='" + sc.getChd() + "'";
							List<String> chdSet = sysDAO.executeNativeQuery(fetchChd);
							if (!BasicUtils.isEmpty(chdSet)) {
								if (!BasicUtils.isEmpty(chdSet.get(0))) {
									sc.setChdValue(chdSet.get(0));
								}
							}
						}

						String inotropeA = "";
						String inotropeB = "";

						if (!BasicUtils.isEmpty(sc.getTypeofinotropes1())) {
							String getinotropeA = "SELECT inotrope FROM ref_inotropes WHERE inotropeid='"
									+ sc.getTypeofinotropes1() + "'";
							List<String> inotropeAset = sysDAO.executeNativeQuery(getinotropeA);
							if (!BasicUtils.isEmpty(inotropeAset)) {
								if (!BasicUtils.isEmpty(inotropeAset.get(0))) {
									inotropeA = inotropeAset.get(0);
								}
							}
						}

						if (!BasicUtils.isEmpty(sc.getTypeofinotropes2())) {
							String getinotropeA = "SELECT inotrope FROM ref_inotropes WHERE inotropeid='"
									+ sc.getTypeofinotropes2() + "'";
							List<String> inotropeBset = sysDAO.executeNativeQuery(getinotropeA);
							if (!BasicUtils.isEmpty(inotropeBset)) {
								if (!BasicUtils.isEmpty(inotropeBset.get(0))) {
									inotropeB = inotropeBset.get(0);
								}
							}
						}

						// create inotrope list.

						if (!BasicUtils.isEmpty(inotropeA) && !BasicUtils.isEmpty(inotropeB)) {
							sc.setTypeInotropeValue(inotropeA + " and " + inotropeB);
						} else if (!BasicUtils.isEmpty(inotropeA)) {
							sc.setTypeInotropeValue(inotropeA);
						} else if (!BasicUtils.isEmpty(inotropeB)) {
							sc.setTypeInotropeValue(inotropeB);
						}

						listofCardiac.add(sc);
					}
				}
			}

			// set dropdowns

			CardiacDropDowns cardropdown = new CardiacDropDowns();

			List<KeyValueObj> chdDropDown = new ArrayList<>();
			String chdQuery = "SELECT chdid, chd FROM ref_chd WHERE chd!='Others'";
			List<Object[]> chdResult = sysDAO.executeNativeQuery(chdQuery);
			if (!BasicUtils.isEmpty(chdResult)) {
				for (Object[] chdarr : chdResult) {
					KeyValueObj keyVal = new KeyValueObj();
					if (!BasicUtils.isEmpty(chdarr[0])) {
						keyVal.setKey(chdarr[0].toString());
					}
					if (!BasicUtils.isEmpty(chdarr[1])) {
						keyVal.setValue(chdarr[1].toString());
					}

					chdDropDown.add(keyVal);
				}
			}

			// add others as last entry
			String chdOtherQuery = "SELECT chdid, chd FROM ref_chd WHERE chd='Others'";
			List<Object[]> chdOtherResult = sysDAO.executeNativeQuery(chdOtherQuery);
			if (!BasicUtils.isEmpty(chdOtherResult)) {
				Object[] keyValArr = chdOtherResult.get(0);
				if (!BasicUtils.isEmpty(keyValArr)) {
					KeyValueObj keyVal = new KeyValueObj();
					keyVal.setKey(keyValArr[0].toString());
					keyVal.setValue(keyValArr[1].toString());

					chdDropDown.add(keyVal);
				}
			}

			cardropdown.setChdlist(chdDropDown);

			List<KeyValueObj> inotropeDropDown = new ArrayList<>();
			String inoQuery = "SELECT inotropeid, inotrope FROM ref_inotropes";
			List<Object[]> inoResult = sysDAO.executeNativeQuery(inoQuery);
			if (!BasicUtils.isEmpty(inoResult)) {
				for (Object[] inoarr : inoResult) {
					KeyValueObj keyVal = new KeyValueObj();
					if (!BasicUtils.isEmpty(inoarr[0])) {
						keyVal.setKey(inoarr[0].toString());
					}
					if (!BasicUtils.isEmpty(inoarr[1])) {
						keyVal.setValue(inoarr[1].toString());
					}

					inotropeDropDown.add(keyVal);
				}
			}

			cardropdown.setInotropeslist(inotropeDropDown);
			;

			masterJson.setDropdowns(cardropdown);

			masterJson.setListofCardiac(listofCardiac);
			SaCardiac sacardiac = new SaCardiac();
			sacardiac.setUhid(uhid.trim());
			masterJson.setCardiac(sacardiac);

		} catch (Exception e) {

			resp.setMessage("retrieve unsuccessful");
			resp.setType(BasicConstants.MESSAGE_FAILURE);
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser, uhid,
					"SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		masterJson.setResponse(resp);
		return masterJson;
	}

	@Override
	public ResponseMessageObject saveCardiac(SaCardiac cardiac, String userId) throws InicuDatabaseExeption {
		ResponseMessageObject response = new ResponseMessageObject();
		response.setType(BasicConstants.MESSAGE_SUCCESS);
		response.setMessage("save successful");
		try {
			if (!BasicUtils.isEmpty(cardiac)) {
				SaCardiac sacardiac = new SaCardiac();
				sacardiac = cardiac;
				if (userId != null) {
					sacardiac.setLoggedUser(userId);
				}

				// handle 'other' scenario.
				if (!BasicUtils.isEmpty(sacardiac.getChd())) {
					if (sacardiac.getChd().equalsIgnoreCase("CHD006")) {
						// save 'others'
						String fetchId = "Select chdid FROM ref_chd order by chdid desc limit 1";
						List<String> resultId = sysDAO.executeNativeQuery(fetchId);
						if (!BasicUtils.isEmpty(resultId)) {
							String id = resultId.get(0).toString();
							if (!BasicUtils.isEmpty(id)) {
								// tokenise the string to get the val.
								id = id.replace("CHD", "");
								Integer intVal = Integer.parseInt(id);
								if (!BasicUtils.isEmpty(intVal)) {
									intVal = intVal + 1;
									String intValStr = String.format("%03d", intVal);
									String insertType = "insert into ref_chd " + "values('" + "CHD" + intValStr + "','"
											+ sacardiac.getOtherchd() + "','" + sacardiac.getOtherchd() + "')";
									sysDAO.insertnativeQuery(insertType);

									sacardiac.setChd("CHD" + intValStr);
								}
							}
						}
					}
				}

				sysDAO.saveObject(sacardiac);

				// save logs
				String desc = mapper.writeValueAsString(sacardiac);

				String action = BasicConstants.INSERT;
				if (cardiac.isEdit()) {
					action = BasicConstants.UPDATE;
				}

				/**
				 * this condition to be removed once data is coming from front end.
				 */

				String loggeduser = null;
				if (!BasicUtils.isEmpty(userId)) {
					loggeduser = userId;
				} else {
					loggeduser = "1234";
				}
				String uhid = cardiac.getUhid();
				String pageName = BasicConstants.SA_CARDIAC;

				logService.saveLog(desc, action, loggeduser, uhid, pageName);

			}

		} catch (Exception e) {
			response.setType(BasicConstants.MESSAGE_FAILURE);
			response.setMessage(e.getMessage());
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, userId,
					cardiac.getUhid(), "SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return response;
	}

	@Override
	public FeedingGrowthMasterJSON getFeedGrowth(String uhid, String loggedUser) throws InicuDatabaseExeption {
		FeedingGrowthMasterJSON masterJson = new FeedingGrowthMasterJSON();
		ResponseMessageObject resp = new ResponseMessageObject();
		resp.setType(BasicConstants.MESSAGE_SUCCESS);
		resp.setMessage("retrieve successful");
		try {
			List<SaFeedgrowth> listfeed = new ArrayList<>();
			String query = "SELECT sa FROM SaFeedgrowth as sa WHERE uhid='" + uhid.trim()
					+ "' ORDER BY creationtime DESC";
			List<SaFeedgrowth> resultSet = sysDAO.executeObjectQuery(query);
			if (resultSet != null) {
				for (SaFeedgrowth sa : resultSet) {
					// no null checks because creation time is mandatory

					listfeed.add(sa);
				}

			}
			masterJson.setListFeedGrowth(listfeed);
			SaFeedgrowth safeed = new SaFeedgrowth();
			safeed.setUhid(uhid.trim());
			masterJson.setFeedGrowth(safeed);
		} catch (Exception e) {
			resp.setType(BasicConstants.MESSAGE_FAILURE);
			resp.setMessage(e.getMessage());
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser, uhid,
					"SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		masterJson.setResponse(resp);
		return masterJson;
	}

	@Override
	public ResponseMessageObject saveFeedGrowth(SaFeedgrowth feedGrowth, String userId) throws InicuDatabaseExeption {
		ResponseMessageObject resp = new ResponseMessageObject();
		resp.setMessage("save successful");
		resp.setType(BasicConstants.MESSAGE_SUCCESS);
		if (!BasicUtils.isEmpty(feedGrowth)) {
			try {
				SaFeedgrowth safeed = new SaFeedgrowth();
				safeed = feedGrowth;
				if (userId != null)
					safeed.setLoggedUser(userId);
				sysDAO.saveObject(safeed);

				String desc = mapper.writeValueAsString(safeed);

				String action = BasicConstants.INSERT;
				if (feedGrowth.isEdit()) {
					action = BasicConstants.UPDATE;
				}

				/**
				 * this condition to be removed once data is coming from front end.
				 */

				String loggeduser = null;
				if (!BasicUtils.isEmpty(userId)) {
					loggeduser = userId;
				} else {
					loggeduser = "1234";
				}

				String uhid = feedGrowth.getUhid();

				String pageName = BasicConstants.SA_FEED;

				logService.saveLog(desc, action, loggeduser, uhid, pageName);

			} catch (Exception e) {
				resp.setMessage(e.getMessage());
				resp.setType(BasicConstants.MESSAGE_FAILURE);
				e.printStackTrace();
				String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
				databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, userId,
						feedGrowth.getUhid(), "SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
			}
		}
		return resp;
	}

	@Override
	public SaFollowupMasterJson getFollowup(String uhid, String loggedUser) throws InicuDatabaseExeption {
		SaFollowupMasterJson masterJson = new SaFollowupMasterJson();
		ResponseMessageObject resp = new ResponseMessageObject();
		resp.setMessage("retreive successful");
		resp.setType(BasicConstants.MESSAGE_SUCCESS);
		List<SaFollowup> listofFeed = new ArrayList<>();
		try {
			String query = "SELECT feed FROM SaFollowup as feed WHERE uhid='" + uhid + "' ORDER BY creationtime DESC";
			List<SaFollowup> resultSet = sysDAO.executeObjectQuery(query);
			if (!BasicUtils.isEmpty(resultSet)) {
				for (SaFollowup sa : resultSet) {
					// no null check these are mandatory fields
					Timestamp time = sa.getCreationtime();
					Date createDate = new Date(time.getTime());
					sa.setCreationDate(sdf.format(createDate));

					listofFeed.add(sa);
				}
			}

			// set dummy values
			SaFollowup safollowup = new SaFollowup();
			safollowup.setUhid(uhid);

			masterJson.setFollowup(safollowup);
			masterJson.setListFollowup(listofFeed);

		} catch (Exception e) {
			resp.setMessage("retreive unsuccessful");
			resp.setType(e.getMessage());
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser, uhid,
					"SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		masterJson.setResponse(resp);
		return masterJson;
	}

	@Override
	public ResponseMessageObject saveFollowup(SaFollowup safollowup, String userId) throws InicuDatabaseExeption {
		ResponseMessageObject resp = new ResponseMessageObject();
		resp.setMessage("save successful");
		resp.setType(BasicConstants.MESSAGE_SUCCESS);

		try {
			if (!BasicUtils.isEmpty(safollowup)) {
				SaFollowup safoll = new SaFollowup();
				safoll = safollowup;
				safollowup.setLoggedUser(userId);
				sysDAO.saveObject(safoll);

				// save logs
				String desc = mapper.writeValueAsString(safoll);

				String action = BasicConstants.INSERT;
				if (safollowup.isEdit()) {
					action = BasicConstants.UPDATE;
				}

				/**
				 * this condition to be removed once data is coming from front end.
				 */

				String loggeduser = null;
				if (!BasicUtils.isEmpty(userId)) {
					loggeduser = userId;
				} else {
					loggeduser = "1234";
				}

				String uhid = safollowup.getUhid();

				String pageName = BasicConstants.SA_FOLLOWUP;

				logService.saveLog(desc, action, loggeduser, uhid, pageName);

			}
		} catch (Exception e) {
			resp.setMessage(e.getMessage());
			resp.setType(BasicConstants.MESSAGE_FAILURE);
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, userId,
					safollowup.getUhid(), "SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return resp;
	}

	private void PopulateCauseListRenal(SaRenalfailure saRenalfailure)
	{
		String causeStrPre = saRenalfailure.getPreRenalCauses();
		String res="";
		if(!BasicUtils.isEmpty(causeStrPre) && causeStrPre.length()>0)
		{
			res=" Pre Renal Causes : ";
			res+=causeStrPre;

		}
		String causeStrPost = saRenalfailure.getPostRenalCauses();
		if(!BasicUtils.isEmpty(causeStrPost) && causeStrPost.length()>0)
		{
			res+=" Post Renal Causes : ";
			res+=causeStrPost;

		}
		String causeIntrinisic = saRenalfailure.getIntrinsicCauses();
		if(!BasicUtils.isEmpty(causeIntrinisic) && causeIntrinisic.length()>0)
		{
			res+=" Intrinisic Renal Causes : ";
			res+=causeIntrinisic;

		}
		saRenalfailure.setCauseList(res);
	}

	private void PopulateTreatmentRenal(SaRenalfailure saRenalfailure)
	{
		String TreatmentStr = saRenalfailure.getActionType();
		if (!BasicUtils.isEmpty(TreatmentStr)) {
			String[] listTreatment = TreatmentStr.replace(" ", "").trim().replace("[", "").replace("]", "")
					.split(",");
			ArrayList<String> listTreatmentArray = new ArrayList<String>(Arrays.asList(listTreatment));
			String temptreatment = "";
			for(int i=0;i<listTreatmentArray.size();i++)
			{
				String fetchQuery = "SELECT treatment from ref_assesment_treatment where assesmenttreatmentid='"+listTreatmentArray.get(i)+"'";

				List res = inicuDao.getListFromNativeQuery(fetchQuery);
				if(!BasicUtils.isEmpty(res))
				{
					if(i==listTreatmentArray.size()-1)
					{
						temptreatment+=res.get(0).toString();
					}
					else
					{
						temptreatment+=res.get(0).toString()+",";
					}
				}
			}
			saRenalfailure.setActionType(temptreatment);
		}
	}

	@Override
	public RenalFailureJSON getRenal(String uhid, String loggedUser) throws InicuDatabaseExeption {
		RenalFailureJSON masterJson = new RenalFailureJSON();
		ResponseMessageObject resp = new ResponseMessageObject();
		Long timeHours = null;

		// get age at onset....in hours and weeks/..
		Calendar birthDateCal = null;
		Integer gestation = null;

		List<SaRenalfailure> listRenal = new ArrayList<>();

		resp.setType(BasicConstants.MESSAGE_SUCCESS);
		resp.setMessage("retrieve successful");
		try {
			// set dummy json
			SaRenalfailure oldSarenal = new SaRenalfailure();
			SaRenalfailure newSarenal = new SaRenalfailure();

			// set New Feed Intolerance values
			HashMap<Object, Object> babyBasicInformation = getBabyInformation(uhid);
			Object ageAtOnset = babyBasicInformation.get(BasicConstants.AGE_AT_ONSET);
			Object ageAtAssessment = babyBasicInformation.get(BasicConstants.AGE_AT_ONSET);

			newSarenal.setAgeOfOnset(Math.round(Float.valueOf(ageAtOnset.toString())));
			newSarenal.setAgeAtAssessment(Math.round(Float.valueOf(ageAtAssessment.toString())));

			String queryBabyDetails = "select obj from BabyDetail obj where uhid='" + uhid + "'";
			List<BabyDetail> babyDetailsList = inicuDao.getListFromMappedObjQuery(queryBabyDetails);

			if (!BasicUtils.isEmpty(babyDetailsList) && babyDetailsList.size()>0) {
				BabyDetail babyDetails = babyDetailsList.get(0);
				newSarenal.setDateofbirth(babyDetails.getDateofbirth());
			}

			String query = "SELECT renal FROM SaRenalfailure as renal WHERE uhid='" + uhid.trim()
					+ "' ORDER BY creationtime DESC";
			List<SaRenalfailure> resultSet = sysDAO.executeObjectQuery(query);

			if (!BasicUtils.isEmpty(resultSet) && resultSet.size()>0) {
				masterJson.setListRenalFailure(resultSet);
				oldSarenal = resultSet.get(0);
				for(SaRenalfailure saRenalfailure : resultSet) {
					PopulateInvestigationOrdered(saRenalfailure);
					PopulateTreatmentRenal(saRenalfailure);
					PopulateCauseListRenal(saRenalfailure);
				}
			}

			boolean continuedActive = false;
			boolean firstTimeActive = false;
			List<NursingIntakeOutput> urineList = null;
			Date date = new Date();
			String fetchUrineQuery = null;
			Timestamp currentDay = new Timestamp(date.getTime());
			Timestamp dayBefore = null;
			float timeGap = 0;

			if (oldSarenal.getRenalstatus() != null && oldSarenal.getRenalstatus().equalsIgnoreCase("YES")) {

				newSarenal.setAgeOfOnset(oldSarenal.getAgeOfOnset());
				newSarenal.setIsAgeAtAssessmentInHours(oldSarenal.getAgeOfOnsetInHours());

				// if continued active state
				continuedActive = true;
				Timestamp lastVisit = oldSarenal.getAssessmentTime();
				fetchUrineQuery = "SELECT obj FROM NursingIntakeOutput as obj WHERE uhid='" + uhid.trim()
						+ "' and entry_timestamp>='" + lastVisit + "' and entry_timestamp<='" + currentDay
						+ "' ORDER BY creationtime DESC";

				float diff = (currentDay.getTime() - lastVisit.getTime());
				timeGap = diff / (1000 * 3600);

				Float minBp = null;
				Float maxBp = null;
				if (!BasicUtils.isEmpty(oldSarenal.getAssessmentTime())) {
					String bpQuery = "Select distinct(mean_bp) from nursing_vitalparameters where mean_bp is not null and entrydate>='"
							+ oldSarenal.getAssessmentTime() + "' and entrydate<='" + currentDay
							+ "'  order by mean_bp desc";
					List<String> bpQueryList = inicuDao.getListFromNativeQuery(bpQuery);
					if (!BasicUtils.isEmpty(bpQueryList)) {
						if (!BasicUtils.isEmpty(bpQueryList.get(0))) {
							minBp = Float.parseFloat(bpQueryList.get(0));
						}

						if (!BasicUtils.isEmpty(bpQueryList.get(bpQueryList.size() - 1))) {
							maxBp = Float.parseFloat(bpQueryList.get(bpQueryList.size() - 1));
						}
					}
				}
				newSarenal.setMaxBp(maxBp);
				newSarenal.setMinBp(minBp);
			}else if (oldSarenal.getRenalstatus() != null && oldSarenal.getRenalstatus().equalsIgnoreCase("inactive")){

				firstTimeActive = true;
				timeGap = 6;
				dayBefore = new Timestamp(date.getTime() - (6 * 60 * 60 * 1000));

				String queryBunTime = "select obj from RefTestslist as obj where  assesment_category is not null and testname = 'BUN'";
				List<RefTestslist> listRefTests = inicuDao.getListFromMappedObjQuery(queryBunTime);
				if (!BasicUtils.isEmpty(listRefTests)) {
					String fetchType = "SELECT vendortestid FROM TestslistMapping as obj WHERE obj.inicutestid='"
							+ listRefTests.get(0).getTestid().trim() + "'";
					List result = inicuDao.getListFromMappedObjQuery(fetchType);
					if (!BasicUtils.isEmpty(result)) {

						queryBunTime = "Select lab_report_date , itemValue from test_result where itemid = '"
								+ result.get(0).toString().trim() + "' and prn='" + uhid + "' and lab_report_date>='"
								+ dayBefore + "' and lab_report_date<='" + currentDay
								+ "' order by lab_report_date desc";
						Timestamp bunTime = null;
						Float bunValue = null;
						List<Object[]> resultList = inicuDao.getListFromNativeQuery(queryBunTime);
						if (!BasicUtils.isEmpty(resultList)) {
							System.out.println(resultList);
							if (!BasicUtils.isEmpty(resultList.get(0))) {
								if (!BasicUtils.isEmpty(resultList.get(0)[0])) {

									bunTime = (Timestamp) (resultList.get(0)[0]);
								}
								if (!BasicUtils.isEmpty((resultList.get(0)[1]).toString())) {

									bunValue = Float.parseFloat((resultList.get(0)[1]).toString());
								}
							}
						}
						newSarenal.setBunTime(bunTime);
						newSarenal.setBunValue(bunValue);

					}
				}

				String queryRefTestsList = "select obj from RefTestslist as obj where  assesment_category is not null and testname = 'Serum Creatinine'";
				listRefTests = inicuDao.getListFromMappedObjQuery(queryRefTestsList);
				if (!BasicUtils.isEmpty(listRefTests)) {
					String fetchType = "SELECT vendortestid FROM TestslistMapping as obj WHERE obj.inicutestid='"
							+ listRefTests.get(0).getTestid().trim() + "'";
					List result = inicuDao.getListFromMappedObjQuery(fetchType);
					if (!BasicUtils.isEmpty(result)) {

						String querySerumCreatinineTime = "Select lab_report_date , itemValue from test_result where itemid = '"
								+ result.get(0).toString().trim() + "' and prn='" + uhid
								+ "'order by lab_report_date desc";
						Timestamp sCreatanineTime = null;
						Float serumCreatanineValue = null;
						List<Object[]> creatanineList = inicuDao.getListFromNativeQuery(querySerumCreatinineTime);
						if (!BasicUtils.isEmpty(creatanineList)) {
							if (!BasicUtils.isEmpty(creatanineList.get(0))) {
								if (!BasicUtils.isEmpty(creatanineList.get(0)[0]))
									sCreatanineTime = (Timestamp) (creatanineList.get(0)[0]);
								if (!BasicUtils.isEmpty((creatanineList.get(0)[1]).toString())) {
									serumCreatanineValue = Float.parseFloat((creatanineList.get(0)[1]).toString());
								}
							}
							if (!BasicUtils.isEmpty(serumCreatanineValue)) {
								if (serumCreatanineValue > 1.5) {
									newSarenal.setIsRenalFailure(true);
								}
							}
						}
						newSarenal.setSerumCreatinineTime(sCreatanineTime);
						newSarenal.setSerumCreatanineValue(serumCreatanineValue);
					}
				}

				dayBefore = new Timestamp(date.getTime() - (6 * 60 * 60 * 1000));
				fetchUrineQuery = "SELECT obj FROM NursingIntakeOutput as obj WHERE uhid='" + uhid.trim()
						+ "' and entry_timestamp>='" + dayBefore + "' and entry_timestamp<='" + currentDay
						+ "' ORDER BY creationtime DESC";
			} else if (oldSarenal.getRenalstatus() != null && oldSarenal.getRenalstatus().equalsIgnoreCase("No")) {
                masterJson.setInactiveProgressNote(generateInactiveNotesRenal(null, uhid, ""));
            }

			if (!BasicUtils.isEmpty(fetchUrineQuery)) {
				urineList = inicuDao.getListFromMappedObjQuery(fetchUrineQuery);
			}

			Float urineOutput = (float) 0.0;
			if (!BasicUtils.isEmpty(urineList) && urineList.size()>0) {
				for (NursingIntakeOutput item : urineList) {
					if (item.getUrinePassed() != null && item.getUrinePassed()) {

						try {
							if (!BasicUtils.isEmpty(item.getUrine())) {
								urineOutput += Float.parseFloat(item.getUrine());
							}
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				}
			}


			float weight = 0;
			float urine = 0;
			String babyWeightQuery = "SELECT weightForCal FROM BabyVisit where uhid='" + uhid.trim()
					+ "'ORDER BY creationtime DESC";
			List<Float> weightList = sysDAO.executeObjectQuery(babyWeightQuery);
			if (!BasicUtils.isEmpty(weightList)) {

				weight = (weightList.get(0)) / 1000; // in kg
				System.out.println("" + weight);
				if (!BasicUtils.isEmpty(weight) && !BasicUtils.isEmpty(urineOutput)) {
					urine = urineOutput / (weight * timeGap);
					newSarenal.setUrineOutput((float) ((Math.round(urine * 100.0)) / 100.0));
				}
			}

			// calculating creatinine clearance
			String babyLengthQuery = "SELECT currentdateheight from BabyVisit where uhid='" + uhid.trim()
					+ "' and currentdateheight is not null  ORDER BY visitdate";
			List<Float> lengthList = sysDAO.executeObjectQuery(babyLengthQuery);
			Float babyLength = null;
			if (!BasicUtils.isEmpty(lengthList)) {
				babyLength = lengthList.get(0);
			}
			newSarenal.setBabyLength(babyLength);

			String gestationFetchQuery = "SELECT gestationweekbylmp from BabyDetail where uhid='" + uhid.trim() + "'";
			List<Integer> gestationList = sysDAO.executeObjectQuery(gestationFetchQuery);
			Integer gestationWeek = null;

			Float screatinine = oldSarenal.getSerumCreatanineValue();
			System.out.println("" + screatinine);

			Float clearanceValue = (float) 0.0;

			if (!BasicUtils.isEmpty(gestationList)) {
				gestationWeek = gestationList.get(0);
				System.out.println("" + gestationWeek);
				Double k = null;
				if (gestationWeek < 37)
					k = 0.33;
				else if (gestationWeek >= 37)
					k = 0.44;

				if (!BasicUtils.isEmpty(k) && !BasicUtils.isEmpty(babyLength) && !BasicUtils.isEmpty(screatinine)) {

					clearanceValue = (float) ((babyLength * k) / screatinine);

				}
				newSarenal.setCreatinineClearance((float) (Math.round(clearanceValue * 100.0) / 100.0));
				System.out.println("" + clearanceValue);
			}

			// fetch bloodGas details
			dayBefore = new Timestamp(date.getTime() - (24 * 60 * 60 * 1000));

			String bloodGasQuery = "Select obj from NursingBloodGas as obj where uhid='" + uhid + "' and entryDate>'"
					+ dayBefore + "' and entryDate<'" + currentDay + "' order by entryDate desc";
			List<NursingBloodGas> bloodGasList = inicuDao.getListFromMappedObjQuery(bloodGasQuery);
			String ph, pco3, hco3, be;
			if (!BasicUtils.isEmpty(bloodGasList)) {

				if (!BasicUtils.isEmpty(bloodGasList.get(0))) {
					if (!BasicUtils.isEmpty(bloodGasList.get(0).getBe())) {
						be = bloodGasList.get(0).getBe();
						newSarenal.setAcidosisBeValue(Float.parseFloat(be));
					}

					if (!BasicUtils.isEmpty(bloodGasList.get(0).getPh())) {
						ph = bloodGasList.get(0).getPh();
						newSarenal.setAcidosisPhValue(Float.parseFloat(ph));
					}

					if (!BasicUtils.isEmpty(bloodGasList.get(0).getRegular_hco3())) {
						hco3 = bloodGasList.get(0).getRegular_hco3();
						newSarenal.setAcidosisHco3Value(Float.parseFloat(hco3));

					}

					if (!BasicUtils.isEmpty(bloodGasList.get(0).getPco2())) {
						pco3 = bloodGasList.get(0).getPco2();
						newSarenal.setAcidosisPco3Value(Float.parseFloat(pco3));
					}

				}

			}

			// get associated events
			DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date currentDate = new Date();
			System.out.println(dateFormat.format(currentDate));
			String currentDateFinal = dateFormat.format(currentDate);

			String calDate = CalculateDate48HoursAgo(currentDate);

			// get past prescriptions
			masterJson.setPrescriptionList(getPastPrescriptionList(uhid, calDate, currentDateFinal));

			// get tests list from ref table...
			String queryRefTestsList = "select obj from RefTestslist as obj where not (obj.assesmentCategory like ('%None%')) order by assesmentCategory, testid asc";
			List<RefTestslist> listRefTests = inicuDao.getListFromMappedObjQuery(queryRefTestsList);
			// populate drop down hash map for the tests list...
			HashMap<Object, List<RefTestslist>> testsListMap = new HashMap<Object, List<RefTestslist>>();
			RenalDropDownsJSON dropDown = new RenalDropDownsJSON();
			for (RefTestslist test : listRefTests) {
				List categoryList = null;
				if (testsListMap.get(test.getAssesmentCategory()) != null) {
					categoryList = testsListMap.get(test.getAssesmentCategory());
				} else {
					categoryList = new ArrayList<RefTestslist>();
				}
				categoryList.add(test);
				testsListMap.put(test.getAssesmentCategory(), categoryList);
			}

			dropDown.setTestsList(testsListMap);

			// Assessment Detail details
			String queryAssessmentRenal = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment where category='Renal' ";
			List<KeyValueObj> assessmentRenal = getRefObj(queryAssessmentRenal);
			dropDown.setTreatmentAction(assessmentRenal);

			String queryInvestigationOrder = "Select obj from InvestigationOrdered obj where uhid='" + uhid
					+ "' and assesment_type='Renal' and assesmentid='" + oldSarenal.getRenalid()
					+ "' order by creationtime desc";
			List<InvestigationOrdered> investigationOrderList = inicuDao
					.getListFromMappedObjQuery(queryInvestigationOrder);
			ArrayList<String> investOrder = new ArrayList<>();
			if (!BasicUtils.isEmpty(investigationOrderList)) {
				for (InvestigationOrdered order : investigationOrderList) {
					if (!BasicUtils.isEmpty(order.getTestname())) {
						investOrder.add(order.getTestname());
					}
				}
				newSarenal.setOrderinvestigationList(investOrder);
			}

			// set past order investigation and treatment....
			if (!BasicUtils.isEmpty(listRenal)) {

				Long assessmentId = listRenal.get(0).getRenalid();
				String pastInvestigationOrderStr = "";
				java.sql.Date sqlTodayDate = new java.sql.Date(new Date().getTime());
				String queryPastOrderInvestigation = "Select obj from InvestigationOrdered obj where uhid='" + uhid
						+ "' and assesmentid='" + assessmentId + "' order by creationtime desc";
				List<InvestigationOrdered> pastOrderInvestigationList = inicuDao
						.getListFromMappedObjQuery(queryPastOrderInvestigation);
				// past order investigation
				if (!BasicUtils.isEmpty(pastOrderInvestigationList)) {
					for (InvestigationOrdered order : pastOrderInvestigationList) {
						if (!BasicUtils.isEmpty(order.getTestname())) {
							if (!BasicUtils.isEmpty(pastInvestigationOrderStr)) {
								pastInvestigationOrderStr = pastInvestigationOrderStr + ", " + order.getTestname();
							} else {
								pastInvestigationOrderStr = order.getTestname();
							}
						}
					}
					newSarenal.setPastOrderInvestigationStr(pastInvestigationOrderStr);
				}
			}

			String queryBunTime = "select obj from RefTestslist as obj where  assesment_category is not null and testname = 'BUN'";
			listRefTests = inicuDao.getListFromMappedObjQuery(queryBunTime);
			if (!BasicUtils.isEmpty(listRefTests)) {
				String fetchType = "SELECT vendortestid FROM TestslistMapping as obj WHERE obj.inicutestid='"
						+ listRefTests.get(0).getTestid().trim() + "'";
				List result = inicuDao.getListFromMappedObjQuery(fetchType);
				if (!BasicUtils.isEmpty(result)) {

					String queryMaxBunTime = "select lab_report_date,itemValue from test_result where itemvalue = ( Select max(itemvalue) from test_result \n"
							+ "where itemid = '" + result.get(0).toString().trim() + "' and prn='" + uhid
							+ "' ) and itemid = '" + result.get(0).toString().trim() + "' and prn='" + uhid + "'";
					Timestamp bunTime = null;
					Float bunValue = null;
					List<Object[]> resultList = inicuDao.getListFromNativeQuery(queryMaxBunTime);
					if (!BasicUtils.isEmpty(resultList)) {
						System.out.println(resultList);
						if (!BasicUtils.isEmpty(resultList.get(0))) {
							if (!BasicUtils.isEmpty(resultList.get(0)[0])) {

								bunTime = (Timestamp) (resultList.get(0)[0]);
							}
							if (!BasicUtils.isEmpty((resultList.get(0)[1]).toString())) {

								bunValue = Float.parseFloat((resultList.get(0)[1]).toString());
							}
						}
						String getAllTestResults = "select lab_report_date,itemvalue,itemunit from test_result where itemid = '" + result.get(0).toString().trim() + "' and prn = '" + uhid + "'";
						List allResults = inicuDao.getListFromNativeQuery(getAllTestResults);

						if(!BasicUtils.isEmpty(allResults)) {
							for(int i=0;i<allResults.size();i++) {
								//String date122 = allResults.get(i)
							}
							newSarenal.setBunTestResultsList(allResults);
						}
					}
					newSarenal.setMaxBunTime(bunTime);
					newSarenal.setMaxBunValue(bunValue);
				}
			}

			queryRefTestsList = "select obj from RefTestslist as obj where  assesment_category is not null and testname = 'Serum Creatinine'";
			listRefTests = inicuDao.getListFromMappedObjQuery(queryRefTestsList);
			if (!BasicUtils.isEmpty(listRefTests)) {
				String fetchType = "SELECT vendortestid FROM TestslistMapping as obj WHERE obj.inicutestid='"
						+ listRefTests.get(0).getTestid().trim() + "'";
				List result = inicuDao.getListFromMappedObjQuery(fetchType);
				if (!BasicUtils.isEmpty(result)) {

					String queryMaxScreatanineTime = "select lab_report_date,itemValue from test_result where itemvalue = ( Select max(itemvalue) from test_result \n"
							+ "where itemid = '" + result.get(0).toString().trim() + "' and prn='" + uhid
							+ "' ) and itemid = '" + result.get(0).toString().trim() + "' and prn='" + uhid + "'";
					Timestamp sCreatanineTime = null;
					Float serumCreatanineValue = null;
					List<Object[]> creatanineList = inicuDao.getListFromNativeQuery(queryMaxScreatanineTime);
					if (!BasicUtils.isEmpty(creatanineList)) {
						if (!BasicUtils.isEmpty(creatanineList.get(0))) {
							if (!BasicUtils.isEmpty(creatanineList.get(0)[0]))
								sCreatanineTime = (Timestamp) (creatanineList.get(0)[0]);
							if (!BasicUtils.isEmpty((creatanineList.get(0)[1]).toString())) {
								serumCreatanineValue = Float.parseFloat((creatanineList.get(0)[1]).toString());
							}
						}
						String getAllTestResults = "select lab_report_date,itemvalue,itemunit from test_result where itemid = '" + result.get(0).toString().trim() + "' and prn = '" + uhid + "'";
						List allResults = inicuDao.getListFromNativeQuery(getAllTestResults);
						if(!BasicUtils.isEmpty(allResults)) {
							newSarenal.setSerumCreatinineTestResults(allResults);
						}
					}
					newSarenal.setMaxSerumCreatinineTime(sCreatanineTime);
					newSarenal.setMaxSerumCreatinineValue(serumCreatanineValue);
				}
			}

			List<KeyValueItem> preRenalmainList = getCausesList();
			List<KeyValueItem> intrinsicMainList = getIntrinsicCauses();
			List<KeyValueItem> postRenalMainList = getPostRenalCauses();
			dropDown.setPreRenalCausesList(preRenalmainList);
			dropDown.setIntrinsicCausesList(intrinsicMainList);
			dropDown.setPostRenalCausesList(postRenalMainList);
			String queryGetFrequencyRef = "select obj from RefMedfrequency obj order by frequency_int";
			List<RefMedfrequency> freqList = inicuDao.getListFromMappedObjQuery(queryGetFrequencyRef);
			dropDown.setMedicineFrequency(freqList);

			newSarenal.setUhid(uhid.trim());
			newSarenal.setRenalstatus(oldSarenal.getRenalstatus());

			// fetching BabyfeedDetail
			String babyFeedSql = "SELECT obj FROM BabyfeedDetail as obj WHERE uhid ='" + uhid
					+ "' order by creationtime desc";

			List<BabyfeedDetail> babyFeedList = (List<BabyfeedDetail>) inicuDao
					.getListFromMappedObjRowLimitQuery(babyFeedSql, 1);
			BabyfeedDetail babyFeedObj = null;
			if (!BasicUtils.isEmpty(babyFeedList)) {
				babyFeedObj = babyFeedList.get(0);
				masterJson.setBabyFeedObj(babyFeedObj);

				// Feed Method
				if (!(babyFeedObj.getFeedmethod() == null || babyFeedObj.getFeedmethod().isEmpty())) {
					String feedMethodStr = babyFeedObj.getFeedmethod().replace("[", "").replace("]", "").replace(", ",
							",");

					String refFeedMethodSql = "SELECT obj FROM RefMasterfeedmethod as obj";
					List<RefMasterfeedmethod> refFeedMethodList = inicuDao.getListFromMappedObjQuery(refFeedMethodSql);

					if (!BasicUtils.isEmpty(feedMethodStr)) {
						String[] feedMethodArr = feedMethodStr.split(",");

						for (int i = 0; i < feedMethodArr.length; i++) {
							feedMethodStr = "";
							Iterator<RefMasterfeedmethod> itr = refFeedMethodList.iterator();
							while (itr.hasNext()) {
								RefMasterfeedmethod obj = itr.next();
								if (feedMethodArr[i].trim().equalsIgnoreCase(obj.getFeedmethodid())) {
									if (feedMethodStr.isEmpty()) {
										feedMethodStr = obj.getFeedmethodname();
									} else {
										feedMethodStr += ", " + obj.getFeedmethodname();
									}
									break;
								}
							}
						}

						if (feedMethodArr.length > 1 && babyFeedObj.getFeedmethod_type() != null) {
							if (babyFeedObj.getFeedmethod_type()) {
								feedMethodStr += "(Per Shift)";
							} else {
								feedMethodStr += "(Alternatively)";
							}
						}
					}

					masterJson.setFeedMethodStr(feedMethodStr);
				}

				// EnfeedDetails
				String enfeedDetailsSql = "SELECT obj FROM EnFeedDetail as obj WHERE uhid='" + uhid
						+ "' and babyfeedid=" + babyFeedObj.getBabyfeedid() + " order by en_feed_detail_id asc";
				List<EnFeedDetail> enfeedDetailsList = inicuDao.getListFromMappedObjQuery(enfeedDetailsSql);
				masterJson.setEnFeedList(enfeedDetailsList);
			}

			masterJson.setDropDowns(dropDown);
			masterJson.setRenalFailure(newSarenal);

		} catch (Exception e) {
			resp.setType(BasicConstants.MESSAGE_FAILURE);
			resp.setMessage(e.getMessage());
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser, uhid,
					"SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}

		masterJson.setResponse(resp);
		return masterJson;
	}

	private List<KeyValueItem> getPostRenalCauses() {
		// TODO Auto-generated method stub
		List<KeyValueItem> mainList = new ArrayList<>();

		KeyValueItem l11 = new KeyValueItem();
		l11.setKey("RENPOST011");
		l11.setValue("Posterior urethral valves");
		l11.setItem(null);

		KeyValueItem l12 = new KeyValueItem();
		l12.setKey("RENPOST012");
		l12.setValue("Prune Belly syndrome");
		l12.setItem(null);

		KeyValueItem l13 = new KeyValueItem();
		l13.setKey("RENPOST013");
		l13.setValue("Bilateral ureteropelvic junction obstruction");
		l13.setItem(null);

		List<KeyValueItem> listOfL1 = new ArrayList<>();
		listOfL1.add(l11);
		listOfL1.add(l12);
		listOfL1.add(l13);

		KeyValueItem l1 = new KeyValueItem();
		l1.setKey("RENPOST01");
		l1.setValue("Obstruction Of Urinary Tract");
		l1.setItem(listOfL1);

		mainList.add(l1);

		return mainList;
	}

	private List<KeyValueItem> getIntrinsicCauses() {
		// TODO Auto-generated method stub

		List<KeyValueItem> mainList = new ArrayList<>();

		KeyValueItem l412 = new KeyValueItem();
		l412.setKey("RENI0411");
		l412.setValue("Aminoglycosides");
		l412.setItem(null);

		KeyValueItem l413 = new KeyValueItem();
		l413.setKey("RENI0412");
		l413.setValue("Amphotericin");
		l413.setItem(null);

		KeyValueItem l414 = new KeyValueItem();
		l414.setKey("RENI0413");
		l414.setValue("Vancomycin");
		l414.setItem(null);

		List<KeyValueItem> list41 = new ArrayList<>();
		list41.add(l412);
		list41.add(l413);
		list41.add(l414);

		KeyValueItem l41 = new KeyValueItem();
		l41.setKey("RENI041");
		l41.setValue("Antibiotics");
		l41.setItem(list41);

		List<KeyValueItem> listOfL3 = new ArrayList<>();
		listOfL3.add(l41);

		KeyValueItem l11 = new KeyValueItem();
		l11.setKey("RENI011");
		l11.setValue("Hypoperfusion");
		l11.setItem(null);

		KeyValueItem l12 = new KeyValueItem();
		l12.setKey("RENI012");
		l12.setValue("Hypoxia");
		l12.setItem(null);

		List<KeyValueItem> listOfL1 = new ArrayList<>();
		listOfL1.add(l11);
		listOfL1.add(l12);

		KeyValueItem l1 = new KeyValueItem();
		l1.setKey("RENI01");
		l1.setValue("Acute tabular necrosis");
		l1.setItem(listOfL1);

		KeyValueItem l2 = new KeyValueItem();
		l2.setKey("RENI02");
		l2.setValue("Acute Interstitial Nephritis");
		l2.setItem(null);

		KeyValueItem l3 = new KeyValueItem();
		l3.setKey("RENI03");
		l3.setValue("Pyelonephritis");
		l3.setItem(null);

		KeyValueItem l4 = new KeyValueItem();
		l4.setKey("RENI04");
		l4.setValue("Toxic Nephropathy");
		l4.setItem(listOfL3);

		KeyValueItem l5 = new KeyValueItem();
		l5.setKey("RENI05");
		l5.setValue("Renal Artery Thrombosis");
		l5.setItem(null);

		KeyValueItem l6 = new KeyValueItem();
		l6.setKey("RENI06");
		l6.setValue("Renal Vein Thrombosis");
		l6.setItem(null);

		KeyValueItem l7 = new KeyValueItem();
		l7.setKey("RENI07");
		l7.setValue("Malignancy");
		l7.setItem(null);

		mainList.add(l1);
		mainList.add(l2);
		mainList.add(l3);
		mainList.add(l4);
		mainList.add(l5);
		mainList.add(l6);
		mainList.add(l7);

		return mainList;
	}

	private List<KeyValueItem> getCausesList() {
		// TODO Auto-generated method stub

		List<KeyValueItem> mainList = new ArrayList<KeyValueItem>();
		KeyValueItem l31 = new KeyValueItem();
		l31.setKey("RENPRE0341");
		l31.setValue("Peritoneal Drains");
		l31.setItem(null);

		KeyValueItem l32 = new KeyValueItem();
		l32.setKey("RENPRE0342");
		l32.setValue("Chest Tubes");

		List<KeyValueItem> level3 = new ArrayList<KeyValueItem>();
		level3.add(l31);
		level3.add(l32);

		KeyValueItem l21 = new KeyValueItem();
		l21.setKey("RENPRE034");
		l21.setValue("Excessive losses associated with surgery");
		l21.setItem(level3);

		KeyValueItem l22 = new KeyValueItem();
		l22.setKey("RENPRE031");
		l22.setValue("Hepatic Failure");
		l22.setItem(null);

		KeyValueItem l23 = new KeyValueItem();
		l23.setKey("RENPRE032");
		l23.setValue("Protein-losing enteropathy");
		l23.setItem(null);

		KeyValueItem l24 = new KeyValueItem();
		l24.setKey("RENPRE033");
		l24.setValue("Congenital nephrotic syndrome");
		l24.setItem(null);

		List<KeyValueItem> level2 = new ArrayList<KeyValueItem>();
		level2.add(l21);
		level2.add(l22);
		level2.add(l23);
		level2.add(l24);

		KeyValueItem l11 = new KeyValueItem();
		l11.setKey("RENPRE01");
		l11.setValue("Vasomotor nephropathy");
		l11.setItem(null);

		KeyValueItem l12 = new KeyValueItem();
		l12.setKey("RENPRE02");
		l12.setValue("Dehydration");
		l12.setItem(null);

		KeyValueItem l13 = new KeyValueItem();
		l13.setKey("RENPRE03");
		l13.setValue("Decreased Intravascular volume due to hypoalbuminemia");
		l13.setItem(level2);

		KeyValueItem l14 = new KeyValueItem();
		l14.setKey("RENPRE04");
		l14.setValue("Decreased Cardiac Output");
		l14.setItem(null);

		mainList.add(l11);
		mainList.add(l12);
		mainList.add(l13);
		mainList.add(l14);

		return mainList;

	}

	@Override
	public ResponseMessageObject saveRenalJson(RenalFailureJSON renalFailureJSON, String userId)

			throws InicuDatabaseExeption {

		ResponseMessageObject obj = new ResponseMessageObject();

		SaRenalfailure saRenalFailure = renalFailureJSON.getRenalFailure();
		if (BasicUtils.isEmpty(saRenalFailure.getEpisodeid()) && !BasicUtils.isEmpty(saRenalFailure.getUhid())) {
			String queryAssociatedEvents = "select episodeid from sa_renalfailure where uhid='"
					+ saRenalFailure.getUhid() + "' order by creationtime desc";
			List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

			if (!BasicUtils.isEmpty(listAssociatedEvents)) {
				saRenalFailure.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
			}
		}
		Timestamp assessmentTime = saRenalFailure.getAssessmentTime();

		if (!BasicUtils.isEmpty(assessmentTime)) {
			saRenalFailure.setAssessmentTime(assessmentTime);
		}

		obj.setMessage("Save successfully.");
		obj.setType(BasicConstants.MESSAGE_SUCCESS);
		try {
			String uhid = saRenalFailure.getUhid();
			if (saRenalFailure.getRenalstatus() != null && !saRenalFailure.getRenalstatus().equalsIgnoreCase("Yes")) {

				SaRenalfailure renalNew = new SaRenalfailure();
				renalNew.setRenalstatus(saRenalFailure.getRenalstatus());
				renalNew.setAgeOfOnset(saRenalFailure.getAgeOfOnset());
				renalNew.setAgeOfOnsetInHours(saRenalFailure.getAgeOfOnsetInHours());
				renalNew.setAgeAtAssessment(saRenalFailure.getAgeAtAssessment());
                renalNew.setComment(saRenalFailure.getComment());
                renalNew.setIsNewEntry(saRenalFailure.getIsNewEntry());

				if (renalNew.getRenalstatus().equalsIgnoreCase("No")) {

					renalNew.setAssessmentTime(saRenalFailure.getAssessmentTime());

					if (!BasicUtils.isEmpty(saRenalFailure.getMedicationText())) {
						renalNew.setMedicationText(saRenalFailure.getMedicationText());
					}
//					String progressNotes = "";
//					progressNotes = "No significant clinical renal. ";
//					if (!BasicUtils.isEmpty(saRenalFailure.getMedicationText())) {
//						progressNotes += saRenalFailure.getMedicationText() + ". ";
//					}
//					if (!BasicUtils.isEmpty(renalFailureJSON.getOrderSelectedText())) {
//						progressNotes += "Investigation ordered are - " + renalFailureJSON.getOrderSelectedText()
//								+ ". ";
//					}

					renalNew.setEpisodeNumber(saRenalFailure.getEpisodeNumber());
					renalNew.setUrineOutput(saRenalFailure.getUrineOutput());
					renalNew.setMaxSerumCreatinineValue(saRenalFailure.getMaxSerumCreatinineValue());

				} else if (renalNew.getRenalstatus().equalsIgnoreCase("Inactive")) {
					String query = "SELECT renal FROM SaRenalfailure AS renal WHERE uhid='" + uhid
							+ "' and renal_status='Inactive' order by assessment_time desc";
					List<SaRenalfailure> renalList = inicuDao.getListFromMappedObjQuery(query);
					Long inActiveRenalId = null;
					if (renalList != null && renalList.size() > 0) {
						inActiveRenalId = renalList.get(0).getRenalid();
					} else {
						inActiveRenalId = (long) 0;
					}
				}
				renalNew.setAssessmentTime(saRenalFailure.getAssessmentTime());
				renalNew.setEpisodeNumber(saRenalFailure.getEpisodeNumber());

				saRenalFailure = renalNew;
			} else {
				// when renal is active
				// setting list to string

				List causeOfRenalList = saRenalFailure.getCauseOfRenalList();
				if (!BasicUtils.isEmpty(causeOfRenalList)) {
					saRenalFailure.setCauseOfRenal(causeOfRenalList.toString());
				}

				List actionTypeList = saRenalFailure.getActiontypeList();
				if (!BasicUtils.isEmpty(actionTypeList)) {
					saRenalFailure.setActionType(actionTypeList.toString());
				}

				List orderInvList = saRenalFailure.getOrderinvestigationList();
				if (!BasicUtils.isEmpty(orderInvList)) {
					saRenalFailure.setOrderInvestigation(orderInvList.toString());
					;
				}

				saRenalFailure.setTreatmentActionSelected(null);

				if (!BasicUtils.isEmpty(renalFailureJSON.getPeritonealDialysisObjectList())) {
					List<PeritonealDialysis> peritonealDialysisObjList = renalFailureJSON
							.getPeritonealDialysisObjectList();

					peritonealDialysisObjList = (List<PeritonealDialysis>) inicuDao
							.saveMultipleObject(peritonealDialysisObjList);
				}

			}

			if (!BasicUtils.isEmpty(uhid)) {
				saRenalFailure.setUhid(uhid);

				{
					if (userId != null) {
						saRenalFailure.setLoggeduser(userId);

						// set progress notes
						if (!BasicUtils.isEmpty(saRenalFailure.getComment()) && saRenalFailure.getComment().indexOf(saRenalFailure.getLoggeduser())==-1) {
							saRenalFailure.setComment(
									saRenalFailure.getComment());
						}

						if (!BasicUtils.isEmpty(renalFailureJSON.getRenalFailure().getIsNewEntry())) {
							if (renalFailureJSON.getRenalFailure().getIsNewEntry()) {
								saRenalFailure.setRenalid(null);
								; // due to list
									// is not
									// deatched..
								saRenalFailure.setCreationtime(null);
                                saRenalFailure = (SaRenalfailure) sysDAO.saveObject(saRenalFailure);
							} else {
                                if (saRenalFailure.getRenalstatus().equalsIgnoreCase("Inactive")) {
                                    try {
                                        String query = "update sa_renalfailure set comment = '" + saRenalFailure.getComment()
                                                + "' where renalid = '" + renalFailureJSON.getRenalFailure().getRenalid()  + "'";
                                        inicuDao.updateOrDeleteNativeQuery(query);
                                    } catch (Exception ex) {
                                        ex.printStackTrace();
                                        System.out.println("Exception occured while updating progressnotes for inactive state of Feed Intolerance.");
                                    }
                                } else {
                                    saRenalFailure.setRenalid(renalFailureJSON.getRenalFailure().getRenalid());
                                    saRenalFailure.setCreationtime(renalFailureJSON.getRenalFailure().getCreationtime());
                                    saRenalFailure = (SaRenalfailure) sysDAO.saveObject(saRenalFailure);
                                }
							}
						}

						if (!saRenalFailure.getRenalstatus().equalsIgnoreCase("Inactive")) {
							List<BabyPrescription> prescriptionList = renalFailureJSON.getPrescriptionList();
							if (!BasicUtils.isEmpty(prescriptionList)) {
								this.savePrescriptionList(null, prescriptionList, "Renal", saRenalFailure.getRenalid(),
										saRenalFailure.getAssessmentTime());
							}
						}

						// to be added later if required
//						// update past progress notes for episode number
//						if (!BasicUtils.isEmpty(renalFailureJSON.getListRenalFailure())
//								&& saRenalFailure.getRenalstatus().equalsIgnoreCase("inactive")) {
//
//							updatePastJaundiceProgressNotes(saRenalFailure, renalFailureJSON.getListRenalFailure());
//						}
//
//						 for each of the order ordered, update to the database

						saveOrderInvestigation(renalFailureJSON.getDropDowns().getTestsList(),
								saRenalFailure.getRenalid(), saRenalFailure.getUhid(), userId, "Renal",
								saRenalFailure.getAssessmentTime());

					} else {
						obj.setMessage("logged user id is coming as null");
						obj.setType(BasicConstants.MESSAGE_FAILURE);
					}

				}
			} else {
				obj.setMessage("uhid is coming as null");
				obj.setType(BasicConstants.MESSAGE_FAILURE);
			}

			// save logs
			String desc = mapper.writeValueAsString(saRenalFailure);

			String action = BasicConstants.INSERT;

			if (saRenalFailure.isEdit()) {
				action = BasicConstants.UPDATE;
			}

			/**
			 * this condition to be removed once data is coming from front end.
			 */

			String loggeduser = null;
			if (!BasicUtils.isEmpty(userId)) {
				loggeduser = userId;
			} else {
				loggeduser = "1234"; // setting dummy user as of now needs to be
				// removed
			}

			String pageName = BasicConstants.SA_RENAL;
			logService.saveLog(desc, action, loggeduser, uhid, pageName);
		} catch (Exception e) {
			obj.setType(BasicConstants.MESSAGE_FAILURE);
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, userId,
					saRenalFailure.getUhid(), "SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return obj;
	}

	public String generateInactiveNotesRenal(InicuDao inicuDaoObj, String uhid, String continuedMedication)
			throws InicuDatabaseExeption {

		if (inicuDaoObj != null) {
			inicuDao = inicuDaoObj;
		}

		// Creating Inactive Notes from here
		String progressNotesRenal = "";
		String htmlNextLine = System.getProperty("line.separator");

		// Fetching Current Episode Number for Renal
		int epCountRenal = 1;
		String queryEpCountRenal = "SELECT MAX(episode_number) from sa_renalfailure WHERE uhid='" + uhid + "'";
		List<Integer> epCountListRenal = inicuDao.getListFromNativeQuery(queryEpCountRenal);
		if (!BasicUtils.isEmpty(epCountListRenal)) {
			epCountRenal = epCountListRenal.get(0).intValue();
			if (epCountRenal != 1) {
				progressNotesRenal = "Baby developed " + epCountRenal + " episodes of RenalFailure"
						+ " during hospital stay. " + htmlNextLine + " Episode 1: ";
			}
		}

		// Old Episodes Inactive Notes List of Renal Generating Query
		List<SaRenalfailure> oldRenalList = new ArrayList<SaRenalfailure>();
		oldRenalList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getOldInactiveRenalList(uhid));
		if (!BasicUtils.isEmpty(oldRenalList)) {
			// Function for fetching Inactive Notes of Renal from Old/previous Episodes
			String oldInactiveNotes = getOldInactiveNotesRenal(oldRenalList, epCountRenal);
			progressNotesRenal += oldInactiveNotes + htmlNextLine;
		}

		// Now adding details of current episode or recent inactive renal's episode
		if (epCountRenal > 1) {
			progressNotesRenal += "Episode " + epCountRenal + " : ";
		}

		List<SaRenalfailure> renalList = new ArrayList<SaRenalfailure>();
		renalList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getRenalList(uhid, epCountRenal));

		if (!BasicUtils.isEmpty(renalList)) {

			// 1st paragraph Renal Inactive Notes
			String ageOnsetNotes = getAgeOnsetRenal(renalList);
			progressNotesRenal += ageOnsetNotes;

			String tachycardiaNotes = getAssociatedFeatures(renalList);
			progressNotesRenal += tachycardiaNotes;

			String checkConditionNotes = checkRenalfailureCondition(renalList);
			progressNotesRenal += checkConditionNotes;

			// 2nd paragraph

//			String minMaxBunNotes = getMinMaxBunNotes(renalList);
//			progressNotesRenal += minMaxBunNotes;

//			String serumCreatinineNotes = getSerumCreatinineNotes(renalList);
//			progressNotesRenal += minMaxBunNotes;
//
//			String urineOutputNotes = getUrineOutputNotes(renalList);
//			progressNotesRenal += urineOutputNotes;
//
//			String minMaxBpNotes = getMinMaxBpNotes(renalList);
//			progressNotesRenal += minMaxBpNotes;

			String renalFeatureNotes = getRenalFeatureNotes(renalList);
			progressNotesRenal += renalFeatureNotes;

			progressNotesRenal += htmlNextLine;

			// 2nd paragraph Renal Inactive Notes
			String renalInterpretationNotes = getRenalInterpretationNotes(renalList);
			progressNotesRenal += renalInterpretationNotes;

			progressNotesRenal += htmlNextLine;

			// 3rd paragraph Renal Inactive Notes
			String investigationOrderNotes = getInvestigationOrderRenal(renalList);
			progressNotesRenal += investigationOrderNotes;

			String medicationNotes = getMedicationOfRenal(renalList);
			progressNotesRenal += medicationNotes + continuedMedication;

		}

		return progressNotesRenal;
	}

	private String checkRenalfailureCondition(List<SaRenalfailure> renalList) {
		String renalfailStatement = "";
		SaRenalfailure renalObj = (SaRenalfailure) renalList.get(0);

		if (!BasicUtils.isEmpty(renalObj)) {
			if (!BasicUtils.isEmpty(renalObj.getSerumCreatanineValue())
					&& !BasicUtils.isEmpty(renalObj.getUrineOutput())) {
				if (renalObj.getSerumCreatanineValue() > 1.5 && renalObj.getUrineOutput() < 8)
					renalfailStatement = "Based on these features baby was diagnosed to have acute renal failure";
				else
					renalfailStatement = "The baby did not qualify to be designated as renal failure";

			}
		}

		return renalfailStatement;
	}

	private String getMedicationOfRenal(List<SaRenalfailure> renalList) throws InicuDatabaseExeption {
		String medicationNotesRenal = "";
		List<String> finalEventIdListRenal = new ArrayList<>();
		try {
			for (int i = 0; i < renalList.size(); i++) {
				SaRenalfailure renalObj = (SaRenalfailure) renalList.get(i);
				if (renalObj != null && renalObj.getRenalid() != null) {
					String saRenalIdList = "'" + renalObj.getRenalid().toString() + "'";
					finalEventIdListRenal.add(saRenalIdList);
				}
			}

			if (!BasicUtils.isEmpty(finalEventIdListRenal)) {
				String finalEventIdListStringRenal = finalEventIdListRenal.toString();
				finalEventIdListStringRenal = finalEventIdListStringRenal.replace("[", "");
				finalEventIdListStringRenal = finalEventIdListStringRenal.replace("]", "");
				medicationNotesRenal += getMedicationHelper(finalEventIdListStringRenal, "Renal"
                        , renalList.get(0).getUhid(), false);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return medicationNotesRenal;
	}

	private String getInvestigationOrderRenal(List<SaRenalfailure> renalList) {
		String investigationOrderNotesRenal = "";
		List<String> renalIdList = new ArrayList<String>();
		try {
			for (int i = 0; i < renalList.size(); i++) {
				SaRenalfailure renalObj = (SaRenalfailure) renalList.get(i);
				renalIdList.add("'" + renalObj.getRenalid().toString() + "'");

			}

			if (!BasicUtils.isEmpty(renalIdList)) {
				String renalIdListString = renalIdList.toString();
				renalIdListString = renalIdListString.replace("[", "");
				renalIdListString = renalIdListString.replace("]", "");
				List<String> investigationOrderHelperList = new ArrayList<>();
				investigationOrderHelperList = getInvestigationOrderHelper(renalIdListString, "Renal");
				if (!BasicUtils.isEmpty(investigationOrderHelperList)) {
					Set<String> uniqueInvestigationOrderHelperList = new HashSet<String>(investigationOrderHelperList);
					String uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperList.toString();
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("[",
							"");
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("]",
							"");

					if(uniqueInvestigationOrderHelperListString.indexOf(",")!=-1) {
						uniqueInvestigationOrderHelperListString = formatString(uniqueInvestigationOrderHelperListString);
					}

					if (uniqueInvestigationOrderHelperList.size() == 1) {
						investigationOrderNotesRenal += "Investigation done during this episode was "
								+ uniqueInvestigationOrderHelperListString + ". ";

					} else {
						investigationOrderNotesRenal += "Investigations done during this episode were "
								+ uniqueInvestigationOrderHelperListString + ". ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return investigationOrderNotesRenal;
	}

	private String getRenalInterpretationNotes(List<SaRenalfailure> renalList) {

		Boolean isUltrasoundDone = false;

		String renalInterpretationNotes = "";
		try {
			for (int i = 0; i < renalList.size(); i++) {
				SaRenalfailure renalObj = renalList.get(i);
				if (renalObj != null) {

					if ((renalObj.getIsBladderDistended() != null && renalObj.getIsBladderDistended())
							|| renalObj.getBladderWall() != null || renalObj.getRenalEchoGenecity() != null
							|| (renalObj.getIsDiverticuli() != null && renalObj.getIsDiverticuli())
							|| (renalObj.getIsRenalAbnormality() != null && renalObj.getIsRenalAbnormality())
							|| renalObj.getUreters() != null || renalObj.getPelvicalycealSystem() != null)
						isUltrasoundDone = true;
					else
						isUltrasoundDone = false;

					if (isUltrasoundDone) {
						renalInterpretationNotes += "The abdomen ultrasound revealed ";
						if (renalObj.getIsBladderDistended()) {
							if (renalObj.getBladderWall() != null)
								renalInterpretationNotes += "distended bladder with thickened bladder walls";
							else
								renalInterpretationNotes += "distended bladder";
						}

						if (renalObj.getRenalEchoGenecity() != null) {
							renalInterpretationNotes += " ,increased renal echogenecity";
						}

						if (renalObj.getUreters() != null)
							renalInterpretationNotes += " ,dilated uterus";

						if (renalObj.getIsRenalAbnormality() && renalObj.getRenalAbnormalValue() != null)
							renalInterpretationNotes += " , with " + renalObj.getRenalAbnormalValue()
									+ " renal abnormality ";

						if (renalObj.getPelvicalycealSystem() != null)
							renalInterpretationNotes += "," + renalObj.getPelvicalycealSystem()
									+ " pelvicalyceal system ";

						if (renalObj.getResidualUrineValue() != null)
							renalInterpretationNotes += " and " + renalObj.getResidualUrineValue()
									+ " ml of residual urine.";

					} else
						renalInterpretationNotes = "";

				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return renalInterpretationNotes;
	}

	private String getRenalFeatureNotes(List<SaRenalfailure> renalList) {
		String renalFeatureNotes = "";
		try {
			for (int i = 0; i < renalList.size(); i++) {
				SaRenalfailure renalObj = renalList.get(i);
				if (renalObj != null) {
					if (renalObj.getHematuriaFeature() != null)
						renalFeatureNotes += " Hematuria was observed as " + renalObj.getHematuriaFeature() + ".";

					if (renalObj.getIsPoorUrinaryStream() != null) {
						renalFeatureNotes += " The urinary system was poor";
						if (renalObj.getIsBladderDistended() != null && renalObj.getIsBladderDistended())
							renalFeatureNotes += " with distended bladder. ";
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return renalFeatureNotes;
	}

	private String getMinMaxBpNotes(List<SaRenalfailure> renalList) {
		String minMaxBpNotes = "";
		try {
			for (int i = 0; i < renalList.size(); i++) {
				SaRenalfailure renalObj = renalList.get(i);
				if (renalObj != null && renalObj.getMinBp() != null && renalObj.getMaxBp() != null) {
					minMaxBpNotes = " Max and min Bp were  " + renalObj.getMaxBp() + " and " + renalObj.getMinBp()
							+ " respectively.";
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return minMaxBpNotes;
	}

	private String getUrineOutputNotes(List<SaRenalfailure> renalList) {
		String urineOutputNotes = "";
		try {
			for (int i = 0; i < renalList.size(); i++) {
				SaRenalfailure renalObj = renalList.get(i);
				if (renalObj != null && renalObj.getUrineOutput() != null && renalObj.getUrineOutput() < 1) {
					urineOutputNotes = " Urine Output as " + renalObj.getUrineOutput() + " ml/kg/hr. ";
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return urineOutputNotes;
	}

	private String getSerumCreatinineNotes(List<SaRenalfailure> renalList) {
		String serumCreatinineNotes = "";
		try {
			for (int i = 0; i < renalList.size(); i++) {
				SaRenalfailure renalObj = renalList.get(i);
				if (renalObj != null && renalObj.getSerumCreatanineValue() != null
						&& renalObj.getSerumCreatanineValue() > 1.5 && renalObj.getSerumCreatinineTime() != null) {
					serumCreatinineNotes = " Serum Creatinine as " + renalObj.getSerumCreatanineValue() + " mg/dl on "
							+ renalObj.getSerumCreatinineTime();
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return serumCreatinineNotes;
	}

	private String getMinMaxBunNotes(List<SaRenalfailure> renalList) {
		String minMaxBunNotes = "";
		try {
			for (int i = 0; i < renalList.size(); i++) {
				SaRenalfailure renalObj = renalList.get(i);
				if (renalObj != null && renalObj.getMaxBunValue() != null && renalObj.getMaxBunTime() != null) {
					minMaxBunNotes = " BUN as " + renalObj.getMaxBunValue() + " on " + renalObj.getMaxBunTime();
				}

			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return minMaxBunNotes;
	}

	private String getAssociatedFeatures(List<SaRenalfailure> renalList) {
		// TODO Auto-generated method stub
		String tachycardiaNotes = "Associated features were ";
		List<String> featuresList = new ArrayList<>();
		try {
//			for (int i = 0; i < renalList.size(); i++) {
			SaRenalfailure renalObj = renalList.get(0);
			if (renalObj != null) {
				if (renalObj.getIsTachychardia() != null) {
					if (renalObj.getIsTachychardia() == true)
						featuresList.add("Tachycardia");
				}
				if (renalObj.getIsHighBP() != null) {
					if (renalObj.getIsHighBP() == true)
						featuresList.add("High Bp");
				}
				if (renalObj.getIsLowBP() != null) {
					if (renalObj.getIsLowBP() == true)
						featuresList.add("Low Bp");
				}
				if (renalObj.getIsEdema() != null) {
					if (renalObj.getIsEdema() == true)
						featuresList.add("Edema");
				}
				if (renalObj.getPalpableRenalMass() != null) {
					if (renalObj.getPalpableRenalMass() == true)
						featuresList.add("palpabale Renal mass");
				}
				if (renalObj.getAcidosis() != null) {
					if (renalObj.getAcidosis() == true)
						featuresList.add("Acidosis");
				}

			}

			String featureListString = featuresList.toString().replace("[", "").replace("]", "");

			if(featureListString.indexOf(",")!=-1) {
				featureListString = formatString(featureListString);
			}

			if (!BasicUtils.isEmpty(featuresList))
				tachycardiaNotes = "Associated features were " + featureListString;
			else
				tachycardiaNotes = "";

//			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return tachycardiaNotes;
	}

	// Fetching Age Onset notes for renal
	private String getAgeOnsetRenal(List<SaRenalfailure> renalList) {
		// TODO Auto-generated method stub
		String ageOnsetNotesRenal = "";
		boolean done = false;
		try {
			for (int i = 0; i < renalList.size(); i++) {
				SaRenalfailure renalObj = renalList.get(i);
				if (renalObj != null && done != true && renalObj.getAgeOfOnset() != null) {
					if (renalObj.getAgeOfOnset() == 0) {
						ageOnsetNotesRenal += "Baby developed Renal Failure at birth. ";
					} else {
						if (renalObj.getAgeOfOnsetInHours() != null && renalObj.getAgeOfOnsetInHours() == true) {
							ageOnsetNotesRenal += "Renal assessment was done at the age of " + renalObj.getAgeOfOnset();
							if (renalObj.getAgeOfOnset() == 1)
								ageOnsetNotesRenal += " hour ";
							else
								ageOnsetNotesRenal += " hours ";

						} else {
							ageOnsetNotesRenal += "Renal assessment was done at the age of " + renalObj.getAgeOfOnset();
							if (renalObj.getAgeOfOnset() == 1)
								ageOnsetNotesRenal += " day ";
							else
								ageOnsetNotesRenal += " days ";
						}

						// with serum creatinine as mg/dl, BUN as mg/dl & urine output as 0.5 mg/dl
						ageOnsetNotesRenal += "with " + getSerumCreatinineNotes(renalList) + ", "
								+ getMinMaxBunNotes(renalList) + "and " + getUrineOutputNotes(renalList);

					}
					done = true;

				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return ageOnsetNotesRenal;
	}

	// Function for fetching Inactive Notes of Renal from Old/previous Episodes
	private String getOldInactiveNotesRenal(List<SaRenalfailure> oldRenalList, int epCountRenal)
			throws InicuDatabaseExeption {
		// TODO Auto-generated method stub
		String oldInactiveNotes = "";

		try {
			if (epCountRenal == 1) {
				return oldInactiveNotes;
			}

			for (int i = 0; i < oldRenalList.size(); i++) {
				SaRenalfailure saRenalfailure = (SaRenalfailure) oldRenalList.get(i);
				if (saRenalfailure != null && saRenalfailure.getComment() != null) {
					oldInactiveNotes = saRenalfailure.getComment();
				}
			}

			if (epCountRenal > 2) {
				oldInactiveNotes = oldInactiveNotes.substring(oldInactiveNotes.indexOf('\n') + 1);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return oldInactiveNotes;
	}

	@Override
	public MiscMasterJSON getMisc(String uhid, String loggedUser) throws InicuDatabaseExeption {
		MiscMasterJSON masterJson = new MiscMasterJSON();
		ResponseMessageObject resp = new ResponseMessageObject();
		resp.setMessage("retreive successful");
		resp.setType(BasicConstants.MESSAGE_SUCCESS);
		List<SaMisc> listmisc = new ArrayList<>();
		try {
			String query = "SELECT misc FROM SaMisc as misc WHERE uhid='" + uhid + "' ORDER BY creationtime DESC";
			List<SaMisc> resultSet = sysDAO.executeObjectQuery(query);
			if (!BasicUtils.isEmpty(resultSet)) {
				for (SaMisc sa : resultSet) {
					Timestamp time = sa.getCreationtime();
					Date createDate = new Date(time.getTime());
					sa.setCreateDate(sdf.format(createDate));

					// set ropstageValue
					String ropKey = sa.getRopstageKey();
					if (!BasicUtils.isEmpty(ropKey)) {
						String ropValQuery = "SELECT ropstage FROM ref_ropstage WHERE ropstageid='" + ropKey.trim()
								+ "'";
						List<String> result = sysDAO.executeNativeQuery(ropValQuery);
						if (!BasicUtils.isEmpty(result)) {
							String ropVal = result.get(0).toString();
							if (!BasicUtils.isEmpty(ropVal)) {
								sa.setRopstageValue(ropVal);
							}
						}
					}
					listmisc.add(sa);
				}
			}
			masterJson.setListMisc(listmisc);
			// set dummy
			SaMisc samisc = new SaMisc();
			samisc.setUhid(uhid);

			// set dropDowns
			MiscDropDowns miscDropDown = new MiscDropDowns();
			List<KeyValueObj> keyVal = new ArrayList<>();
			String dropDown = "SELECT ropstageid, ropstage FROM ref_ropstage";
			List<Object[]> dropSet = sysDAO.executeNativeQuery(dropDown);
			if (!BasicUtils.isEmpty(dropSet)) {
				for (Object[] objarr : dropSet) {
					KeyValueObj keyValue = new KeyValueObj();
					if (!BasicUtils.isEmpty(objarr[0])) {
						keyValue.setKey(objarr[0].toString());
					}
					if (!BasicUtils.isEmpty(objarr[1])) {
						keyValue.setValue(objarr[1].toString());
					}
					keyVal.add(keyValue);
				}
			}
			miscDropDown.setRopStageDrop(keyVal);
			masterJson.setDropDowns(miscDropDown);
			masterJson.setMisc(samisc);

		} catch (Exception e) {
			resp.setMessage(e.getMessage());
			resp.setType(BasicConstants.MESSAGE_FAILURE);
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser, uhid,
					"SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		masterJson.setResponse(resp);
		return masterJson;
	}

	@Override
	public ResponseMessageObject saveMisc(SaMisc samisc, String userId) throws InicuDatabaseExeption {
		ResponseMessageObject resp = new ResponseMessageObject();
		if (!BasicUtils.isEmpty(samisc)) {
			resp.setMessage("save successful");
			resp.setType(BasicConstants.MESSAGE_SUCCESS);
			try {

				// conditional save for ropstage

				/*
				 * irrespective of rop selected or not rop stage should be captured
				 */
				// Boolean rop = samisc.getRop();
				// if(!BasicUtils.isEmpty(rop)){
				// if(!rop){
				// samisc.setRopstageKey(null);
				// }
				// }
				if (userId != null)
					samisc.setLoggedUser(userId);

				sysDAO.saveObject(samisc);

				// save logs
				String desc = mapper.writeValueAsString(samisc);

				String action = BasicConstants.INSERT;
				if (samisc.isEdit()) {
					action = BasicConstants.UPDATE;
				}

				/**
				 * this condition to be removed once data is coming from front end.
				 */

				String loggeduser = null;
				if (!BasicUtils.isEmpty(userId)) {
					loggeduser = userId;
				} else {
					loggeduser = "1234";
				}

				String uhid = samisc.getUhid();

				String pageName = BasicConstants.SA_MISC;

				logService.saveLog(desc, action, loggeduser, uhid, pageName);
			} catch (Exception e) {
				resp.setMessage(e.getMessage());
				resp.setType(BasicConstants.MESSAGE_FAILURE);
				e.printStackTrace();
				String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
				databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, userId,
						samisc.getUhid(), "SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
			}
		}
		return resp;
	}

	@Override
	public ResponseMessageWithResponseObject saveCnsSystem(AssessmentCNSSystemPOJO cnsSystemOBj) {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
		try {

			// if yes then save according to event name other wise save all
			// with
			// same as system event.
			CNSSystemEventPOJO cnsEventObj = cnsSystemOBj.getCNSEventObject();
			// then save event based on event name...
			String eventName = cnsEventObj.getEventName();
			if (!BasicUtils.isEmpty(eventName)) {
				if (eventName.equalsIgnoreCase(BasicConstants.IVH)) {
					try {
						response = saveCnsIvhEvent(cnsSystemOBj);
					} catch (Exception e) {
						e.printStackTrace();
					}
				} else if (eventName.equalsIgnoreCase(BasicConstants.SEIZURES)) {
					try {
						response = saveCnsSeizuresEvent(cnsSystemOBj);
					} catch (Exception e) {
						e.printStackTrace();
					}
				} else if (eventName.equalsIgnoreCase(BasicConstants.ASPHYXIA)) {
					try {
						response = saveCnsAsphyxiaEvent(cnsSystemOBj);
					} catch (Exception e) {

					}

				} else if (eventName.equalsIgnoreCase(BasicConstants.ENCEPHALOPATHY)) {
					try {
						response = saveCnsEncephalopathyEvent(cnsSystemOBj);
					} catch (Exception e) {

					}
				} else if (eventName.equalsIgnoreCase(BasicConstants.NEUROMUSCULAR_DISORDER)) {
					try {
						response = saveCnsNeuromuscularDisorderEvent(cnsSystemOBj);
					} catch (Exception e) {

					}
				} else if (eventName.equalsIgnoreCase(BasicConstants.HYDROCEPHALUS)) {
					try {
						response = saveCnsHydrocephalusEvent(cnsSystemOBj);
					} catch (Exception e) {

					}
				} else { // always will be in last...
					response.setMessage("none of the event are matching");
					response.setType(BasicConstants.MESSAGE_FAILURE);
				}
			} else {
				response.setMessage("event name is coming as null or empty");
				response.setType(BasicConstants.MESSAGE_FAILURE);
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return response;
	}

	@SuppressWarnings("unchecked")
	@Override
	public ScoreSilverman getSilvermanScore(Long silvermanId) {
		ScoreSilverman response = null;
		try {
			String querySilvermanScore = "select obj from ScoreSilverman as obj where silvermanscoreid = "
					+ silvermanId;
			List<ScoreSilverman> listSilvermanScore = inicuDao.getListFromMappedObjQuery(querySilvermanScore);
			if (!BasicUtils.isEmpty(listSilvermanScore)) {
				response = listSilvermanScore.get(0);
			}
		} catch (Exception e) {
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, "", "",
					"GET_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return response;
	}

    private List<ScoreSilverman> getSilvermanScoreList(String uhid) {
        List<ScoreSilverman> silverScoreList = new ArrayList<>();

        String fetchSilverScore = "SELECT obj FROM ScoreSilverman as obj where uhid='" + uhid
                + "' order by creationtime desc";
        silverScoreList = inicuDao.getListFromMappedObjQuery(fetchSilverScore);
//        if (!BasicUtils.isEmpty(silverScoreList)) {
//            if (silverScoreList.get(0).getSilvermanscore() != null) {
//                silverScore = silverScoreList.get(0).getSilvermanscore();
//            }
//        }

        return silverScoreList;
    }


    private Integer getSilvermanScore(String uhid) {
		Integer silverScore = null;

		String fetchSilverScore = "SELECT obj FROM ScoreSilverman as obj where uhid='" + uhid
				+ "' order by creationtime desc";
		List<ScoreSilverman> silverScoreList = inicuDao.getListFromMappedObjQuery(fetchSilverScore);
		if (!BasicUtils.isEmpty(silverScoreList)) {
			if (silverScoreList.get(0).getSilvermanscore() != null) {
				silverScore = silverScoreList.get(0).getSilvermanscore();
			}
		}

		return silverScore;
	}

	@SuppressWarnings("unchecked")
	@Override
	public ScoreDownes getDownesScore(Long downesId) {
		ScoreDownes response = null;
		try {
			String queryDownesScore = "select obj from ScoreDownes as obj where downesscoreid = " + downesId;
			List<ScoreDownes> listDownesScore = inicuDao.getListFromMappedObjQuery(queryDownesScore);
			if (!BasicUtils.isEmpty(listDownesScore)) {
				response = listDownesScore.get(0);
			}
		} catch (Exception e) {
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, "", "",
					"GET_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return response;
	}

	@Override
	public ResponseMessageWithResponseObject saveSilvermanScore(ScoreSilverman silvermanScore) {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
		try {
			Timestamp timestamp = new Timestamp(new Date().getTime());
			silvermanScore.setEntrydate(timestamp);
			silvermanScore = (ScoreSilverman) inicuDao.saveObject(silvermanScore);

			response.setType(BasicConstants.MESSAGE_SUCCESS);
			response.setMessage("Silveman Score Saved Successfully..!!");
			response.setReturnedObject(silvermanScore);
		} catch (Exception e) {
			response.setMessage(e.getMessage());
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, "",
					silvermanScore.getUhid(), "SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return response;
	}

	@Override
	public ResponseMessageWithResponseObject saveDownesScore(ScoreDownes downesScore) {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
		try {
			Timestamp timestamp = new Timestamp(new Date().getTime());
			downesScore.setEntrydate(timestamp);
			downesScore = (ScoreDownes) inicuDao.saveObject(downesScore);

			response.setType(BasicConstants.MESSAGE_SUCCESS);
			response.setMessage("Downes Score Saved Successfully..!!");
			response.setReturnedObject(downesScore);
		} catch (Exception e) {
			response.setMessage(e.getMessage());
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, "",
					downesScore.getUhid(), "SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return response;
	}

	@SuppressWarnings("unchecked")
	public SepsisScoreJSON getSepsisScore(String uhid) {
		SepsisScoreJSON response = new SepsisScoreJSON();
		try {
			String querySepsisScore = "select obj from ScoreSepsis as obj where uhid = '" + uhid + "'";
			List<ScoreSepsis> listSepsisScore = inicuDao.getListFromMappedObjQuery(querySepsisScore);
			if (!BasicUtils.isEmpty(listSepsisScore)) {
				response.setSepsisScoreList(listSepsisScore);
			}
		} catch (Exception e) {
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, "", uhid,
					"GET_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return response;
	}

	@Override
	public ResponseMessageWithResponseObject saveSepsisScore(ScoreSepsis sepsisScore) {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
		String uhid = "";
		try {
			uhid = sepsisScore.getUhid();
			sepsisScore = (ScoreSepsis) inicuDao.saveObject(sepsisScore);

			response.setType(BasicConstants.MESSAGE_SUCCESS);
			response.setMessage("Sepsis Score Saved Successfully..!!");
			response.setReturnedObject(sepsisScore);
		} catch (Exception e) {
			response.setMessage(e.getMessage());
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, "", uhid,
					"SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return response;
	}

	@SuppressWarnings("unchecked")
	public HIEScoreJSON getHIEScore(String uhid) {
		HIEScoreJSON response = new HIEScoreJSON();
		try {
			String queryHIEScore = "select obj from ScoreHIE as obj where uhid = '" + uhid + "'";
			List<ScoreHIE> listHIEScore = inicuDao.getListFromMappedObjQuery(queryHIEScore);
			if (!BasicUtils.isEmpty(listHIEScore)) {
				response.setHieScoreList(listHIEScore);
			}
		} catch (Exception e) {
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, "", uhid,
					"GET_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return response;
	}

	@Override
	public ResponseMessageWithResponseObject saveHIEScore(ScoreHIE hieScore) {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
		String uhid = "";
		try {
			uhid = hieScore.getUhid();
			hieScore = (ScoreHIE) inicuDao.saveObject(hieScore);

			response.setType(BasicConstants.MESSAGE_SUCCESS);
			response.setMessage("HIE Score Saved Successfully..!!");
			response.setReturnedObject(hieScore);
		} catch (Exception e) {
			response.setMessage(e.getMessage());
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, "", uhid,
					"SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return response;
	}

	@Override
	public ResponseMessageWithResponseObject saveIVHScore(ScoreIVH ivhScore) {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
		String uhid = "";
		try {
			ivhScore = (ScoreIVH) inicuDao.saveObject(ivhScore);
			response.setType(BasicConstants.MESSAGE_SUCCESS);
			response.setMessage("IVH Score Saved Successfully..!!");
			response.setReturnedObject(ivhScore);
		} catch (Exception e) {
			response.setMessage(e.getMessage());
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, "", uhid,
					"SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return response;
	}

	@Override
	public IVHScoreJSON getIVHScore(String uhid) {
		IVHScoreJSON response = new IVHScoreJSON();
		try {
			String queryIVHScore = "select obj from ScoreIVH as obj where uhid = '" + uhid + "'";
			List<ScoreIVH> listIVHScore = inicuDao.getListFromMappedObjQuery(queryIVHScore);
			if (!BasicUtils.isEmpty(listIVHScore)) {
				response.setIVHScoreList(listIVHScore);
			}
		} catch (Exception e) {
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, "", uhid,
					"GET_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return response;
	}

	@SuppressWarnings("unchecked")
	public LeveneMasterJSON getLeveneScore(Long levenescoreid) {
		LeveneMasterJSON response = new LeveneMasterJSON();
		List<GenericScoreStatusJSON> statusList = new ArrayList<GenericScoreStatusJSON>();
		response.setLeveneStatusList(statusList);
		String uhid = "";
		try {

			String queryLeveneScore = "select obj from ScoreLevene as obj where levenescoreid = " + levenescoreid;
			List<ScoreLevene> listLeveneScore = inicuDao.getListFromMappedObjQuery(queryLeveneScore);

			String selectedRef = "";
			int totalScore = 0;
			ScoreLevene leveneScore = null;

			if (BasicUtils.isEmpty(listLeveneScore)) {
				leveneScore = new ScoreLevene();
			} else {
				leveneScore = listLeveneScore.get(0);
				uhid = leveneScore.getUhid();
				totalScore = Integer.parseInt(leveneScore.getLevenescore());
				selectedRef = "," + leveneScore.getConsciousness() + "," + leveneScore.getTone() + ","
						+ leveneScore.getSeizures() + "," + leveneScore.getSuckingrespiration() + ",";
			}

			String queryLeveneScoreRef = "select obj from RefLeveneScore as obj";
			List<RefLeveneScore> listLeveneScoreRef = inicuDao.getListFromMappedObjQuery(queryLeveneScoreRef);
			Iterator<RefLeveneScore> itr = listLeveneScoreRef.iterator();

			String currentClinicalStatus = "";
			int currentScore = 0;
			int index = 0;
			boolean statusChangeFlag = false;
			RefLeveneScore currentScoreRef;
			GenericScoreStatusJSON leveneStatusObj = null;
			List<GenericScoreJSON> scoreList = null;
			GenericScoreJSON scoreObj = null;
			List<GenericScoreSignJSON> signList = null;
			GenericScoreSignJSON signObj = null;
			int statusIndex = 0;
			String[] statusScoreArr = { "consciousnessscore", "tonescore", "seizuresscore", "suckingrespirationscore" };
			int scoreIndex = -1;
			while (itr.hasNext()) {
				currentScoreRef = itr.next();

				if (!currentScoreRef.getClinicalStatus().equalsIgnoreCase(currentClinicalStatus)
						|| currentClinicalStatus.isEmpty()) {
					// first record or new row/status
					scoreIndex++;
					statusChangeFlag = true;
					currentClinicalStatus = currentScoreRef.getClinicalStatus();

					leveneStatusObj = new GenericScoreStatusJSON();
					leveneStatusObj.setClinicalStatus(currentClinicalStatus);
					leveneStatusObj.setStatusIndex(++statusIndex);

					scoreList = new ArrayList<GenericScoreJSON>();
					leveneStatusObj.setScoreList(scoreList);

					statusList.add(leveneStatusObj);
				}

				if (currentScoreRef.getLevenescore() != currentScore || statusChangeFlag) {

					// score changed new scoreObj and signList
					index = 0;
					statusChangeFlag = false;

					while (++currentScore < currentScoreRef.getLevenescore()) {
						// for creation of blank signlist, if there are no signs
						signList = new ArrayList<GenericScoreSignJSON>();

						scoreObj = new GenericScoreJSON();
						scoreObj.setScoreValue(currentScore);
						scoreObj.setScoreName(statusScoreArr[scoreIndex]);
						scoreObj.setScoreIndex(statusIndex + "-" + currentScore);
						scoreObj.setSignList(signList);

						scoreList.add(scoreObj);

					}

					currentScore = currentScoreRef.getLevenescore();

					signList = new ArrayList<GenericScoreSignJSON>();

					scoreObj = new GenericScoreJSON();
					scoreObj.setScoreValue(currentScore);
					scoreObj.setScoreName(statusScoreArr[scoreIndex]);
					scoreObj.setScoreIndex(statusIndex + "-" + currentScore);
					scoreObj.setSignList(signList);

					scoreList.add(scoreObj);
				}

				signObj = new GenericScoreSignJSON();
				signObj.setDbRefId(currentScoreRef.getRef_levenescoreid());
				signObj.setClinicalSign(currentScoreRef.getClinicalSign());
				signObj.setIndex(index);
				if (selectedRef.contains("," + currentScoreRef.getRef_levenescoreid() + ",")) {
					signObj.setSelected(true);
				} else {
					signObj.setSelected(false);
				}
				signList.add(signObj);

				index++;
			}
			response.setScoreLeveneObj(leveneScore);
			response.setTotalScore(totalScore);
		} catch (Exception e) {
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, "", uhid,
					"GET_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return response;
	}

	@SuppressWarnings("unchecked")
	public BindMasterJSON getBindScore(Long bindscoreid) {
		BindMasterJSON response = new BindMasterJSON();
		List<GenericScoreStatusJSON> statusList = new ArrayList<GenericScoreStatusJSON>();
		response.setBindStatusList(statusList);
		String uhid = "";
		try {

			String queryBindScore = "select obj from ScoreBind as obj where bindscoreid = " + bindscoreid;
			List<ScoreBind> listBindScore = inicuDao.getListFromMappedObjQuery(queryBindScore);

			String selectedRef = "";
			int totalScore = 0;
			ScoreBind bindScore = null;
			if (!(null == listBindScore || listBindScore.isEmpty() || null == listBindScore.get(0))) {
				bindScore = listBindScore.get(0);
				uhid = bindScore.getUhid();
				if (!BasicUtils.isEmpty(bindScore.getBindscore())) {
					totalScore = bindScore.getBindscore();
				}

				selectedRef = "," + bindScore.getMentalstatus() + "," + bindScore.getMuscletone() + ","
						+ bindScore.getCrypattern() + "," + bindScore.getOculomotor() + ",";
			} else {
				bindScore = new ScoreBind();
			}

			String queryBindScoreRef = "select obj from RefBindScore as obj";
			List<RefBindScore> listBindScoreRef = inicuDao.getListFromMappedObjQuery(queryBindScoreRef);
			Iterator<RefBindScore> itr = listBindScoreRef.iterator();

			String currentClinicalStatus = "";
			int currentScore = 0;
			int index = 0;
			boolean statusChangeFlag = false;
			RefBindScore currentScoreRef;
			GenericScoreStatusJSON bindStatusObj = null;
			List<GenericScoreJSON> scoreList = null;
			GenericScoreJSON scoreObj = null;
			List<GenericScoreSignJSON> signList = null;
			GenericScoreSignJSON signObj = null;
			int statusIndex = 0;
			String[] statusScoreArr = { "mentalstatusscore", "muscletonescore", "crypatternscore", "oculomotorscore" };
			int scoreIndex = -1;
			while (itr.hasNext()) {
				currentScoreRef = itr.next();

				if (!currentScoreRef.getClinicalStatus().equalsIgnoreCase(currentClinicalStatus)
						|| currentClinicalStatus.isEmpty()) {
					// first record or new row/status
					scoreIndex++;
					statusChangeFlag = true;
					currentClinicalStatus = currentScoreRef.getClinicalStatus();

					bindStatusObj = new GenericScoreStatusJSON();
					bindStatusObj.setClinicalStatus(currentClinicalStatus);
					bindStatusObj.setStatusIndex(++statusIndex);

					scoreList = new ArrayList<GenericScoreJSON>();
					bindStatusObj.setScoreList(scoreList);

					statusList.add(bindStatusObj);
				}

				if (currentScoreRef.getBindscore() != currentScore || statusChangeFlag) {

					// score changed new scoreObj and signList
					index = 0;
					statusChangeFlag = false;

					while (++currentScore < currentScoreRef.getBindscore()) {
						// for creation of blank signlist, if there are no signs
						signList = new ArrayList<GenericScoreSignJSON>();

						scoreObj = new GenericScoreJSON();
						scoreObj.setScoreValue(currentScore);
						scoreObj.setScoreName(statusScoreArr[scoreIndex]);
						scoreObj.setScoreIndex(statusIndex + "-" + currentScore);
						scoreObj.setSignList(signList);

						scoreList.add(scoreObj);

					}

					currentScore = currentScoreRef.getBindscore();

					signList = new ArrayList<GenericScoreSignJSON>();

					scoreObj = new GenericScoreJSON();
					scoreObj.setScoreValue(currentScore);
					scoreObj.setScoreName(statusScoreArr[scoreIndex]);
					scoreObj.setScoreIndex(statusIndex + "-" + currentScore);
					scoreObj.setSignList(signList);

					scoreList.add(scoreObj);
				}

				signObj = new GenericScoreSignJSON();
				signObj.setDbRefId(currentScoreRef.getRef_bindscoreid());
				signObj.setClinicalSign(currentScoreRef.getClinicalSign());
				signObj.setIndex(index);
				if (selectedRef.contains("," + currentScoreRef.getRef_bindscoreid() + ",")) {
					signObj.setSelected(true);
				} else {
					signObj.setSelected(false);
				}
				signList.add(signObj);

				index++;
			}
			response.setScoreBindObj(bindScore);
			response.setTotalScore(totalScore);
		} catch (Exception e) {
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, "", uhid,
					"GET_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return response;
	}

	@Override
	public ResponseMessageWithResponseObject saveBindScore(ScoreBind bindScore) {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
		String uhid = "";
		try {
			bindScore = (ScoreBind) inicuDao.saveObject(bindScore);
			response.setType(BasicConstants.MESSAGE_SUCCESS);
			response.setMessage("Bind Score Saved Successfully..!!");
			response.setReturnedObject(bindScore);
		} catch (Exception e) {
			response.setMessage(e.getMessage());
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, "", uhid,
					"SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return response;
	}

	@SuppressWarnings("unchecked")
	public PainMasterJSON getPainScore(String uhid) {
		PainMasterJSON response = new PainMasterJSON();
		List<GenericScoreStatusJSON> statusList = new ArrayList<GenericScoreStatusJSON>();
		response.setPainStatusList(statusList);
		try {

			String queryPainScore = "select obj from ScorePain as obj where uhid = '" + uhid + "'";
			List<ScorePain> listPainScore = inicuDao.getListFromMappedObjQuery(queryPainScore);
			response.setPatientScorePainList(listPainScore);

			String queryPainScoreRef = "select obj from RefPainScore as obj";
			List<RefPainScore> listPainScoreRef = inicuDao.getListFromMappedObjQuery(queryPainScoreRef);
			Iterator<RefPainScore> itr = listPainScoreRef.iterator();

			String currentClinicalStatus = "";
			int currentScore = 0;
			int index = 0;
			boolean statusChangeFlag = false;
			RefPainScore currentScoreRef;
			GenericScoreStatusJSON bindStatusObj = null;
			List<GenericScoreJSON> scoreList = null;
			GenericScoreJSON scoreObj = null;
			List<GenericScoreSignJSON> signList = null;
			GenericScoreSignJSON signObj = null;
			while (itr.hasNext()) {
				currentScoreRef = itr.next();

				if (!currentScoreRef.getClinicalStatus().equalsIgnoreCase(currentClinicalStatus)
						|| currentClinicalStatus.isEmpty()) {
					// first record or new row/status

					statusChangeFlag = true;
					currentClinicalStatus = currentScoreRef.getClinicalStatus();

					bindStatusObj = new GenericScoreStatusJSON();
					bindStatusObj.setClinicalStatus(currentClinicalStatus);

					scoreList = new ArrayList<GenericScoreJSON>();
					bindStatusObj.setScoreList(scoreList);

					statusList.add(bindStatusObj);
				}

				if (currentScoreRef.getPainscore() != currentScore || statusChangeFlag) {
					// score changed new scoreObj and signList

					index = 0;
					statusChangeFlag = false;

					while (++currentScore < currentScoreRef.getPainscore()) {
						// for creation of blank signlist, if there are no signs
						signList = new ArrayList<GenericScoreSignJSON>();

						scoreObj = new GenericScoreJSON();
						scoreObj.setScoreValue(currentScore);
						scoreObj.setSignList(signList);

						scoreList.add(scoreObj);

					}

					currentScore = currentScoreRef.getPainscore();

					signList = new ArrayList<GenericScoreSignJSON>();

					scoreObj = new GenericScoreJSON();
					scoreObj.setScoreValue(currentScore);
					scoreObj.setSignList(signList);
					scoreList.add(scoreObj);
				}

				signObj = new GenericScoreSignJSON();
				signObj.setDbRefId(currentScoreRef.getRef_painscoreid());
				signObj.setClinicalSign(currentScoreRef.getClinicalSign());
				signObj.setIndex(index);
				signList.add(signObj);

				index++;
			}
		} catch (Exception e) {
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, "", uhid,
					"GET_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return response;
	}

	@Override
	public ResponseMessageWithResponseObject savePainScore(ScorePain painScore) {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
		String uhid = "";
		try {
			painScore = (ScorePain) inicuDao.saveObject(painScore);
			response.setType(BasicConstants.MESSAGE_SUCCESS);
			response.setMessage("Pain Score Saved Successfully..!!");
			response.setReturnedObject(painScore);
		} catch (Exception e) {
			response.setMessage(e.getMessage());
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, "", uhid,
					"SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return response;
	}

	public JaundiceInNeoNatesGraphObj getJaundiceInNeonatesGraphData() {

		JaundiceInNeoNatesGraphObj jaundiceNeoNatesGraph = new JaundiceInNeoNatesGraphObj();

		String weightDir = BasicConstants.WORKING_DIR + "/charts/nice_chart.csv";
		CSVReader reader;
		try {
			reader = new CSVReader(new FileReader(weightDir), ',', '"', 0);

			ChartGraphDataJson graphDataJson = new ChartGraphDataJson();
			List<ChartExpectancyDataJson> weightExpecData = new ArrayList<>();
			List<String[]> graphRows = reader.readAll();
			System.out.println(graphRows);

			String[] hoursArray = graphRows.get(0); // 0th index

			HashMap<Object, NiceGraphObj> nicuGraphList = new HashMap<Object, NiceGraphObj>();
			for (int index = 0; index < graphRows.size(); index++) {

				int tempIndex = index + 1;
				if (index > 0) {

					// niceGraphWeeksData.put(graphRows.get(index)[0]
					List<HashMap<Object, HashMap<Object, Object>>> weeksGraph = new ArrayList<HashMap<Object, HashMap<Object, Object>>>();
					String[] phototherapyData = graphRows.get(index); // 1 index
					// phototherapy
					String[] exchangeTransData = graphRows.get(index + 1);// 2
					// index
					// exchange..
					HashMap<Object, HashMap<Object, Object>> hoursGraph = new HashMap<Object, HashMap<Object, Object>>();
					HashMap<Object, Object> phototherapyGraph = new HashMap<Object, Object>();
					HashMap<Object, Object> exchangeGraph = new HashMap<Object, Object>();

					Object phototherapyGraphArray[] = new Object[69];
					Object exchangeGraphArray[] = new Object[69];
					for (int hoursIndex = 2; hoursIndex < hoursArray.length; hoursIndex++) {
						Object phototherapyArrCell[] = new Object[2];
						Object exchangeArrCell[] = new Object[2];
						HashMap<Object, Object> riskGraph = new HashMap<Object, Object>();

						riskGraph.put("low", phototherapyData[hoursIndex]);
						riskGraph.put("high", exchangeTransData[hoursIndex]);
						hoursGraph.put(hoursArray[hoursIndex], riskGraph);
						if (!BasicUtils.isEmpty(hoursArray[hoursIndex])) {
							phototherapyArrCell[0] = Float.valueOf(hoursArray[hoursIndex].replace("hr", "").trim());
							phototherapyArrCell[1] = Float.valueOf(phototherapyData[hoursIndex]);
							phototherapyGraphArray[hoursIndex - 2] = phototherapyArrCell;
						}

						if (!BasicUtils.isEmpty(hoursArray[hoursIndex])) {
							exchangeArrCell[0] = Float.valueOf(hoursArray[hoursIndex].replace("hr", "").trim());
							exchangeArrCell[1] = Float.valueOf(exchangeTransData[hoursIndex]);
							exchangeGraphArray[hoursIndex - 2] = exchangeArrCell;
						}
					}

					NiceGraphObj nicuGraph = new NiceGraphObj();

					weeksGraph.add(hoursGraph); // this is the graph data to get
					// the hours low or high ..
					nicuGraph.setPlotData(weeksGraph);
					HashMap<Object, Object[]> graphPoints = new HashMap<Object, Object[]>();
					graphPoints.put("exchange", exchangeGraphArray);
					graphPoints.put("phototherapy", phototherapyGraphArray);
					nicuGraph.setGraphPoints(graphPoints);
					// add exchange graph ..
					// add phototherapy graph..

					index = index + 1;
					nicuGraphList.put(phototherapyData[0], nicuGraph);
				}
			}
			jaundiceNeoNatesGraph.setNiceGraph(nicuGraphList);
			// getting data for more than 35 weeks baby..
			HashMap<Object, NicuGraphObj> graphData35 = new HashMap<Object, NicuGraphObj>();
			String weightDir35 = BasicConstants.WORKING_DIR + "/charts/phototherapy_exchange_morethan35weeks.csv";
			CSVReader reader35;
			try {
				reader35 = new CSVReader(new FileReader(weightDir35), ',', '"', 0);

				List<String[]> graphRows35 = reader35.readAll();

				if (!BasicUtils.isEmpty(graphRows35)) {

					String[] zerothRow = graphRows35.get(0);
					String[] lowRiskRowPhotoTherapy = graphRows35.get(1);
					String[] lowRiskRowExchange = graphRows35.get(2);
					String[] midRiskRowPhototherapy = graphRows35.get(3);
					String[] midRiskRowExchange = graphRows35.get(4);
					String[] highRiskRowPhototherapy = graphRows35.get(5);
					String[] highRiskRowExchange = graphRows35.get(6);

					HashMap<Object, Object[]> lowRiskGraphPoints = new HashMap<Object, Object[]>();
					NicuGraphObj lowRiskNicuGraphObj = new NicuGraphObj();
					Object lowRiskPhotoGraphArr[] = new Object[15];
					Object lowRiskExchangeGraphArr[] = new Object[15];
					List<HashMap<Object, HashMap<Object, Object>>> lowRiskPlotDataList = new ArrayList<HashMap<Object, HashMap<Object, Object>>>();
					HashMap<Object, HashMap<Object, Object>> lowRiskPlotData = new HashMap<Object, HashMap<Object, Object>>();
					for (int index = 2; index < zerothRow.length; index++) {

						HashMap<Object, Object> lowRiskPlotCellMap = new HashMap<Object, Object>();
						lowRiskPlotCellMap.put("low", lowRiskRowPhotoTherapy[index]);
						lowRiskPlotCellMap.put("high", lowRiskRowExchange[index]);
						lowRiskPlotData.put(zerothRow[index], lowRiskPlotCellMap);
						lowRiskPlotDataList.add(lowRiskPlotData);

						Object lowRiskCellPhoto[] = new Object[2];
						lowRiskCellPhoto[0] = Float.valueOf(zerothRow[index].replace("hr", "").trim());
						lowRiskCellPhoto[1] = Float.valueOf(lowRiskRowPhotoTherapy[index]);
						lowRiskPhotoGraphArr[index - 2] = lowRiskCellPhoto;

						Object lowRiskCellExchange[] = new Object[2];
						lowRiskCellExchange[0] = Float.valueOf(zerothRow[index].replace("hr", "").trim());
						lowRiskCellExchange[1] = Float.valueOf(lowRiskRowExchange[index]);
						lowRiskExchangeGraphArr[index - 2] = lowRiskCellExchange;

					}

					lowRiskGraphPoints.put("phototherapy", lowRiskPhotoGraphArr);
					lowRiskGraphPoints.put("exchange", lowRiskExchangeGraphArr);
					lowRiskNicuGraphObj.setGraphPoints(lowRiskGraphPoints);
					lowRiskNicuGraphObj.setPlotData(lowRiskPlotDataList);
					graphData35.put("lowRisk", lowRiskNicuGraphObj);

					HashMap<Object, Object[]> midRiskGraphPoints = new HashMap<Object, Object[]>();
					NicuGraphObj midRiskNicuGraphObj = new NicuGraphObj();
					Object midRiskPhotoGraphArr[] = new Object[15];
					Object midRiskExchangeGraphArr[] = new Object[15];
					List<HashMap<Object, HashMap<Object, Object>>> midRiskPlotDataList = new ArrayList<HashMap<Object, HashMap<Object, Object>>>();
					HashMap<Object, HashMap<Object, Object>> midRiskPlotData = new HashMap<Object, HashMap<Object, Object>>();
					for (int index = 2; index < zerothRow.length; index++) {

						HashMap<Object, Object> midRiskPlotCellMap = new HashMap<Object, Object>();
						midRiskPlotCellMap.put("low", midRiskRowPhototherapy[index]);
						midRiskPlotCellMap.put("high", midRiskRowExchange[index]);
						midRiskPlotData.put(zerothRow[index], midRiskPlotCellMap);
						midRiskPlotDataList.add(midRiskPlotData);

						Object midRiskCellPhoto[] = new Object[2];
						midRiskCellPhoto[0] = Float.valueOf(zerothRow[index].replace("hr", "").trim());
						midRiskCellPhoto[1] = Float.valueOf(midRiskRowPhototherapy[index]);
						midRiskPhotoGraphArr[index - 2] = midRiskCellPhoto;

						Object midRiskCellExchange[] = new Object[2];
						midRiskCellExchange[0] = Float.valueOf(zerothRow[index].replace("hr", "").trim());
						midRiskCellExchange[1] = Float.valueOf(midRiskRowExchange[index]);
						midRiskExchangeGraphArr[index - 2] = midRiskCellExchange;

					}
					HashMap<Object, Object[]> midRiksgraphPoints = new HashMap<Object, Object[]>();
					midRiksgraphPoints.put("phototherapy", midRiskPhotoGraphArr);
					midRiksgraphPoints.put("exchange", midRiskExchangeGraphArr);
					midRiskNicuGraphObj.setGraphPoints(midRiksgraphPoints);
					midRiskNicuGraphObj.setPlotData(midRiskPlotDataList);
					graphData35.put("midRisk", midRiskNicuGraphObj);

					NicuGraphObj highRiskNicuGraphObj = new NicuGraphObj();
					Object highRiskPhotoGraphArr[] = new Object[15];
					Object highRiskExchangeGraphArr[] = new Object[15];
					List<HashMap<Object, HashMap<Object, Object>>> highRiskPlotDataList = new ArrayList<HashMap<Object, HashMap<Object, Object>>>();
					HashMap<Object, HashMap<Object, Object>> highRiskPlotData = new HashMap<Object, HashMap<Object, Object>>();
					for (int index = 2; index < zerothRow.length; index++) {

						HashMap<Object, Object> highRiskPlotCellMap = new HashMap<Object, Object>();
						highRiskPlotCellMap.put("low", highRiskRowPhototherapy[index]);
						highRiskPlotCellMap.put("high", highRiskRowExchange[index]);
						highRiskPlotData.put(zerothRow[index], highRiskPlotCellMap);
						highRiskPlotDataList.add(highRiskPlotData);

						Object highRiskCellPhoto[] = new Object[2];
						highRiskCellPhoto[0] = Float.valueOf(zerothRow[index].replace("hr", "").trim());
						highRiskCellPhoto[1] = Float.valueOf(highRiskRowPhototherapy[index]);
						highRiskPhotoGraphArr[index - 2] = highRiskCellPhoto;

						Object highRiskCellExchange[] = new Object[2];
						highRiskCellExchange[0] = Float.valueOf(zerothRow[index].replace("hr", "").trim());
						highRiskCellExchange[1] = Float.valueOf(highRiskRowExchange[index]);
						highRiskExchangeGraphArr[index - 2] = highRiskCellExchange;

					}
					HashMap<Object, Object[]> highRiskGraphPoints = new HashMap<Object, Object[]>();
					highRiskGraphPoints.put("phototherapy", highRiskPhotoGraphArr);
					highRiskGraphPoints.put("exchange", highRiskExchangeGraphArr);
					highRiskGraphPoints.put("test", highRiskExchangeGraphArr);
					highRiskNicuGraphObj.setGraphPoints(highRiskGraphPoints);
					highRiskNicuGraphObj.setPlotData(highRiskPlotDataList);

					graphData35.put("highRisk", highRiskNicuGraphObj);

				}

				jaundiceNeoNatesGraph.setBhutaniGraph(graphData35);
			} catch (Exception ex) {
				ex.printStackTrace();
			}

			// setting graph data below 35 weeks..

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return jaundiceNeoNatesGraph;
	}

	public List getRefObj(String query) {
		List<KeyValueObj> refKeyValueList = new ArrayList<KeyValueObj>();
		try {
			// String query = "select obj.bpid,obj.blood_product from
			// kalawati.ref_blood_product obj";
			List<Object[]> refList = inicuDao.getListFromNativeQuery(query);
			KeyValueObj keyValue = null;
			if (refList != null && !refList.isEmpty()) {
				Iterator<Object[]> iterator = refList.iterator();
				while (iterator.hasNext()) {
					keyValue = new KeyValueObj();
					Object[] obj = iterator.next();
					if (obj != null && obj[0] != null)
						keyValue.setKey(obj[0]);
					if (obj != null && obj[1] != null)
						keyValue.setValue(obj[1]);
					refKeyValueList.add(keyValue);
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return refKeyValueList;
	}

	@SuppressWarnings("un" +
			"ed")
	@Override
	public List getPrintAssessmentModuleData(AssessmentPrintInfoObject printObj) {

		// get record from the object...
		try {
			Gson gson = new Gson();
			System.out.println(gson.toJson(printObj));
			System.out.println(printObj.getDateFrom());
			System.out.println(printObj.getDateTo());
			Date dateFrom = CalendarUtility.dateFormatUTF.parse(printObj.getDateFrom());
			Date dateTo = CalendarUtility.dateFormatUTF.parse(printObj.getDateTo());
			String hoursFrom = printObj.getTimeFrom();
			String hoursTo = printObj.getTimeTo();
			String uhid = printObj.getUhid();
			String moduleName = printObj.getModuleName();
			if (!BasicUtils.isEmpty(moduleName)) {
				Calendar calFrom = Calendar.getInstance();
				calFrom.setTime(dateFrom);
				// calFrom.set(Calendar.DAY_OF_MONTH,
				// calFrom.get(Calendar.DAY_OF_MONTH)-1);
				Calendar calTo = Calendar.getInstance();
				calTo.setTime(dateTo);

				if (!BasicUtils.isEmpty(hoursFrom)) {
					calFrom.set(Calendar.HOUR_OF_DAY, Integer.valueOf(hoursFrom));
					calFrom.set(Calendar.MINUTE, 0);
				}

				if (!BasicUtils.isEmpty(hoursTo)) {
					calTo.set(Calendar.HOUR_OF_DAY, Integer.valueOf(hoursTo));
					calTo.set(Calendar.MINUTE, 0);
				}
				System.out.println("horss ");
				System.out.println(hoursFrom + " " + hoursTo);
				System.out.println(calFrom.getTime());
				System.out.println(calTo.getTime());
				System.out.println("in UTC");
				System.out.println(CalendarUtility.timeStampFormat.format(calFrom.getTime()));
				System.out.println(CalendarUtility.timeStampFormat.format(calTo.getTime()));
				String strDateFrom = CalendarUtility.timeStampFormat.format(calFrom.getTime());
				String strDateTo = CalendarUtility.timeStampFormat.format(calTo.getTime());
				if (moduleName.equalsIgnoreCase("jaundice")) {

					String query = "select obj from SaJaundice as obj where uhid='" + uhid
							+ "' and to_char(creationtime,'yyyy-MM-dd HH:mm:ss')>='" + strDateFrom + "' and "
							+ "to_char(creationtime,'yyyy-MM-dd HH:mm:ss')<='" + strDateTo + "'";
					List<SaJaundice> jaundicePrintData = inicuDao.getListFromMappedObjQuery(query);
					return jaundicePrintData;
				} else if (moduleName.equalsIgnoreCase("respiratory systems")) {

					String query = "select obj from VwRespsystem as obj where uhid='" + uhid
							+ "' and to_char(creationtime,'yyyy-MM-dd HH:mm:ss')>='" + strDateFrom + "' and "
							+ "to_char(creationtime,'yyyy-MM-dd HH:mm:ss')<='" + strDateTo + "'";
					List<VwRespsystem> saRespsystemPrintData = inicuDao.getListFromMappedObjQuery(query);

					return saRespsystemPrintData;
				} else if (moduleName.equalsIgnoreCase("metabolic")) {
					List<Object> printList = new LinkedList<Object>();

					return printList;
				} else if (moduleName.equalsIgnoreCase("stableNotes")) {
					String query = "select obj from StableNote as obj where uhid='" + uhid
							+ "' and to_char(entrytime,'yyyy-MM-dd HH:mm:ss')>='" + strDateFrom + "' and "
							+ "to_char(entrytime,'yyyy-MM-dd HH:mm:ss')<='" + strDateTo + "'";
					List<StableNote> stableNotePrintData = inicuDao.getListFromMappedObjQuery(query);
					return stableNotePrintData;
				} else if (moduleName.equalsIgnoreCase("doctorNotes")) {
					String query = "select obj from SaJaundice as obj where uhid='" + uhid
							+ "' and to_char(creationtime,'yyyy-MM-dd HH:mm:ss')>='" + strDateFrom + "' and "
							+ "to_char(creationtime,'yyyy-MM-dd HH:mm:ss')<='" + strDateTo + "'";
					List<SaJaundice> jaundicePrintData = inicuDao.getListFromMappedObjQuery(query);
					return jaundicePrintData;
				} else if (moduleName.equalsIgnoreCase("infection")) {

				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@SuppressWarnings("unchecked")
	@Override
	public RespSystemDropDowns getRespiratoryDropDowns(String uhid) {

		RespSystemDropDowns respDropDowns = new RespSystemDropDowns();
		// getting order object alos same for drop downs..
		String queryRefTestsList = "select obj from RefTestslist as obj where not (obj.assesmentCategory like ('%None%')) order by assesmentCategory";
		List<RefTestslist> listRefTests = inicuDao.getListFromMappedObjQuery(queryRefTestsList);
		// populate drop down hash map for the tests list...
		HashMap<Object, List<RefTestslist>> testsListMap = new HashMap<Object, List<RefTestslist>>();
		for (RefTestslist test : listRefTests) {
			List categoryList = null;
			if (testsListMap.get(test.getAssesmentCategory()) != null) {
				categoryList = testsListMap.get(test.getAssesmentCategory());

			} else {
				categoryList = new ArrayList<RefTestslist>();
			}
			categoryList.add(test);
			testsListMap.put(test.getAssesmentCategory(), categoryList);
		}

		respDropDowns.setTestsList(testsListMap);

		String queryOrderInvestigation = "SELECT testid, testname FROM ref_testslist";
		List<KeyValueObj> orderInvestigation = getRefObj(queryOrderInvestigation);
		respDropDowns.setOrderInvestigation(orderInvestigation);

		String queryAssessmentJaundice = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment";
		List<KeyValueObj> assessmentJaundice = getRefObj(queryAssessmentJaundice);
		KeyValueObj otherTreatment = new KeyValueObj();
		otherTreatment.setKey("Other");
		otherTreatment.setValue("Other");
		assessmentJaundice.add(otherTreatment);
		respDropDowns.setTreatmentAction(assessmentJaundice);
		// active medicines given to that patient.
		List<String> activeMedList = new ArrayList<>();
		if (!BasicUtils.isEmpty(uhid)) {
			String activeMed = "select medicinename from baby_prescription where uhid='" + uhid.trim()
					+ "' and isactive = true";
			List<String> result = inicuDao.getListFromNativeQuery(activeMed);
			if (!BasicUtils.isEmpty(result)) {
				activeMedList.addAll(result);
			}
		}

		String queryMedicineList = "select obj from Medicines obj where isactive='true'";
		List<Medicines> medicineList = inicuDao.getListFromMappedObjQuery(queryMedicineList);
		List<Medicines> changedMedList = new ArrayList<>();

		if (!BasicUtils.isEmpty(medicineList)) {
			for (Medicines m : medicineList) {

				boolean isPresent = false;
				if (!BasicUtils.isEmpty(activeMedList)) {
					for (String s : activeMedList) {
						if (s != null && s.equalsIgnoreCase(m.getMedname())) {
							isPresent = true;
						}
					}
				}

				if (isPresent) {
					continue;
				}
				changedMedList.add(m);
			}
		}

		respDropDowns.setMedicine(changedMedList);
		respDropDowns.setAllMedicine(medicineList);

		String queryRdsCause = "select rdscauseid,rdscause from ref_rdscause";
		List<KeyValueObj> rdsCauseList = getRefObj(queryRdsCause);
		KeyValueObj otherKeyRds = new KeyValueObj();
		otherKeyRds.setKey("other");
		otherKeyRds.setValue("Other");
		rdsCauseList.add(otherKeyRds);
		respDropDowns.setCauseOfRds(rdsCauseList);

		String queryApneaCause = "select apneacauseid,apneacause from ref_apneacause";
		List<KeyValueObj> apneaCauseList = getRefObj(queryApneaCause);
		KeyValueObj otherKeyApnea = new KeyValueObj();
		otherKeyApnea.setKey("other");
		otherKeyApnea.setValue("Other");
		apneaCauseList.add(otherKeyApnea);
		respDropDowns.setCauseOfApnea(apneaCauseList);

		String queryVentilationMode = "select obj from RefVentilationmode as obj where ventmodeid in ('VM0007','VM0008','VM0009','VM0010','VM0011','VM0012','VM0013')";
		List<RefVentilationmode> rdsVentModeList = inicuDao.getListFromMappedObjQuery(queryVentilationMode);
		respDropDowns.setVentMode(rdsVentModeList);

		String queryGetFrequencyRef = "select obj from RefMedfrequency obj order by frequency_int";
		List<RefMedfrequency> freqList = inicuDao.getListFromMappedObjQuery(queryGetFrequencyRef);
		respDropDowns.setMedicineFrequency(freqList);

		// getting hours data....
		respDropDowns.setHours(getTime(BasicConstants.HOURS));

		// get associated events....
//		String queryAssociatedEvents = "select uhid,associated_event from associate_assesment_final where uhid='" + uhid
//				+ "'";
//		List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);
//		respDropDowns.setAssociatedEvents(listAssociatedEvents);

		String getRiskFactorRds = "SELECT riskfactorid, riskfactor FROM ref_rdsriskfactor";
		List<KeyValueObj> riskFactorRds = getRefObj(getRiskFactorRds);
		KeyValueObj other = new KeyValueObj();
		KeyValueObj other1 = new KeyValueObj();
		other.setKey("otherRisk");
		other.setValue("Other");
		riskFactorRds.add(other);
		other1.setKey("noneRisk");
		other1.setValue("None");
		riskFactorRds.add(other1);
		respDropDowns.setRiskFactorRds(riskFactorRds);

		String getRiskFactorPphn = "SELECT riskfactorid, riskfactor FROM ref_pphnriskfactor";
		List<KeyValueObj> riskFactorPphn = getRefObj(getRiskFactorPphn);
		KeyValueObj otherPphn = new KeyValueObj();
		KeyValueObj otherPphn1 = new KeyValueObj();
		otherPphn.setKey("otherRisk");
		otherPphn.setValue("Other");
		riskFactorPphn.add(otherPphn);
		otherPphn1.setKey("noneRisk");
		otherPphn1.setValue("None");
		riskFactorPphn.add(otherPphn1);
		respDropDowns.setRiskFactorPphn(riskFactorPphn);

		String getRiskFactorPneumo = "SELECT riskfactorid, riskfactor FROM ref_pneumoriskfactor";
		List<KeyValueObj> riskFactorPneumo = getRefObj(getRiskFactorPneumo);
		KeyValueObj otherPneumo = new KeyValueObj();
		KeyValueObj otherPneumo1 = new KeyValueObj();
		otherPneumo.setKey("otherRisk");
		otherPneumo.setValue("Other");
		riskFactorPneumo.add(otherPneumo);
		otherPneumo1.setKey("noneRisk");
		otherPneumo1.setValue("None");
		riskFactorPneumo.add(otherPneumo1);
		respDropDowns.setRiskFactorPneumo(riskFactorPneumo);

		// get ICd code list for RDs
		String getIcdCauseListRds = "SELECT code,cause FROM ref_icd_code where assessment='RDS'";
		List<KeyValueObj> icdCauseListRds = getRefObj(getIcdCauseListRds);
		respDropDowns.setIcdcauseOfRds(icdCauseListRds);

		// get ICd code list for Apnea
		String getIcdCauseListApnea = "SELECT code,cause FROM ref_icd_code where assessment='Apnea'";
		List<KeyValueObj> icdCauseListApnea = getRefObj(getIcdCauseListApnea);
		respDropDowns.setIcdcauseOfApnea(icdCauseListApnea);

		// get ICd code list for Pphn
		String getIcdCauseListPphn = "SELECT code,cause FROM ref_icd_code where assessment='PPHN'";
		List<KeyValueObj> icdCauseListPphn = getRefObj(getIcdCauseListPphn);
		respDropDowns.setIcdcauseOfPphn(icdCauseListPphn);

		// get ICd code list for Pneumo
		String getIcdCauseListPneumo = "SELECT code,cause FROM ref_icd_code where assessment='Pneumothorax'";
		List<KeyValueObj> icdCauseListPneumo = getRefObj(getIcdCauseListPneumo);
		respDropDowns.setICdcauseOfPneumo(icdCauseListPneumo);

		return respDropDowns;
	}

	private void PopulateInvestigationOrdered(Object anyObject)
	{

		if(anyObject instanceof VwRespsystem)
		{
			VwRespsystem vwRespsystem = (VwRespsystem)anyObject;
			String fetchInvestigationList = null;
			if(vwRespsystem.getEvent().equalsIgnoreCase("Respiratory Distress"))
			{
				fetchInvestigationList = "SELECT testname FROM InvestigationOrdered as obj where uhid='"+vwRespsystem.getUhid()+"' and assesment_type='Respiratory' and assesmentid='"+vwRespsystem.getId()+"'";
			}
			else if(vwRespsystem.getEvent().equalsIgnoreCase("PPHN"))
			{
				fetchInvestigationList = "SELECT testname FROM InvestigationOrdered as obj where uhid='"+vwRespsystem.getUhid()+"' and assesment_type='pphn' and assesmentid='"+vwRespsystem.getId()+"'";
			}
			else
			{
				fetchInvestigationList = "SELECT testname FROM InvestigationOrdered as obj where uhid='"+vwRespsystem.getUhid()+"' and assesment_type='"+vwRespsystem.getEvent()+"' and assesmentid='"+vwRespsystem.getId()+"'";
			}

			List<String> listofTest = inicuDao.getListFromMappedObjQuery(fetchInvestigationList);

			vwRespsystem.setOrderlist(BasicUtils.ConvertToCommaSeperatedString(listofTest));
		}
		else if(anyObject instanceof VwAssesmentInfectionFinal)
		{
			VwAssesmentInfectionFinal vwAssesmentInfectionFinal = (VwAssesmentInfectionFinal) anyObject;
			String fetchInvestigationList = "SELECT testname FROM InvestigationOrdered as obj where uhid='"+vwAssesmentInfectionFinal.getUhid()+"' and assesment_type='"+vwAssesmentInfectionFinal.getEvent()+"' and assesmentid='"+vwAssesmentInfectionFinal.getId()+"'";
			List<String> listofTest = inicuDao.getListFromMappedObjQuery(fetchInvestigationList);
			vwAssesmentInfectionFinal.setOrderlist(BasicUtils.ConvertToCommaSeperatedString(listofTest));
		}
		else if(anyObject instanceof SaFeedIntolerance)
		{
			SaFeedIntolerance saFeedIntolerance = (SaFeedIntolerance) anyObject;
			String fetchInvestigationList = "SELECT testname FROM InvestigationOrdered as obj where uhid='"+saFeedIntolerance.getUhid()+"' and assesment_type='FeedIntolerance' and assesmentid='"+saFeedIntolerance.getFeedIntoleranceId()+"'";
			List<String> listofTest = inicuDao.getListFromMappedObjQuery(fetchInvestigationList);
			saFeedIntolerance.setOrderlist(BasicUtils.ConvertToCommaSeperatedString(listofTest));
		}
		else if(anyObject instanceof SaRenalfailure)
		{
			SaRenalfailure saRenalfailure = (SaRenalfailure) anyObject;
			String fetchInvestigationList = "SELECT testname FROM InvestigationOrdered as obj where uhid='"+saRenalfailure.getUhid()+"' and assesment_type='Renal' and assesmentid='"+saRenalfailure.getRenalid()+"'";
			List<String> listofTest = inicuDao.getListFromMappedObjQuery(fetchInvestigationList);
			saRenalfailure.setOrderlist(BasicUtils.ConvertToCommaSeperatedString(listofTest));
		}
		else if(anyObject instanceof VwAssesmentCnsFinal)
		{
			VwAssesmentCnsFinal vwAssesmentcnsFinal = (VwAssesmentCnsFinal) anyObject;
			String fetchInvestigationList=null;
			if(vwAssesmentcnsFinal.getEvent().equalsIgnoreCase("Neuromuscular Disorder")){
				fetchInvestigationList = "SELECT testname FROM InvestigationOrdered as obj where uhid='"+vwAssesmentcnsFinal.getUhid()+"' and assesment_type='NeuromuscularDisorders' and assesmentid='"+vwAssesmentcnsFinal.getId()+"'";
			}
			else
			{
				fetchInvestigationList = "SELECT testname FROM InvestigationOrdered as obj where uhid='"+vwAssesmentcnsFinal.getUhid()+"' and assesment_type='"+vwAssesmentcnsFinal.getEvent()+"' and assesmentid='"+vwAssesmentcnsFinal.getId()+"'";
			}
			List<String> listofTest = inicuDao.getListFromMappedObjQuery(fetchInvestigationList);
			vwAssesmentcnsFinal.setOrderlist(BasicUtils.ConvertToCommaSeperatedString(listofTest));
		}


	}

	private void ProcessTreatmentList(VwRespsystem vwRespsystem)
	{
		String treatmentStr = vwRespsystem.getTreatment();
		if (!BasicUtils.isEmpty(treatmentStr)) {
			String[] listTreatement = treatmentStr.replace(" ", "").trim().replace("[", "").replace("]", "")
					.split(",");
			ArrayList<String> listTreatementArray = new ArrayList<String>(Arrays.asList(listTreatement));
			String temptreatment = "";
			for(int i=0;i<listTreatementArray.size();i++)
			{
				String fetchQuery = "SELECT treatment from ref_assesment_treatment where assesmenttreatmentid='"+listTreatementArray.get(i)+"'";

				List res = inicuDao.getListFromNativeQuery(fetchQuery);
				if(!BasicUtils.isEmpty(res))
				{
					if(i==listTreatementArray.size()-1)
					{
						temptreatment+=res.get(0).toString();
					}
					else
					{
						temptreatment+=res.get(0).toString()+",";
					}
				}
			}
			vwRespsystem.setTreatment(temptreatment);
		}
	}

	@SuppressWarnings("unchecked")
	private List<VwRespsystem> getPastRespEventList(String uhid) {
		String fetchPastRespEventList = "SELECT obj FROM VwRespsystem as obj where uhid='"+uhid+"' order by creationtime desc, id desc,event desc";
		//List<VwRespsystem> pastRespEventList = inicuDao.getListFromNativeQuery(fetchPastRespEventList);
		List<VwRespsystem> pastRespEventList = inicuDao.getListFromMappedObjQuery(fetchPastRespEventList);
		for(VwRespsystem vwRespsystem : pastRespEventList)
		{
			PopulateInvestigationOrdered(vwRespsystem);
			ProcessTreatmentList(vwRespsystem);
		}

		if (BasicUtils.isEmpty(pastRespEventList)) {
			System.out.println("Past entity is empty: " + pastRespEventList);
		} else {
			Iterator<VwRespsystem> itr = pastRespEventList.iterator();
			while (itr.hasNext()) {
				VwRespsystem obj = itr.next();
				String causeStr = obj.getCause();
				if (!BasicUtils.isEmpty(causeStr)) {
					String[] listSymtoms = causeStr.replace(" ", "").trim().replace("[", "").replace("]", "")
							.split(",");
					ArrayList<String> symtomsList = new ArrayList<String>(Arrays.asList(listSymtoms));
					obj.setCauseList(symtomsList);
				}
			}
		}
		return pastRespEventList;
	}

	@SuppressWarnings("unchecked")
	private RespSupport getLastRespSupport(String uhid) {
		RespSupport returnObj = null;
		String fetchRespSupport = "SELECT obj FROM RespSupport as obj where uhid='" + uhid
				+ "' order by respsupportid desc";
		List<RespSupport> respSupportList = inicuDao.getListFromMappedObjQuery(fetchRespSupport);
		if (BasicUtils.isEmpty(respSupportList)) {
			returnObj = new RespSupport();
		} else {
			String queryFetchBpdAssessed = "select obj from RespSupport as obj where uhid = '" + uhid + "' and counterBpdRds = 1";
			List<RespSupport> rsList = inicuDao.getListFromMappedObjQuery(queryFetchBpdAssessed);

			returnObj = respSupportList.get(0);
			returnObj.setRespsupportid(null);
			if(!BasicUtils.isEmpty(rsList)) {
				Integer counterBpd = rsList.get(0).getCounterBpdRds();
				returnObj.setCounterBpdRds(counterBpd);
			}
		}

		String pco2NursingBloodGasQuery = "select pco2, spo2, ph, be, hco2, po2 from nursing_bloodgas where uhid='" + uhid
				+ "' " + " order by creationtime desc limit 1";
		List<Object[]> pco2ValueList = inicuDao.getListFromNativeQuery(pco2NursingBloodGasQuery);
		if (pco2ValueList != null && pco2ValueList.size() > 0) {
			// returnObj.setRspCO2(pco2ValueList.get(0).toString());
			System.out.println(pco2ValueList.get(0));
			Object[] parametesObject = pco2ValueList.get(0);
			if (!BasicUtils.isEmpty(parametesObject[0])) {
				returnObj.setRspCO2(parametesObject[0].toString());
			}
			if (!BasicUtils.isEmpty(parametesObject[1])) {
				returnObj.setRsSpo2(parametesObject[1].toString());
			}
			if (!BasicUtils.isEmpty(parametesObject[2])) {
				returnObj.setph(parametesObject[2].toString());
			}
			if (!BasicUtils.isEmpty(parametesObject[3])) {
				returnObj.setBe(parametesObject[3].toString());
			}
			if (!BasicUtils.isEmpty(parametesObject[4])) {
				returnObj.setHco3(parametesObject[4].toString());
			}

			if (!BasicUtils.isEmpty(parametesObject[5])) {
				returnObj.setPo2(parametesObject[5].toString());
			}

		}

		String date = null;
		String queryBloodGasDetails = "select obj from NursingBloodGas as obj where uhid = '" + uhid + "' order by creationtime desc";
		List<NursingBloodGas> bloodGasList = inicuDao.getListFromMappedObjQuery(queryBloodGasDetails);

		if(!BasicUtils.isEmpty(bloodGasList)) {
			 date = bloodGasList.get(0).getEntryDate().toString();
		}
		returnObj.setBloodGasDateTime(date);

		return returnObj;
	}


	@SuppressWarnings("unchecked")
	private String getSurfactantDoseCount(String uhid) {
		String surfactantDoseCount = "";
		String queryStr = "select count from surfactant_dose_count_view where uhid='" + uhid + "'";
		List<Object> countList = inicuDao.getListFromNativeQuery(queryStr);
		if (null == countList || countList.isEmpty() || null == countList.get(0)) {
			surfactantDoseCount = "1st";
		} else {
			int doseCount = Integer.parseInt(countList.get(0).toString()) + 1;
			int j = doseCount % 10;
			int k = doseCount % 100;

			if (j == 1 && k != 11) {
				surfactantDoseCount = doseCount + "st";
			} else if (j == 2 && k != 12) {
				surfactantDoseCount = doseCount + "nd";
			} else if (j == 3 && k != 13) {
				surfactantDoseCount = doseCount + "rd";
			} else {
				surfactantDoseCount = doseCount + "th";
			}
		}
		return surfactantDoseCount;
	}

	private Integer getDownesScore(String uhid) {
		Integer downesScore = null;

		String fetchDownesScore = "SELECT obj FROM ScoreDownes as obj where uhid='" + uhid
				+ "' order by creationtime desc";
		List<ScoreDownes> downesScoreList = inicuDao.getListFromMappedObjQuery(fetchDownesScore);
		if (!BasicUtils.isEmpty(downesScoreList)) {
			if (downesScoreList.get(0).getDownesscore() != null) {
				downesScore = downesScoreList.get(0).getDownesscore();
			}
		}

		return downesScore;
	}

	private Timestamp lastDownesTime(String uhid) {
		Timestamp downesTime = null;

		String fetchDownesScore = "SELECT obj FROM ScoreDownes as obj where uhid='" + uhid
				+ "' order by creationtime desc";
		List<ScoreDownes> downesScoreList = inicuDao.getListFromMappedObjQuery(fetchDownesScore);
		if (!BasicUtils.isEmpty(downesScoreList)) {
			if (downesScoreList.get(0).getDownesscore() != null) {
				downesTime = downesScoreList.get(0).getEntrydate();
			}
		}
		return downesTime;
	}

	private Timestamp lastSilvermanTime(String uhid) {
		Timestamp silverTime = null;

		String fetchSilverScore = "SELECT obj FROM ScoreSilverman as obj where uhid='" + uhid
				+ "' order by creationtime desc";
		List<ScoreSilverman> silverScoreList = inicuDao.getListFromMappedObjQuery(fetchSilverScore);
		if (!BasicUtils.isEmpty(silverScoreList)) {
			if (silverScoreList.get(0).getSilvermanscore() != null) {
				silverTime = silverScoreList.get(0).getEntrydate();
			}
		}
		return silverTime;
	}

	@SuppressWarnings("unchecked")
	public List<BabyPrescription> getPastPrescriptionList(String uhid, String calDate, String currDate) {

		String queryPastPrescriptionList = "select obj from BabyPrescription as obj where isactive = 'false' and uhid='"
				+ uhid + "' and enddate >= '" + calDate + "' and enddate <= '" + currDate
				+ "' order by creationtime desc";
		List<BabyPrescription> pastPrescriptionList1 = inicuDao.getListFromMappedObjQuery(queryPastPrescriptionList);

		String querypresList = "select obj from BabyPrescription as obj where isactive = 'true' and uhid = '" + uhid
				+ "' order by creationtime desc";
		List<BabyPrescription> pastPrescriptionList2 = inicuDao.getListFromMappedObjQuery(querypresList);

		List<BabyPrescription> pastPrescriptionList = new ArrayList<BabyPrescription>();
		pastPrescriptionList.addAll(pastPrescriptionList2);
		pastPrescriptionList.addAll(pastPrescriptionList1);
		return pastPrescriptionList;
	}

	public String CalculateDate48HoursAgo(Date currentDate) {

		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		// convert date to calendar
		Calendar c = Calendar.getInstance();
		c.setTime(currentDate);

		// manipulate date
		// c.add(Calendar.YEAR, 1);
		// c.add(Calendar.MONTH, 1);
		c.add(Calendar.DATE, -2); // same with
		Date currentDatePlusTwo = c.getTime();
		String calculatedDate = dateFormat.format(currentDatePlusTwo);
		return calculatedDate;
	}

	private List<SaRespRds> getRiskPastList(String uhid) {
		String queryPastRiskList = "select obj from SaRespRds as obj where uhid = '" + uhid
				+ "' and riskfactor!=null order by creationtime desc";
		List<SaRespRds> pastRiskList = inicuDao.getListFromMappedObjQuery(queryPastRiskList);
		return pastRiskList;
	}

	private List<SaRespPphn> getRiskPastListPphn(String uhid) {
		String queryPastRiskList = "select obj from SaRespPphn as obj where uhid = '" + uhid
				+ "' and riskfactor!=null order by creationtime desc";
		List<SaRespPphn> pastRiskList = inicuDao.getListFromMappedObjQuery(queryPastRiskList);
		return pastRiskList;
	}

	private List<SaRespPneumo> getRiskPastListPneumo(String uhid) {
		String queryPastRiskList = "select obj from SaRespPneumo as obj where uhid = '" + uhid
				+ "' and riskfactor!=null order by creationtime desc";
		List<SaRespPneumo> pastRiskList = inicuDao.getListFromMappedObjQuery(queryPastRiskList);
		return pastRiskList;
	}

	private List<SaJaundice> getJaundiceRiskFactor(String uhid) {
		String queryPastRiskList = "select obj from SaJaundice as obj where uhid = '" + uhid
				+ "' and riskfactor!=null order by creationtime desc";
		List<SaJaundice> pastRiskList = inicuDao.getListFromMappedObjQuery(queryPastRiskList);
		return pastRiskList;
	}

	private List<SaCnsAsphyxia> getAsphyxiaRiskFactorList(String uhid) {
		String queryPastRiskList = "select obj from SaCnsAsphyxia as obj where uhid = '" + uhid
				+ "' and riskfactor!=null order by creationtime desc";
		List<SaCnsAsphyxia> pastRiskList = inicuDao.getListFromMappedObjQuery(queryPastRiskList);
		return pastRiskList;
	}

	private List<SaSepsis> getRiskPastListSepsis(String uhid) {
		String queryPastRiskListSepsis = "select obj from SaSepsis as obj where uhid = '" + uhid
				+ "' and riskfactor!=null order by creationtime desc";
		List<SaSepsis> pastRiskListSepsis = inicuDao.getListFromMappedObjQuery(queryPastRiskListSepsis);
		return pastRiskListSepsis;
	}

	private List<SaNec> getRiskPastListNec(String uhid) {
		String queryPastRiskListNec = "select obj from SaNec as obj where uhid = '" + uhid
				+ "' and riskfactor!=null order by creationtime desc";
		List<SaNec> pastRiskListNec = inicuDao.getListFromMappedObjQuery(queryPastRiskListNec);
		return pastRiskListNec;
	}

	private List<SaFeedIntolerance> getRiskPastListFeed(String uhid) {
		String queryPastRiskListFeed = "select obj from SaFeedIntolerance as obj where uhid = '" + uhid
				+ "' and riskfactors!=null order by creationtime desc";
		List<SaFeedIntolerance> pastRiskListFeed = inicuDao.getListFromMappedObjQuery(queryPastRiskListFeed);
		return pastRiskListFeed;
	}

	@Override
	public ResponseMessageWithResponseObject saveRespSystem(AssessmentRespSystemPOJO respSystem) {
		ResponseMessageWithResponseObject resp = new ResponseMessageWithResponseObject();

		String eventName = respSystem.getRespSystemObject().getEventName();
		if (!BasicUtils.isEmpty(eventName)) {
			if (eventName.equalsIgnoreCase("respDistress")) {
				resp = saveRds(respSystem, null);
			} else if (eventName.equalsIgnoreCase("pphn")) {
				resp = savePphn(respSystem, null);
			} else if (eventName.equalsIgnoreCase("apnea")) {
				resp = saveApnea(respSystem, null);
			} else if (eventName.equalsIgnoreCase("other")) {
				resp = saveRespOther(respSystem);
			} else if (eventName.equalsIgnoreCase("pneumothorax")) {
				resp = savePneumothorax(respSystem, null);
			}
		}
		return resp;

	}

	@Override
	public ResponseMessageWithResponseObject saveRds(AssessmentRespSystemPOJO respSystem, Timestamp entryTime) {
		ResponseMessageWithResponseObject resp = new ResponseMessageWithResponseObject();
		if (!BasicUtils.isEmpty(respSystem.getUhid())) {
			String loggedUser = respSystem.getLoggedUser();
			String uhid = respSystem.getUhid();
			try {

				SaRespRds currentRespiratoryDistress = respSystem.getRespSystemObject().getRespiratoryDistress()
						.getCurrentRespDistress();
				if (BasicUtils.isEmpty(currentRespiratoryDistress.getEpisodeid()) && !BasicUtils.isEmpty(currentRespiratoryDistress.getUhid())) {
					String queryAssociatedEvents = "select episodeid from sa_resp_rds where uhid='"
							+ currentRespiratoryDistress.getUhid() + "' order by creationtime desc";
					List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

					if (!BasicUtils.isEmpty(listAssociatedEvents)) {
						currentRespiratoryDistress.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
					}
				}
				Timestamp assessmentTime = currentRespiratoryDistress.getAssessmentTime();

				if (!BasicUtils.isEmpty(assessmentTime)) {
					currentRespiratoryDistress.setAssessmentTime(assessmentTime);
				}

				Long respSystemID = currentRespiratoryDistress.getResprdsid();

				if (currentRespiratoryDistress.getEventstatus().equalsIgnoreCase("Yes")) {
					// for respirtory support
					List treatmentActionList = currentRespiratoryDistress.getTreatmentActionList();

					if (!BasicUtils.isEmpty(treatmentActionList)) {
						currentRespiratoryDistress.setTreatmentaction(treatmentActionList.toString());

						String treatmentStr = treatmentActionList.toString();

						if (!treatmentStr.contains("TRE004")) {
							currentRespiratoryDistress.setSufactantname(null);
							currentRespiratoryDistress.setSurfactantDose(null);
						}
					} else {
						currentRespiratoryDistress.setTreatmentaction(null);
						currentRespiratoryDistress.setSufactantname(null);
						currentRespiratoryDistress.setSurfactantDose(null);
					}

					List causeRespiratoryDistressList = currentRespiratoryDistress.getRdsCauseList();
					if (!BasicUtils.isEmpty(causeRespiratoryDistressList)) {
						currentRespiratoryDistress.setCauseofrds(causeRespiratoryDistressList.toString());
					}


					// set plans
					if (!BasicUtils.isEmpty(currentRespiratoryDistress.getRdsplanList())) {
						currentRespiratoryDistress.setRdsplan(currentRespiratoryDistress.getRdsplanList().toString());
					}

					// set ICD Cause
					if (!BasicUtils.isEmpty(currentRespiratoryDistress.getIcdCauseofrdsList())) {
						currentRespiratoryDistress
								.setIcdCauseofRds(currentRespiratoryDistress.getIcdCauseofrdsList().toString());
					}

					// set risk factors
					if (!BasicUtils.isEmpty(currentRespiratoryDistress.getRiskfactorList())) {
						currentRespiratoryDistress
								.setRiskfactor(currentRespiratoryDistress.getRiskfactorList().toString());
					}
					NurseExecutionOrders order = new NurseExecutionOrders();

					// set progress notes
					if (!BasicUtils.isEmpty(currentRespiratoryDistress.getProgressnotes())) {
						if(currentRespiratoryDistress.getProgressnotes().indexOf(loggedUser)==-1){
							currentRespiratoryDistress.setProgressnotes(
									currentRespiratoryDistress.getProgressnotes());
							order.setLoggeduser(loggedUser);
						}
					}

					if(!BasicUtils.isEmpty(currentRespiratoryDistress.getOthercomments())) {
						order.setEventname("Respiratory Distress");
						order.setIsExecution(false);
						order.setOrderText(currentRespiratoryDistress.getOthercomments());
						order.setAssessmentdate(currentRespiratoryDistress.getAssessmentTime());
						order.setUhid(uhid);
						inicuDao.saveObject(order);
					}
				}
				else {
					SaRespRds rds = new SaRespRds();
					rds.setEventstatus(currentRespiratoryDistress.getEventstatus());
					rds.setAgeinhoursdays(currentRespiratoryDistress.getAgeinhoursdays());
					rds.setAgeatonset(currentRespiratoryDistress.getAgeatonset());
					rds.setAssessmentTime(respSystem.getRespSystemObject().getRespiratoryDistress()
							.getCurrentRespDistress().getAssessmentTime());
					rds.setAgeatassesment(currentRespiratoryDistress.getAgeatassesment());
					rds.setIsageofassesmentinhours(currentRespiratoryDistress.getIsageofassesmentinhours());
					rds.setAssessmentDate(currentRespiratoryDistress.getAssessmentDate());
					rds.setAssessmentHour(currentRespiratoryDistress.getAssessmentHour());
					rds.setAssessmentMin(currentRespiratoryDistress.getAssessmentMin());
					rds.setIsNewEntry(currentRespiratoryDistress.getIsNewEntry());

					if (!BasicUtils.isEmpty(currentRespiratoryDistress.getMedicationStr())) {
						rds.setMedicationStr(currentRespiratoryDistress.getMedicationStr());
					}

                    rds.setProgressnotes(currentRespiratoryDistress.getProgressnotes());
                    // set progress notes
                    if(!BasicUtils.isEmpty(rds.getProgressnotes())  && rds.getProgressnotes().indexOf(loggedUser)==-1){
                        rds.setProgressnotes(rds.getProgressnotes());
                    }
					rds.setEpisodeNumber(currentRespiratoryDistress.getEpisodeNumber());
					currentRespiratoryDistress = rds;
				}

				currentRespiratoryDistress.setUhid(uhid);
				currentRespiratoryDistress.setLoggeduser(loggedUser);

				if (!BasicUtils.isEmpty(currentRespiratoryDistress.getIsNewEntry())) {
                    if (currentRespiratoryDistress.getIsNewEntry()) {
                        currentRespiratoryDistress.setResprdsid(null);
                        currentRespiratoryDistress = (SaRespRds) inicuDao.saveObject(currentRespiratoryDistress);
                    } else {
                        if (currentRespiratoryDistress.getEventstatus().equalsIgnoreCase("Inactive")) {
                            try {
                                String query = "update sa_resp_rds set progressnotes = '" + currentRespiratoryDistress.getProgressnotes().toString()
                                        + "' where resprdsid = '" + respSystemID + "'";
                                inicuDao.updateOrDeleteNativeQuery(query);
                            } catch (Exception ex) {
                                ex.printStackTrace();
                                System.out.println("Exception occured while updating progressnotes for inactive state");
                            }
                        } else {
                            currentRespiratoryDistress.setResprdsid(respSystemID);
                            currentRespiratoryDistress.setCreationtime(currentRespiratoryDistress.getAssessmentTime());
                            currentRespiratoryDistress = (SaRespRds) inicuDao.saveObject(currentRespiratoryDistress);
                        }
                    }
                }


				if (currentRespiratoryDistress.getEventstatus().equalsIgnoreCase("Inactive")) {
				    try {
                        String query = "update respsupport set eventid = '" + currentRespiratoryDistress.getResprdsid().toString()
                                + "', is_eventid_updated = 'true' where respsupportid = (select respsupportid from respsupport where uhid='" + uhid
                                + "' and eventname = 'Respiratory Distress' and is_eventid_updated = 'false' order by creationtime desc limit 1)";
                        inicuDao.updateOrDeleteNativeQuery(query);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        System.out.println("Exception occured while updating eventid in resp support for inactive state");
                        logger.error("Exception occured while updating eventid in resp support for inactive state", ex);
                    }

				    if (!BasicUtils.isEmpty(respSystem.getRespSystemObject().getRespiratoryDistress().getPastRespDistress())) {
                        updatePastRDSProgressNotes(currentRespiratoryDistress,
                                respSystem.getRespSystemObject().getRespiratoryDistress().getPastRespDistress());
                    }
				}

				if (!currentRespiratoryDistress.getEventstatus().equalsIgnoreCase("Inactive")) {
					// save prescription data here...
					List<BabyPrescription> prescriptionList = respSystem.getRespSystemObject().getRespiratoryDistress()
							.getPrescriptionList();
					if (!BasicUtils.isEmpty(prescriptionList)) {
						this.savePrescriptionList(null, prescriptionList, "RDS",
								currentRespiratoryDistress.getResprdsid(),
								currentRespiratoryDistress.getAssessmentTime());
					}
				}

                RespSupport respSupport = respSystem.getRespSystemObject().getRespSupport();
                respSupport.setUhid(uhid);
                respSupport.setEventname("Respiratory Distress");
                respSupport.setCreationtime(currentRespiratoryDistress.getAssessmentTime());
                respSupport.setModificationtime(currentRespiratoryDistress.getAssessmentTime());

                if (currentRespiratoryDistress.getEventstatus().equalsIgnoreCase("Yes")) {
                    respSupport.setEventid(currentRespiratoryDistress.getResprdsid().toString());
                    String treatmentStr = currentRespiratoryDistress.getTreatmentaction();

					// save nursing order
					if (!BasicUtils.isEmpty(treatmentStr) && treatmentStr.contains("TRE004")) {
						AssessmentMedication nursingOrder = new AssessmentMedication();
						nursingOrder.setUhid(uhid);
						nursingOrder.setRoute(null);
						nursingOrder.setNursing_action(false);
						nursingOrder.setMed_name(currentRespiratoryDistress.getSufactantname());
						nursingOrder.setDose(currentRespiratoryDistress.getSurfactantDoseMl());
						nursingOrder.setAssessmentid(currentRespiratoryDistress.getResprdsid());
						nursingOrder.setAssessmenttime(currentRespiratoryDistress.getAssessmentTime());
						inicuDao.saveObject(nursingOrder);
					}

					if (BasicUtils.isEmpty(treatmentStr) || !treatmentStr.contains("TRE005")) {
						if (BasicUtils.isEmpty(respSupport.getIsactive()) || respSupport.getIsactive() == true) {
							respSupport.setIsactive(false);
							respSupport.setRsVentType(null);
							respSupport = (RespSupport) inicuDao.saveObject(respSupport);
							NurseExecutionOrders order = new NurseExecutionOrders();
							order.setEventname("Respiratory Support");
							order.setIsExecution(false);
							order.setOrderText("Baby is removed from Respiratory Support");
							order.setAssessmentdate(currentRespiratoryDistress.getAssessmentTime());
							order.setUhid(uhid);
							order.setLoggeduser(loggedUser);
							inicuDao.saveObject(order);
						} else {
							if (!BasicUtils.isEmpty(respSupport) && !BasicUtils.isEmpty(respSupport.getBpdRespNote())) {
								String query = "update respsupport " + "Set bpd_resp_note = '"
										+ respSupport.getBpdRespNote() + "' " + "WHERE uhid = '" + respSupport.getUhid()
										+ "' " + "AND bpd_resp_note is not null ";
								inicuDao.updateOrDeleteNativeQuery(query);
							}
						}
					} else if (treatmentStr.contains("TRE005")) {
						if(!BasicUtils.isEmpty(respSupport.getRsVentType())) {


							String result = "";
							String respSupportSql = "select obj from RespSupport obj where uhid='" + uhid + "' order by creationtime desc";
							List<RespSupport> respSupportList = inicuDao.getListFromMappedObjQuery(respSupportSql);
							if (!BasicUtils.isEmpty(respSupportList)) {
								RespSupport resp1 = respSupportList.get(0);
								if(!BasicUtils.isEmpty(resp1.getIsactive()) && !resp1.getIsactive()){
									result = "Started";
								}else if(!BasicUtils.isEmpty(resp1.getIsactive()) && resp1.getIsactive()) {
									if(!BasicUtils.isEmpty(resp1.getRsVentType()) && !resp1.getRsVentType().equalsIgnoreCase(respSupport.getRsVentType())) {
										result = "Changed";
									}
								}
							}

							if(!BasicUtils.isEmpty(result)) {

								NurseExecutionOrders order = new NurseExecutionOrders();
								order.setEventname("Respiratory Support");
								order.setIsExecution(false);
								if(result.equalsIgnoreCase("Started"))
									order.setOrderText("Started on " + respSupport.getRsVentType());
								else
									order.setOrderText("Respiratory Support is changed to " + respSupport.getRsVentType());
								order.setAssessmentdate(currentRespiratoryDistress.getAssessmentTime());
								order.setUhid(uhid);
								order.setLoggeduser(loggedUser);
								inicuDao.saveObject(order);
							}
						}
						respSupport.setIsactive(true);
						respSupport = (RespSupport) inicuDao.saveObject(respSupport);
					}
				} else if (currentRespiratoryDistress.getEventstatus().equalsIgnoreCase("No")
                        && respSystem.getRespSystemObject().isStopTreatmentFlag()) {
                    respSupport.setEventid(currentRespiratoryDistress.getResprdsid().toString());
					respSupport.setIsactive(false);
					respSupport.setRsVentType(null);
					respSupport = (RespSupport) inicuDao.saveObject(respSupport);

					NurseExecutionOrders order = new NurseExecutionOrders();
					order.setEventname("Respiratory Support");
					order.setIsExecution(false);
					order.setOrderText("Baby is removed from Respiratory Support");
					order.setAssessmentdate(currentRespiratoryDistress.getAssessmentTime());
					order.setUhid(uhid);
					order.setLoggeduser(loggedUser);
					inicuDao.saveObject(order);
				}

				// save now order investigation....
				if (currentRespiratoryDistress.getResprdsid() != null) {
					saveOrderInvestigation(respSystem.getDropDowns().getTestsList(),
							currentRespiratoryDistress.getResprdsid(), uhid, loggedUser, "Respiratory",
							currentRespiratoryDistress.getAssessmentTime());
				}

				resp.setMessage("Respiratory Distress saved successfully.");
				resp.setType(BasicConstants.MESSAGE_SUCCESS);
			} catch (Exception ex) {
				ex.printStackTrace();
				resp.setMessage("Exception during save of respiratory system.");
				resp.setType(BasicConstants.MESSAGE_FAILURE);
			}

		} else {
			resp.setMessage("Uhid is coming as null or empty");
			resp.setType(BasicConstants.MESSAGE_FAILURE);
		}
		return resp;
	}

	@Override
	@SuppressWarnings({ "deprecation", "rawtypes" })
	public ResponseMessageWithResponseObject savePneumothorax(AssessmentRespSystemPOJO respSystem,
			Timestamp entryTime) {
		ResponseMessageWithResponseObject resp = new ResponseMessageWithResponseObject();
		if (!BasicUtils.isEmpty(respSystem.getUhid())) {

			String loggedUser = respSystem.getLoggedUser();
			String uhid = respSystem.getUhid();

			try {

				SaRespPneumo currentPneumothorax = respSystem.getRespSystemObject().getPneumothorax()
						.getCurrentRespPneumo();
				if (BasicUtils.isEmpty(currentPneumothorax.getEpisodeid()) && !BasicUtils.isEmpty(currentPneumothorax.getUhid())) {
					String queryAssociatedEvents = "select episodeid from sa_resp_pneumothorax where uhid='"
							+ currentPneumothorax.getUhid() + "' order by creationtime desc";
					List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

					if (!BasicUtils.isEmpty(listAssociatedEvents)) {
						currentPneumothorax.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
					}
				}

				Long pnemothoraxId = 0L;
                if (currentPneumothorax.getEventstatus().equalsIgnoreCase("Inactive")) {
                    pnemothoraxId = currentPneumothorax.getResppneumothoraxid();
                }
				Timestamp assessmentTime = currentPneumothorax.getAssessmentTime();
				//Calendar cal = Calendar.getInstance();
				//cal.setTimeInMillis(assessmentTime.getTime());

				if (!BasicUtils.isEmpty(assessmentTime)) {
					//cal.set(Calendar.SECOND,0);
					///cal.set(Calender)
					//cal.set(Calendar);
					//assessmentTime = new Timestamp(cal.getTime().getTime());
					//assessmentTime.set(Calendar.SECOND,0);
					//assessmentTime.setNanos(0);
					currentPneumothorax.setAssessmentTime(assessmentTime);
				}


				if (currentPneumothorax.getEventstatus().equalsIgnoreCase("Yes")) {

					List treatmentActionList = currentPneumothorax.getTreatmentActionList();

					if (!BasicUtils.isEmpty(treatmentActionList)) {
						currentPneumothorax.setTreatmentaction(treatmentActionList.toString());
						String treatmentStr = treatmentActionList.toString();
						if (!treatmentStr.contains("TRE015")) {
							currentPneumothorax.setSufactantname(null);
							currentPneumothorax.setSurfactantDose(null);
						}
					} else {
						currentPneumothorax.setTreatmentaction(null);
						currentPneumothorax.setSufactantname(null);
						currentPneumothorax.setSurfactantDose(null);
					}

					// set risk factors
					if (!BasicUtils.isEmpty(currentPneumothorax.getRiskfactorList())) {
						currentPneumothorax.setRiskfactor(currentPneumothorax.getRiskfactorList().toString());
					}

					// set ICD Cause
					if (!BasicUtils.isEmpty(currentPneumothorax.getIcdCauseofPneumoList())) {
						currentPneumothorax
								.setIcdCauseofPneumo(currentPneumothorax.getIcdCauseofPneumoList().toString());
					}

					List causePneumothoraxList = currentPneumothorax.getPneumothoraxCauseList();
					if (!BasicUtils.isEmpty(causePneumothoraxList)) {
						currentPneumothorax.setCauseofpneumothorax(causePneumothoraxList.toString());
					}

					// set plans
					if (!BasicUtils.isEmpty(currentPneumothorax.getTreatmentplanList())) {
						currentPneumothorax.setTreatmentplan(currentPneumothorax.getTreatmentplanList().toString());
					}

					// set progress notes
//					if (!BasicUtils.isEmpty(currentPneumothorax.getProgressnotes())) {
//						currentPneumothorax
//								.setProgressnotes(currentPneumothorax.getProgressnotes() + "( " + loggedUser + " )");
//					}

					NurseExecutionOrders order = new NurseExecutionOrders();

					if (!BasicUtils.isEmpty(currentPneumothorax.getProgressnotes())) {
						if(currentPneumothorax.getProgressnotes().indexOf(loggedUser)==-1){
							currentPneumothorax.setProgressnotes(
									currentPneumothorax.getProgressnotes());
							order.setLoggeduser(loggedUser);
						}
					}

					if(!BasicUtils.isEmpty(currentPneumothorax.getOtherplanComments())) {
						order.setEventname("Pneumothorax");
						order.setIsExecution(false);
						order.setOrderText(currentPneumothorax.getOtherplanComments());
						order.setAssessmentdate(currentPneumothorax.getAssessmentTime());
						order.setUhid(uhid);
						inicuDao.saveObject(order);
					}

				} else {
					SaRespPneumo respSystemEmpty = new SaRespPneumo();

					respSystemEmpty.setEventstatus(currentPneumothorax.getEventstatus());
					respSystemEmpty.setAgeatonset(currentPneumothorax.getAgeatonset());
					respSystemEmpty.setAgeinhoursdays(currentPneumothorax.getAgeinhoursdays());
					respSystemEmpty.setAgeatassesment(currentPneumothorax.getAgeatassesment());
					respSystemEmpty.setAgeAtAssessmentInhoursDays(currentPneumothorax.getAgeAtAssessmentInhoursDays());
					respSystemEmpty.setAssessmentHour(currentPneumothorax.getAssessmentHour());
					respSystemEmpty.setAssessmentMin(currentPneumothorax.getAssessmentMin());
                    respSystemEmpty.setIsNewEntry(currentPneumothorax.getIsNewEntry());

					if (BasicUtils.isEmpty(currentPneumothorax.getAssessmentTime())) {
						respSystemEmpty.setAssessmentTime(new Timestamp(System.currentTimeMillis()));
						respSystemEmpty.setAssessmentDate(new Timestamp(System.currentTimeMillis()));

					} else {
						respSystemEmpty.setAssessmentTime(currentPneumothorax.getAssessmentTime());
						respSystemEmpty.setAssessmentDate(currentPneumothorax.getAssessmentDate());
					}

                    respSystemEmpty.setProgressnotes(currentPneumothorax.getProgressnotes());
                    if (!BasicUtils.isEmpty(respSystemEmpty.getProgressnotes())) {
                        if(respSystemEmpty.getProgressnotes().indexOf(loggedUser)==-1){
                            respSystemEmpty.setProgressnotes(
                                    respSystemEmpty.getProgressnotes());
                        }
                    }

					respSystemEmpty.setEpisodeNumber(currentPneumothorax.getEpisodeNumber());
					currentPneumothorax = respSystemEmpty;
				}

				currentPneumothorax.setUhid(uhid);
				currentPneumothorax.setLoggeduser(loggedUser);

                if (!BasicUtils.isEmpty(currentPneumothorax.getIsNewEntry())) {
                    if (currentPneumothorax.getIsNewEntry()) {
                        currentPneumothorax.setResppneumothoraxid(null);
                        currentPneumothorax = (SaRespPneumo) inicuDao.saveObject(currentPneumothorax);
                    } else {
                        if (currentPneumothorax.getEventstatus().equalsIgnoreCase("Inactive")) {
                            try {
                                String query = "update sa_resp_pneumothorax set progressnotes = '" + currentPneumothorax.getProgressnotes()
                                        + "' where resppneumothoraxid = '" + pnemothoraxId + "'";
                                inicuDao.updateOrDeleteNativeQuery(query);
                            } catch (Exception ex) {
                                ex.printStackTrace();
                                System.out.println("Exception occured while updating progressnotes for inactive state");
                            }
                        } else {
                            currentPneumothorax = (SaRespPneumo) inicuDao.saveObject(currentPneumothorax);
                        }
                    }
                }

                if (currentPneumothorax.getEventstatus().equalsIgnoreCase("Inactive")) {
                    try {
                        String query = "update respsupport set eventid = '" + currentPneumothorax.getResppneumothoraxid()
                                + "', is_eventid_updated = 'true' where respsupportid = (select respsupportid from respsupport where uhid='" + uhid
                                + "' and eventname = 'Pneumothorax' and is_eventid_updated = 'false' order by creationtime desc limit 1)";
                        inicuDao.updateOrDeleteNativeQuery(query);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        System.out.println("Exception occured while updating eventid in resp support for inactive state");
                        logger.error("Exception occured while updating eventid in resp support for inactive state", ex);
                    }
                }

				if (!BasicUtils.isEmpty(respSystem.getRespSystemObject().getPneumothorax().getPastRespPneumo())
						&& currentPneumothorax.getEventstatus().equalsIgnoreCase("Inactive")) {
					updatePastPneumoProgressNotes(currentPneumothorax,
							respSystem.getRespSystemObject().getPneumothorax().getPastRespPneumo());
				}

				String treatmentActionListStr = currentPneumothorax.getTreatmentaction();

				// save nursing order
				if (!BasicUtils.isEmpty(treatmentActionListStr) && treatmentActionListStr.contains("TRE015")) {
					AssessmentMedication nursingOrder = new AssessmentMedication();
					nursingOrder.setUhid(uhid);
					nursingOrder.setRoute(null);
					nursingOrder.setNursing_action(false);
					nursingOrder.setMed_name(currentPneumothorax.getSufactantname());
					nursingOrder.setDose(currentPneumothorax.getSurfactantTotalDose().toString());
					nursingOrder.setAssessmentid(currentPneumothorax.getResppneumothoraxid());
					nursingOrder.setAssessmenttime(currentPneumothorax.getAssessmentTime());
					inicuDao.saveObject(nursingOrder);
				}

				// save prescription data here...
				if (!currentPneumothorax.getEventstatus().equalsIgnoreCase("Inactive")) {
					List<BabyPrescription> prescriptionList = respSystem.getRespSystemObject().getPneumothorax()
							.getPrescriptionList();
					if (!BasicUtils.isEmpty(prescriptionList)) {
						this.savePrescriptionList(null, prescriptionList, "Pneumothorax",
								currentPneumothorax.getResppneumothoraxid(), currentPneumothorax.getAssessmentTime());
					}
				}
				RespSupport respSupport = respSystem.getRespSystemObject().getRespSupport();
				respSupport.setUhid(uhid);
				respSupport.setEventname("Pneumothorax");
				respSupport.setCreationtime(currentPneumothorax.getAssessmentTime());
				respSupport.setModificationtime(currentPneumothorax.getAssessmentTime());

				if (currentPneumothorax.getEventstatus().equalsIgnoreCase("Yes")) {
                    respSupport.setEventid(currentPneumothorax.getResppneumothoraxid().toString());
					String treatmentStr = currentPneumothorax.getTreatmentaction();
					if (BasicUtils.isEmpty(treatmentStr) || !treatmentStr.contains("TRE016")) {
						if (BasicUtils.isEmpty(respSupport.getIsactive()) || respSupport.getIsactive() == true) {
							respSupport.setIsactive(false);
							respSupport.setRsVentType(null);
							respSupport = (RespSupport) inicuDao.saveObject(respSupport);
							NurseExecutionOrders order = new NurseExecutionOrders();
							order.setEventname("Respiratory Support");
							order.setIsExecution(false);
							order.setOrderText("Baby is removed from Respiratory Support");
							order.setAssessmentdate(currentPneumothorax.getAssessmentTime());
							order.setUhid(uhid);
							order.setLoggeduser(loggedUser);
							inicuDao.saveObject(order);

						} else {
							if (!BasicUtils.isEmpty(respSupport) && !BasicUtils.isEmpty(respSupport.getBpdRespNote())) {
								String query = "update respsupport " + "Set bpd_resp_note = '"
										+ respSupport.getBpdRespNote() + "' " + "WHERE uhid = '" + respSupport.getUhid()
										+ "' " + "AND bpd_resp_note is not null ";
								inicuDao.updateOrDeleteNativeQuery(query);
							}
						}
					} else if (treatmentStr.contains("TRE016")) {
						respSupport.setIsactive(true);
						if(!BasicUtils.isEmpty(respSupport.getRsVentType())) {
							String result = "";
							String respSupportSql = "select obj from RespSupport obj where uhid='" + uhid + "' order by creationtime desc";
							List<RespSupport> respSupportList = inicuDao.getListFromMappedObjQuery(respSupportSql);
							if (!BasicUtils.isEmpty(respSupportList)) {
								RespSupport resp1 = respSupportList.get(0);
								if(!BasicUtils.isEmpty(resp1.getIsactive()) && !resp1.getIsactive()){
									result = "Started";
								}else if(!BasicUtils.isEmpty(resp1.getIsactive()) && resp1.getIsactive()) {
									if(!BasicUtils.isEmpty(resp1.getRsVentType()) && !resp1.getRsVentType().equalsIgnoreCase(respSupport.getRsVentType())) {
										result = "Changed";
									}
								}
							}

							if(!BasicUtils.isEmpty(result)) {
								NurseExecutionOrders order = new NurseExecutionOrders();
								order.setEventname("Respiratory Support");
								order.setIsExecution(false);
								if(result.equalsIgnoreCase("Started"))
									order.setOrderText("Started on " + respSupport.getRsVentType());
								else
									order.setOrderText("Respiratory Support is changed to " + respSupport.getRsVentType());
								order.setAssessmentdate(currentPneumothorax.getAssessmentTime());
								order.setUhid(uhid);
								order.setLoggeduser(loggedUser);
								inicuDao.saveObject(order);
							}
						}
						respSupport = (RespSupport) inicuDao.saveObject(respSupport);
					}
				} else if (currentPneumothorax.getEventstatus().equalsIgnoreCase("No")
                        && respSystem.getRespSystemObject().isStopTreatmentFlag()) {
                    respSupport.setEventid(currentPneumothorax.getResppneumothoraxid().toString());
					respSupport.setIsactive(false);
					respSupport.setRsVentType(null);
					respSupport = (RespSupport) inicuDao.saveObject(respSupport);
					NurseExecutionOrders order = new NurseExecutionOrders();
					order.setEventname("Respiratory Support");
					order.setIsExecution(false);
					order.setOrderText("Baby is removed from Respiratory Support");
					order.setAssessmentdate(currentPneumothorax.getAssessmentTime());
					order.setUhid(uhid);
					order.setLoggeduser(loggedUser);
					inicuDao.saveObject(order);

				}

				// save now order investigation....
				if (currentPneumothorax.getResppneumothoraxid() != null) {
					saveOrderInvestigation(respSystem.getDropDowns().getTestsList(),
							currentPneumothorax.getResppneumothoraxid(), uhid, loggedUser, "Pneumothorax",
							currentPneumothorax.getAssessmentTime());
				}

				resp.setMessage("Pneumothorax saved successfully.");
				resp.setType(BasicConstants.MESSAGE_SUCCESS);
			} catch (Exception ex) {
				ex.printStackTrace();
				resp.setMessage("Exception during save of respiratory system.");
				resp.setType(BasicConstants.MESSAGE_FAILURE);
			}
		} else {
			resp.setMessage("Uhid is coming as null or empty");
			resp.setType(BasicConstants.MESSAGE_FAILURE);
		}

		return resp;
	}

	@Override
	public ResponseMessageWithResponseObject savePphn(AssessmentRespSystemPOJO respSystem, Timestamp entryTime) {
		ResponseMessageWithResponseObject resp = new ResponseMessageWithResponseObject();
		if (!BasicUtils.isEmpty(respSystem.getUhid())) {

			String loggedUser = respSystem.getLoggedUser();
			String uhid = respSystem.getUhid();
			try {

				SaRespPphn currentPphn = respSystem.getRespSystemObject().getPphn().getCurrentPphn();
				if (BasicUtils.isEmpty(currentPphn.getEpisodeid()) && !BasicUtils.isEmpty(currentPphn.getUhid())) {
					String queryAssociatedEvents = "select episodeid from sa_resp_pphn where uhid='"
							+ currentPphn.getUhid() + "' order by creationtime desc";
					List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

					if (!BasicUtils.isEmpty(listAssociatedEvents)) {
						currentPphn.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
					}
				}
				long pphnId = 0L;
                if (currentPphn.getEventstatus().equalsIgnoreCase("Inactive")) {
                    pphnId = currentPphn.getResppphnid();
                }
				Timestamp assessmentTime = currentPphn.getAssessmentTime();
				//Calendar cal = Calendar.getInstance();
				//cal.setTimeInMillis(assessmentTime.getTime());

				if (!BasicUtils.isEmpty(assessmentTime)) {
					//cal.set(Calendar.SECOND,0);
					//cal.set(Calendar);
					//assessmentTime = new Timestamp(cal.getTime().getTime());
					//assessmentTime.set(Calendar.SECOND,0);
					//assessmentTime.setNanos(0);
					currentPphn.setAssessmentTime(assessmentTime);
				}


				if (currentPphn.getEventstatus().equalsIgnoreCase("Yes")) {

					List<String> treatmentActionList = currentPphn.getTreatmentActionList();
					if (!BasicUtils.isEmpty(treatmentActionList)) {
						currentPphn.setTreatmentaction(treatmentActionList.toString());
						String treatmentStr = treatmentActionList.toString();
						if (!treatmentStr.contains("TRE009")) {
							currentPphn.setSufactantname(null);
							currentPphn.setSurfactantDose(null);
						}
					} else {
						currentPphn.setTreatmentaction(null);
						currentPphn.setSufactantname(null);
						currentPphn.setSurfactantDose(null);
					}

					// set risk factors
					if (!BasicUtils.isEmpty(currentPphn.getRiskfactorList())) {
						currentPphn.setRiskfactor(currentPphn.getRiskfactorList().toString());
					}

					// set ICD Cause
					if (!BasicUtils.isEmpty(currentPphn.getIcdCauseofpphnList())) {
						currentPphn.setIcdCauseofPPHN(currentPphn.getIcdCauseofpphnList().toString());
					}

					List<String> planOfPphnList = currentPphn.getPphnPlanList();
					if (!BasicUtils.isEmpty(planOfPphnList)) {
						currentPphn.setPphnplan(planOfPphnList.toString());
					}

					List<String> causePphnList = currentPphn.getPphnCauseList();
					if (!BasicUtils.isEmpty(causePphnList)) {
						currentPphn.setCauseofpphn(causePphnList.toString());
					}

					// set progress notes
//					if (!BasicUtils.isEmpty(currentPphn.getProgressnotes())) {
//						currentPphn.setProgressnotes(currentPphn.getProgressnotes() + "( " + loggedUser + " )");
//					}

					NurseExecutionOrders order = new NurseExecutionOrders();

					if (!BasicUtils.isEmpty(currentPphn.getProgressnotes())) {
						if(currentPphn.getProgressnotes().indexOf(loggedUser)==-1){
							currentPphn.setProgressnotes(
									currentPphn.getProgressnotes());
							order.setLoggeduser(loggedUser);
						}
					}

					if(!BasicUtils.isEmpty(currentPphn.getOthercomments())) {
						order.setEventname("PPHN");
						order.setIsExecution(false);
						order.setOrderText(currentPphn.getOthercomments());
						order.setAssessmentdate(currentPphn.getAssessmentTime());
						order.setUhid(uhid);
						inicuDao.saveObject(order);
					}



				} else {
					SaRespPphn pphnEmpty = new SaRespPphn();

					pphnEmpty.setEventstatus(currentPphn.getEventstatus());
					pphnEmpty.setAgeatonset(currentPphn.getAgeatonset());

					pphnEmpty.setAgeinhoursdays(currentPphn.getAgeinhoursdays());

					pphnEmpty.setAssessmentTime(
							respSystem.getRespSystemObject().getPphn().getCurrentPphn().getAssessmentTime());
					pphnEmpty.setAgeatassesment(currentPphn.getAgeatassesment());
					pphnEmpty.setIsageofassesmentinhours(currentPphn.getIsageofassesmentinhours());
					pphnEmpty.setAssessmentDate(currentPphn.getAssessmentDate());
					pphnEmpty.setAssessmentHour(currentPphn.getAssessmentHour());
					pphnEmpty.setAssessmentMin(currentPphn.getAssessmentMin());
                    pphnEmpty.setIsNewEntry(currentPphn.getIsNewEntry());

                    pphnEmpty.setProgressnotes(currentPphn.getProgressnotes());

                    if (!BasicUtils.isEmpty(pphnEmpty.getProgressnotes())) {
                        if(pphnEmpty.getProgressnotes().indexOf(loggedUser)==-1){
                            pphnEmpty.setProgressnotes(
                                    pphnEmpty.getProgressnotes());
                        }
                    }
					pphnEmpty.setEpisodeNumber(currentPphn.getEpisodeNumber());
					currentPphn = pphnEmpty;
				}

				currentPphn.setUhid(uhid);
				currentPphn.setLoggeduser(loggedUser);

				if (!BasicUtils.isEmpty(currentPphn.getIsNewEntry())) {
                    if (currentPphn.getIsNewEntry()) {
                        currentPphn.setResppphnid(null);
                        currentPphn = (SaRespPphn) inicuDao.saveObject(currentPphn);
                    } else {
                        if (currentPphn.getEventstatus().equalsIgnoreCase("Inactive")) {
                            try {
                                String query = "update sa_resp_pphn set progressnotes = '" + currentPphn.getProgressnotes()
                                        + "' where resppphnid = '" + pphnId + "'";
                                inicuDao.updateOrDeleteNativeQuery(query);
                            } catch (Exception ex) {
                                ex.printStackTrace();
                                System.out.println("Exception occured while updating progressnotes for inactive state of PPHN.");
                            }
                        } else {
                            currentPphn = (SaRespPphn) inicuDao.saveObject(currentPphn);
                        }
                    }
                }

				if (currentPphn.getEventstatus().equalsIgnoreCase("Inactive")) {
                    try {
                        String query = "update respsupport set eventid = '" + currentPphn.getResppphnid()
                                + "', is_eventid_updated = 'true' where respsupportid = (select respsupportid from respsupport where uhid='" + uhid
                                + "' and eventname = 'PPHN' and is_eventid_updated = 'false' order by creationtime desc limit 1)";
                        inicuDao.updateOrDeleteNativeQuery(query);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        System.out.println("Exception occured while updating eventid in resp support for inactive state");
                        logger.error("Exception occured while updating eventid in resp support for inactive state", ex);
                    }
                }

				if (!BasicUtils.isEmpty(respSystem.getRespSystemObject().getPphn().getPastPphn())
						&& currentPphn.getEventstatus().equalsIgnoreCase("Inactive")) {
					updatePastPphnProgressNotes(currentPphn, respSystem.getRespSystemObject().getPphn().getPastPphn());
				}

				if (currentPphn.getResppphnid() != null) {
					if (!currentPphn.getEventstatus().equalsIgnoreCase("Inactive")) {
						// save medication List here...
						List<BabyPrescription> prescriptionList = respSystem.getRespSystemObject().getPphn()
								.getPrescriptionList();
						if (!BasicUtils.isEmpty(prescriptionList)) {
							this.savePrescriptionList(null, prescriptionList, "PPHN", currentPphn.getResppphnid(),
									currentPphn.getAssessmentTime());
						}
					}
					String treatmentActionListStr = currentPphn.getTreatmentaction();
					if (!BasicUtils.isEmpty(treatmentActionListStr)) {
						String treatmentStr = treatmentActionListStr;

						// save Sildenafil
						if (treatmentStr.contains("TRE013")) {
							BabyPrescription sildenafilObj = respSystem.getRespSystemObject().getPphn()
									.getSildenafilObj();
							if (sildenafilObj.getRoute() != null && sildenafilObj.getDose() != null
									&& sildenafilObj.getFrequency() != null) {
								sildenafilObj.setEventid(currentPphn.getResppphnid().toString());
								sildenafilObj.setBolus(false);
								sildenafilObj.setEventname("PPHN");
								sildenafilObj.setMedicinename("Sildenafil");
								sildenafilObj.setMedicationtype("TYPE0009");
								sildenafilObj.setFreq_type("Intermittent");
								sildenafilObj.setStartdate(currentPphn.getAssessmentTime());
								sildenafilObj.setUhid(uhid);
								sildenafilObj.setLoggeduser(loggedUser);
								sildenafilObj.setIsactive(true);
								String medStr = "";
								if (sildenafilObj.getRoute() == "IV" || sildenafilObj.getRoute() == "IM") {
									medStr += "Injection ";
								}

								medStr += sildenafilObj.getMedicinename() + " as " + sildenafilObj.getRoute()
										+ " in a dose of " + sildenafilObj.getDose() + " mg every ";

								for (RefMedfrequency freq : respSystem.getDropDowns().getMedicineFrequency()) {
									if (freq.getFreqid().equalsIgnoreCase(sildenafilObj.getFrequency())) {
										medStr += freq.getFreqvalue();
									}
								}
								sildenafilObj.setInstruction(medStr + ".");
								sildenafilObj = (BabyPrescription) inicuDao.saveObject(sildenafilObj);
							}
						}

						// save nursing order
						if (treatmentActionListStr.contains("TRE009")) {
							AssessmentMedication nursingOrder = new AssessmentMedication();
							nursingOrder.setUhid(uhid);
							nursingOrder.setRoute(null);
							nursingOrder.setNursing_action(false);
							nursingOrder.setMed_name(currentPphn.getSufactantname());
							nursingOrder.setDose(currentPphn.getSurfactantDose());
							nursingOrder.setAssessmentid(currentPphn.getResppphnid());
							nursingOrder.setAssessmenttime(currentPphn.getAssessmentTime());
							inicuDao.saveObject(nursingOrder);
						}

						/*
						 * if (treatmentActionListStr.contains("TRE009")) { NursingOrderAssesment
						 * nursingOrder = new NursingOrderAssesment();
						 * nursingOrder.setEventid(String.valueOf(currentPphn.getResppphnid()));
						 * nursingOrder.setEventname("PPHN");
						 * nursingOrder.setAssessmentType("Respiratory System");
						 * nursingOrder.setUhid(uhid); nursingOrder.setActiontype("Surfactant");
						 *
						 * String value = "Surfactant (" + currentPphn.getSufactantname() + ") " +
						 * currentPphn.getSurfactantDose() + " ml/kg";
						 *
						 * if (currentPphn.getIsinsuredone() != null && currentPphn.getIsinsuredone()) {
						 * value += " and " + currentPphn.getActionAfterSurfactant(); }
						 * nursingOrder.setActionvalue(value); if
						 * (!BasicUtils.isEmpty(currentPphn.getIsNewEntry()) &&
						 * currentPphn.getIsNewEntry()) { nursingOrder.setNursingorderid(null); }
						 * inicuDao.saveObject(nursingOrder); }
						 */
					}
				}

				RespSupport respSupport = respSystem.getRespSystemObject().getRespSupport();
				respSupport.setUhid(uhid);
				respSupport.setEventname("PPHN");
				respSupport.setCreationtime(currentPphn.getAssessmentTime());
				respSupport.setModificationtime(currentPphn.getAssessmentTime());

				if (currentPphn.getEventstatus().equalsIgnoreCase("Yes")) {
                    respSupport.setEventid(currentPphn.getResppphnid().toString());
					String treatmentStr = currentPphn.getTreatmentaction();
					if (BasicUtils.isEmpty(treatmentStr) || !treatmentStr.contains("TRE010")) {
						if (BasicUtils.isEmpty(respSupport.getIsactive()) || respSupport.getIsactive() == true) {
							respSupport.setIsactive(false);
							respSupport.setRsVentType(null);
							respSupport = (RespSupport) inicuDao.saveObject(respSupport);
							NurseExecutionOrders order = new NurseExecutionOrders();
							order.setEventname("Respiratory Support");
							order.setIsExecution(false);
							order.setOrderText("Baby is removed from Respiratory Support");
							order.setAssessmentdate(currentPphn.getAssessmentTime());
							order.setUhid(uhid);
							order.setLoggeduser(loggedUser);
							inicuDao.saveObject(order);

						} else {
							if (!BasicUtils.isEmpty(respSupport) && !BasicUtils.isEmpty(respSupport.getBpdRespNote())) {
								String query = "update respsupport " + "Set bpd_resp_note = '"
										+ respSupport.getBpdRespNote() + "' " + "WHERE uhid = '" + respSupport.getUhid()
										+ "' " + "AND bpd_resp_note is not null ";
								inicuDao.updateOrDeleteNativeQuery(query);
							}
						}
					} else if (treatmentStr.contains("TRE010")) {
						respSupport.setIsactive(true);
						if(!BasicUtils.isEmpty(respSupport.getRsVentType())) {

							String result = "";
							String respSupportSql = "select obj from RespSupport obj where uhid='" + uhid + "' order by creationtime desc";
							List<RespSupport> respSupportList = inicuDao.getListFromMappedObjQuery(respSupportSql);
							if (!BasicUtils.isEmpty(respSupportList)) {
								RespSupport resp1 = respSupportList.get(0);
								if(!BasicUtils.isEmpty(resp1.getIsactive()) && !resp1.getIsactive()){
									result = "Started";
								}else if(!BasicUtils.isEmpty(resp1.getIsactive()) && resp1.getIsactive()) {
									if(!BasicUtils.isEmpty(resp1.getRsVentType()) && !resp1.getRsVentType().equalsIgnoreCase(respSupport.getRsVentType())) {
										result = "Changed";
									}
								}
							}

							if(!BasicUtils.isEmpty(result)) {
								NurseExecutionOrders order = new NurseExecutionOrders();
								order.setEventname("Respiratory Support");
								order.setIsExecution(false);
								if(result.equalsIgnoreCase("Started"))
									order.setOrderText("Started on " + respSupport.getRsVentType());
								else
									order.setOrderText("Respiratory Support is changed to " + respSupport.getRsVentType());							order.setAssessmentdate(currentPphn.getAssessmentTime());
								order.setUhid(uhid);
								order.setLoggeduser(loggedUser);
								inicuDao.saveObject(order);
							}
						}
						respSupport = (RespSupport) inicuDao.saveObject(respSupport);
					}
				} else if (currentPphn.getEventstatus().equalsIgnoreCase("No")
                        && respSystem.getRespSystemObject().isStopTreatmentFlag()) {
                    respSupport.setEventid(currentPphn.getResppphnid().toString());
					respSupport.setIsactive(false);
					respSupport.setRsVentType(null);
					respSupport = (RespSupport) inicuDao.saveObject(respSupport);
					NurseExecutionOrders order = new NurseExecutionOrders();
					order.setEventname("Respiratory Support");
					order.setIsExecution(false);
					order.setOrderText("Baby is removed from Respiratory Support");
					order.setAssessmentdate(currentPphn.getAssessmentTime());
					order.setUhid(uhid);
					order.setLoggeduser(loggedUser);
					inicuDao.saveObject(order);

				}

				// save now order investigation....
				if (currentPphn.getResppphnid() != null) {
					saveOrderInvestigation(respSystem.getDropDowns().getTestsList(), currentPphn.getResppphnid(), uhid,
							loggedUser, "pphn", currentPphn.getAssessmentTime());
				}
				resp.setMessage("PPHN saved successfully.");
				resp.setType(BasicConstants.MESSAGE_SUCCESS);
			} catch (Exception ex) {
				ex.printStackTrace();
				resp.setMessage("Exception during save of respiratory system.");
				resp.setType(BasicConstants.MESSAGE_FAILURE);
			}
		} else {
			resp.setMessage("Uhid is coming as null or empty");
			resp.setType(BasicConstants.MESSAGE_FAILURE);
		}
		return resp;
	}

	@Override
	public ResponseMessageWithResponseObject saveApnea(AssessmentRespSystemPOJO respSystem, Timestamp entryTime) {
		ResponseMessageWithResponseObject resp = new ResponseMessageWithResponseObject();
		if (!BasicUtils.isEmpty(respSystem.getUhid())) {

			String loggedUser = respSystem.getLoggedUser();
			String uhid = respSystem.getUhid();
			try {
				SaRespApnea currentApnea = respSystem.getRespSystemObject().getApnea().getCurrentApnea();
				if (BasicUtils.isEmpty(currentApnea.getEpisodeid()) && !BasicUtils.isEmpty(currentApnea.getUhid())) {
					String queryAssociatedEvents = "select episodeid from sa_resp_apnea where uhid='"
							+ currentApnea.getUhid() + "' order by creationtime desc";
					List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

					if (!BasicUtils.isEmpty(listAssociatedEvents)) {
						currentApnea.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
					}
				}
				Timestamp assessmentTime = currentApnea.getAssessmentTime();
				//Calendar cal = Calendar.getInstance();
				//cal.setTimeInMillis(assessmentTime.getTime());

				if (!BasicUtils.isEmpty(assessmentTime)) {
					//cal.set(Calendar.SECOND,0);
					//cal.set(Calendar);
					//assessmentTime = new Timestamp(cal.getTime().getTime());
					//assessmentTime.set(Calendar.SECOND,0);
					//assessmentTime.setNanos(0);
					currentApnea.setAssessmentTime(assessmentTime);
				}


				if (currentApnea.getEventstatus().equalsIgnoreCase("Yes")) {

					List<String> treatmentActionList = currentApnea.getTreatmentActionList();
					if (!BasicUtils.isEmpty(treatmentActionList)) {
						currentApnea.setActiontype(treatmentActionList.toString());
					} else {
						currentApnea.setActiontype(null);
					}
					List<String> causeApneaList = currentApnea.getApneaCauseList();
					if (!BasicUtils.isEmpty(causeApneaList)) {
						currentApnea.setApneaCause(causeApneaList.toString());
					}

					// set ICD Cause
					if (!BasicUtils.isEmpty(currentApnea.getIcdCauseofApneaList())) {
						currentApnea.setIcdCauseofApnea(currentApnea.getIcdCauseofApneaList().toString());
					}

//					if (!BasicUtils.isEmpty(currentApnea.getApneaComment())) {
//						currentApnea.setApneaComment(currentApnea.getApneaComment() + "( " + loggedUser + " )");
//					}

					NurseExecutionOrders order = new NurseExecutionOrders();

					// set progress notes
					if (!BasicUtils.isEmpty(currentApnea.getApneaComment())) {
						if(currentApnea.getApneaComment().indexOf(loggedUser)==-1){
							currentApnea.setApneaComment(
									currentApnea.getApneaComment());
							order.setLoggeduser(loggedUser);
						}
					}

					if(!BasicUtils.isEmpty(currentApnea.getActionPlanComments())) {
						order.setEventname("Apnea");
						order.setIsExecution(false);
						order.setOrderText(currentApnea.getActionPlanComments());
						order.setAssessmentdate(currentApnea.getAssessmentTime());
						order.setUhid(uhid);
						inicuDao.saveObject(order);
					}

				} else {
                    // set progress notes
					if (!BasicUtils.isEmpty(currentApnea.getApneaComment())) {
						if(currentApnea.getApneaComment().indexOf(loggedUser)==-1){
							currentApnea.setApneaComment(
									currentApnea.getApneaComment());
						}
					}
				}

				currentApnea.setUhid(uhid);
				currentApnea.setLoggeduser(loggedUser);
				currentApnea.setIsageofassesmentinhours(true);


                if (!BasicUtils.isEmpty(currentApnea.getIsNewEntry())) {
                    if (currentApnea.getIsNewEntry()) {
                        currentApnea.setApneaid(null);
                        currentApnea = (SaRespApnea) inicuDao.saveObject(currentApnea);
                    } else {
                        if (currentApnea.getEventstatus().equalsIgnoreCase("inactive")) {
                            try {
                                String query = "update sa_resp_apnea set apnea_comment = '" + currentApnea.getApneaComment().toString()
                                        + "' where apneaid = '" + currentApnea.getApneaid() + "'";
                                inicuDao.updateOrDeleteNativeQuery(query);
                            } catch (Exception ex) {
                                ex.printStackTrace();
                                System.out.println("Exception occured while updating progressnotes for inactive state of Apnea.");
                            }
                        } else {
                            currentApnea = (SaRespApnea) inicuDao.saveObject(currentApnea);
                        }
                    }
                }

				if (currentApnea.getApneaid() != null) {
					if (!currentApnea.getEventstatus().equalsIgnoreCase("inactive")) {
						List<BabyPrescription> prescriptionList = respSystem.getRespSystemObject().getApnea()
								.getPrescriptionList();
						if (!BasicUtils.isEmpty(prescriptionList)) {
							this.savePrescriptionList(null, prescriptionList, "Apnea", currentApnea.getApneaid(),
									currentApnea.getAssessmentTime());
						}
					}
					if (currentApnea.getEventstatus().equalsIgnoreCase("inactive")
							&& !BasicUtils.isEmpty(respSystem.getRespSystemObject().getApnea().getPastApnea())) {

                        try {
                            String query = "update respsupport set eventid = '" + currentApnea.getApneaid().toString()
                                    + "', is_eventid_updated = 'true' where respsupportid = (select respsupportid from respsupport where uhid='" + uhid
                                    + "' and eventname = 'apnea' and is_eventid_updated = 'false' order by creationtime desc limit 1)";
                            inicuDao.updateOrDeleteNativeQuery(query);
                        } catch (Exception ex) {
                            ex.printStackTrace();
                            System.out.println("Exception occured while updating eventid in resp support for inactive state");
                            logger.error("Exception occured while updating eventid in resp support for inactive state", ex);
                        }

						updatePastApneaProgressNotes(currentApnea,
								respSystem.getRespSystemObject().getApnea().getPastApnea());
					}

					// save investigation order for apnea
					saveOrderInvestigation(respSystem.getDropDowns().getTestsList(), currentApnea.getApneaid(), uhid,
							loggedUser, "Apnea", currentApnea.getAssessmentTime());

					// save nursing order
					if (currentApnea.getActiontype() != null && currentApnea.getActiontype().contains("TRE008")) {
						AssessmentMedication nursingOrder = new AssessmentMedication();
						nursingOrder.setAssessmentid(currentApnea.getApneaid());
						nursingOrder.setAssessmenttime(currentApnea.getAssessmentTime());
						nursingOrder.setUhid(uhid);
						nursingOrder.setMed_name("Caffeine");
						nursingOrder.setNursing_action(false);
						nursingOrder.setRoute(currentApnea.getCaffeineRoute());

						if (!currentApnea.getCaffeineAction().equalsIgnoreCase("stop")) {
							nursingOrder.setDose(currentApnea.getCaffeineBolusDose());
							nursingOrder.setMaintainence_dose(currentApnea.getCaffeineMaintenanceDose());
							inicuDao.saveObject(nursingOrder);
						}
					}

					/*
					 * if (currentApnea.getActiontype() != null &&
					 * currentApnea.getActiontype().contains("TRE008")) { NursingOrderAssesment
					 * nursingOrder = new NursingOrderAssesment();
					 * nursingOrder.setEventid(String.valueOf(currentApnea.getApneaid()));
					 * nursingOrder.setEventname("Apnea");
					 * nursingOrder.setAssessmentType("Respiratory System");
					 * nursingOrder.setUhid(uhid); nursingOrder.setActiontype("Caffeine"); String
					 * value = ""; if (currentApnea.getCaffeineAction().equalsIgnoreCase("start")) {
					 * value = "Start Caffeine with Bolus Dose " +
					 * currentApnea.getCaffeineBolusDose() + " (mg)"; if (!(null ==
					 * currentApnea.getCaffeineMaintenanceDose() ||
					 * currentApnea.getCaffeineMaintenanceDose().isEmpty())) { value +=
					 * " and Maintenance Dose " + currentApnea.getCaffeineMaintenanceDose() +
					 * " (mg)"; } } else { value = currentApnea.getCaffeineAction(); }
					 * nursingOrder.setActionvalue(value); inicuDao.saveObject(nursingOrder); }
					 */

					RespSupport respSupport = respSystem.getRespSystemObject().getRespSupport();
					respSupport.setUhid(uhid);
					respSupport.setEventname("apnea");
					respSupport.setCreationtime(currentApnea.getAssessmentTime());
					respSupport.setModificationtime(currentApnea.getAssessmentTime());

					if (currentApnea.getEventstatus().equalsIgnoreCase("Yes")) {
                        respSupport.setEventid(currentApnea.getApneaid().toString());
						String treatmentStr = currentApnea.getActiontype();
						if (BasicUtils.isEmpty(treatmentStr) || !treatmentStr.contains("TRE007")) {
							if (BasicUtils.isEmpty(respSupport.getIsactive()) || respSupport.getIsactive() == true) {
								respSupport.setIsactive(false);
								respSupport.setRsVentType(null);
								respSupport = (RespSupport) inicuDao.saveObject(respSupport);
								NurseExecutionOrders order = new NurseExecutionOrders();
								order.setEventname("Respiratory Support");
								order.setIsExecution(false);
								order.setOrderText("Baby is removed from Respiratory Support");
								order.setAssessmentdate(currentApnea.getAssessmentTime());
								order.setUhid(uhid);
								order.setLoggeduser(loggedUser);
								inicuDao.saveObject(order);

							} else {
								if (!BasicUtils.isEmpty(respSupport)
										&& !BasicUtils.isEmpty(respSupport.getBpdRespNote())) {
									String query = "update respsupport " + "Set bpd_resp_note = '"
											+ respSupport.getBpdRespNote() + "' " + "WHERE uhid = '"
											+ respSupport.getUhid() + "' " + "AND bpd_resp_note is not null ";
									inicuDao.updateOrDeleteNativeQuery(query);
								}
							}
						} else if (treatmentStr.contains("TRE007")) {
							respSupport.setIsactive(true);
							if(!BasicUtils.isEmpty(respSupport.getRsVentType())) {
								String result = "";
								String respSupportSql = "select obj from RespSupport obj where uhid='" + uhid + "' order by creationtime desc";
								List<RespSupport> respSupportList = inicuDao.getListFromMappedObjQuery(respSupportSql);
								if (!BasicUtils.isEmpty(respSupportList)) {
									RespSupport resp1 = respSupportList.get(0);
									if(!BasicUtils.isEmpty(resp1.getIsactive()) && !resp1.getIsactive()){
										result = "Started";
									}else if(!BasicUtils.isEmpty(resp1.getIsactive()) && resp1.getIsactive()) {
										if(!BasicUtils.isEmpty(resp1.getRsVentType()) && !resp1.getRsVentType().equalsIgnoreCase(respSupport.getRsVentType())) {
											result = "Changed";
										}
									}
								}

								if(!BasicUtils.isEmpty(result)) {

									NurseExecutionOrders order = new NurseExecutionOrders();
									order.setEventname("Respiratory Support");
									order.setIsExecution(false);
									if(result.equalsIgnoreCase("Started"))
										order.setOrderText("Started on " + respSupport.getRsVentType());
									else
										order.setOrderText("Respiratory Support is changed to " + respSupport.getRsVentType());
									order.setAssessmentdate(currentApnea.getAssessmentTime());
									order.setUhid(uhid);
									order.setLoggeduser(loggedUser);
									inicuDao.saveObject(order);
								}
							}
							respSupport = (RespSupport) inicuDao.saveObject(respSupport);
						}
					} else if (currentApnea.getEventstatus().equalsIgnoreCase("No")
                            && respSystem.getRespSystemObject().isStopTreatmentFlag()) {
                        respSupport.setEventid(currentApnea.getApneaid().toString());
						respSupport.setIsactive(false);
						respSupport.setRsVentType(null);
						respSupport = (RespSupport) inicuDao.saveObject(respSupport);
						NurseExecutionOrders order = new NurseExecutionOrders();
						order.setEventname("Respiratory Support");
						order.setIsExecution(false);
						order.setOrderText("Baby is removed from Respiratory Support");
						order.setAssessmentdate(currentApnea.getAssessmentTime());
						order.setUhid(uhid);
						order.setLoggeduser(loggedUser);
						inicuDao.saveObject(order);

					}
				}
				resp.setMessage("Apnea saved successfully.");

				resp.setType(BasicConstants.MESSAGE_SUCCESS);
			} catch (Exception ex) {
				ex.printStackTrace();
				resp.setMessage("Exception during save of Apnea.");
				resp.setType(BasicConstants.MESSAGE_FAILURE);
				ex.printStackTrace();
				String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
				databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser,
						uhid, "SAVE_OBJECT", BasicUtils.convertErrorStacktoString(ex));
			}
		} else {
			resp.setMessage("Uhid is coming as null or empty");
			resp.setType(BasicConstants.MESSAGE_FAILURE);
		}
		return resp;
	}

	@Override
	public ResponseMessageWithResponseObject saveRespBpd(AssessmentRespSystemPOJO respSystem) {
		ResponseMessageWithResponseObject resp = new ResponseMessageWithResponseObject();
		if (!BasicUtils.isEmpty(respSystem.getUhid())) {

			String loggedUser = respSystem.getLoggedUser();
			String uhid = respSystem.getUhid();
			try {
				SaRespBpd currentBpd = respSystem.getRespSystemObject().getBpd().getCurrentBpd();

				SaRespApnea currentApnea = respSystem.getRespSystemObject().getApnea().getCurrentApnea();

				if (currentBpd.getEventstatus().equalsIgnoreCase("Yes")) {

					List<String> treatmentActionList = currentBpd.getTreatmentActionList();
					if (!BasicUtils.isEmpty(treatmentActionList)) {
						currentBpd.setTreatmentplan(treatmentActionList.toString());
					}

				}

				currentBpd.setUhid(uhid);
				currentBpd.setLoggeduser(loggedUser);

				currentBpd = (SaRespBpd) inicuDao.saveObject(currentBpd);
				currentApnea = (SaRespApnea) inicuDao.saveObject(currentApnea);
				if (currentBpd.getRespbpdid() != null) {
					// save investigation order for BPD
					saveOrderInvestigation(respSystem.getDropDowns().getTestsList(), currentBpd.getRespbpdid(), uhid,
							loggedUser, "Bpd", currentBpd.getCreationtime());
					if (currentBpd.getTreatmentActionList() != null
							&& currentBpd.getTreatmentActionList().contains("TRE020")) {
						// save respiratory support object
						RespSupport respSupport = respSystem.getRespSystemObject().getRespSupport();
						respSupport.setUhid(uhid);
						respSupport.setEventid(currentApnea.getApneaid().toString());
						respSupport.setEventname("bpd");
						inicuDao.saveObject(respSupport);
					}

				}
				resp.setMessage("Bpd saved successfully.");

				resp.setType(BasicConstants.MESSAGE_SUCCESS);
			} catch (Exception ex) {
				ex.printStackTrace();
				resp.setMessage("Exception during save of Bpd.");
				resp.setType(BasicConstants.MESSAGE_FAILURE);
				ex.printStackTrace();
				String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
				databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser,
						uhid, "SAVE_OBJECT", BasicUtils.convertErrorStacktoString(ex));
			}
		} else {
			resp.setMessage("Uhid is coming as null or empty");
			resp.setType(BasicConstants.MESSAGE_FAILURE);
		}
		return resp;
	}

	@Override
	public ResponseMessageWithResponseObject saveRespOther(AssessmentRespSystemPOJO respSystem) {
		ResponseMessageWithResponseObject resp = new ResponseMessageWithResponseObject();
		if (!BasicUtils.isEmpty(respSystem.getUhid())) {

			String loggedUser = respSystem.getLoggedUser();
			String uhid = respSystem.getUhid();
			try {
				SaRespOther currentOther = respSystem.getRespSystemObject().getOthers().getCurrentOther();
				if (BasicUtils.isEmpty(currentOther.getEpisodeid()) && !BasicUtils.isEmpty(currentOther.getUhid())) {
					String queryAssociatedEvents = "select episodeid from sa_resp_others where uhid='"
							+ currentOther.getUhid() + "' order by creationtime desc";
					List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

					if (!BasicUtils.isEmpty(listAssociatedEvents)) {
						currentOther.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
					}
				}
				if (currentOther.getEventstatus().equalsIgnoreCase("no")
						|| currentOther.getEventstatus().equalsIgnoreCase("Inactive")) {
					currentOther.setProgressnotes("No Other Respiratory System Assessment.");
				}

				List<String> treatmentActionList = currentOther.getTreatmentActionList();
				if (!BasicUtils.isEmpty(treatmentActionList)) {
					currentOther.setTreatmentaction(treatmentActionList.toString());
				} else {
					currentOther.setTreatmentaction(null);
				}

				currentOther.setUhid(uhid);
				currentOther.setLoggeduser(loggedUser);
				currentOther = (SaRespOther) inicuDao.saveObject(currentOther);

				if (currentOther.getEventstatus().equalsIgnoreCase("yes")) {
					// save prescription data here.
					List<Long> prescriptionIdList = new ArrayList<Long>();
					if (currentOther.getRespotherid() != null) {

						// save investigation order for apnea
						saveOrderInvestigation(respSystem.getDropDowns().getTestsList(), currentOther.getRespotherid(),
								uhid, loggedUser, "other", currentOther.getTimeofassessment());

						String treatmentStr = "";

						if (null != treatmentActionList) {
							treatmentStr = treatmentActionList.toString();
						}

						if (treatmentStr.contains("TRE024")) {
							// save respiratory support object
							RespSupport respSupport = respSystem.getRespSystemObject().getRespSupport();
							respSupport.setUhid(uhid);
							respSupport.setEventid(currentOther.getRespotherid().toString());
							respSupport.setEventname("other");
							respSupport.setIsactive(true);
							inicuDao.saveObject(respSupport);
						}

						if (BasicUtils.isEmpty(currentOther.getTreatmentaction())
								|| !currentOther.getTreatmentaction().contains("TRE024")) {
							RespSupport respSupport = respSystem.getRespSystemObject().getRespSupport();
							if (BasicUtils.isEmpty(respSupport.getIsactive()) || respSupport.getIsactive() == true) {
								respSupport.setEventid(currentOther.getRespotherid().toString());
								respSupport.setEventname("other");
								respSupport.setUhid(uhid);
								respSupport.setIsactive(false);
								respSupport.setRsVentType(null);
								respSupport = (RespSupport) inicuDao.saveObject(respSupport);
							}
						}

						if (treatmentStr.contains("TRE025")) {
							List<BabyPrescription> prescriptionList = respSystem.getRespSystemObject().getOthers()
									.getCurrentBabyPrescriptionList();
							if (!BasicUtils.isEmpty(prescriptionList)) {
								this.savePrescriptionList(null, prescriptionList, "Other",
										currentOther.getRespotherid(), currentOther.getCreationtime());
							}
						}

						// save nursing order
						if (currentOther.getTreatmentaction() != null
								&& currentOther.getTreatmentaction().contains("TRE023")) {
							AssessmentMedication nursingOrder = new AssessmentMedication();
							nursingOrder.setUhid(uhid);
							nursingOrder.setRoute(null);
							nursingOrder.setNursing_action(false);
							nursingOrder.setMed_name(currentOther.getSufactantname());
							nursingOrder.setDose(currentOther.getSufactantdose());
							nursingOrder.setAssessmentid(currentOther.getRespotherid());
							nursingOrder.setAssessmenttime(currentOther.getTimeofassessment());
							inicuDao.saveObject(nursingOrder);
						}

						/*
						 * if (currentOther.getTreatmentaction() != null &&
						 * currentOther.getTreatmentaction().contains("TRE023")) { NursingOrderAssesment
						 * nursingOrder = new NursingOrderAssesment();
						 * nursingOrder.setEventid(String.valueOf(currentOther.getRespotherid()));
						 * nursingOrder.setEventname("Other");
						 * nursingOrder.setAssessmentType("Respiratory System");
						 * nursingOrder.setUhid(uhid); nursingOrder.setActiontype("Surfactant");
						 *
						 * String value = "Surfactant (" + currentOther.getSufactantname() + ") " +
						 * currentOther.getSufactantdose() + " ml/kg";
						 *
						 * if (currentOther.getIsinsuredone() != null && currentOther.getIsinsuredone())
						 * { value += " and " + currentOther.getActionAfterSurfactant(); }
						 * nursingOrder.setActionvalue(value); inicuDao.saveObject(nursingOrder); }
						 */
					}
				}

				if (currentOther.getEventstatus().equalsIgnoreCase("No")) {

					// check if no other system has resp support as
					// active.....
					String fetchRespSupport = "SELECT obj FROM RespSupport as obj where uhid='" + uhid + "' and "
							+ "eventname !='other' " + "order by creationtime desc";

					List<RespSupport> respSupportList = inicuDao.getListFromMappedObjQuery(fetchRespSupport);
					// iterating here and checking if this system other than
					// RDS have Resp Support
					// active.

					boolean isApneaRespNotActive = true;
					int apneaCount = 0;
					boolean isRDSRespNotActive = true;
					int rdsCount = 0;
					boolean isPPHNRespNotActive = true;
					int pphnCount = 0;
					boolean isPneumoThoraxRespNotActive = true;
					int pneumoThoraxCount = 0;
					boolean isOtherRespNotActive = true;
					int otherCount = 0;

					for (RespSupport respSupport : respSupportList) {

						if (respSupport.getEventname().equalsIgnoreCase("apnea") && apneaCount == 0) {
							apneaCount++;
							if (respSupport.getIsactive()) {
								isApneaRespNotActive = false;
							}
						}

						if (respSupport.getEventname().equalsIgnoreCase("Pneumothorax") && pneumoThoraxCount == 0) {
							pneumoThoraxCount++;
							if (respSupport.getIsactive()) {
								isPneumoThoraxRespNotActive = false;
							}
						}

						if (respSupport.getEventname().equalsIgnoreCase("apnea") && otherCount == 0) {
							otherCount++;
							if (respSupport.getIsactive()) {
								isOtherRespNotActive = false;
							}
						}

						if (respSupport.getEventname().equalsIgnoreCase("pphn") && pphnCount == 0) {
							pphnCount++;
							if (respSupport.getIsactive()) {
								isPPHNRespNotActive = false;
							}
						}

						if (respSupport.getEventname().equalsIgnoreCase("Respiratory Distress") && rdsCount == 0) {
							rdsCount++;
							if (respSupport.getIsactive()) {
								isRDSRespNotActive = false;
							}
						}

					}

					if (isRDSRespNotActive || isApneaRespNotActive || isPPHNRespNotActive
							|| isPneumoThoraxRespNotActive) { // active with
																// all old
																// record
						RespSupport respSupport = new RespSupport();
						if (BasicUtils.isEmpty(respSupport.getIsactive()) || respSupport.getIsactive() == true) {
							respSupport.setEventid(currentOther.getRespotherid().toString());
							respSupport.setEventname("Pneumothorax");
							respSupport.setUhid(uhid);
							respSupport.setIsactive(false);
							respSupport.setRsVentType(null);
							/*
							 * respSupport.setCreationtime(currentOther.geta );
							 * respSupport.setModificationtime(currentOther. getAssessmentTime());
							 */
							respSupport = (RespSupport) inicuDao.saveObject(respSupport);
						}
					}

				}

				resp.setMessage("Other saved successfully.");
				resp.setType(BasicConstants.MESSAGE_SUCCESS);
			} catch (Exception ex) {
				ex.printStackTrace();
				resp.setMessage("Exception during save of Other.");
				resp.setType(BasicConstants.MESSAGE_FAILURE);
				ex.printStackTrace();
				String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
				databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser,
						uhid, "SAVE_OBJECT", BasicUtils.convertErrorStacktoString(ex));
			}
		} else {
			resp.setMessage("Uhid is coming as null or empty");
			resp.setType(BasicConstants.MESSAGE_FAILURE);
		}
		return resp;
	}

	public HashMap<Object, Object> getBabyInformation(String uhid) {
		HashMap<Object, Object> babyInfo = new HashMap<Object, Object>();
		try {
			String queryBabyDetails = "select obj from BabyDetail obj where uhid='" + uhid + "'";
			List<BabyDetail> babyDetailsLsit = inicuDao.getListFromMappedObjQuery(queryBabyDetails);
			Integer gestation = null;
			Calendar birthDateCal = null;
			Integer ageAtAssessment = null;
			Integer PMA = null;
			if (!BasicUtils.isEmpty(babyDetailsLsit)) {
				BabyDetail babyDetails = babyDetailsLsit.get(0);

				// setting gestation here....
				gestation = babyDetails.getGestationweekbylmp();
				babyInfo.put(BasicConstants.GESTATION, gestation);
				Date dob = babyDetails.getDateofbirth();
				String timeOfBirth = babyDetails.getTimeofbirth();
				if (BasicUtils.isEmpty(timeOfBirth)) {
					timeOfBirth = "00,00,AM";
				}

				String[] timeArr = timeOfBirth.split(",");

				birthDateCal = Calendar.getInstance();
				birthDateCal.setTime(dob);
				System.out.println(birthDateCal.getTime());
				if (timeArr.length >= 3) {

					if (!BasicUtils.isEmpty(timeArr[2]) && timeArr[2].equalsIgnoreCase("AM")) {
						if (!BasicUtils.isEmpty(timeArr[0].trim())) {
							if (Integer.valueOf(timeArr[0].trim()) == 12) {
								birthDateCal.set(Calendar.HOUR, Integer.valueOf(timeArr[0].trim()) - 12);
							} else {
								birthDateCal.set(Calendar.HOUR, Integer.valueOf(timeArr[0].trim()));
							}
						}
					} else if (!BasicUtils.isEmpty(timeArr[2].trim()) && timeArr[2].equalsIgnoreCase("PM")) {
						if (!BasicUtils.isEmpty(timeArr[0].trim())) {
							if (Integer.valueOf(timeArr[0].trim()) == 12) {
								birthDateCal.set(Calendar.HOUR, Integer.valueOf(timeArr[0].trim()));
							} else {
								birthDateCal.set(Calendar.HOUR, Integer.valueOf(timeArr[0].trim()) + 12);
							}
						}
					}
					if (!BasicUtils.isEmpty(timeArr[1].trim()))
						birthDateCal.set(Calendar.MINUTE, Integer.valueOf(timeArr[1].trim()));
				} else {
					birthDateCal.set(Calendar.HOUR, Integer.valueOf("0"));
					birthDateCal.set(Calendar.MINUTE, Integer.valueOf("0"));
					birthDateCal.set(Calendar.SECOND, Integer.valueOf("0"));
				}

				System.out.println(birthDateCal.getTime());
				Calendar cal2 = Calendar.getInstance();
				System.out.println(cal2.getTime());

				birthDateCal.setTimeZone(TimeZone.getDefault());
				int offset = TimeZone.getTimeZone(BasicConstants.CLIENT_TIME_ZONE).getRawOffset()
						- TimeZone.getDefault().getRawOffset();

				Long timeDiffHours = cal2.getTime().getTime() - birthDateCal.getTime().getTime();
				if (offset != 0) {
					timeDiffHours += 19800000;
				}
				ageAtAssessment = (int) (timeDiffHours / (24.0 * 1000 * 3600));
				if (!BasicUtils.isEmpty(gestation)) {
					PMA = (int) (timeDiffHours / (3600 * 7.0 * 24.0 * 1000)) + gestation;
				}
				babyInfo.put(BasicConstants.PMA, String.valueOf(PMA));
				babyInfo.put(BasicConstants.AGE_AT_ASSESSMENT, String.valueOf(ageAtAssessment));

				// age at assessment in days;
//				Long timeHours = timeDiffHours / (3600 * 1000) + 1;
				Long timeHours = timeDiffHours / (3600 * 1000);
				babyInfo.put(BasicConstants.AGE_AT_ONSET, timeHours);

				if (!BasicUtils.isEmpty(babyDetails.getBirthweight())) {
					babyInfo.put(BasicConstants.BIRTH_WEIGHT, babyDetails.getBirthweight());
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, "", uhid,
					"getBabyInformation Exception", BasicUtils.convertErrorStacktoString(e));
		}
		return babyInfo;
	}

	@SuppressWarnings("unchecked")
	private CNSSystemDropDowns getCnsSystemDropdowns(String uhid) throws Exception {

		CNSSystemDropDowns dropDowns = new CNSSystemDropDowns();

		String queryRefTestsList = "select obj from RefTestslist as obj where not (obj.assesmentCategory like ('%None%')) order by assesmentCategory";
		List<RefTestslist> listRefTests = inicuDao.getListFromMappedObjQuery(queryRefTestsList);
		// populate drop down hash map for the tests list...
		HashMap<Object, List<RefTestslist>> testsListMap = new HashMap<Object, List<RefTestslist>>();
		for (RefTestslist test : listRefTests) {
			List categoryList = null;
			if (testsListMap.get(test.getAssesmentCategory()) != null) {
				categoryList = testsListMap.get(test.getAssesmentCategory());

			} else {
				categoryList = new ArrayList<RefTestslist>();
			}
			categoryList.add(test);
			testsListMap.put(test.getAssesmentCategory(), categoryList);
		}
		dropDowns.setOrders(testsListMap);

		List<String> activeMedList = new ArrayList<>();
		if (!BasicUtils.isEmpty(uhid)) {
			String activeMed = "select medicinename from baby_prescription where uhid='" + uhid.trim()
					+ "' and isactive = true";
			List<String> result = inicuDao.getListFromNativeQuery(activeMed);
			if (!BasicUtils.isEmpty(result)) {
				activeMedList.addAll(result);
			}
		}

		String queryMedicineList = "select obj from Medicines obj where isactive='true'";
		List<Medicines> medicineList = inicuDao.getListFromMappedObjQuery(queryMedicineList);
		List<Medicines> changedMedList = new ArrayList<>();

		if (!BasicUtils.isEmpty(medicineList)) {
			for (Medicines m : medicineList) {

				boolean isPresent = false;
				if (!BasicUtils.isEmpty(activeMedList)) {
					for (String s : activeMedList) {
						if (s != null && s.equalsIgnoreCase(m.getMedname())) {
							isPresent = true;
						}
					}
				}

				if (isPresent) {
					continue;
				}
				changedMedList.add(m);
			}
		}

		dropDowns.setMedicine(changedMedList);
		dropDowns.setAllMedicine(medicineList);

		String queryGetFrequencyRef = "select obj from RefMedfrequency obj order by frequency_int";
		List<RefMedfrequency> freqList = inicuDao.getListFromMappedObjQuery(queryGetFrequencyRef);
		dropDowns.setFreqListMedcines(freqList);

		List<String> hours = getTime(BasicConstants.HOURS);
		dropDowns.setHours(hours);
		List<String> minutes = getTime(BasicConstants.MINUTES);
		dropDowns.setMinutes(minutes);

		// for seizures treatment
		String queryAssessmentSeizures = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment where category='Seizures' order by assesmenttreatmentid desc";
		List<KeyValueObj> assessmentSeizures = getRefObj(queryAssessmentSeizures);
		KeyValueObj otherKey = new KeyValueObj();
		otherKey.setKey("other");
		otherKey.setValue("other");
		assessmentSeizures.add(otherKey);
		dropDowns.setTreatmentActionSeizures(assessmentSeizures);

		// for seizures cause
		String queryCauseSeizures = "select causeofcnsid, causeofcns from ref_causeofcns where event='Seizures'";
		List<KeyValueObj> causeSeizuresList = getRefObj(queryCauseSeizures);
		KeyValueObj otherCauseKey = new KeyValueObj();
		otherCauseKey.setKey("other");
		otherCauseKey.setValue("other");
		causeSeizuresList.add(otherCauseKey);
		dropDowns.setCauseOfSeizures(causeSeizuresList);

		// for IVH treatment
		String queryAssessmentIvh = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment where category='IVH' order by assesmenttreatmentid desc";
		List<KeyValueObj> assessmentIvh = getRefObj(queryAssessmentIvh);
		KeyValueObj otherKeyIvh = new KeyValueObj();
		otherKeyIvh.setKey("other");
		otherKeyIvh.setValue("Other");
		assessmentIvh.add(otherKeyIvh);
		dropDowns.setTreatmentActionIvh(assessmentIvh);

		// for IVH cause
		String queryCauseIvh = "select causeofcnsid, causeofcns from ref_causeofcns where event='IVH'";
		List<KeyValueObj> causeIvhList = getRefObj(queryCauseIvh);
		KeyValueObj otherCauseIvh = new KeyValueObj();
		otherCauseIvh.setKey("other");
		otherCauseIvh.setValue("Other");
		causeIvhList.add(otherCauseIvh);
		dropDowns.setCauseOfIvh(causeIvhList);

		String queryCauseAshphysia = "select causeofcnsid, causeofcns from ref_causeofcns where event='Asphyxia'";
		List<KeyValueObj> causeAshphysiaList = getRefObj(queryCauseAshphysia);
		KeyValueObj otherCauseAshphysia = new KeyValueObj();
		otherCauseAshphysia.setKey("other");
		otherCauseAshphysia.setValue("Other");
		causeAshphysiaList.add(otherCauseAshphysia);
		dropDowns.setCauseOfAsphyxia(causeAshphysiaList);

		// for asphyxia treatment
		String queryAssessmentAsphyxia = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment where category='Asphyxia' order by assesmenttreatmentid desc";
		List<KeyValueObj> assessmentAsphyxia = getRefObj(queryAssessmentAsphyxia);
		KeyValueObj otherKeyAsphyxia = new KeyValueObj();
		otherKeyAsphyxia.setKey("other");
		otherKeyAsphyxia.setValue("Other");
		assessmentAsphyxia.add(otherKeyAsphyxia);
		dropDowns.setTreatmentActionAsphyxia(assessmentAsphyxia);

		// EncephalopathY
		String queryCauseEncephalopathy = "select causeofcnsid, causeofcns from ref_causeofcns where event='Encephalopathy'";
		List<KeyValueObj> causeEncephalopathyList = getRefObj(queryCauseAshphysia);
		KeyValueObj otherCauseEncephalopathy = new KeyValueObj();
		otherCauseAshphysia.setKey("other");
		otherCauseAshphysia.setValue("Other");
		causeEncephalopathyList.add(otherCauseEncephalopathy);
		dropDowns.setCauseOfEncephalopathy(causeEncephalopathyList);

		// for EncephalopathY treatment
		String queryAssessmentEncephalopathy = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment where category='Encephalopathy' order by assesmenttreatmentid desc";
		List<KeyValueObj> assessmentEncephalopathy = getRefObj(queryAssessmentEncephalopathy);
		KeyValueObj otherKeyEncephalopathy = new KeyValueObj();
		otherKeyEncephalopathy.setKey("other");
		otherKeyEncephalopathy.setValue("Other");
		assessmentEncephalopathy.add(otherKeyEncephalopathy);
		dropDowns.setTreatmentActionEncephalopathy(assessmentEncephalopathy);

		// Hydrocephalus
		String queryCauseHydrocephalus = "select causeofcnsid, causeofcns from ref_causeofcns where event='Hydrocephalus'";
		List<KeyValueObj> causeHydrocephalusList = getRefObj(queryCauseAshphysia);
		KeyValueObj otherCauseHydrocephalus = new KeyValueObj();
		otherCauseHydrocephalus.setKey("other");
		otherCauseHydrocephalus.setValue("Other");
		causeHydrocephalusList.add(otherCauseHydrocephalus);
		dropDowns.setCauseOfHydrocephalus(causeHydrocephalusList);

		// for Hydrocephalus treatment
		String queryAssessmentHydrocephalus = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment where category='Hydrocephalus' order by assesmenttreatmentid desc";
		List<KeyValueObj> assessmentHydrocephalus = getRefObj(queryAssessmentHydrocephalus);
		KeyValueObj otherKeyHydrocephalus = new KeyValueObj();
		otherKeyHydrocephalus.setKey("other");
		otherKeyHydrocephalus.setValue("Other");
		assessmentHydrocephalus.add(otherKeyHydrocephalus);
		dropDowns.setTreatmentActionHydrocephalus(assessmentHydrocephalus);

		// Neuromuscular Disorders
		String queryCauseND = "select causeofcnsid, causeofcns from ref_causeofcns where event='NeuromuscularDisorders'";
		List<KeyValueObj> causeNDList = getRefObj(queryCauseND);
		KeyValueObj otherCauseND = new KeyValueObj();
		otherCauseND.setKey("other");
		otherCauseND.setValue("Other");
		causeNDList.add(otherCauseND);
		dropDowns.setCauseOfNeuromusculaDisorders(causeNDList);

		// for Neuromuscular Disorders treatment
		String queryAssessmentND = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment where category='NeuromuscularDisorders' order by assesmenttreatmentid desc";
		List<KeyValueObj> assessmentND = getRefObj(queryAssessmentND);
		KeyValueObj otherKeyND = new KeyValueObj();
		otherKeyND.setKey("other");
		otherKeyND.setValue("Other");
		assessmentND.add(otherKeyND);
		dropDowns.setTreatmentActionNeuromuscularDisorders(assessmentND);

		// get associated events....
//		String queryAssociatedEvents = "select uhid,associated_event from associate_assesment_final where uhid='" + uhid
//				+ "'";
//		List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);
//		dropDowns.setAssociatedEvents(listAssociatedEvents);

		return dropDowns;
	}

	@SuppressWarnings("unchecked")
	private MetabolicSystemDropDowns getMetabolicSystemDropdowns() throws Exception {
		// TODO get drop downs based on the event name....
		MetabolicSystemDropDowns dropDowns = new MetabolicSystemDropDowns();

		String queryRefTestsList = "select obj from RefTestslist as obj where not (obj.assesmentCategory like ('%None%')) order by assesmentCategory";
		List<RefTestslist> listRefTests = inicuDao.getListFromMappedObjQuery(queryRefTestsList);
		// populate drop down hash map for the tests list...
		HashMap<Object, List<RefTestslist>> testsListMap = new HashMap<Object, List<RefTestslist>>();
		for (RefTestslist test : listRefTests) {
			List categoryList = null;
			if (testsListMap.get(test.getAssesmentCategory()) != null) {
				categoryList = testsListMap.get(test.getAssesmentCategory());

			} else {
				categoryList = new ArrayList<RefTestslist>();
			}
			categoryList.add(test);
			testsListMap.put(test.getAssesmentCategory(), categoryList);
		}
		dropDowns.setOrders(testsListMap);
		String queryAssessmentMetabolic = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment where category='Hypoglycemia'";
		List<KeyValueObj> assessmentMetabolic = getRefObj(queryAssessmentMetabolic);
		KeyValueObj keyValueOther = new KeyValueObj();
		keyValueOther.setKey("other");
		keyValueOther.setValue("Other");
		assessmentMetabolic.add(keyValueOther);
		dropDowns.setTreatmentAction(assessmentMetabolic);

		String queryCause = "select causeofmetabolicid, causeofmetabolic from ref_causeofmetabolic where event='Hypoglycemia'";
		List<KeyValueObj> causeList = getRefObj(queryCause);
		KeyValueObj keyValueOtherCause = new KeyValueObj();
		keyValueOtherCause.setKey("other");
		keyValueOtherCause.setValue("Other");
		causeList.add(keyValueOtherCause);
		dropDowns.setCauseOfHypoglycemia(causeList);

		// for hyperglycemia treatment
		String queryAssessmentHyperglycemia = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment where category='Hyperglycemia' order by assesmenttreatmentid desc";
		List<KeyValueObj> assessmentHyperglycemia = getRefObj(queryAssessmentHyperglycemia);
		KeyValueObj otherKey = new KeyValueObj();
		otherKey.setKey("other");
		otherKey.setValue("other");
		assessmentHyperglycemia.add(otherKey);
		dropDowns.setTreatmentActionHyperglycemia(assessmentHyperglycemia);

		// for hyperglycemia cause
		String queryCauseHyperglycemia = "select causeofmetabolicid, causeofmetabolic from ref_causeofmetabolic where event='Hyperglycemia'";
		List<KeyValueObj> causeHyperglycemiaList = getRefObj(queryCauseHyperglycemia);
		KeyValueObj otherCauseKey = new KeyValueObj();
		otherCauseKey.setKey("other");
		otherCauseKey.setValue("other");
		causeHyperglycemiaList.add(otherCauseKey);
		dropDowns.setCauseOfHyperglycemia(causeHyperglycemiaList);

		// for hypernatremia
		// causes list
		String queryCauseHypernatremia = "select causeofmetabolicid, causeofmetabolic from ref_causeofmetabolic where event='Hypernatremia'";
		List<KeyValueObj> causeHypernatremiaList = getRefObj(queryCauseHypernatremia);
		KeyValueObj keyHypernatCauseOther = new KeyValueObj();
		keyHypernatCauseOther.setKey("other");
		keyHypernatCauseOther.setValue("Other");
		causeHypernatremiaList.add(keyHypernatCauseOther);
		dropDowns.setCauseOfHypernatremia(causeHypernatremiaList);

		// for hyponatremia: causes list
		String queryCauseHyponatremia = "select causeofmetabolicid, causeofmetabolic from ref_causeofmetabolic where event='Hyponatremia'";
		List<KeyValueObj> causeHyponatremiaList = getRefObj(queryCauseHyponatremia);
		KeyValueObj keyHyponatCauseOther = new KeyValueObj();
		keyHyponatCauseOther.setKey("other");
		keyHyponatCauseOther.setValue("Other");
		causeHyponatremiaList.add(keyHyponatCauseOther);
		dropDowns.setCauseOfHyponatremia(causeHyponatremiaList);

		// treatment list
		String queryAssessmentHypernatremia = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment where category='Hypernatremia'";
		List<KeyValueObj> assessmentHypernatremia = getRefObj(queryAssessmentHypernatremia);
		KeyValueObj keyHypernatOther = new KeyValueObj();
		keyHypernatOther.setKey("other");
		keyHypernatOther.setValue("Other");
		assessmentHypernatremia.add(keyHypernatOther);
		dropDowns.setTreatmentActionHypernatremia(assessmentHypernatremia);

		// hyponatremia treatment list
		String queryAssessmentHyponatremia = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment where category='Hyponatremia'";
		List<KeyValueObj> assessmentHyponatremia = getRefObj(queryAssessmentHyponatremia);
		KeyValueObj keyHyponatOther = new KeyValueObj();
		keyHyponatOther.setKey("other");
		keyHyponatOther.setValue("Other");
		assessmentHyponatremia.add(keyHyponatOther);
		dropDowns.setTreatmentActionHyponatremia(assessmentHyponatremia);

		String queryMedicineList = "select obj from Medicines obj where isactive='true'";
		List<Medicines> medicineList = inicuDao.getListFromMappedObjQuery(queryMedicineList);
		dropDowns.setMedicine(medicineList);

		String queryGetFrequencyRef = "select obj from RefMedfrequency obj order by frequency_int";
		List<RefMedfrequency> freqList = inicuDao.getListFromMappedObjQuery(queryGetFrequencyRef);
		dropDowns.setFreqListMedcines(freqList);

		List<String> hours = getTime(BasicConstants.HOURS);
		dropDowns.setHours(hours);
		List<String> minutes = getTime(BasicConstants.MINUTES);
		dropDowns.setMinutes(minutes);

		// for Hypokalemia treatment
		String queryAssessmentHypokalemia = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment where category='Hypokalemia'";
		List<KeyValueObj> assessmentHypokalemia = getRefObj(queryAssessmentHypokalemia);
		KeyValueObj otherHypokalemiaKey = new KeyValueObj();
		otherHypokalemiaKey.setKey("other");
		otherHypokalemiaKey.setValue("other");
		assessmentHypokalemia.add(otherHypokalemiaKey);
		dropDowns.setTreatmentActionHypokalemia(assessmentHypokalemia);

		// for Hypokalemia cause
		String queryCauseHypokalemia = "select causeofmetabolicid, causeofmetabolic from ref_causeofmetabolic where event='Hypokalemia'";
		List<KeyValueObj> causeHypokalemiaList = getRefObj(queryCauseHypokalemia);
		KeyValueObj otherHypokalemiaCauseKey = new KeyValueObj();
		otherHypokalemiaCauseKey.setKey("other");
		otherHypokalemiaCauseKey.setValue("other");
		causeHypokalemiaList.add(otherHypokalemiaCauseKey);
		dropDowns.setCauseOfHypokalemia(causeHypokalemiaList);

		// for Hyperkalemia treatment
		String queryAssessmentHyperkalemia = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment where category='Hyperkalemia'";
		List<KeyValueObj> assessmentHyperkalemia = getRefObj(queryAssessmentHyperkalemia);
		KeyValueObj otherHyperkalemiaKey = new KeyValueObj();
		otherHyperkalemiaKey.setKey("other");
		otherHyperkalemiaKey.setValue("other");
		assessmentHyperkalemia.add(otherHyperkalemiaKey);
		dropDowns.setTreatmentActionHyperkalemia(assessmentHyperkalemia);

		// for Hyperkalemia cause
		String queryCauseHyperkalemia = "select causeofmetabolicid, causeofmetabolic from ref_causeofmetabolic where event='Hyperkalemia'";
		List<KeyValueObj> causeHyperkalemiaList = getRefObj(queryCauseHyperkalemia);
		KeyValueObj otherHyperkalemiaCauseKey = new KeyValueObj();
		otherHyperkalemiaCauseKey.setKey("other");
		otherHyperkalemiaCauseKey.setValue("other");
		causeHyperkalemiaList.add(otherHyperkalemiaCauseKey);
		dropDowns.setCauseOfHyperkalemia(causeHyperkalemiaList);

		// iem treatment list
		String queryAssessmentIem = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment where category='IEM'";
		List<KeyValueObj> assessmentIem = getRefObj(queryAssessmentIem);
		KeyValueObj keyIemOther = new KeyValueObj();
		keyIemOther.setKey("other");
		keyIemOther.setValue("Other");
		assessmentIem.add(keyIemOther);
		dropDowns.setTreatmentActionIem(assessmentIem);

		// for iem causes list
		String queryCauseIem = "select causeofmetabolicid, causeofmetabolic from ref_causeofmetabolic where event='IEM'";
		List<KeyValueObj> causeIemList = getRefObj(queryCauseIem);
		KeyValueObj keyIemCauseOther = new KeyValueObj();
		keyIemCauseOther.setKey("other");
		keyIemCauseOther.setValue("Other");
		causeIemList.add(keyIemCauseOther);
		dropDowns.setCauseOfIem(causeIemList);

		// Hypercalcemia treatment list
		String queryAssessmentHypercalcemia = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment where category='Hypercalcemia'";
		List<KeyValueObj> assessmentHypercalcemia = getRefObj(queryAssessmentHypercalcemia);
		KeyValueObj keyHypercalcemiaOther = new KeyValueObj();
		keyHypercalcemiaOther.setKey("other");
		keyHypercalcemiaOther.setValue("Other");
		assessmentHypercalcemia.add(keyHypercalcemiaOther);
		dropDowns.setTreatmentActionHypercalcemia(assessmentHypercalcemia);

		// Hypercalcemia causes list
		String queryCauseHypercalcemia = "select causeofmetabolicid, causeofmetabolic from ref_causeofmetabolic where event='Hypercalcemia'";
		List<KeyValueObj> causeHypercalcemiaList = getRefObj(queryCauseHypercalcemia);
		KeyValueObj keyHypercalcemiaCauseOther = new KeyValueObj();
		keyHypercalcemiaCauseOther.setKey("other");
		keyHypercalcemiaCauseOther.setValue("Other");
		causeHypercalcemiaList.add(keyHypercalcemiaCauseOther);
		dropDowns.setCauseOfHypercalcemia(causeHypercalcemiaList);

		// acidosis treatment list
		String queryAssessmentAcidosis = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment where category='Acidosis'";
		List<KeyValueObj> assessmentAcidosis = getRefObj(queryAssessmentAcidosis);
		KeyValueObj keyAcidosisOther = new KeyValueObj();
		keyAcidosisOther.setKey("other");
		keyAcidosisOther.setValue("Other");
		assessmentAcidosis.add(keyAcidosisOther);
		dropDowns.setTreatmentActionAcidosis(assessmentAcidosis);

		// acidosis causes list
		String queryCauseAcidosis = "select causeofmetabolicid, causeofmetabolic from ref_causeofmetabolic where event='Acidosis'";
		List<KeyValueObj> causeAcidosisList = getRefObj(queryCauseAcidosis);
		KeyValueObj keyAcidosisCauseOther = new KeyValueObj();
		keyAcidosisCauseOther.setKey("other");
		keyAcidosisCauseOther.setValue("Other");
		causeAcidosisList.add(keyAcidosisCauseOther);
		dropDowns.setCauseOfAcidosis(causeAcidosisList);

		// hypocalcemia treatment list
		String queryAssessmentHypocalcemia = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment where category='Hypocalcemia'";
		List<KeyValueObj> assessmentHypocalcemia = getRefObj(queryAssessmentHypocalcemia);
		KeyValueObj keyHypocalOther = new KeyValueObj();
		keyHypocalOther.setKey("other");
		keyHypocalOther.setValue("Other");
		assessmentHypocalcemia.add(keyHypocalOther);
		dropDowns.setTreatmentActionHypocalcemia(assessmentHypocalcemia);

		// hypocalcemia causes list
		String queryCauseHypocalcemia = "select causeofmetabolicid, causeofmetabolic from ref_causeofmetabolic where event='Hypocalcemia'";
		List<KeyValueObj> causeHypocalcemiaList = getRefObj(queryCauseHypocalcemia);
		KeyValueObj keyHypocalcemiaCauseOther = new KeyValueObj();
		keyHypocalcemiaCauseOther.setKey("other");
		keyHypocalcemiaCauseOther.setValue("Other");
		causeHypocalcemiaList.add(keyHypocalcemiaCauseOther);
		dropDowns.setCauseOfHypocalcemia(causeHypocalcemiaList);

		return dropDowns;
	}

	@Override
	public ResponseMessageWithResponseObject saveMetabolicSystem(AssessmentMetabolicSystemPOJO metabolicSystemObj) {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
		// TODO save metabolic based on its event name ....
		String systemEvent = metabolicSystemObj.getSystemStatus();

		if (!BasicUtils.isEmpty(systemEvent)) {
			// if yes then save according to event name other wise save all with
			// same as system event.
			MetabolicSystemEventPOJO metabolicEventObj = metabolicSystemObj.getMetabolicEventObject();
			if (systemEvent.equalsIgnoreCase(BasicConstants.YES)) {
				// then save event based on event name...
				String eventName = metabolicEventObj.getEventName();
				if (!BasicUtils.isEmpty(eventName)) {
					if (eventName.equalsIgnoreCase(BasicConstants.HYPOGLYCEMIA)) {
						try {
							response = saveMetabolicHypoglycemiaEvent(metabolicSystemObj.getAgeAtOnset(),
									metabolicSystemObj);
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					} else if (eventName.equalsIgnoreCase(BasicConstants.HYPERGLYCEMIA)) {
						try {
							response = saveMetabolicHyperglycemiaEvent(metabolicSystemObj);
						} catch (Exception e) {
							e.printStackTrace();
						}
					} else if (eventName.equalsIgnoreCase(BasicConstants.HYPERNATREMIA)) {
						try {
							response = saveMetabolicHypernatremiaEvent(metabolicSystemObj);
						} catch (Exception e) {
							e.printStackTrace();
						}
					} else if (eventName.equalsIgnoreCase(BasicConstants.HYPONATREMIA)) {
						try {
							response = saveMetabolicHyponatremiaEvent(metabolicSystemObj);
						} catch (Exception e) {
							e.printStackTrace();
						}
					} else if (eventName.equalsIgnoreCase(BasicConstants.HYPOKALEMIA)) {
						try {
							response = saveMetabolicHypokalemiaEvent(metabolicSystemObj);
						} catch (Exception e) {
							e.printStackTrace();
						}
					} else if (eventName.equalsIgnoreCase(BasicConstants.HYPERKALEMIA)) {
						try {
							response = saveMetabolicHyperkalemiaEvent(metabolicSystemObj);
						} catch (Exception e) {
							e.printStackTrace();
						}
					} else if (eventName.equalsIgnoreCase(BasicConstants.IEM)) {
						try {
							response = saveMetabolicIEMEvent(metabolicSystemObj);
						} catch (Exception e) {
							e.printStackTrace();
						}
					} else if (eventName.equalsIgnoreCase(BasicConstants.ACIDOSIS)) {
						try {
							response = saveMetabolicAcidosisEvent(metabolicSystemObj);
						} catch (Exception e) {
							e.printStackTrace();
						}
					} else if (eventName.equalsIgnoreCase(BasicConstants.HYPERCALCEMIA)) {
						try {
							response = saveMetabolicHypercalcemiaEvent(metabolicSystemObj);
						} catch (Exception e) {
							e.printStackTrace();
						}
					} else if (eventName.equalsIgnoreCase(BasicConstants.HYPOCALCEMIA)) {
						try {
							response = saveMetabolicHypocalcemiaEvent(metabolicSystemObj);
						} catch (Exception e) {
							e.printStackTrace();
						}
					} else { // always will be in last...
						response.setMessage("none of the event are matching");
						response.setType(BasicConstants.MESSAGE_FAILURE);
					}
				} else {
					response.setMessage("event name is coming as null or empty");
					response.setType(BasicConstants.MESSAGE_FAILURE);
				}
			} else {// save all inactive
				SaHypoglycemia hypoglycemia = new SaHypoglycemia();
				hypoglycemia.setUhid(metabolicSystemObj.getUhid());
				hypoglycemia.setLoggeduser(metabolicSystemObj.getLoggedUser());
				hypoglycemia.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());
				hypoglycemia.setProgressnotes("No significant hypoglycemia event");
				hypoglycemia.setEventstatus(metabolicSystemObj.getSystemStatus());
				try {
					inicuDao.saveObject(hypoglycemia);
				} catch (Exception e) {
					e.printStackTrace();
				}

				SaHyperglycemia hyperglycemia = new SaHyperglycemia();
				hyperglycemia.setUhid(metabolicSystemObj.getUhid());
				hyperglycemia.setLoggeduser(metabolicSystemObj.getLoggedUser());
				hyperglycemia.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());
				hyperglycemia.setAgeinhoursdays(true);
				hyperglycemia.setMetabolicSystemStatus(metabolicSystemObj.getSystemStatus());
				hyperglycemia.setProgressnotes("No Significant Hyperglycemia Event");
				hyperglycemia.setEventstatus(metabolicSystemObj.getSystemStatus());
				try {
					inicuDao.saveObject(hyperglycemia);
				} catch (Exception e) {
					e.printStackTrace();
				}

				SaHypernatremia hypernatremia = new SaHypernatremia();
				hypernatremia.setUhid(metabolicSystemObj.getUhid());
				hypernatremia.setLoggeduser(metabolicSystemObj.getLoggedUser());
				hypernatremia.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());
				hypernatremia.setProgressnotes("No significant hypernatremia event");
				hypernatremia.setEventstatus(metabolicSystemObj.getSystemStatus());
				try {
					inicuDao.saveObject(hypernatremia);
				} catch (Exception e) {
					e.printStackTrace();
				}

				SaHyponatremia hyponatremia = new SaHyponatremia();
				hyponatremia.setUhid(metabolicSystemObj.getUhid());
				hyponatremia.setLoggeduser(metabolicSystemObj.getLoggedUser());
				hyponatremia.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());
				hyponatremia.setProgressnotes("No significant hyponatremia event");
				hyponatremia.setEventstatus(metabolicSystemObj.getSystemStatus());
				try {
					inicuDao.saveObject(hyponatremia);
				} catch (Exception e) {
					e.printStackTrace();
				}

				SaHypercalcemia hypercalcemia = new SaHypercalcemia();
				hypercalcemia.setUhid(metabolicSystemObj.getUhid());
				hypercalcemia.setLoggeduser(metabolicSystemObj.getLoggedUser());
				hypercalcemia.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());
				hypercalcemia.setAgeinhoursdays(true);
				hypercalcemia.setMetabolicSystemStatus(metabolicSystemObj.getSystemStatus());
				hypercalcemia.setProgressnotes("No Significant Hypercalcemia Event");
				hypercalcemia.setEventstatus(metabolicSystemObj.getSystemStatus());
				try {
					inicuDao.saveObject(hypercalcemia);
				} catch (Exception e) {
					e.printStackTrace();
				}

				SaHypokalemia hypokalemia = new SaHypokalemia();
				hypokalemia.setUhid(metabolicSystemObj.getUhid());
				hypokalemia.setLoggeduser(metabolicSystemObj.getLoggedUser());
				hypokalemia.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());
				hypokalemia.setAgeinhoursdays(true);
				hypokalemia.setMetabolicSystemStatus(metabolicSystemObj.getSystemStatus());
				hypokalemia.setProgressnotes("No Significant Hypokalemia Event");
				hypokalemia.setEventstatus(metabolicSystemObj.getSystemStatus());
				try {
					inicuDao.saveObject(hypokalemia);
				} catch (Exception e) {
					e.printStackTrace();
				}

				SaHyperkalemia hyperkalemia = new SaHyperkalemia();
				hyperkalemia.setUhid(metabolicSystemObj.getUhid());
				hyperkalemia.setLoggeduser(metabolicSystemObj.getLoggedUser());
				hyperkalemia.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());
				hyperkalemia.setAgeinhoursdays(true);
				hyperkalemia.setMetabolicSystemStatus(metabolicSystemObj.getSystemStatus());
				hyperkalemia.setProgressnotes("No Significant Hyperkalemia Event");
				hyperkalemia.setEventstatus(metabolicSystemObj.getSystemStatus());
				try {
					inicuDao.saveObject(hyperkalemia);
				} catch (Exception e) {
					e.printStackTrace();
				}

				SaIEM iem = new SaIEM();
				iem.setUhid(metabolicSystemObj.getUhid());
				iem.setLoggeduser(metabolicSystemObj.getLoggedUser());
				iem.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());
				iem.setProgressnotes("No significant IEM event");
				iem.setEventstatus(metabolicSystemObj.getSystemStatus());
				try {
					inicuDao.saveObject(iem);
				} catch (Exception e) {
					e.printStackTrace();
				}

				// save acidosis
				SaAcidosis acidosis = new SaAcidosis();
				acidosis.setUhid(metabolicSystemObj.getUhid());
				acidosis.setLoggeduser(metabolicSystemObj.getLoggedUser());
				acidosis.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());
				acidosis.setProgressnotes("No significant Acidosis event");
				acidosis.setEventstatus(metabolicSystemObj.getSystemStatus());
				try {
					inicuDao.saveObject(acidosis);
				} catch (Exception e) {
					e.printStackTrace();
				}

				// save hypocalcemia
				SaHypocalcemia hypocalcemia = new SaHypocalcemia();
				hypocalcemia.setUhid(metabolicSystemObj.getUhid());
				hypocalcemia.setLoggeduser(metabolicSystemObj.getLoggedUser());
				hypocalcemia.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());
				hypocalcemia.setProgressnotes("No significant Hypocalcemia event");
				hypocalcemia.setEventstatus(metabolicSystemObj.getSystemStatus());
				try {
					inicuDao.saveObject(hypocalcemia);
				} catch (Exception e) {
					e.printStackTrace();
				}

			}
		} else {
			response.setMessage("System status is coming as null or empty");
			response.setType(BasicConstants.MESSAGE_FAILURE);
		}
		return response;
	}

	private ResponseMessageWithResponseObject saveMetabolicHypoglycemiaEvent(Object ageAtOnset,
			AssessmentMetabolicSystemPOJO metabolicSystemObj) throws Exception {

		// TODO saving hypoglycemia event ....
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
//		String systemStatus = metabolicSystemObj.getSystemStatus();
//
//		SaHypoglycemia currentObj = metabolicSystemObj.getMetabolicEventObject().getHypoglycemiaEvent()
//				.getCurrentEvent().getCurrentHypoglycemia();
//		currentObj.setUhid(metabolicSystemObj.getUhid());
//		currentObj.setLoggeduser(metabolicSystemObj.getLoggedUser());
//		currentObj.setMetabolicSystemStatus(metabolicSystemObj.getSystemStatus());
//		if (!BasicUtils.isEmpty(currentObj.getCauseofhypoglycemiaList())) {
//			currentObj.setCauseofhypoglycemia(currentObj.getCauseofhypoglycemiaList().toString());
//		}
//
//		if (!BasicUtils.isEmpty(currentObj.getTreatmentactionList())) {
//			currentObj.setTreatmentaction(currentObj.getTreatmentactionList().toString());
//		}
//		currentObj = (SaHypoglycemia) inicuDao.saveObject(currentObj);
//
//		// save order investigation...
//		if (currentObj.getHypoglycemiaid() != null
//				&& currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {
//			saveOrderInvestigation(metabolicSystemObj.getDropDowns().getOrders(), currentObj.getHypoglycemiaid(),
//					metabolicSystemObj.getUhid(), metabolicSystemObj.getLoggedUser(), "Hypoglycemia",
//					currentObj.getCreationtime());
//		}
//
//		// save prescription data here...
//		List<BabyPrescription> babyPrescriptionList = metabolicSystemObj.getMetabolicEventObject()
//				.getCurrentBabyPrescriptionList();
//		if (!BasicUtils.isEmpty(babyPrescriptionList)) {
//			for (BabyPrescription babyPrescription : babyPrescriptionList) {
//				babyPrescription.setUhid(metabolicSystemObj.getUhid());
//				babyPrescription.setLoggeduser(metabolicSystemObj.getLoggedUser());
//				babyPrescription.setIsactive(true);
//				babyPrescription.setStartdate(new Timestamp(System.currentTimeMillis()));
//				babyPrescription = (BabyPrescription) inicuDao.saveObject(babyPrescription);
//			}
//		}
//
//		response.setMessage("Hypoglycemia saved successfully..!!");
//		response.setType(BasicConstants.MESSAGE_SUCCESS);
		return response;

	}

	private ResponseMessageWithResponseObject saveMetabolicHyperglycemiaEvent(
			AssessmentMetabolicSystemPOJO metabolicSystemObj) throws Exception {

		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
		String systemStatus = metabolicSystemObj.getSystemStatus();

		SaHyperglycemia currentObj = metabolicSystemObj.getMetabolicEventObject().getHyperglycemiaEvent()
				.getCurrentEvent().getCurrentHyperglycemia();
		currentObj.setUhid(metabolicSystemObj.getUhid());
		currentObj.setLoggeduser(metabolicSystemObj.getLoggedUser());
		currentObj.setMetabolicSystemStatus(systemStatus);

		if (currentObj.getEventstatus().equalsIgnoreCase("yes")) {
			if (!BasicUtils.isEmpty(currentObj.getCauseofhyperglycemiaList())) {
				currentObj.setCauseofhyperglycemia(currentObj.getCauseofhyperglycemiaList().toString());
			}

			if (!BasicUtils.isEmpty(currentObj.getTreatmentactionList())) {
				currentObj.setTreatmentaction(currentObj.getTreatmentactionList().toString());
			}
		} else {
			currentObj.setProgressnotes("No Significant Hyperglycemia Event");
		}

		currentObj = (SaHyperglycemia) inicuDao.saveObject(currentObj);

		// save order investigation...
		if (currentObj.getHyperglycemiaid() != null
				&& currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {
			saveOrderInvestigation(metabolicSystemObj.getDropDowns().getOrders(), currentObj.getHyperglycemiaid(),
					metabolicSystemObj.getUhid(), metabolicSystemObj.getLoggedUser(), "Hyperglycemia",
					currentObj.getCreationtime());
		}

		response.setMessage("Hyperglycemia saved successfully..!!");

		response.setType(BasicConstants.MESSAGE_SUCCESS);
		return response;
	}

	private ResponseMessageWithResponseObject saveMetabolicHypernatremiaEvent(
			AssessmentMetabolicSystemPOJO metabolicSystemObj) throws Exception {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
		String systemStatus = metabolicSystemObj.getSystemStatus();

		SaHypernatremia currentObj = metabolicSystemObj.getMetabolicEventObject().getHypernatremiaEvent()
				.getCurrentEvent().getCurrentSaHypernatremia();
		currentObj.setUhid(metabolicSystemObj.getUhid());
		currentObj.setLoggeduser(metabolicSystemObj.getLoggedUser());
		currentObj.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());

		if (currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {
			if (!currentObj.getAgeinhoursdays()) {
				Integer ageonSet = Integer.parseInt(metabolicSystemObj.getAgeAtOnset().toString());
				ageonSet = (int) Math.round(ageonSet / 24.0);
				currentObj.setAgeatonset(ageonSet.toString());
			} else {
				currentObj.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());
			}
			currentObj.setMetabolicSystemStatus(systemStatus);
			if (!BasicUtils.isEmpty(currentObj.getCauseofhypernatremiaList())) {
				currentObj.setCauseofhypernatremia(currentObj.getCauseofhypernatremiaList().toString());
			}

			if (!BasicUtils.isEmpty(currentObj.getTreatmentactionList())) {
				currentObj.setTreatmentaction(currentObj.getTreatmentactionList().toString());
			}

			try {
				currentObj = (SaHypernatremia) inicuDao.saveObject(currentObj);
			} catch (Exception e) {
				e.printStackTrace();
			}

			// save order investigation...
			if (currentObj.getHypernatremiaid() != null
					&& currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {
				saveOrderInvestigation(metabolicSystemObj.getDropDowns().getOrders(), currentObj.getHypernatremiaid(),
						metabolicSystemObj.getUhid(), metabolicSystemObj.getLoggedUser(), "Hypernatremia",
						currentObj.getCreationtime());
			}
		} else {
			SaHypernatremia hypernatremia = new SaHypernatremia();
			hypernatremia.setUhid(metabolicSystemObj.getUhid());
			hypernatremia.setLoggeduser(metabolicSystemObj.getLoggedUser());
			hypernatremia.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());
			hypernatremia.setAgeinhoursdays(true);
			hypernatremia.setProgressnotes("No significant hypernatremia event");
			hypernatremia.setEventstatus(currentObj.getEventstatus());

			try {
				inicuDao.saveObject(hypernatremia);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		response.setMessage("Hypernatremia saved successfully..!!");
		response.setType(BasicConstants.MESSAGE_SUCCESS);
		return response;
	}

	private ResponseMessageWithResponseObject saveMetabolicHyponatremiaEvent(
			AssessmentMetabolicSystemPOJO metabolicSystemObj) throws Exception {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
		String systemStatus = metabolicSystemObj.getSystemStatus();

		SaHyponatremia currentObj = metabolicSystemObj.getMetabolicEventObject().getHyponatremiaEvent()
				.getCurrentEvent().getCurrentHyponatremia();

		currentObj.setUhid(metabolicSystemObj.getUhid());
		currentObj.setLoggeduser(metabolicSystemObj.getLoggedUser());
		currentObj.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());
		if (!currentObj.getAgeinhoursdays()) {
			// convert age in hours to days
			Integer ageonSet = (Integer) metabolicSystemObj.getAgeAtOnset();
			ageonSet = (int) Math.round(ageonSet / 24.0);
			currentObj.setAgeatonset(ageonSet.toString());
		} else {
			currentObj.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());
		}
		currentObj.setMetabolicSystemStatus(systemStatus);

		if (!BasicUtils.isEmpty(currentObj.getTreatmentactionList())) {
			currentObj.setTreatmentaction(currentObj.getTreatmentactionList().toString());
		}

		if (!BasicUtils.isEmpty(currentObj.getCauseofhyponatremiaList())) {
			currentObj.setCauseofhyponatremia(currentObj.getCauseofhyponatremiaList().toString());
		}
		currentObj = (SaHyponatremia) inicuDao.saveObject(currentObj);
		/*
		 * todo anything else to save
		 */

		// save order investigation...
		if (currentObj.getHyponatremiaid() != null
				&& currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {
			saveOrderInvestigation(metabolicSystemObj.getDropDowns().getOrders(), currentObj.getHyponatremiaid(),
					metabolicSystemObj.getUhid(), metabolicSystemObj.getLoggedUser(), "Hyponatremia",
					currentObj.getCreationtime());
		}
		response.setMessage("Hyponatremia saved successfully..!!");
		response.setType(BasicConstants.MESSAGE_SUCCESS);
		return response;
	}

	private ResponseMessageWithResponseObject saveMetabolicHypokalemiaEvent(
			AssessmentMetabolicSystemPOJO metabolicSystemObj) throws Exception {

		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
		String systemStatus = metabolicSystemObj.getSystemStatus();

		SaHypokalemia currentObj = metabolicSystemObj.getMetabolicEventObject().getHypokalemiaEvent().getCurrentEvent()
				.getCurrentHypokalemia();
		currentObj.setUhid(metabolicSystemObj.getUhid());
		currentObj.setLoggeduser(metabolicSystemObj.getLoggedUser());
		currentObj.setMetabolicSystemStatus(systemStatus);

		if (currentObj.getEventstatus().equalsIgnoreCase("yes")) {
			if (!BasicUtils.isEmpty(currentObj.getCauseofhypokalemiaList())) {
				currentObj.setCauseofhypokalemia(currentObj.getCauseofhypokalemiaList().toString());
			}

			if (!BasicUtils.isEmpty(currentObj.getTreatmentactionList())) {
				currentObj.setTreatmentaction(currentObj.getTreatmentactionList().toString());
			}
		} else {
			currentObj.setProgressnotes("No Significant Hypokalemia Event");
		}

		currentObj = (SaHypokalemia) inicuDao.saveObject(currentObj);

		// save order investigation...
		if (currentObj.getHypokalemiaid() != null && currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {
			saveOrderInvestigation(metabolicSystemObj.getDropDowns().getOrders(), currentObj.getHypokalemiaid(),
					metabolicSystemObj.getUhid(), metabolicSystemObj.getLoggedUser(), "Hypokalemia",
					currentObj.getCreationtime());

			if (currentObj.getTreatmentaction() != null) {
				String treatmentStr = currentObj.getTreatmentaction();
				if (treatmentStr.contains("TRE059")) {
					List<BabyPrescription> babyPrescriptionList = metabolicSystemObj.getMetabolicEventObject()
							.getCurrentHypokalemiaPrescriptionList();

					if (!BasicUtils.isEmpty(babyPrescriptionList)) {
						for (BabyPrescription babyPrescription : babyPrescriptionList) {
							babyPrescription.setUhid(metabolicSystemObj.getUhid());
							babyPrescription.setLoggeduser(metabolicSystemObj.getLoggedUser());
							babyPrescription.setIsactive(true);
							babyPrescription.setStartdate(new Timestamp(System.currentTimeMillis()));
							babyPrescription = (BabyPrescription) inicuDao.saveObject(babyPrescription);
						}
					}

				}
			}
		}

		response.setMessage("Hypokalemia saved successfully..!!");
		response.setType(BasicConstants.MESSAGE_SUCCESS);
		return response;
	}

	private ResponseMessageWithResponseObject saveMetabolicHyperkalemiaEvent(
			AssessmentMetabolicSystemPOJO metabolicSystemObj) throws Exception {

		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
		String systemStatus = metabolicSystemObj.getSystemStatus();

		SaHyperkalemia currentObj = metabolicSystemObj.getMetabolicEventObject().getHyperkalemiaEvent()
				.getCurrentEvent().getCurrentHyperkalemia();
		currentObj.setUhid(metabolicSystemObj.getUhid());
		currentObj.setLoggeduser(metabolicSystemObj.getLoggedUser());
		currentObj.setMetabolicSystemStatus(systemStatus);

		if (currentObj.getEventstatus().equalsIgnoreCase("yes")) {
			if (!BasicUtils.isEmpty(currentObj.getCauseofhyperkalemiaList())) {
				currentObj.setCauseofhyperkalemia(currentObj.getCauseofhyperkalemiaList().toString());
			}

			if (!BasicUtils.isEmpty(currentObj.getTreatmentactionList())) {
				currentObj.setTreatmentaction(currentObj.getTreatmentactionList().toString());
			}
		} else {
			currentObj.setProgressnotes("No Significant Hyperkalemia Event");
		}

		currentObj = (SaHyperkalemia) inicuDao.saveObject(currentObj);

		// save order investigation...
		if (currentObj.getHyperkalemiaid() != null
				&& currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {
			saveOrderInvestigation(metabolicSystemObj.getDropDowns().getOrders(), currentObj.getHyperkalemiaid(),
					metabolicSystemObj.getUhid(), metabolicSystemObj.getLoggedUser(), "Hyperkalemia",
					currentObj.getCreationtime());

			if (currentObj.getTreatmentaction() != null) {
				String treatmentStr = currentObj.getTreatmentaction();
				if (treatmentStr.contains("TRE037") || treatmentStr.contains("TRE038")
						|| treatmentStr.contains("TRE053")) {
					List<BabyPrescription> babyPrescriptionList = metabolicSystemObj.getMetabolicEventObject()
							.getCurrentHyperkalemiaPrescriptionList();

					if (!BasicUtils.isEmpty(babyPrescriptionList)) {
						for (BabyPrescription babyPrescription : babyPrescriptionList) {
							babyPrescription.setUhid(metabolicSystemObj.getUhid());
							babyPrescription.setLoggeduser(metabolicSystemObj.getLoggedUser());
							babyPrescription.setIsactive(true);
							babyPrescription.setStartdate(new Timestamp(System.currentTimeMillis()));
							babyPrescription = (BabyPrescription) inicuDao.saveObject(babyPrescription);
						}
					}

				}
			}
		}

		response.setMessage("Hyperkalemia saved successfully..!!");
		response.setType(BasicConstants.MESSAGE_SUCCESS);
		return response;
	}

	private ResponseMessageWithResponseObject saveMetabolicIEMEvent(AssessmentMetabolicSystemPOJO metabolicSystemObj)
			throws Exception {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
		String systemStatus = metabolicSystemObj.getSystemStatus();

		SaIEM currentObj = metabolicSystemObj.getMetabolicEventObject().getIemEvent().getCurrentEvent().getCurrentIem();

		currentObj.setUhid(metabolicSystemObj.getUhid());
		currentObj.setLoggeduser(metabolicSystemObj.getLoggedUser());
		currentObj.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());

		if (currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {
			if (!currentObj.getAgeinhoursdays()) {
				Integer ageonSet = Integer.parseInt(metabolicSystemObj.getAgeAtOnset().toString());
				ageonSet = (int) Math.round(ageonSet / 24.0);
				currentObj.setAgeatonset(ageonSet.toString());
			} else {
				currentObj.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());
			}
			currentObj.setMetabolicSystemStatus(systemStatus);

			if (!BasicUtils.isEmpty(currentObj.getCauseofiemList())) {
				currentObj.setCauseofiem(currentObj.getCauseofiemList().toString());
			}

			if (!BasicUtils.isEmpty(currentObj.getTreatmentactionList())) {
				currentObj.setTreatmentaction(currentObj.getTreatmentactionList().toString());
			}

			try {
				if (!BasicUtils.isEmpty(currentObj.getTreatmentaction())) {
					if (!currentObj.getTreatmentaction().contains("TRE045")) {
						currentObj.setExchangetrans(null);
					}
				} else {
					currentObj.setExchangetrans(null);
				}

				currentObj = (SaIEM) inicuDao.saveObject(currentObj);
			} catch (Exception e) {
				e.printStackTrace();
			}

			if (!BasicUtils.isEmpty(currentObj.getTreatmentaction())) {
				String treatmentStr = currentObj.getTreatmentaction();
				if (treatmentStr.contains("TRE041")) {
					List<BabyPrescription> babyPrescriptionList = metabolicSystemObj.getMetabolicEventObject()
							.getCurrentBabyPrescriptionList();
					if (!BasicUtils.isEmpty(babyPrescriptionList)) {// no
						// link
						// for
						// which
						// resp
						// id
						// it
						// is.
						for (BabyPrescription babyPrescription : babyPrescriptionList) {
							babyPrescription.setUhid(metabolicSystemObj.getUhid());
							babyPrescription.setLoggeduser(metabolicSystemObj.getLoggedUser());
							babyPrescription.setIsactive(true);
							babyPrescription.setStartdate(new Timestamp(System.currentTimeMillis()));
							babyPrescription = (BabyPrescription) inicuDao.saveObject(babyPrescription);
						}
					}
				}

				if (treatmentStr.contains("TRE042")) {
					List<BabyPrescription> babyPrescriptionList = metabolicSystemObj.getMetabolicEventObject()
							.getCurrentAntibioticsPrescriptionList();
					if (!BasicUtils.isEmpty(babyPrescriptionList)) {// no
						// link
						// for
						// which
						// resp
						// id
						// it
						// is.
						for (BabyPrescription babyPrescription : babyPrescriptionList) {
							babyPrescription.setUhid(metabolicSystemObj.getUhid());
							babyPrescription.setLoggeduser(metabolicSystemObj.getLoggedUser());
							babyPrescription.setIsactive(true);
							babyPrescription.setStartdate(new Timestamp(System.currentTimeMillis()));
							babyPrescription = (BabyPrescription) inicuDao.saveObject(babyPrescription);
						}
					}
				}

				if (treatmentStr.contains("TRE043")) {
					RespSupport respSupport = metabolicSystemObj.getMetabolicEventObject().getRespSupport();
					respSupport.setEventid(currentObj.getIemid().toString());
					respSupport.setEventname("IEM");
					respSupport.setUhid(metabolicSystemObj.getUhid());
					respSupport.setIsactive(true);
					respSupport = (RespSupport) inicuDao.saveObject(respSupport);
				} else {
					RespSupport respSupport = metabolicSystemObj.getMetabolicEventObject().getRespSupport();
					if (BasicUtils.isEmpty(respSupport.getIsactive()) || respSupport.getIsactive() == true) {
						respSupport.setEventid(currentObj.getIemid().toString());
						respSupport.setEventname("IEM");
						respSupport.setUhid(metabolicSystemObj.getUhid());
						respSupport.setIsactive(false);
						respSupport.setRsVentType(null);
						respSupport = (RespSupport) inicuDao.saveObject(respSupport);
					}
				}
			} else {
				RespSupport respSupport = metabolicSystemObj.getMetabolicEventObject().getRespSupport();
				if (BasicUtils.isEmpty(respSupport.getIsactive()) || respSupport.getIsactive() == true) {
					respSupport.setEventid(currentObj.getIemid().toString());
					respSupport.setEventname("IEM");
					respSupport.setUhid(metabolicSystemObj.getUhid());
					respSupport.setIsactive(false);
					respSupport.setRsVentType(null);
					respSupport = (RespSupport) inicuDao.saveObject(respSupport);
				}
			}
			// save order investigation...
			if (currentObj.getIemid() != null && currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {
				saveOrderInvestigation(metabolicSystemObj.getDropDowns().getOrders(), currentObj.getIemid(),
						metabolicSystemObj.getUhid(), metabolicSystemObj.getLoggedUser(), "IEM",
						currentObj.getCreationtime());
			}
		} else {
			SaIEM iem = new SaIEM();
			iem.setUhid(metabolicSystemObj.getUhid());
			iem.setLoggeduser(metabolicSystemObj.getLoggedUser());
			iem.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());
			iem.setAgeinhoursdays(true);
			iem.setProgressnotes("No significant IEM event");
			iem.setEventstatus(currentObj.getEventstatus());

			try {
				inicuDao.saveObject(iem);
			} catch (Exception e) {
				e.printStackTrace();
			}

		}
		response.setMessage("IEM saved successfully..!!");
		response.setType(BasicConstants.MESSAGE_SUCCESS);
		return response;
	}

	private ResponseMessageWithResponseObject saveMetabolicAcidosisEvent(
			AssessmentMetabolicSystemPOJO metabolicSystemObj) throws Exception {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
		String systemStatus = metabolicSystemObj.getSystemStatus();

		SaAcidosis currentObj = metabolicSystemObj.getMetabolicEventObject().getAcidosisEvent().getCurrentEvent()
				.getCurrentAcidosis();

		currentObj.setUhid(metabolicSystemObj.getUhid());
		currentObj.setLoggeduser(metabolicSystemObj.getLoggedUser());
		currentObj.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());

		if (currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {
			if (!currentObj.getAgeinhoursdays()) {
				Integer ageonSet = Integer.parseInt(metabolicSystemObj.getAgeAtOnset().toString());
				ageonSet = (int) Math.round(ageonSet / 24.0);
				currentObj.setAgeatonset(ageonSet.toString());
			} else {
				currentObj.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());
			}
			currentObj.setMetabolicSystemStatus(systemStatus);

			if (!BasicUtils.isEmpty(currentObj.getCauseofAcidosisList())) {
				currentObj.setCauseOfAcidosis(currentObj.getCauseofAcidosisList().toString());
			}

			if (!BasicUtils.isEmpty(currentObj.getTreatmentactionList())) {
				currentObj.setTreatmentaction(currentObj.getTreatmentactionList().toString());
			}

			try {
				currentObj = (SaAcidosis) inicuDao.saveObject(currentObj);
			} catch (Exception e) {
				e.printStackTrace();
			}

			// save order investigation
			if (currentObj.getAcidosisid() != null
					&& currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {
				saveOrderInvestigation(metabolicSystemObj.getDropDowns().getOrders(), currentObj.getAcidosisid(),
						metabolicSystemObj.getUhid(), metabolicSystemObj.getLoggedUser(), "Acidosis",
						currentObj.getCreationtime());

			}

		} else {
			SaAcidosis acidosis = new SaAcidosis();

			acidosis.setUhid(metabolicSystemObj.getUhid());
			acidosis.setLoggeduser(metabolicSystemObj.getLoggedUser());
			acidosis.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());
			acidosis.setAgeinhoursdays(true);
			acidosis.setProgressnotes("No significant Acidosis event");
			acidosis.setEventstatus(currentObj.getEventstatus());

			try {
				inicuDao.saveObject(acidosis);
			} catch (Exception e) {
				e.printStackTrace();
			}

		}
		response.setMessage("Acidosis saved successfully..!!");
		response.setType(BasicConstants.MESSAGE_SUCCESS);
		return response;
	}

	private ResponseMessageWithResponseObject saveMetabolicHypercalcemiaEvent(
			AssessmentMetabolicSystemPOJO metabolicSystemObj) throws Exception {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
		String systemStatus = metabolicSystemObj.getSystemStatus();

		SaHypercalcemia currentObj = metabolicSystemObj.getMetabolicEventObject().getHypercalcemiaEvent()
				.getCurrentEvent().getCurrentHypercalcemia();
		currentObj.setUhid(metabolicSystemObj.getUhid());
		currentObj.setLoggeduser(metabolicSystemObj.getLoggedUser());
		currentObj.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());

		if (currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {
			if (!currentObj.getAgeinhoursdays()) {
				Integer ageonSet = Integer.parseInt(metabolicSystemObj.getAgeAtOnset().toString());
				ageonSet = (int) Math.round(ageonSet / 24.0);
				currentObj.setAgeatonset(ageonSet.toString());
			} else {
				currentObj.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());
			}
			currentObj.setMetabolicSystemStatus(systemStatus);
			if (!BasicUtils.isEmpty(currentObj.getCauseofhypercalcemiaList())) {
				currentObj.setCauseofhypercalcemia(currentObj.getCauseofhypercalcemiaList().toString());
			}

			if (!BasicUtils.isEmpty(currentObj.getTreatmentactionList())) {
				currentObj.setTreatmentaction(currentObj.getTreatmentactionList().toString());
			}

			try {
				currentObj = (SaHypercalcemia) inicuDao.saveObject(currentObj);
			} catch (Exception e) {
				e.printStackTrace();
			}

			// save order investigation...
			if (currentObj.getHypercalcemiaid() != null
					&& currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {
				saveOrderInvestigation(metabolicSystemObj.getDropDowns().getOrders(), currentObj.getHypercalcemiaid(),
						metabolicSystemObj.getUhid(), metabolicSystemObj.getLoggedUser(), "Hypercalcemia",
						currentObj.getCreationtime());

				if (currentObj.getTreatmentaction() != null) {
					if (currentObj.getTreatmentaction().contains("TRE057")) {
						List<BabyPrescription> babyPrescriptionList = metabolicSystemObj.getMetabolicEventObject()
								.getCurrentBabyPrescriptionList();
						if (!BasicUtils.isEmpty(babyPrescriptionList)) {
							for (BabyPrescription babyPrescription : babyPrescriptionList) {
								babyPrescription.setUhid(metabolicSystemObj.getUhid());
								babyPrescription.setLoggeduser(metabolicSystemObj.getLoggedUser());
								babyPrescription.setIsactive(true);
								babyPrescription.setStartdate(new Timestamp(System.currentTimeMillis()));
								babyPrescription = (BabyPrescription) inicuDao.saveObject(babyPrescription);
							}
						}
					}
				}
			}
		} else {
			SaHypercalcemia hypercalcemia = new SaHypercalcemia();
			hypercalcemia.setUhid(metabolicSystemObj.getUhid());
			hypercalcemia.setLoggeduser(metabolicSystemObj.getLoggedUser());
			hypercalcemia.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());
			hypercalcemia.setAgeinhoursdays(true);
			hypercalcemia.setProgressnotes("No significant hypercalcemia event");
			hypercalcemia.setEventstatus(currentObj.getEventstatus());

			try {
				inicuDao.saveObject(hypercalcemia);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		response.setMessage("Hypercalcemia saved successfully..!!");
		response.setType(BasicConstants.MESSAGE_SUCCESS);
		return response;

	}

	private ResponseMessageWithResponseObject saveMetabolicHypocalcemiaEvent(
			AssessmentMetabolicSystemPOJO metabolicSystemObj) throws Exception {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
		String systemStatus = metabolicSystemObj.getSystemStatus();

		SaHypocalcemia currentObj = metabolicSystemObj.getMetabolicEventObject().getHypocalcemiaEvent()
				.getCurrentEvent().getCurrentHypocalcemia();
		currentObj.setUhid(metabolicSystemObj.getUhid());
		currentObj.setLoggeduser(metabolicSystemObj.getLoggedUser());
		currentObj.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());

		if (currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {
			if (!currentObj.getAgeinhoursdays()) {
				Integer ageonSet = Integer.parseInt(metabolicSystemObj.getAgeAtOnset().toString());
				ageonSet = (int) Math.round(ageonSet / 24.0);
				currentObj.setAgeatonset(ageonSet.toString());
			} else {
				currentObj.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());
			}
			currentObj.setMetabolicSystemStatus(systemStatus);
			if (!BasicUtils.isEmpty(currentObj.getCauseofHypocalcemiaList())) {
				currentObj.setCauseofhypocalcemia(currentObj.getCauseofHypocalcemiaList().toString());
			}

			if (!BasicUtils.isEmpty(currentObj.getTreatmentactionList())) {
				currentObj.setTreatmentaction(currentObj.getTreatmentactionList().toString());
			}

			try {
				currentObj = (SaHypocalcemia) inicuDao.saveObject(currentObj);
			} catch (Exception e) {
				e.printStackTrace();
			}

			// save order investigation...
			if (currentObj.getHypocalcemiaid() != null
					&& currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {
				saveOrderInvestigation(metabolicSystemObj.getDropDowns().getOrders(), currentObj.getHypocalcemiaid(),
						metabolicSystemObj.getUhid(), metabolicSystemObj.getLoggedUser(), "Hypocalcemia",
						currentObj.getCreationtime());

				if (currentObj.getTreatmentaction() != null) {
					if (currentObj.getTreatmentaction().contains("TRE061")
							|| currentObj.getTreatmentaction().contains("TRE062")
							|| currentObj.getTreatmentaction().contains("TRE080")) {
						List<BabyPrescription> babyPrescriptionList = metabolicSystemObj.getMetabolicEventObject()
								.getCurrentHypocalcemiaPrescriptionList();
						if (!BasicUtils.isEmpty(babyPrescriptionList)) {
							for (BabyPrescription babyPrescription : babyPrescriptionList) {
								babyPrescription.setUhid(metabolicSystemObj.getUhid());
								babyPrescription.setLoggeduser(metabolicSystemObj.getLoggedUser());
								babyPrescription.setIsactive(true);
								babyPrescription.setStartdate(new Timestamp(System.currentTimeMillis()));
								babyPrescription = (BabyPrescription) inicuDao.saveObject(babyPrescription);
							}
						}
					}
				}
			}
		} else {
			SaHypocalcemia hypocalcemia = new SaHypocalcemia();
			hypocalcemia.setUhid(metabolicSystemObj.getUhid());
			hypocalcemia.setLoggeduser(metabolicSystemObj.getLoggedUser());
			hypocalcemia.setAgeatonset(metabolicSystemObj.getAgeAtOnset().toString());
			hypocalcemia.setAgeinhoursdays(true);
			hypocalcemia.setProgressnotes("No significant hypocalcemia event");
			hypocalcemia.setEventstatus(currentObj.getEventstatus());

			try {
				inicuDao.saveObject(hypocalcemia);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		response.setMessage("Hypocalcemia saved successfully..!!");
		response.setType(BasicConstants.MESSAGE_SUCCESS);
		return response;

	}

	private ResponseMessageWithResponseObject saveCnsSeizuresEvent(AssessmentCNSSystemPOJO cnsSystemObj)
			throws Exception {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();

		try {
			SaCnsSeizures currentObj = cnsSystemObj.getCNSEventObject().getSeizuresEvent().getCurrentEvent()
					.getCurrentSeizures();
			if (BasicUtils.isEmpty(currentObj.getEpisodeid()) && !BasicUtils.isEmpty(currentObj.getUhid())) {
				String queryAssociatedEvents = "select episodeid from sa_feed_intolerance where uhid='"
						+ currentObj.getUhid() + "' order by creationtime desc";
				List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

				if (!BasicUtils.isEmpty(listAssociatedEvents)) {
					currentObj.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
				}
			}
			Timestamp assessmentTime = currentObj.getAssessmentTime();

			if (!BasicUtils.isEmpty(assessmentTime)) {
				currentObj.setAssessmentTime(assessmentTime);
			}

			currentObj.setUhid(cnsSystemObj.getUhid());
			currentObj.setLoggeduser(cnsSystemObj.getLoggedUser());
			if (currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {
				if (!BasicUtils.isEmpty(currentObj.getCauseofSeizuresList())) {
					currentObj.setCauseofSeizures(currentObj.getCauseofSeizuresList().toString());
				}

				if (!BasicUtils.isEmpty(currentObj.getTreatmentactionList())) {
					currentObj.setTreatmentaction(currentObj.getTreatmentactionList().toString());
				}

				NurseExecutionOrders order = new NurseExecutionOrders();
				String userId = "";
				// set progress notes
				if (!BasicUtils.isEmpty(currentObj.getProgressnotes()) && currentObj.getProgressnotes().indexOf(currentObj.getLoggeduser())==-1) {
					currentObj.setProgressnotes(currentObj.getProgressnotes());
					order.setLoggeduser(currentObj.getLoggeduser());
					userId = currentObj.getLoggeduser();
				}

				if(!BasicUtils.isEmpty(currentObj.getOtherplanComments())) {
					order.setEventname("Seizures");
					order.setIsExecution(false);
					order.setOrderText(currentObj.getOtherplanComments());
					order.setAssessmentdate(currentObj.getAssessmentTime());
					order.setUhid(currentObj.getUhid());
					inicuDao.saveObject(order);
				}

				try {
					if (!BasicUtils.isEmpty(currentObj.getIsNewEntry())) {
						if (currentObj.getIsNewEntry()) {
							currentObj.setSacnsseizuresid(null);
							currentObj.setCreationtime(null);
						} else {
							currentObj.setSacnsseizuresid(currentObj.getSacnsseizuresid());
							currentObj.setCreationtime(currentObj.getCreationtime());
						}
					}
					currentObj = (SaCnsSeizures) inicuDao.saveObject(currentObj);
				} catch (Exception e) {
					e.printStackTrace();
				}

				// save order investigation...
				if (currentObj.getSacnsseizuresid() != null
						&& currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {

					List<BabyPrescription> prescriptionList = cnsSystemObj.getCNSEventObject().getSeizuresEvent()
							.getPrescriptionList();
					if (!BasicUtils.isEmpty(prescriptionList)) {
						this.savePrescriptionList(null, prescriptionList, "Seizures", currentObj.getSacnsseizuresid(),
								currentObj.getAssessmentTime());
					}

					saveOrderInvestigation(cnsSystemObj.getDropDowns().getOrders(), currentObj.getSacnsseizuresid(),
							cnsSystemObj.getUhid(), cnsSystemObj.getLoggedUser(), "Seizures",
							currentObj.getAssessmentTime());

					// save resp suport
					RespSupport respSupport = cnsSystemObj.getCNSEventObject().getCommonEventsInfo().getRespSupport();
					respSupport.setEventid(currentObj.getSacnsseizuresid().toString());
					respSupport.setEventname("Seizures");
					respSupport.setUhid(cnsSystemObj.getUhid());
					respSupport.setCreationtime(currentObj.getAssessmentTime());
					respSupport.setModificationtime(currentObj.getAssessmentTime());

					String treatmentStr = currentObj.getTreatmentaction();
					if (BasicUtils.isEmpty(treatmentStr) || !treatmentStr.contains("TRE068")) {
						if (BasicUtils.isEmpty(respSupport.getIsactive()) || respSupport.getIsactive() == true) {
							respSupport.setIsactive(false);
							respSupport.setRsVentType(null);
							respSupport = (RespSupport) inicuDao.saveObject(respSupport);
							order = new NurseExecutionOrders();
							order.setEventname("Respiratory Support");
							order.setIsExecution(false);
							order.setOrderText("Baby is removed from Respiratory Support");
							order.setAssessmentdate(currentObj.getAssessmentTime());
							order.setUhid(currentObj.getUhid());
							order.setLoggeduser(userId);
							inicuDao.saveObject(order);

						}
					} else if (treatmentStr.contains("TRE068")) {
						respSupport.setIsactive(true);
						if(!BasicUtils.isEmpty(respSupport.getRsVentType())) {

							String result = "";
							String respSupportSql = "select obj from RespSupport obj where uhid='" + currentObj.getUhid() + "' order by creationtime desc";
							List<RespSupport> respSupportList = inicuDao.getListFromMappedObjQuery(respSupportSql);
							if (!BasicUtils.isEmpty(respSupportList)) {
								RespSupport resp1 = respSupportList.get(0);
								if(!BasicUtils.isEmpty(resp1.getIsactive()) && !resp1.getIsactive()){
									result = "Started";
								}else if(!BasicUtils.isEmpty(resp1.getIsactive()) && resp1.getIsactive()) {
									if(!BasicUtils.isEmpty(resp1.getRsVentType()) && !resp1.getRsVentType().equalsIgnoreCase(respSupport.getRsVentType())) {
										result = "Changed";
									}
								}
							}

							if(!BasicUtils.isEmpty(result)) {
								order = new NurseExecutionOrders();
								order.setEventname("Respiratory Support");
								order.setIsExecution(false);
								if(result.equalsIgnoreCase("Started"))
									order.setOrderText("Started on " + respSupport.getRsVentType());
								else
									order.setOrderText("Respiratory Support is changed to " + respSupport.getRsVentType());							order.setAssessmentdate(currentObj.getAssessmentTime());
								order.setUhid(currentObj.getUhid());
								order.setLoggeduser(userId);
								inicuDao.saveObject(order);
							}
						}
						respSupport = (RespSupport) inicuDao.saveObject(respSupport);
					}
				}
			} else {
				SaCnsSeizures seizures = new SaCnsSeizures();
				seizures.setUhid(cnsSystemObj.getUhid());
				String uhid = seizures.getUhid();
				seizures.setLoggeduser(cnsSystemObj.getLoggedUser());
				seizures.setAgeatonset(currentObj.getAgeatonset().toString());
				seizures.setAgeinhoursdays(currentObj.getAgeinhoursdays());
				seizures.setAgeatassesment(currentObj.getAgeatassesment());
				seizures.setTimeofassessment(currentObj.getTimeofassessment());
				seizures.setIsageofassesmentinhours(currentObj.getIsageofassesmentinhours());
				seizures.setEventstatus(currentObj.getEventstatus());
				seizures.setAssessmentTime(currentObj.getAssessmentTime());
				seizures.setAssessmentDate(currentObj.getAssessmentDate());
				seizures.setAssessmentHour(currentObj.getAssessmentHour());
				seizures.setAssessmentMin(currentObj.getAssessmentMin());
				seizures.setEpisodeNumber(currentObj.getEpisodeNumber());
				seizures.setMedicationStr(currentObj.getMedicationStr());
				if (currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.NO)) {
					// set progress notes
					seizures.setProgressnotes(currentObj.getProgressnotes());
					if (!BasicUtils.isEmpty(seizures.getProgressnotes()) && seizures.getProgressnotes().indexOf(seizures.getLoggeduser())==-1) {
						seizures.setProgressnotes(seizures.getProgressnotes());
					}
				}

				if (currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.INACTIVE)) {
					List<BabyPrescription> prescriptionList = cnsSystemObj.getCNSEventObject().getSeizuresEvent()
							.getPrescriptionList();
					String continuedMedication = "";
					if (!BasicUtils.isEmpty(prescriptionList)) {
						for (int i = 0; i < prescriptionList.size(); i++) {
							BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
							if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
									&& babyPrescription.getContinueReason() != null && babyPrescription.getIsactive()) {
								continuedMedication += babyPrescription.getMedicinename() + " ";
								if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
									continuedMedication += babyPrescription.getDose() + "("
											+ babyPrescription.getDose_unit() + "/"
											+ babyPrescription.getDose_unit_time() + ") ";
								}
								continuedMedication += "prescribed on "
										+ getDateFromTimestamp(babyPrescription.getStartdate())
										+ " and continued due to " + babyPrescription.getContinueReason() + ". ";
							}
						}
						this.savePrescriptionList(null, prescriptionList, "Seizures", null,
								currentObj.getAssessmentTime());
					}
					seizures.setProgressnotes(cnsSystemObj.getCNSEventObject().getSeizuresEvent().getInactiveProgressNote());
				}

				try {
					if (!BasicUtils.isEmpty(currentObj.getIsNewEntry())) {
						if (currentObj.getIsNewEntry()) {
							seizures.setSacnsseizuresid(null);
							seizures.setCreationtime(null);
							currentObj = (SaCnsSeizures) inicuDao.saveObject(seizures);
						} else {
							seizures.setSacnsseizuresid(currentObj.getSacnsseizuresid());
							seizures.setCreationtime(currentObj.getCreationtime());
							
							 try {
			                        String query = "update sa_cns_seizures set progressnotes = '" + seizures.getProgressnotes().toString()
			                                + "' where sacnsseizuresid = '" + currentObj.getSacnsseizuresid()  + "'";
			                        inicuDao.updateOrDeleteNativeQuery(query);
			                    } catch (Exception ex) {
			                        ex.printStackTrace();
			                        System.out.println("Exception occured while updating progressnotes for inactive state");
			                    }
							 //seizures.setProgressnotes(currentObj.getProgressnotes());
						}
					}
					
					if (seizures.getEventstatus().equalsIgnoreCase("Inactive")) {
					    try {
	                        String query = "update respsupport set eventid = '" + seizures.getSacnsseizuresid().toString()
	                                + "', is_eventid_updated = 'true' where respsupportid = (select respsupportid from respsupport where uhid='" + uhid
	                                + "' and eventname = 'Seizures' and is_eventid_updated = 'false' order by creationtime desc limit 1)";
	                        inicuDao.updateOrDeleteNativeQuery(query);
	                    } catch (Exception ex) {
	                        ex.printStackTrace();
	                        System.out.println("Exception occured while updating eventid in resp support for inactive state");
	                        logger.error("Exception occured while updating eventid in resp support for inactive state", ex);
	                    }

//					    if (!BasicUtils.isEmpty(respSystem.getRespSystemObject().getRespiratoryDistress().getPastRespDistress())) {
//	                        updatePastRDSProgressNotes(currentRespiratoryDistress,
//	                                respSystem.getRespSystemObject().getRespiratoryDistress().getPastRespDistress());
//	                    }
					}
				
					if (currentObj.getSacnsseizuresid() != null) {
						if (currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.NO)) {
							List<BabyPrescription> prescriptionList = cnsSystemObj.getCNSEventObject()
									.getSeizuresEvent().getPrescriptionList();
							if (!BasicUtils.isEmpty(prescriptionList)) {
								this.savePrescriptionList(null, prescriptionList, "Seizures",
										currentObj.getSacnsseizuresid(), currentObj.getAssessmentTime());
							}

							saveOrderInvestigation(cnsSystemObj.getDropDowns().getOrders(),
									currentObj.getSacnsseizuresid(), cnsSystemObj.getUhid(),
									cnsSystemObj.getLoggedUser(), "Seizures", currentObj.getAssessmentTime());
						}
					}

					if (cnsSystemObj.getCNSEventObject().isStopTreatmentFlag()) {
						RespSupport respSupport = cnsSystemObj.getCNSEventObject().getCommonEventsInfo()
								.getRespSupport();
						respSupport.setEventid(seizures.getSacnsseizuresid().toString());
						respSupport.setEventname("Seizures");
						respSupport.setUhid(cnsSystemObj.getUhid());
						respSupport.setCreationtime(currentObj.getAssessmentTime());
						respSupport.setModificationtime(currentObj.getAssessmentTime());
						respSupport.setIsactive(false);
						respSupport.setRsVentType(null);
						respSupport = (RespSupport) inicuDao.saveObject(respSupport);
					}

					if (seizures.getEventstatus().equalsIgnoreCase("inactive")) {
						updatePastSeizuresProgressNotes(seizures);
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			response.setMessage("Seizures saved successfully..!!");
			response.setType(BasicConstants.MESSAGE_SUCCESS);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return response;
	}

	private ResponseMessageWithResponseObject saveCnsEncephalopathyEvent(AssessmentCNSSystemPOJO cnsSystemObj)
			throws Exception {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();

		try {
			CNSSystemCommonEventPOJO commmonObj = cnsSystemObj.getCNSEventObject().getCommonEventsInfo();
			SaCnsEncephalopathy currentObj = cnsSystemObj.getCNSEventObject().getEncephalopathyEvent().getCurrentEvent()
					.getCurrentEncephalopathy();
			Timestamp assessmentTime = currentObj.getAssessmentDate();
			if (BasicUtils.isEmpty(currentObj.getEpisodeid()) && !BasicUtils.isEmpty(currentObj.getUhid())) {
				String queryAssociatedEvents = "select episodeid from sa_cns_encephalopathy where uhid='"
						+ currentObj.getUhid() + "' order by creationtime desc";
				List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

				if (!BasicUtils.isEmpty(listAssociatedEvents)) {
					currentObj.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
				}
			}

			if (!BasicUtils.isEmpty(assessmentTime)) {
				currentObj.setAssessmentTime(assessmentTime);
			}
			currentObj.setUhid(cnsSystemObj.getUhid());               // setting the uhid from cns object
			currentObj.setLoggeduser(cnsSystemObj.getLoggedUser());    // setting logged user from cns object

			if (currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {
				if (!BasicUtils.isEmpty(currentObj.getTreatmentactioncause())) {
					currentObj.setCauseofEncephalopathy(currentObj.getTreatmentactioncause().toString());
				}

				if (!BasicUtils.isEmpty(currentObj.getTreatmentactionlist())) {
					currentObj.setTreatmentaction(currentObj.getTreatmentactionlist().toString());
				}

				if (!BasicUtils.isEmpty(currentObj.getRiskfactorList())) {
					currentObj.setRiskfactor(currentObj.getRiskfactorList().toString());
				}

				NurseExecutionOrders order = new NurseExecutionOrders();

				// set progress notes
				if (!BasicUtils.isEmpty(currentObj.getProgressnotes())) {
					currentObj
							.setProgressnotes(currentObj.getProgressnotes());
					order.setLoggeduser(currentObj.getLoggeduser());
				}

				if(!BasicUtils.isEmpty(currentObj.getOthercomments())) {
					order.setEventname("Encephalopathy");
					order.setIsExecution(false);
					order.setOrderText(currentObj.getOthercomments());
					order.setAssessmentdate(currentObj.getAssessmentTime());
					order.setUhid(currentObj.getUhid());
					inicuDao.saveObject(order);
				}
				try {
//					Object checkObject=currentObj;
					currentObj = (SaCnsEncephalopathy) inicuDao.saveObject(currentObj);
				} catch (Exception e) {
					e.printStackTrace();
				}

				// save order investigation...
				if (currentObj.getSaCnsEncephalopathyid() != null
						&& currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {

					List<BabyPrescription> prescriptionList = cnsSystemObj.getCNSEventObject().getEncephalopathyEvent()
							.getPrescriptionList();
					if (!BasicUtils.isEmpty(prescriptionList)) {
						this.savePrescriptionList(null, prescriptionList, "Encephalopathy",
								currentObj.getSaCnsEncephalopathyid(), currentObj.getAssessmentTime());
					}

					saveOrderInvestigation(cnsSystemObj.getDropDowns().getOrders(),
							currentObj.getSaCnsEncephalopathyid(), cnsSystemObj.getUhid(), cnsSystemObj.getLoggedUser(),
							"Encephalopathy", currentObj.getAssessmentTime());

					// save resp suport
					RespSupport respSupport = cnsSystemObj.getCNSEventObject().getCommonEventsInfo().getRespSupport();
					respSupport.setEventid(currentObj.getSaCnsEncephalopathyid().toString());
					respSupport.setEventname("Encephalopathy");
					respSupport.setUhid(cnsSystemObj.getUhid());
					respSupport.setCreationtime(currentObj.getAssessmentTime());
					respSupport.setModificationtime(currentObj.getAssessmentTime());

					String treatmentStr = currentObj.getTreatmentaction();
					if (BasicUtils.isEmpty(treatmentStr) || !treatmentStr.contains("TRE075")) {
						if (BasicUtils.isEmpty(respSupport.getIsactive()) || respSupport.getIsactive() == true) {
							respSupport.setIsactive(false);
							respSupport.setRsVentType(null);
							respSupport = (RespSupport) inicuDao.saveObject(respSupport);
						}
					} else if (treatmentStr.contains("TRE075")) {
						respSupport.setIsactive(true);
						respSupport = (RespSupport) inicuDao.saveObject(respSupport);
					}
				}
			} else {
				SaCnsEncephalopathy encephalopathy = new SaCnsEncephalopathy();
				encephalopathy.setUhid(cnsSystemObj.getUhid());
				String uhid = encephalopathy.getUhid();
				encephalopathy.setLoggeduser(cnsSystemObj.getLoggedUser());
				encephalopathy.setAgeatonset(currentObj.getAgeatonset().toString());
				encephalopathy.setAgeinhoursdays(currentObj.getAgeinhoursdays());
				encephalopathy.setAgeatassesment(currentObj.getAgeatassesment());
				encephalopathy.setIsageofassesmentinhours(currentObj.getIsageofassesmentinhours());
				if (currentObj.getEventstatus().equalsIgnoreCase("No")) {
					encephalopathy.setProgressnotes("Encephalopathy has resolved,Baby is under observation.");

					// set progress notes
					if (!BasicUtils.isEmpty(encephalopathy.getProgressnotes())) {
						encephalopathy.setProgressnotes(
								encephalopathy.getProgressnotes());
					}
				}
				encephalopathy.setEventstatus(currentObj.getEventstatus());
				encephalopathy.setAssessmentTime(currentObj.getAssessmentTime());
				encephalopathy.setAssessmentDate(currentObj.getAssessmentDate());
				encephalopathy.setAssessmentHour(currentObj.getAssessmentHour());
				encephalopathy.setAssessmentMin(currentObj.getAssessmentMin());
				encephalopathy.setEpisodeNumber(currentObj.getEpisodeNumber());
				if (currentObj.getEventstatus().equalsIgnoreCase("inactive")) {
					List<BabyPrescription> prescriptionList = cnsSystemObj.getCNSEventObject().getEncephalopathyEvent()
							.getPrescriptionList();
					String continuedMedication = "";
					if (!BasicUtils.isEmpty(prescriptionList)) {
						for (int i = 0; i < prescriptionList.size(); i++) {
							BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
							if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
									&& babyPrescription.getContinueReason() != null && babyPrescription.getIsactive()) {
								continuedMedication += babyPrescription.getMedicinename() + " ";
								if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
									continuedMedication += babyPrescription.getDose() + "("
											+ babyPrescription.getDose_unit() + "/"
											+ babyPrescription.getDose_unit_time() + ") ";
								}
								continuedMedication += "prescribed on "
										+ getDateFromTimestamp(babyPrescription.getStartdate())
										+ " and continued due to " + babyPrescription.getContinueReason() + ". ";
							}
						}
						this.savePrescriptionList(null, prescriptionList, "Encephalopathy", null,
								encephalopathy.getAssessmentTime());
					}
					encephalopathy
							.setProgressnotes(generateInactiveNotesEncephalopathy(null, uhid, continuedMedication));
				}
				try {
					encephalopathy = (SaCnsEncephalopathy) inicuDao.saveObject(encephalopathy);
					if (encephalopathy.getSaCnsEncephalopathyid() != null) {
						if (encephalopathy.getEventstatus().equalsIgnoreCase("No")) {
							List<BabyPrescription> prescriptionList = cnsSystemObj.getCNSEventObject()
									.getAsphyxiaEvent().getPrescriptionList();
							if (!BasicUtils.isEmpty(prescriptionList)) {
								this.savePrescriptionList(null, prescriptionList, "Encephalopathy",
										encephalopathy.getSaCnsEncephalopathyid(), encephalopathy.getAssessmentTime());
							}

							saveOrderInvestigation(cnsSystemObj.getDropDowns().getOrders(),
									encephalopathy.getSaCnsEncephalopathyid(), cnsSystemObj.getUhid(),
									cnsSystemObj.getLoggedUser(), "Encephalopathy", currentObj.getAssessmentTime());
						}
						if (cnsSystemObj.getCNSEventObject().isStopTreatmentFlag()) {
							RespSupport respSupport = cnsSystemObj.getCNSEventObject().getCommonEventsInfo()
									.getRespSupport();
							respSupport.setEventid(encephalopathy.getSaCnsEncephalopathyid().toString());
							respSupport.setEventname("Encephalopathy");
							respSupport.setUhid(cnsSystemObj.getUhid());
							respSupport.setCreationtime(currentObj.getAssessmentTime());
							respSupport.setModificationtime(currentObj.getAssessmentTime());
							respSupport.setIsactive(false);
							respSupport.setRsVentType(null);
							respSupport = (RespSupport) inicuDao.saveObject(respSupport);
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			response.setMessage("Encephalopathy saved successfully..!!");
			response.setType(BasicConstants.MESSAGE_SUCCESS);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return response;
	}

	//*****************************************************************************************************************//
	//Added by ekpreet
	// All inactive notes here
	public String generateInactiveNotesEncephalopathy(InicuDao inicuDaoObj, String uhid, String continuedMedication)
			throws InicuDatabaseExeption {
		if (inicuDaoObj != null) {
			inicuDao = inicuDaoObj;
		}
		// Creating Inactive Notes from here
		String progressNotesEncephalopathy = "";
		String htmlNextLine = System.getProperty("line.separator");
		try {
			// Fetching Current Episode Number for Encephalopathy
			int epCountEncephalopathy = 1;
			String queryEpCountEncephalopathy = "SELECT MAX(episode_number) FROM sa_cns_encephalopathy WHERE uhid='"
					+ uhid + "'";
			List<Integer> epCountListEncephalopathy = inicuDao.getListFromNativeQuery(queryEpCountEncephalopathy);
			if (!BasicUtils.isEmpty(epCountListEncephalopathy)) {
				epCountEncephalopathy = epCountListEncephalopathy.get(0).intValue();
				if (epCountEncephalopathy != 1) {
					progressNotesEncephalopathy = "Baby developed " + epCountEncephalopathy
							+ " episodes of Encephalopathy " + "during hospital stay. " + htmlNextLine
							+ " Episode 1 : ";
				}
			}

			// Old Episodes Inactive Notes List of Generating Query
			List<SaCnsEncephalopathy> oldEncephlopathyList = new ArrayList<SaCnsEncephalopathy>();
			oldEncephlopathyList = inicuDao
					.getListFromMappedObjQuery(HqlSqlQueryConstants.getOldInactiveEncephalopathyList(uhid));
			if (!BasicUtils.isEmpty(oldEncephlopathyList)) {
				// Old Episodes Inactive Notes of Asphyxia Fetching Function
				String oldInactiveNotes = getOldInactiveNotesEncephalopathy(oldEncephlopathyList,
						epCountEncephalopathy);
				progressNotesEncephalopathy += oldInactiveNotes + htmlNextLine;
			}

			// Current Episode
			// progressNotesAsphyxia += "Episode " + epCountAsphyxia + " : ";
			if (epCountEncephalopathy > 1) {
				progressNotesEncephalopathy += "Episode " + epCountEncephalopathy + " : ";
			}
			List<SaCnsEncephalopathy> encephalopathyList = new ArrayList<SaCnsEncephalopathy>();
			encephalopathyList = inicuDao
					.getListFromMappedObjQuery(HqlSqlQueryConstants.getEncephalopathyList(uhid, epCountEncephalopathy));
			if (!BasicUtils.isEmpty(encephalopathyList)) {

				// Age of Onset Data Fetching Function for Asphyxia
				String ageOnsetNotes = getAgeOnsetEncephalopathy(encephalopathyList);
				progressNotesEncephalopathy += ageOnsetNotes;

				// Investigation Order Detail Fetching Function
				String investigationOrderNotes = getInvestigationOrderEncephalopathy(encephalopathyList);
				progressNotesEncephalopathy += investigationOrderNotes;

				// Medication of Asphyxia Data Fetching Function
				String medicationNotes = getMedicationOfEncephalopathy(encephalopathyList);
				progressNotesEncephalopathy += medicationNotes + continuedMedication;

			}

			// Inactive Notes ending here

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return progressNotesEncephalopathy;

	}

	private String getMedicationOfEncephalopathy(List<SaCnsEncephalopathy> encephalopathyList)
			throws InicuDatabaseExeption {
		// TODO Auto-generated method stub
		String medicationNotesEncephalopathy = "";
		List<String> finalEventIdListEncephalopathy = new ArrayList<>();
		try {
			for (int i = 0; i < encephalopathyList.size(); i++) {
				SaCnsEncephalopathy encephalopathyObj = (SaCnsEncephalopathy) encephalopathyList.get(i);
				if (encephalopathyObj != null && encephalopathyObj.getSaCnsEncephalopathyid() != null) {
					String saCnsEncehalopathyId = "'" + encephalopathyObj.getSaCnsEncephalopathyid().toString() + "'";
					finalEventIdListEncephalopathy.add(saCnsEncehalopathyId);
				}
			}

			if (!BasicUtils.isEmpty(finalEventIdListEncephalopathy)) {
				String finalEventIdListStringEncephalopathy = finalEventIdListEncephalopathy.toString();
				finalEventIdListStringEncephalopathy = finalEventIdListStringEncephalopathy.replace("[", "");
				finalEventIdListStringEncephalopathy = finalEventIdListStringEncephalopathy.replace("]", "");
				medicationNotesEncephalopathy += getMedicationHelper(finalEventIdListStringEncephalopathy,
						"Encephalopathy",encephalopathyList.get(0).getUhid(), false);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return medicationNotesEncephalopathy;
	}

	private String getInvestigationOrderEncephalopathy(List<SaCnsEncephalopathy> encephalopathyList)
			throws InicuDatabaseExeption {
		// TODO Auto-generated method stub
		String investigationOrderNotesEncephalopathy = "";
		List<String> encephalopathyIdList = new ArrayList<String>();
		try {
			for (int i = 0; i < encephalopathyList.size(); i++) {
				SaCnsEncephalopathy encephalopathyObj = (SaCnsEncephalopathy) encephalopathyList.get(i);
				encephalopathyIdList.add("'" + encephalopathyObj.getSaCnsEncephalopathyid().toString() + "'");
			}

			if (!BasicUtils.isEmpty(encephalopathyIdList)) {
				String encephalopathyIdListString = encephalopathyIdList.toString();
				encephalopathyIdListString = encephalopathyIdListString.replace("[", "");
				encephalopathyIdListString = encephalopathyIdListString.replace("]", "");
				List<String> investigationOrderHelperList = new ArrayList<>();
				investigationOrderHelperList = getInvestigationOrderHelper(encephalopathyIdListString,
						"Encephalopathy");
				if (!BasicUtils.isEmpty(investigationOrderHelperList)) {
					Set<String> uniqueInvestigationOrderHelperList = new HashSet<String>(investigationOrderHelperList);
					String uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperList.toString();
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("[",
							"");
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("]",
							"");

					if (uniqueInvestigationOrderHelperList.size() == 1) {
						investigationOrderNotesEncephalopathy += "Investigation done during this episode was "
								+ uniqueInvestigationOrderHelperListString + ". ";
					} else {
						investigationOrderNotesEncephalopathy += "Investigations done during this episode were "
								+ uniqueInvestigationOrderHelperListString + ". ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return investigationOrderNotesEncephalopathy;

	}

	private String getAgeOnsetEncephalopathy(List<SaCnsEncephalopathy> encephalopathyList)
			throws InicuDatabaseExeption {
		String ageOnSetNotesEncephalopathy = "";

		boolean done = false;
		try {
			for (int i = 0; i < encephalopathyList.size(); i++) {
				SaCnsEncephalopathy encephalopathyObj = (SaCnsEncephalopathy) encephalopathyList.get(i);
				if (encephalopathyObj != null && done != true && encephalopathyObj.getAgeatonset() != null) {
					if (encephalopathyObj.getAgeatonset().equalsIgnoreCase("0")) {
						ageOnSetNotesEncephalopathy += "At birth ";
					} else {
						if (encephalopathyObj.getAgeatonset() != null
								&& encephalopathyObj.getAgeinhoursdays() == true) {
							ageOnSetNotesEncephalopathy += "At the age of " + encephalopathyObj.getAgeatonset();
							if (encephalopathyObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesEncephalopathy += " hour";
							} else {
								ageOnSetNotesEncephalopathy += " hours";
							}
						} else {
							ageOnSetNotesEncephalopathy += "At the age of " + encephalopathyObj.getAgeatonset();
							if (encephalopathyObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesEncephalopathy += " day";
							} else {
								ageOnSetNotesEncephalopathy += " days";
							}
						}
					}
					done = true;
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ageOnSetNotesEncephalopathy;

	}

	private String getOldInactiveNotesEncephalopathy(List<SaCnsEncephalopathy> oldEncephlopathyList,
			int epCountEncephalopathy) throws InicuDatabaseExeption {
		String oldInactiveNotes = "";
		try {
			if (epCountEncephalopathy == 1) {
				return oldInactiveNotes;
			}

			for (int i = 0; i < oldEncephlopathyList.size(); i++) {
				SaCnsEncephalopathy encephalopathyObj = (SaCnsEncephalopathy) oldEncephlopathyList.get(i);
				if (encephalopathyObj.getProgressnotes() != null) {
					oldInactiveNotes = encephalopathyObj.getProgressnotes();
				}
			}

			if (epCountEncephalopathy > 2) {
				oldInactiveNotes = oldInactiveNotes.substring(oldInactiveNotes.indexOf('\n') + 1);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return oldInactiveNotes;
	}

	public String generateInactiveNotesNeuromuscularDisorder(InicuDao inicuDaoObj, String uhid,
			String continuedMedication) throws InicuDatabaseExeption {
		if (inicuDaoObj != null) {
			inicuDao = inicuDaoObj;
		}
		// Creating Inactive Notes from here
		String progressNotesNeuromuscularDisorder = "";
		String htmlNextLine = System.getProperty("line.separator");
		try {
			// Fetching Current Episode Number for Neuromuscular Disorder
			int epCountNeuromuscularDisorder = 1;
			String queryEpCountNeuromuscularDisorder = "SELECT MAX(episode_number) FROM sa_cns_neuromuscular_disorder WHERE uhid='"
					+ uhid + "'";
			List<Integer> epCountListNeuromuscularDisorder = inicuDao
					.getListFromNativeQuery(queryEpCountNeuromuscularDisorder);
			if (!BasicUtils.isEmpty(epCountListNeuromuscularDisorder)) {
				epCountNeuromuscularDisorder = epCountListNeuromuscularDisorder.get(0).intValue();
				if (epCountNeuromuscularDisorder != 1) {
					progressNotesNeuromuscularDisorder = "Baby developed " + epCountNeuromuscularDisorder
							+ " episodes of Neuromuscular Disorder " + "during hospital stay. " + htmlNextLine
							+ " Episode 1 : ";
				}
			}

			// Old Episodes Inactive Notes List of Generating Query
			List<SaCnsNeuromuscularDisorders> oldNeuromuscularDisorderList = new ArrayList<SaCnsNeuromuscularDisorders>();
			oldNeuromuscularDisorderList = inicuDao
					.getListFromMappedObjQuery(HqlSqlQueryConstants.getOldInactiveNeuromuscularDisorderList(uhid));
			if (!BasicUtils.isEmpty(oldNeuromuscularDisorderList)) {
				// Old Episodes Inactive Notes of Asphyxia Fetching Function
				String oldInactiveNotes = getOldInactiveNotesNeuromuscularDisorder(oldNeuromuscularDisorderList,
						epCountNeuromuscularDisorder);
				progressNotesNeuromuscularDisorder += oldInactiveNotes + htmlNextLine;
			}

			// Current Episode
			// progressNotesAsphyxia += "Episode " + epCountAsphyxia + " : ";
			if (epCountNeuromuscularDisorder > 1) {
				progressNotesNeuromuscularDisorder += "Episode " + epCountNeuromuscularDisorder + " : ";
			}
			List<SaCnsNeuromuscularDisorders> neuromuscularDisorderList = new ArrayList<SaCnsNeuromuscularDisorders>();
			neuromuscularDisorderList = inicuDao.getListFromMappedObjQuery(
					HqlSqlQueryConstants.getNeuromuscularDisorderList(uhid, epCountNeuromuscularDisorder));
			if (!BasicUtils.isEmpty(neuromuscularDisorderList)) {

				// Age of Onset Data Fetching Function for Asphyxia
				String ageOnsetNotes = getAgeOnsetNeuromuscularDisorder(neuromuscularDisorderList);
				progressNotesNeuromuscularDisorder += ageOnsetNotes;

				// Investigation Order Detail Fetching Function
				String investigationOrderNotes = getInvestigationOrderNeuromuscularDisorder(neuromuscularDisorderList);
				progressNotesNeuromuscularDisorder += investigationOrderNotes;

				// Medication of Asphyxia Data Fetching Function
				String medicationNotes = getMedicationOfNeuromuscularDisorder(neuromuscularDisorderList);
				progressNotesNeuromuscularDisorder += medicationNotes + continuedMedication;

			}

			// Inactive Notes ending here

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return progressNotesNeuromuscularDisorder;

	}

	private String getMedicationOfNeuromuscularDisorder(List<SaCnsNeuromuscularDisorders> neuromuscularDisorderList)
			throws InicuDatabaseExeption {
		// TODO Auto-generated method stub
		String medicationNotesNeuromuscularDisorder = "";
		List<String> finalEventIdListNeuromuscularDisorder = new ArrayList<>();
		try {
			for (int i = 0; i < neuromuscularDisorderList.size(); i++) {
				SaCnsNeuromuscularDisorders neuromuscularObj = (SaCnsNeuromuscularDisorders) neuromuscularDisorderList
						.get(i);
				if (neuromuscularObj != null && neuromuscularObj.getSaCnsNeuromuscularDisordersid() != null) {
					String neuromuscularId = "'" + neuromuscularObj.getSaCnsNeuromuscularDisordersid().toString() + "'";
					finalEventIdListNeuromuscularDisorder.add(neuromuscularId);
				}
			}

			if (!BasicUtils.isEmpty(finalEventIdListNeuromuscularDisorder)) {
				String finalEventIdListStringNeuromuscularDisorder = finalEventIdListNeuromuscularDisorder.toString();
				finalEventIdListStringNeuromuscularDisorder = finalEventIdListStringNeuromuscularDisorder.replace("[",
						"");
				finalEventIdListStringNeuromuscularDisorder = finalEventIdListStringNeuromuscularDisorder.replace("]",
						"");
				medicationNotesNeuromuscularDisorder += getMedicationHelper(finalEventIdListStringNeuromuscularDisorder,
						"Neuromuscular Disorder",neuromuscularDisorderList.get(0).getUhid(), false);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return medicationNotesNeuromuscularDisorder;
	}

	private String getInvestigationOrderNeuromuscularDisorder(
			List<SaCnsNeuromuscularDisorders> neuromuscularDisorderList) throws InicuDatabaseExeption {
		// TODO Auto-generated method stub
		String investigationOrderNotesNeuromuscular = "";
		List<String> neuromuscularIdList = new ArrayList<String>();
		try {
			for (int i = 0; i < neuromuscularDisorderList.size(); i++) {
				SaCnsNeuromuscularDisorders neuromuscularObj = (SaCnsNeuromuscularDisorders) neuromuscularDisorderList
						.get(i);
				neuromuscularIdList.add("'" + neuromuscularObj.getSaCnsNeuromuscularDisordersid().toString() + "'");
			}

			if (!BasicUtils.isEmpty(neuromuscularIdList)) {
				String neuromuscularIdListString = neuromuscularIdList.toString();
				neuromuscularIdListString = neuromuscularIdListString.replace("[", "");
				neuromuscularIdListString = neuromuscularIdListString.replace("]", "");
				List<String> investigationOrderHelperList = new ArrayList<>();
				investigationOrderHelperList = getInvestigationOrderHelper(neuromuscularIdListString,
						"Neuromuscular Disorder");
				if (!BasicUtils.isEmpty(investigationOrderHelperList)) {
					Set<String> uniqueInvestigationOrderHelperList = new HashSet<String>(investigationOrderHelperList);
					String uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperList.toString();
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("[",
							"");
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("]",
							"");

					if (uniqueInvestigationOrderHelperList.size() == 1) {
						investigationOrderNotesNeuromuscular += "Investigation done during this episode was "
								+ uniqueInvestigationOrderHelperListString + ". ";
					} else {
						investigationOrderNotesNeuromuscular += "Investigations done during this episode were "
								+ uniqueInvestigationOrderHelperListString + ". ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return investigationOrderNotesNeuromuscular;
	}

	private String getAgeOnsetNeuromuscularDisorder(List<SaCnsNeuromuscularDisorders> neuromuscularDisorderList)
			throws InicuDatabaseExeption {
		String ageOnSetNotesEncephalopathy = "";

		boolean done = false;
		try {
			for (int i = 0; i < neuromuscularDisorderList.size(); i++) {
				SaCnsNeuromuscularDisorders encephalopathyObj = (SaCnsNeuromuscularDisorders) neuromuscularDisorderList
						.get(i);
				if (encephalopathyObj != null && done != true && encephalopathyObj.getAgeatonset() != null) {
					if (encephalopathyObj.getAgeatonset().equalsIgnoreCase("0")) {
						ageOnSetNotesEncephalopathy += "At birth ";
					} else {
						if (encephalopathyObj.getAgeatonset() != null
								&& encephalopathyObj.getAgeinhoursdays() == true) {
							ageOnSetNotesEncephalopathy += "At the age of " + encephalopathyObj.getAgeatonset();
							if (encephalopathyObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesEncephalopathy += " hour";
							} else {
								ageOnSetNotesEncephalopathy += " hours";
							}
						} else {
							ageOnSetNotesEncephalopathy += "At the age of " + encephalopathyObj.getAgeatonset();
							if (encephalopathyObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesEncephalopathy += " day";
							} else {
								ageOnSetNotesEncephalopathy += " days";
							}
						}
					}
					done = true;
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ageOnSetNotesEncephalopathy;
	}

	private String getOldInactiveNotesNeuromuscularDisorder(
			List<SaCnsNeuromuscularDisorders> oldNeuromuscularDisorderList, int epCountNeuromuscularDisorder)
			throws InicuDatabaseExeption {
		String oldInactiveNotes = "";
		try {
			if (epCountNeuromuscularDisorder == 1) {
				return oldInactiveNotes;
			}

			for (int i = 0; i < oldNeuromuscularDisorderList.size(); i++) {
				SaCnsNeuromuscularDisorders neuromuscularObj = (SaCnsNeuromuscularDisorders) oldNeuromuscularDisorderList
						.get(i);
				if (neuromuscularObj.getProgressnotes() != null) {
					oldInactiveNotes = neuromuscularObj.getProgressnotes();
				}
			}

			if (epCountNeuromuscularDisorder > 2) {
				oldInactiveNotes = oldInactiveNotes.substring(oldInactiveNotes.indexOf('\n') + 1);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return oldInactiveNotes;
	}

	// IVH
	public String generateInactiveNotesIVH(InicuDao inicuDaoObj, String uhid, String continuedMedication)
			throws InicuDatabaseExeption {
		if (inicuDaoObj != null) {
			inicuDao = inicuDaoObj;
		}
		// Creating Inactive Notes from here
		String progressNotesIVH = "";
		String htmlNextLine = System.getProperty("line.separator");
		try {
			// Fetching Current Episode Number for IVH
			int epCountIVH = 1;
			String queryEpCountIVH = "SELECT MAX(episode_number) FROM sa_cns_ivh WHERE uhid='" + uhid + "'";
			List<Integer> epCountListIVH = inicuDao.getListFromNativeQuery(queryEpCountIVH);
			if (!BasicUtils.isEmpty(epCountListIVH)) {
				epCountIVH = epCountListIVH.get(0).intValue();
				if (epCountIVH != 1) {
					progressNotesIVH = "Baby developed " + epCountIVH + " episodes of IVH " + "during hospital stay. "
							+ htmlNextLine + " Episode 1 : ";
				}
			}

			// Old Episodes Inactive Notes List of Generating Query
			List<SaCnsIvh> oldIVHList = new ArrayList<SaCnsIvh>();
			oldIVHList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getOldInactiveIVHList(uhid));
			if (!BasicUtils.isEmpty(oldIVHList)) {
				// Old Episodes Inactive Notes of Asphyxia Fetching Function
				String oldInactiveNotes = getOldInactiveNotesIVH(oldIVHList, epCountIVH);
				progressNotesIVH += oldInactiveNotes + htmlNextLine;
			}

			// Current Episode
			// progressNotesAsphyxia += "Episode " + epCountAsphyxia + " : ";
			if (epCountIVH > 1) {
				progressNotesIVH += "Episode " + epCountIVH + " : ";
			}
			List<SaCnsIvh> ivhList = new ArrayList<SaCnsIvh>();
			ivhList = inicuDao
					.getListFromMappedObjQuery(HqlSqlQueryConstants.getIVHList(uhid, epCountIVH));
			if (!BasicUtils.isEmpty(ivhList)) {

				// Age of Onset Data Fetching Function for IVH
				String ageOnsetNotes = getAgeOnsetIVH(ivhList);
				progressNotesIVH += ageOnsetNotes;

				// Investigation Order Detail Fetching Function
				String investigationOrderNotes = getInvestigationOrderIVH(ivhList);
				progressNotesIVH += investigationOrderNotes;

				// Medication of Asphyxia Data Fetching Function
				String medicationNotes = getMedicationOfIVH(ivhList);
				progressNotesIVH += medicationNotes + continuedMedication;

			}

			// Inactive Notes ending here

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return progressNotesIVH;

	}

	private String getMedicationOfIVH(List<SaCnsIvh> ivhList) throws InicuDatabaseExeption {
		String medicationNotesIVH = "";
		List<String> finalEventIdListivh = new ArrayList<>();
		try {
			for (int i = 0; i < ivhList.size(); i++) {
				SaCnsIvh ivhObj = (SaCnsIvh) ivhList.get(i);
				if (ivhObj != null && ivhObj.getSacnsivhid() != null) {
					String saCnsAsphyxiaIdAsphyxia = "'" + ivhObj.getSacnsivhid().toString() + "'";
					finalEventIdListivh.add(saCnsAsphyxiaIdAsphyxia);
				}
			}

			if (!BasicUtils.isEmpty(finalEventIdListivh)) {
				String finalEventIdListStringIVH = finalEventIdListivh.toString();
				finalEventIdListStringIVH = finalEventIdListStringIVH.replace("[", "");
				finalEventIdListStringIVH = finalEventIdListStringIVH.replace("]", "");
				medicationNotesIVH += getMedicationHelper(finalEventIdListStringIVH, "IVH"
                        , ivhList.get(0).getUhid(), false);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return medicationNotesIVH;
	}

	private String getInvestigationOrderIVH(List<SaCnsIvh> ivhList) throws InicuDatabaseExeption {
		String investigationOrderNotesIVH = "";
		List<String> ivhIdList = new ArrayList<String>();
		try {
			for (int i = 0; i < ivhList.size(); i++) {
				SaCnsIvh ivhObj = (SaCnsIvh) ivhList.get(i);
				ivhIdList.add("'" + ivhObj.getSacnsivhid().toString() + "'");
			}

			if (!BasicUtils.isEmpty(ivhIdList)) {
				String ivhIdListString = ivhIdList.toString();
				ivhIdListString = ivhIdListString.replace("[", "");
				ivhIdListString = ivhIdListString.replace("]", "");
				List<String> investigationOrderHelperList = new ArrayList<>();
				investigationOrderHelperList = getInvestigationOrderHelper(ivhIdListString, "IVH");
				if (!BasicUtils.isEmpty(investigationOrderHelperList)) {
					Set<String> uniqueInvestigationOrderHelperList = new HashSet<String>(investigationOrderHelperList);
					String uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperList.toString();
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("[",
							"");
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("]",
							"");

					if (uniqueInvestigationOrderHelperList.size() == 1) {
						investigationOrderNotesIVH += "Investigation done during this episode was "
								+ uniqueInvestigationOrderHelperListString + ". ";
					} else {
						investigationOrderNotesIVH += "Investigations done during this episode were "
								+ uniqueInvestigationOrderHelperListString + ". ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return investigationOrderNotesIVH;
	}

	private String getAgeOnsetIVH(List<SaCnsIvh> ivhList) throws InicuDatabaseExeption {
		String ageOnSetNotesIVH = "";
		boolean done = false;
		try {
			for (int i = 0; i < ivhList.size(); i++) {
				SaCnsIvh ivhObj = (SaCnsIvh) ivhList.get(i);
				if (ivhObj != null && done != true && ivhObj.getAgeatonset() != null) {
					if (ivhObj.getAgeatonset().equalsIgnoreCase("0")) {
						ageOnSetNotesIVH += "At birth ";
					} else {
						if (ivhObj.getAgeatonset() != null && ivhObj.getAgeinhoursdays() == true) {
							ageOnSetNotesIVH += "At the age of " + ivhObj.getAgeatonset();
							if (ivhObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesIVH += " hour";
							} else {
								ageOnSetNotesIVH += " hours";
							}
						} else {
							ageOnSetNotesIVH += "At the age of " + ivhObj.getAgeatonset();
							if (ivhObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesIVH += " day";
							} else {
								ageOnSetNotesIVH += " days";
							}
						}
					}
					done = true;
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ageOnSetNotesIVH;
	}

	private String getOldInactiveNotesIVH(List<SaCnsIvh> oldIvhList, int epCountivh) throws InicuDatabaseExeption {
		String oldInactiveNotes = "";
		try {
			if (epCountivh == 1) {
				return oldInactiveNotes;
			}

			for (int i = 0; i < oldIvhList.size(); i++) {
				SaCnsIvh ivhObj = (SaCnsIvh) oldIvhList.get(i);
				if (ivhObj.getProgressnotes() != null) {
					oldInactiveNotes = ivhObj.getProgressnotes();
				}
			}

			if (epCountivh > 2) {
				oldInactiveNotes = oldInactiveNotes.substring(oldInactiveNotes.indexOf('\n') + 1);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return oldInactiveNotes;
	}

	// HYDROCEPHALUS
	public String generateInactiveNotesHydrocephalus(InicuDao inicuDaoObj, String uhid, String continuedMedication)
			throws InicuDatabaseExeption {
		if (inicuDaoObj != null) {
			inicuDao = inicuDaoObj;
		}
		// Creating Inactive Notes from here
		String progressNotesHydrocephalus = "";
		String htmlNextLine = System.getProperty("line.separator");
		try {
			// Fetching Current Episode Number for HYDROCEPHALUS
			int epCountHydrocephalus = 1;
			String queryEpCountHydrocephalus = "SELECT MAX(episode_number) FROM sa_cns_hydrocephalus WHERE uhid='"
					+ uhid + "'";
			List<Integer> epCountListHydrocephalus = inicuDao.getListFromNativeQuery(queryEpCountHydrocephalus);
			if (!BasicUtils.isEmpty(epCountListHydrocephalus)) {
				epCountHydrocephalus = epCountListHydrocephalus.get(0).intValue();
				if (epCountHydrocephalus != 1) {
					progressNotesHydrocephalus = "Baby developed " + epCountHydrocephalus
							+ " episodes of Hydrocephalus " + "during hospital stay. " + htmlNextLine + " Episode 1 : ";
				}
			}

			// Old Episodes Inactive Notes List of Generating Query
			List<SaCnsHydrocephalus> oldHydrocephalusList = new ArrayList<SaCnsHydrocephalus>();
			oldHydrocephalusList = inicuDao
					.getListFromMappedObjQuery(HqlSqlQueryConstants.getOldInactiveHydrocephalusList(uhid));
			if (!BasicUtils.isEmpty(oldHydrocephalusList)) {
				// Old Episodes Inactive Notes of HYDROCEPHALUS Fetching Function
				String oldInactiveNotes = getOldInactiveNotesHydrocephalus(oldHydrocephalusList, epCountHydrocephalus);
				progressNotesHydrocephalus += oldInactiveNotes + htmlNextLine;
			}

			// Current Episode
			// progressNotesAsphyxia += "Episode " + epCountAsphyxia + " : ";
			if (epCountHydrocephalus > 1) {
				progressNotesHydrocephalus += "Episode " + epCountHydrocephalus + " : ";
			}
			List<SaCnsHydrocephalus> hydrocephalusList = new ArrayList<SaCnsHydrocephalus>();
			hydrocephalusList = inicuDao
					.getListFromMappedObjQuery(HqlSqlQueryConstants.getHydrocephalusList(uhid, epCountHydrocephalus));
			if (!BasicUtils.isEmpty(hydrocephalusList)) {

				String initialNote = "Baby developed Hydrocephalus ";
				progressNotesHydrocephalus += initialNote;
				// Age of Onset Data Fetching Function for Hydrocephalus
				String ageOnsetNotes = getAgeOnsetHydrocephalus(hydrocephalusList);
				progressNotesHydrocephalus += ageOnsetNotes;

				// Investigation Order Detail Fetching Function
				String investigationOrderNotes = getInvestigationOrderHydrocephalus(hydrocephalusList);
				progressNotesHydrocephalus += investigationOrderNotes;

				// Medication of Hydrocephalus Data Fetching Function
				String medicationNotes = getMedicationOfHydrocephalus(hydrocephalusList);
				progressNotesHydrocephalus += medicationNotes + continuedMedication;

			}

			// Inactive Notes ending here

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return progressNotesHydrocephalus;

	}

	private String getMedicationOfHydrocephalus(List<SaCnsHydrocephalus> hydrocephalusList)
			throws InicuDatabaseExeption {
		String medicationNotesHydrocephalus = "";
		List<String> finalEventIdListHydrocephalus = new ArrayList<>();
		try {
			for (int i = 0; i < hydrocephalusList.size(); i++) {
				SaCnsHydrocephalus hydrocephalusObj = (SaCnsHydrocephalus) hydrocephalusList.get(i);
				if (hydrocephalusObj != null && hydrocephalusObj.getSacnshydrocephalusid() != null) {
					String saCnsAsphyxiaIdAsphyxia = "'" + hydrocephalusObj.getSacnshydrocephalusid().toString() + "'";
					finalEventIdListHydrocephalus.add(saCnsAsphyxiaIdAsphyxia);
				}
			}

			if (!BasicUtils.isEmpty(finalEventIdListHydrocephalus)) {
				String finalEventIdListStringHydrocephalus = finalEventIdListHydrocephalus.toString();
				finalEventIdListStringHydrocephalus = finalEventIdListStringHydrocephalus.replace("[", "");
				finalEventIdListStringHydrocephalus = finalEventIdListStringHydrocephalus.replace("]", "");
				medicationNotesHydrocephalus += getMedicationHelper(finalEventIdListStringHydrocephalus,
						"Hydrocephalus",hydrocephalusList.get(0).getUhid(), false);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return medicationNotesHydrocephalus;

	}

	private String getInvestigationOrderHydrocephalus(List<SaCnsHydrocephalus> hydrocephalusList)
			throws InicuDatabaseExeption {
		String investigationOrderNotesHydrocephalus = "";
		List<String> hydrocephalsuIdList = new ArrayList<String>();
		try {
			for (int i = 0; i < hydrocephalusList.size(); i++) {
				SaCnsHydrocephalus hydrocephalusObj = (SaCnsHydrocephalus) hydrocephalusList.get(i);
				hydrocephalsuIdList.add("'" + hydrocephalusObj.getSacnshydrocephalusid().toString() + "'");
			}

			if (!BasicUtils.isEmpty(hydrocephalsuIdList)) {
				String hydrocephalusIdListString = hydrocephalsuIdList.toString();
				hydrocephalusIdListString = hydrocephalusIdListString.replace("[", "");
				hydrocephalusIdListString = hydrocephalusIdListString.replace("]", "");
				List<String> investigationOrderHelperList = new ArrayList<>();
				investigationOrderHelperList = getInvestigationOrderHelper(hydrocephalusIdListString, "Hydrocephalus");
				if (!BasicUtils.isEmpty(investigationOrderHelperList)) {
					Set<String> uniqueInvestigationOrderHelperList = new HashSet<String>(investigationOrderHelperList);
					String uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperList.toString();
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("[",
							"");
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("]",
							"");

					if (uniqueInvestigationOrderHelperList.size() == 1) {
						investigationOrderNotesHydrocephalus += " Investigation done during this episode was "
								+ uniqueInvestigationOrderHelperListString + ". ";
					} else {
						investigationOrderNotesHydrocephalus += " Investigations done during this episode were "
								+ uniqueInvestigationOrderHelperListString + ". ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return investigationOrderNotesHydrocephalus;
	}

	private String getAgeOnsetHydrocephalus(List<SaCnsHydrocephalus> hydrocephalusList) throws InicuDatabaseExeption {
		String ageOnSetNotesHydrocephalus = "";
		boolean done = false;
		try {
			for (int i = 0; i < hydrocephalusList.size(); i++) {
				SaCnsHydrocephalus hydrocephalusObj = (SaCnsHydrocephalus) hydrocephalusList.get(i);
				if (hydrocephalusObj != null && done != true && hydrocephalusObj.getAgeatonset() != null) {
					if (hydrocephalusObj.getAgeatonset().equalsIgnoreCase("0")) {
						ageOnSetNotesHydrocephalus += "At birth. ";
					} else {
						if (hydrocephalusObj.getAgeatonset() != null && hydrocephalusObj.getAgeinhoursdays() == true) {
							ageOnSetNotesHydrocephalus += "At the age of " + hydrocephalusObj.getAgeatonset();
							if (hydrocephalusObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesHydrocephalus += " hour.";
							} else {
								ageOnSetNotesHydrocephalus += " hours.";
							}
						} else {
							ageOnSetNotesHydrocephalus += "At the age of " + hydrocephalusObj.getAgeatonset();
							if (hydrocephalusObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesHydrocephalus += " day.";
							} else {
								ageOnSetNotesHydrocephalus += " days.";
							}
						}
					}
					done = true;
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ageOnSetNotesHydrocephalus;
	}

	private String getOldInactiveNotesHydrocephalus(List<SaCnsHydrocephalus> hydrocephalusList,
			int epCountHydrocephalus) throws InicuDatabaseExeption {
		String oldInactiveNotes = "";
		try {
			if (epCountHydrocephalus == 1) {
				return oldInactiveNotes;
			}

			for (int i = 0; i < hydrocephalusList.size(); i++) {
				SaCnsHydrocephalus hydrocephalusObj = (SaCnsHydrocephalus) hydrocephalusList.get(i);
				if (hydrocephalusObj.getProgressnotes() != null) {
					oldInactiveNotes = hydrocephalusObj.getProgressnotes();
				}
			}

			if (epCountHydrocephalus > 2) {
				oldInactiveNotes = oldInactiveNotes.substring(oldInactiveNotes.indexOf('\n') + 1);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return oldInactiveNotes;
	}



	public String generateInactiveNotesVap(InicuDao inicuDaoObj, String uhid, String continuedMedication)
			throws InicuDatabaseExeption {
		if (inicuDaoObj != null) {
			inicuDao = inicuDaoObj;
		}
		// Creating Inactive Notes from here
		String progressNotesVap = "";
		String htmlNextLine = System.getProperty("line.separator");
		try {
			// Fetching Current Episode Number for IVH
			int epCountVap = 1;
			String queryEpCountvap = "SELECT MAX(episode_number) FROM sa_infection_vap WHERE uhid='" + uhid + "'";
			List<Integer> epCountListVap = inicuDao.getListFromNativeQuery(queryEpCountvap);
			if (!BasicUtils.isEmpty(epCountListVap)) {
				epCountVap = epCountListVap.get(0).intValue();
				if (epCountVap != 1) {
					progressNotesVap = "Baby developed " + epCountVap + " episodes of Vap " + "during hospital stay. "
							+ htmlNextLine + " Episode 1 : ";
				}
			}

			// Old Episodes Inactive Notes List of Generating Query
			List<SaInfectVap> oldVapList = new ArrayList<SaInfectVap>();
			oldVapList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getOldInactiveVapList(uhid));
			if (!BasicUtils.isEmpty(oldVapList)) {
				// Old Episodes Inactive Notes of vap Fetching Function
				String oldInactiveNotes = getOldInactiveNotesVap(oldVapList, epCountVap);
				progressNotesVap += oldInactiveNotes + htmlNextLine;
			}

			// Current Episode
			// progressNotesAsphyxia += "Episode " + epCountAsphyxia + " : ";
			if (epCountVap > 1) {
				progressNotesVap += "Episode " + epCountVap + " : ";
			}
			List<SaInfectVap> vapList = new ArrayList<SaInfectVap>();
			vapList = inicuDao
					.getListFromMappedObjQuery(HqlSqlQueryConstants.getVapList(uhid, epCountVap));
			if (!BasicUtils.isEmpty(vapList)) {
				String initialNote = "Baby developed Vap ";
				progressNotesVap += initialNote;

				// Age of Onset Data Fetching Function for IVH
				String ageOnsetNotes = getAgeOnsetVap(vapList);
				progressNotesVap += ageOnsetNotes;

				// Investigation Order Detail Fetching Function
				String investigationOrderNotes = getInvestigationOrderVap(vapList);
				progressNotesVap += investigationOrderNotes;

				// Medication of Asphyxia Data Fetching Function
				String medicationNotes = getMedicationOfVap(vapList,false);
				progressNotesVap += medicationNotes + continuedMedication;

			}

			// Inactive Notes ending here

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return progressNotesVap;

	}

	private String getMedicationOfVap(List<SaInfectVap> vapList,boolean isSkip) throws InicuDatabaseExeption {
		String medicationNotesVap = "";
		List<String> finalEventIdListvap = new ArrayList<>();
		try {
			for (int i = 0; i < vapList.size(); i++) {
				SaInfectVap vapObj = (SaInfectVap) vapList.get(i);
				if (vapObj != null && vapObj.getSavapid() != null) {
					String saCnsAsphyxiaIdAsphyxia = "'" + vapObj.getSavapid().toString() + "'";
					finalEventIdListvap.add(saCnsAsphyxiaIdAsphyxia);
				}
			}

			if (!BasicUtils.isEmpty(finalEventIdListvap)) {
				String finalEventIdListStringVap = finalEventIdListvap.toString();
				finalEventIdListStringVap = finalEventIdListStringVap.replace("[", "");
				finalEventIdListStringVap = finalEventIdListStringVap.replace("]", "");
				medicationNotesVap += getMedicationHelper(finalEventIdListStringVap, "Vap"
                        , vapList.get(0).getUhid(), isSkip);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return medicationNotesVap;
	}

	private String getInvestigationOrderVap(List<SaInfectVap> vapList) throws InicuDatabaseExeption {
		String investigationOrderNotesVap = "";
		List<String> vapIdList = new ArrayList<String>();
		try {
			for (int i = 0; i < vapList.size(); i++) {
				SaInfectVap vapObj = (SaInfectVap) vapList.get(i);
				vapIdList.add("'" + vapObj.getSavapid().toString() + "'");
			}

			if (!BasicUtils.isEmpty(vapIdList)) {
				String vapIdListString = vapIdList.toString();
				vapIdListString = vapIdListString.replace("[", "");
				vapIdListString = vapIdListString.replace("]", "");
				List<String> investigationOrderHelperList = new ArrayList<>();
				investigationOrderHelperList = getInvestigationOrderHelper(vapIdListString, "Vap");
				if (!BasicUtils.isEmpty(investigationOrderHelperList)) {
					Set<String> uniqueInvestigationOrderHelperList = new HashSet<String>(investigationOrderHelperList);
					String uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperList.toString();
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("[",
							"");
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("]",
							"");
					if(uniqueInvestigationOrderHelperListString.indexOf(",")!=-1) {
						uniqueInvestigationOrderHelperListString = formatString(uniqueInvestigationOrderHelperListString);

					}
					if (uniqueInvestigationOrderHelperList.size() == 1) {
						investigationOrderNotesVap += "Investigation done during this episode was "
								+ uniqueInvestigationOrderHelperListString + ". ";
					} else {
						investigationOrderNotesVap += "Investigations done during this episode were "
								+ uniqueInvestigationOrderHelperListString + ". ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return investigationOrderNotesVap;
	}

	private String getAgeOnsetVap(List<SaInfectVap> vapList) throws InicuDatabaseExeption {
		String ageOnSetNotesVap = "";
		boolean done = false;
		try {
			for (int i = 0; i < vapList.size(); i++) {
				SaInfectVap vapObj = (SaInfectVap) vapList.get(i);
				if (vapObj != null && done != true && vapObj.getAgeatonset() != null) {
					if (vapObj.getAgeatonset().equalsIgnoreCase("0")) {
						ageOnSetNotesVap += "At birth. ";
					} else {
						if (vapObj.getAgeatonset() != null && vapObj.getAgeinhoursdays() == true) {
							ageOnSetNotesVap += "At the age of " + vapObj.getAgeatonset();
							if (vapObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesVap += " hour. ";
							} else {
								ageOnSetNotesVap += " hours. ";
							}
						} else {
							ageOnSetNotesVap += "At the age of " + vapObj.getAgeatonset();
							if (vapObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesVap += " day. ";
							} else {
								ageOnSetNotesVap += " days. ";
							}
						}
					}
					done = true;
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ageOnSetNotesVap;
	}

	private String getOldInactiveNotesVap(List<SaInfectVap> oldVapList, int epCountvap) throws InicuDatabaseExeption {
		String oldInactiveNotes = "";
		try {
			if (epCountvap == 1) {
				return oldInactiveNotes;
			}

			for (int i = 0; i < oldVapList.size(); i++) {
				SaInfectVap ivhObj = (SaInfectVap) oldVapList.get(i);
				if (ivhObj.getProgressnotes() != null) {
					oldInactiveNotes = ivhObj.getProgressnotes();
				}
			}

			if (epCountvap > 2) {
				oldInactiveNotes = oldInactiveNotes.substring(oldInactiveNotes.indexOf('\n') + 1);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return oldInactiveNotes;
	}

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	public String generateInactiveNotesClabsi(InicuDao inicuDaoObj, String uhid, String continuedMedication)
			throws InicuDatabaseExeption {
		if (inicuDaoObj != null) {
			inicuDao = inicuDaoObj;
		}
		// Creating Inactive Notes from here
		String progressNotesClabsi = "";
		String htmlNextLine = System.getProperty("line.separator");
		try {
			// Fetching Current Episode Number for IVH
			int epCountClabsi = 1;
			String queryEpCountclabsi = "SELECT MAX(episode_number) FROM sa_infection_clabsi WHERE uhid='" + uhid + "'";
			List<Integer> epCountListClabsi = inicuDao.getListFromNativeQuery(queryEpCountclabsi);
			if (!BasicUtils.isEmpty(epCountListClabsi)) {
				epCountClabsi = epCountListClabsi.get(0).intValue();
				if (epCountClabsi != 1) {
					progressNotesClabsi = "Baby developed " + epCountClabsi + " episodes of Clabsi " + "during hospital stay. "
							+ htmlNextLine + " Episode 1 : ";
				}
			}

			// Old Episodes Inactive Notes List of Generating Query
			List<SaInfectClabsi> oldClabsiList = new ArrayList<SaInfectClabsi>();
			oldClabsiList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getOldInactiveClabsiList(uhid));
			if (!BasicUtils.isEmpty(oldClabsiList)) {
				// Old Episodes Inactive Notes of vap Fetching Function
				String oldInactiveNotes = getOldInactiveNotesClabsi(oldClabsiList, epCountClabsi);
				progressNotesClabsi += oldInactiveNotes + htmlNextLine;
			}

			// Current Episode
			// progressNotesAsphyxia += "Episode " + epCountAsphyxia + " : ";
			if (epCountClabsi > 1) {
				progressNotesClabsi += "Episode " + epCountClabsi + " : ";
			}
			List<SaInfectClabsi> clabsiList = new ArrayList<SaInfectClabsi>();
			clabsiList = inicuDao
					.getListFromMappedObjQuery(HqlSqlQueryConstants.getClabsiList(uhid, epCountClabsi));
			if (!BasicUtils.isEmpty(clabsiList)) {
				String initialNote = "Baby developed Clabsi ";
				progressNotesClabsi += initialNote;

				// Age of Onset Data Fetching Function for IVH
				String ageOnsetNotes = getAgeOnsetClabsi(clabsiList);
				progressNotesClabsi += ageOnsetNotes;

				// Investigation Order Detail Fetching Function
				String investigationOrderNotes = getInvestigationOrderClabsi(clabsiList);
				progressNotesClabsi += investigationOrderNotes;

				// Medication of Asphyxia Data Fetching Function
				String medicationNotes = getMedicationOfClabsi(clabsiList);
				progressNotesClabsi += medicationNotes + continuedMedication;

			}

			// Inactive Notes ending here

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return progressNotesClabsi;

	}

	private String getMedicationOfClabsi(List<SaInfectClabsi> clabsiList) throws InicuDatabaseExeption {
		String medicationNotesClabsi = "";
		List<String> finalEventIdListclabsi = new ArrayList<>();
		try {
			for (int i = 0; i < clabsiList.size(); i++) {
				SaInfectClabsi clabsiObj = (SaInfectClabsi) clabsiList.get(i);
				if (clabsiObj != null && clabsiObj.getSaclabsiid() != null) {
					String saInfectClanbsiIdClabsi = "'" + clabsiObj.getSaclabsiid().toString() + "'";
					finalEventIdListclabsi.add(saInfectClanbsiIdClabsi);
				}
			}

			if (!BasicUtils.isEmpty(finalEventIdListclabsi)) {
				String finalEventIdListStringClabsi = finalEventIdListclabsi.toString();
				finalEventIdListStringClabsi = finalEventIdListStringClabsi.replace("[", "");
				finalEventIdListStringClabsi = finalEventIdListStringClabsi.replace("]", "");
				medicationNotesClabsi += getMedicationHelper(finalEventIdListStringClabsi, "Clabsi"
                        , clabsiList.get(0).getUhid(), false);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return medicationNotesClabsi;
	}

	private String getInvestigationOrderClabsi(List<SaInfectClabsi> clabsiList) throws InicuDatabaseExeption {
		String investigationOrderNotesClabsi = "";
		List<String> clabsiIdList = new ArrayList<String>();
		try {
			for (int i = 0; i < clabsiList.size(); i++) {
				SaInfectClabsi clabsiObj = (SaInfectClabsi) clabsiList.get(i);
				clabsiIdList.add("'" + clabsiObj.getSaclabsiid().toString() + "'");
			}

			if (!BasicUtils.isEmpty(clabsiIdList)) {
				String clabsiIdListString = clabsiIdList.toString();
				clabsiIdListString = clabsiIdListString.replace("[", "");
				clabsiIdListString = clabsiIdListString.replace("]", "");
				List<String> investigationOrderHelperList = new ArrayList<>();
				investigationOrderHelperList = getInvestigationOrderHelper(clabsiIdListString, "Clabsi");
				if (!BasicUtils.isEmpty(investigationOrderHelperList)) {
					Set<String> uniqueInvestigationOrderHelperList = new HashSet<String>(investigationOrderHelperList);
					String uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperList.toString();
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("[",
							"");
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("]",
							"");
					if(uniqueInvestigationOrderHelperListString.indexOf(",")!=-1) {
						uniqueInvestigationOrderHelperListString = formatString(uniqueInvestigationOrderHelperListString);
					}
					if (uniqueInvestigationOrderHelperList.size() == 1) {
						investigationOrderNotesClabsi += "Investigation done during this episode was "
								+ uniqueInvestigationOrderHelperListString + ". ";
					} else {
						investigationOrderNotesClabsi += "Investigations done during this episode were "
								+ uniqueInvestigationOrderHelperListString + ". ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return investigationOrderNotesClabsi;
	}

	private String getAgeOnsetClabsi(List<SaInfectClabsi> clabsiList) throws InicuDatabaseExeption {
		String ageOnSetNotesClabsi = "";
		boolean done = false;
		try {
			for (int i = 0; i < clabsiList.size(); i++) {
				SaInfectClabsi clabsiObj = (SaInfectClabsi) clabsiList.get(i);
				if (clabsiObj != null && done != true && clabsiObj.getAgeatonset() != null) {
					if (clabsiObj.getAgeatonset().equalsIgnoreCase("0")) {
						ageOnSetNotesClabsi += "At birth. ";
					} else {
						if (clabsiObj.getAgeatonset() != null && clabsiObj.getAgeinhoursdays() == true) {
							ageOnSetNotesClabsi += "At the age of " + clabsiObj.getAgeatonset();
							if (clabsiObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesClabsi += " hour. ";
							} else {
								ageOnSetNotesClabsi += " hours. ";
							}
						} else {
							ageOnSetNotesClabsi += "At the age of " + clabsiObj.getAgeatonset();
							if (clabsiObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesClabsi += " day. ";
							} else {
								ageOnSetNotesClabsi += " days. ";
							}
						}
					}
					done = true;
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ageOnSetNotesClabsi;
	}

	private String getOldInactiveNotesClabsi(List<SaInfectClabsi> oldClabsiList, int epCountvap) throws InicuDatabaseExeption {
		String oldInactiveNotes = "";
		try {
			if (epCountvap == 1) {
				return oldInactiveNotes;
			}

			for (int i = 0; i < oldClabsiList.size(); i++) {
				SaInfectClabsi clabsiObj = (SaInfectClabsi) oldClabsiList.get(i);
				if (clabsiObj.getProgressnotes() != null) {
					oldInactiveNotes = clabsiObj.getProgressnotes();
				}
			}

			if (epCountvap > 2) {
				oldInactiveNotes = oldInactiveNotes.substring(oldInactiveNotes.indexOf('\n') + 1);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return oldInactiveNotes;
	}



	//****************************************************************************************************************************//


	public String generateInactiveNotesIntrauterine(InicuDao inicuDaoObj, String uhid, String continuedMedication)
			throws InicuDatabaseExeption {
		if (inicuDaoObj != null) {
			inicuDao = inicuDaoObj;
		}
		// Creating Inactive Notes from here
		String progressNotesIntrauterine = "";
		String htmlNextLine = System.getProperty("line.separator");
		try {
			// Fetching Current Episode Number for IVH
			int epCountIntrauterine = 1;
			String queryEpCountintrauterine = "SELECT MAX(episode_number) FROM sa_infection_intrauterine WHERE uhid='" + uhid + "'";
			List<Integer> epCountListIntrauterine = inicuDao.getListFromNativeQuery(queryEpCountintrauterine);
			if (!BasicUtils.isEmpty(epCountListIntrauterine)) {
				epCountIntrauterine = epCountListIntrauterine.get(0).intValue();
				if (epCountIntrauterine != 1) {
					progressNotesIntrauterine = "Baby developed " + epCountIntrauterine + " episodes of Intrauterine " + "during hospital stay. "
							+ htmlNextLine + " Episode 1 : ";
				}
			}

			// Old Episodes Inactive Notes List of Generating Query
			List<SaInfectIntrauterine> oldIntrauterineList = new ArrayList<SaInfectIntrauterine>();
			oldIntrauterineList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getOldInactiveIntrauterineList(uhid));
			if (!BasicUtils.isEmpty(oldIntrauterineList)) {
				// Old Episodes Inactive Notes of intrauterine Fetching Function
				String oldInactiveNotes = getOldInactiveNotesIntrauterine(oldIntrauterineList, epCountIntrauterine);
				progressNotesIntrauterine += oldInactiveNotes + htmlNextLine;
			}

			// Current Episode
			// progressNotesAsphyxia += "Episode " + epCountAsphyxia + " : ";
			if (epCountIntrauterine > 1) {
				progressNotesIntrauterine += "Episode " + epCountIntrauterine + " : ";
			}
			List<SaInfectIntrauterine> vapList = new ArrayList<SaInfectIntrauterine>();
			vapList = inicuDao
					.getListFromMappedObjQuery(HqlSqlQueryConstants.getIntrauterineList(uhid, epCountIntrauterine));
			if (!BasicUtils.isEmpty(vapList)) {
				String initialNote = "Baby developed Intrauterine ";
				progressNotesIntrauterine += initialNote;

				// Age of Onset Data Fetching Function for IVH
				String ageOnsetNotes = getAgeOnsetIntrauterine(vapList);
				progressNotesIntrauterine += ageOnsetNotes;

				// Investigation Order Detail Fetching Function
				String investigationOrderNotes = getInvestigationOrderIntrauterine(vapList);
				progressNotesIntrauterine += investigationOrderNotes;

				// Medication of Asphyxia Data Fetching Function
				String medicationNotes = getMedicationOfIntrauterine(vapList);
				progressNotesIntrauterine += medicationNotes + continuedMedication;

			}

			// Inactive Notes ending here

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return progressNotesIntrauterine;

	}

	private String getMedicationOfIntrauterine(List<SaInfectIntrauterine> intrauterineList) throws InicuDatabaseExeption {
		String medicationNotesIntrauterine = "";
		List<String> finalEventIdListintrauterine = new ArrayList<>();
		try {
			for (int i = 0; i < intrauterineList.size(); i++) {
				SaInfectIntrauterine intrauterineObj = (SaInfectIntrauterine) intrauterineList.get(i);
				if (intrauterineObj != null && intrauterineObj.getSaintrauterineid() != null) {
					String saCnsAsphyxiaIdAsphyxia = "'" + intrauterineObj.getSaintrauterineid().toString() + "'";
					finalEventIdListintrauterine.add(saCnsAsphyxiaIdAsphyxia);
				}
			}

			if (!BasicUtils.isEmpty(finalEventIdListintrauterine)) {
				String finalEventIdListStringIntrauterine = finalEventIdListintrauterine.toString();
				finalEventIdListStringIntrauterine = finalEventIdListStringIntrauterine.replace("[", "");
				finalEventIdListStringIntrauterine = finalEventIdListStringIntrauterine.replace("]", "");
				medicationNotesIntrauterine += getMedicationHelper(finalEventIdListStringIntrauterine, "Intrauterine"
                        , intrauterineList.get(0).getUhid(), false);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return medicationNotesIntrauterine;
	}

	private String getInvestigationOrderIntrauterine(List<SaInfectIntrauterine> intrauterineList) throws InicuDatabaseExeption {
		String investigationOrderNotesIntrauterine = "";
		List<String> intrauterineIdList = new ArrayList<String>();
		try {
			for (int i = 0; i < intrauterineList.size(); i++) {
				SaInfectIntrauterine intrauterineObj = (SaInfectIntrauterine) intrauterineList.get(i);
				intrauterineIdList.add("'" + intrauterineObj.getSaintrauterineid().toString() + "'");
			}

			if (!BasicUtils.isEmpty(intrauterineIdList)) {
				String intrauterineIdListString = intrauterineIdList.toString();
				intrauterineIdListString = intrauterineIdListString.replace("[", "");
				intrauterineIdListString = intrauterineIdListString.replace("]", "");
				List<String> investigationOrderHelperList = new ArrayList<>();
				investigationOrderHelperList = getInvestigationOrderHelper(intrauterineIdListString, "Intrauterine");
				if (!BasicUtils.isEmpty(investigationOrderHelperList)) {
					Set<String> uniqueInvestigationOrderHelperList = new HashSet<String>(investigationOrderHelperList);
					String uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperList.toString();
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("[",
							"");
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("]",
							"");

					if (uniqueInvestigationOrderHelperList.size() == 1) {
						investigationOrderNotesIntrauterine += "Investigation done during this episode was "
								+ uniqueInvestigationOrderHelperListString + ". ";
					} else {
						investigationOrderNotesIntrauterine += "Investigations done during this episode were "
								+ uniqueInvestigationOrderHelperListString + ". ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return investigationOrderNotesIntrauterine;
	}

	private String getAgeOnsetIntrauterine(List<SaInfectIntrauterine> intrauterineList) throws InicuDatabaseExeption {
		String ageOnSetNotesIntrauterine = "";
		boolean done = false;
		try {
			for (int i = 0; i < intrauterineList.size(); i++) {
				SaInfectIntrauterine intrauterineObj = (SaInfectIntrauterine) intrauterineList.get(i);
				if (intrauterineObj != null && done != true && intrauterineObj.getAgeatonset() != null) {
					if (intrauterineObj.getAgeatonset().equalsIgnoreCase("0")) {
						ageOnSetNotesIntrauterine += "At birth. ";
					} else {
						if (intrauterineObj.getAgeatonset() != null && intrauterineObj.getAgeinhoursdays() == true) {
							ageOnSetNotesIntrauterine += "At the age of " + intrauterineObj.getAgeatonset();
							if (intrauterineObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesIntrauterine += " hour. ";
							} else {
								ageOnSetNotesIntrauterine += " hours. ";
							}
						} else {
							ageOnSetNotesIntrauterine += "At the age of " + intrauterineObj.getAgeatonset();
							if (intrauterineObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesIntrauterine += " day. ";
							} else {
								ageOnSetNotesIntrauterine += " days. ";
							}
						}
					}
					done = true;
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ageOnSetNotesIntrauterine;
	}

	private String getOldInactiveNotesIntrauterine(List<SaInfectIntrauterine> oldIntrauterineList, int epCountIntrauterine) throws InicuDatabaseExeption {
		String oldInactiveNotes = "";
		try {
			if (epCountIntrauterine == 1) {
				return oldInactiveNotes;
			}

			for (int i = 0; i < oldIntrauterineList.size(); i++) {
				SaInfectIntrauterine intrauterineObj = (SaInfectIntrauterine) oldIntrauterineList.get(i);
				if (intrauterineObj.getProgressnotes() != null) {
					oldInactiveNotes = intrauterineObj.getProgressnotes();
				}
			}

			if (epCountIntrauterine > 2) {
				oldInactiveNotes = oldInactiveNotes.substring(oldInactiveNotes.indexOf('\n') + 1);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return oldInactiveNotes;
	}




//	******************************************************************************************************************************//

	private ResponseMessageWithResponseObject saveCnsNeuromuscularDisorderEvent(AssessmentCNSSystemPOJO cnsSystemObj)
			throws Exception {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();

		try {
			CNSSystemCommonEventPOJO commmonObj = cnsSystemObj.getCNSEventObject().getCommonEventsInfo();
			SaCnsNeuromuscularDisorders currentObj = cnsSystemObj.getCNSEventObject().getNeuromuscularDisorderEvent()
					.getCurrentEvent().getCurrentNeuromuscularDisorders();
			if (BasicUtils.isEmpty(currentObj.getEpisodeid()) && !BasicUtils.isEmpty(currentObj.getUhid())) {
				String queryAssociatedEvents = "select episodeid from sa_cns_neuromuscular_disorder where uhid='"
						+ currentObj.getUhid() + "' order by creationtime desc";
				List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

				if (!BasicUtils.isEmpty(listAssociatedEvents)) {
					currentObj.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
				}
			}

			Timestamp assessmentTime = currentObj.getAssessmentTime();

			if (!BasicUtils.isEmpty(assessmentTime)) {
				currentObj.setAssessmentTime(assessmentTime);
			}
//			currentObj.setAssessmentDate(assessmentTime);
			currentObj.setUhid(cnsSystemObj.getUhid());
			currentObj.setLoggeduser(cnsSystemObj.getLoggedUser());

			if (currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {

				if (!BasicUtils.isEmpty(currentObj.getTreatmentactioncause())) {
					currentObj.setCauseofNeuromuscularDisorder(currentObj.getTreatmentactioncause().toString());
				}

				if (!BasicUtils.isEmpty(currentObj.getTreatmentactionlist())) {
					currentObj.setTreatmentaction(currentObj.getTreatmentactionlist().toString());
				}

				if (!BasicUtils.isEmpty(currentObj.getRiskfactorList())) {
					currentObj.setRiskfactor(currentObj.getRiskfactorList().toString());
				}

				NurseExecutionOrders order = new NurseExecutionOrders();

				// set progress notes
				if (!BasicUtils.isEmpty(currentObj.getProgressnotes())) {
					currentObj
							.setProgressnotes(currentObj.getProgressnotes());
					order.setLoggeduser(currentObj.getLoggeduser());
				}

				if(!BasicUtils.isEmpty(currentObj.getOthercomments())) {
					order.setEventname("Neuro muscular Disorders");
					order.setIsExecution(false);
					order.setOrderText(currentObj.getOthercomments());
					order.setAssessmentdate(currentObj.getAssessmentDate());
					order.setUhid(currentObj.getUhid());
					inicuDao.saveObject(order);
				}

				try {
					currentObj = (SaCnsNeuromuscularDisorders) inicuDao.saveObject(currentObj);
				} catch (Exception e) {
					e.printStackTrace();
				}

				// save order investigation...
				if (currentObj.getSaCnsNeuromuscularDisordersid() != null
						&& currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {

					List<BabyPrescription> prescriptionList = cnsSystemObj.getCNSEventObject()
							.getNeuromuscularDisorderEvent().getPrescriptionList();
					if (!BasicUtils.isEmpty(prescriptionList)) {
						this.savePrescriptionList(null, prescriptionList, "NeuromuscularDisorders",
								currentObj.getSaCnsNeuromuscularDisordersid(), currentObj.getAssessmentTime());
					}

					saveOrderInvestigation(cnsSystemObj.getDropDowns().getOrders(),
							currentObj.getSaCnsNeuromuscularDisordersid(), cnsSystemObj.getUhid(),
							cnsSystemObj.getLoggedUser(), "NeuromuscularDisorders", currentObj.getAssessmentTime());

					// save resp suport
					RespSupport respSupport = cnsSystemObj.getCNSEventObject().getCommonEventsInfo().getRespSupport();
					respSupport.setEventid(currentObj.getSaCnsNeuromuscularDisordersid().toString());
					respSupport.setEventname("NeuromuscularDisorders");
					respSupport.setUhid(cnsSystemObj.getUhid());
					respSupport.setCreationtime(currentObj.getAssessmentTime());
					respSupport.setModificationtime(currentObj.getAssessmentTime());

					String treatmentStr = currentObj.getTreatmentaction();
					if (BasicUtils.isEmpty(treatmentStr) || !treatmentStr.contains("TRE075")) {
						if (BasicUtils.isEmpty(respSupport.getIsactive()) || respSupport.getIsactive() == true) {
							respSupport.setIsactive(false);
							respSupport.setRsVentType(null);
							respSupport = (RespSupport) inicuDao.saveObject(respSupport);
						}
					} else if (treatmentStr.contains("TRE075")) {
						respSupport.setIsactive(true);
						respSupport = (RespSupport) inicuDao.saveObject(respSupport);
					}
				}
			} else {
				SaCnsNeuromuscularDisorders neuromuscularDisorders = new SaCnsNeuromuscularDisorders();
				neuromuscularDisorders.setUhid(cnsSystemObj.getUhid());
				String uhid = neuromuscularDisorders.getUhid();
				neuromuscularDisorders.setLoggeduser(cnsSystemObj.getLoggedUser());
				neuromuscularDisorders.setAgeatonset(currentObj.getAgeatonset().toString());
				neuromuscularDisorders.setAgeinhoursdays(currentObj.getAgeinhoursdays());
				neuromuscularDisorders.setAgeatassesment(currentObj.getAgeatassesment());
				neuromuscularDisorders.setIsageofassesmentinhours(currentObj.getIsageofassesmentinhours());
				if (currentObj.getEventstatus().equalsIgnoreCase("No")) {
					neuromuscularDisorders
							.setProgressnotes("NeuromuscularDisorders has resolved,Baby is under observation.");

					// set progress notes
					if (!BasicUtils.isEmpty(neuromuscularDisorders.getProgressnotes())) {
						neuromuscularDisorders.setProgressnotes(neuromuscularDisorders.getProgressnotes() + "( "
								+ neuromuscularDisorders.getLoggeduser() + " )");
					}
				}
				neuromuscularDisorders.setEventstatus(currentObj.getEventstatus());
				neuromuscularDisorders.setAssessmentTime(currentObj.getAssessmentTime());
				neuromuscularDisorders.setAssessmentDate(currentObj.getAssessmentDate());
				neuromuscularDisorders.setAssessmentHour(currentObj.getAssessmentHour());
				neuromuscularDisorders.setAssessmentMin(currentObj.getAssessmentMin());
				neuromuscularDisorders.setEpisodeNumber(currentObj.getEpisodeNumber());
				if (currentObj.getEventstatus().equalsIgnoreCase("inactive")) {
					List<BabyPrescription> prescriptionList = cnsSystemObj.getCNSEventObject()
							.getNeuromuscularDisorderEvent().getPrescriptionList();
					String continuedMedication = "";
					if (!BasicUtils.isEmpty(prescriptionList)) {
						for (int i = 0; i < prescriptionList.size(); i++) {
							BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
							if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
									&& babyPrescription.getContinueReason() != null && babyPrescription.getIsactive()) {
								continuedMedication += babyPrescription.getMedicinename() + " ";
								if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
									continuedMedication += babyPrescription.getDose() + "("
											+ babyPrescription.getDose_unit() + "/"
											+ babyPrescription.getDose_unit_time() + ") ";
								}
								continuedMedication += "prescribed on "
										+ getDateFromTimestamp(babyPrescription.getStartdate())
										+ " and continued due to " + babyPrescription.getContinueReason() + ". ";
							}
						}
						this.savePrescriptionList(null, prescriptionList, "NeuromuscularDisorders", null,
								neuromuscularDisorders.getAssessmentTime());
					}
					neuromuscularDisorders.setProgressnotes(
							generateInactiveNotesNeuromuscularDisorder(null, uhid, continuedMedication));
				}
				try {
					neuromuscularDisorders = (SaCnsNeuromuscularDisorders) inicuDao.saveObject(neuromuscularDisorders);
					if (neuromuscularDisorders.getSaCnsNeuromuscularDisordersid() != null) {
						if (neuromuscularDisorders.getEventstatus().equalsIgnoreCase("No")) {
							List<BabyPrescription> prescriptionList = cnsSystemObj.getCNSEventObject()
									.getAsphyxiaEvent().getPrescriptionList();
							if (!BasicUtils.isEmpty(prescriptionList)) {
								this.savePrescriptionList(null, prescriptionList, "NeuromuscularDisorders",
										neuromuscularDisorders.getSaCnsNeuromuscularDisordersid(),
										neuromuscularDisorders.getAssessmentTime());
							}

							saveOrderInvestigation(cnsSystemObj.getDropDowns().getOrders(),
									neuromuscularDisorders.getSaCnsNeuromuscularDisordersid(), cnsSystemObj.getUhid(),
									cnsSystemObj.getLoggedUser(), "NeuromuscularDisorders",
									currentObj.getAssessmentTime());
						}
						if (cnsSystemObj.getCNSEventObject().isStopTreatmentFlag()) {
							RespSupport respSupport = cnsSystemObj.getCNSEventObject().getCommonEventsInfo()
									.getRespSupport();
							respSupport
									.setEventid(neuromuscularDisorders.getSaCnsNeuromuscularDisordersid().toString());
							respSupport.setEventname("NeuromuscularDisorders");
							respSupport.setUhid(cnsSystemObj.getUhid());
							respSupport.setCreationtime(currentObj.getAssessmentTime());
							respSupport.setModificationtime(currentObj.getAssessmentTime());
							respSupport.setIsactive(false);
							respSupport.setRsVentType(null);
							respSupport = (RespSupport) inicuDao.saveObject(respSupport);
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			response.setMessage("NeuromuscularDisorders saved successfully..!!");
			response.setType(BasicConstants.MESSAGE_SUCCESS);
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return response;
	}

	private ResponseMessageWithResponseObject saveCnsHydrocephalusEvent(AssessmentCNSSystemPOJO cnsSystemObj)
			throws Exception {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();

		try {
			CNSSystemCommonEventPOJO commmonObj = cnsSystemObj.getCNSEventObject().getCommonEventsInfo();
			SaCnsHydrocephalus currentObj = cnsSystemObj.getCNSEventObject().getHydrocephalusEvent().getCurrentEvent()
					.getCurrentHydrocephalus();
			if (BasicUtils.isEmpty(currentObj.getEpisodeid()) && !BasicUtils.isEmpty(currentObj.getUhid())) {
				String queryAssociatedEvents = "select episodeid from sa_cns_hydrocephalus where uhid='"
						+ currentObj.getUhid() + "' order by creationtime desc";
				List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

				if (!BasicUtils.isEmpty(listAssociatedEvents)) {
					currentObj.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
				}
			}
			Timestamp assessmentTime = currentObj.getAssessmentTime();

			if (!BasicUtils.isEmpty(assessmentTime)) {
				currentObj.setAssessmentTime(assessmentTime);
			}
//			currentObj.setAssessmentDate(assessmentTime);
			currentObj.setUhid(cnsSystemObj.getUhid());
			currentObj.setLoggeduser(cnsSystemObj.getLoggedUser());

			if (currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {

				if (!BasicUtils.isEmpty(currentObj.getTreatmentactioncause())) {
					currentObj.setCauseofHydrocephalus(currentObj.getTreatmentactioncause().toString());
				}

				if (!BasicUtils.isEmpty(currentObj.getTreatmentactionlist())) {
					currentObj.setTreatmentaction(currentObj.getTreatmentactionlist().toString());
				}

				if (!BasicUtils.isEmpty(currentObj.getRiskfactorList())) {
					currentObj.setRiskfactor(currentObj.getRiskfactorList().toString());
				}

				NurseExecutionOrders order = new NurseExecutionOrders();
				// set progress notes
				if (!BasicUtils.isEmpty(currentObj.getProgressnotes())) {
					currentObj
							.setProgressnotes(currentObj.getProgressnotes());
					order.setLoggeduser(currentObj.getLoggeduser());
				}

				if(!BasicUtils.isEmpty(currentObj.getOthercomments())) {
					order.setEventname("Hydrocephalus");
					order.setIsExecution(false);
					order.setOrderText(currentObj.getOthercomments());
					order.setAssessmentdate(currentObj.getAssessmentDate());
					order.setUhid(currentObj.getUhid());
					inicuDao.saveObject(order);
				}

				try {
					currentObj = (SaCnsHydrocephalus) inicuDao.saveObject(currentObj);
				} catch (Exception e) {
					e.printStackTrace();
				}

				// save order investigation...
				if (currentObj.getSacnshydrocephalusid() != null
						&& currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {

					List<BabyPrescription> prescriptionList = cnsSystemObj.getCNSEventObject().getHydrocephalusEvent()
							.getPrescriptionList();
					if (!BasicUtils.isEmpty(prescriptionList)) {
						this.savePrescriptionList(null, prescriptionList, "Hydrocephalus",
								currentObj.getSacnshydrocephalusid(), currentObj.getAssessmentTime());
					}

					saveOrderInvestigation(cnsSystemObj.getDropDowns().getOrders(),
							currentObj.getSacnshydrocephalusid(), cnsSystemObj.getUhid(), cnsSystemObj.getLoggedUser(),
							"Hydrocephalus", currentObj.getAssessmentTime());

					// save resp suport
					RespSupport respSupport = cnsSystemObj.getCNSEventObject().getCommonEventsInfo().getRespSupport();
					respSupport.setEventid(currentObj.getSacnshydrocephalusid().toString());
					respSupport.setEventname("Hydrocephalus");
					respSupport.setUhid(cnsSystemObj.getUhid());
					respSupport.setCreationtime(currentObj.getAssessmentTime());
					respSupport.setModificationtime(currentObj.getAssessmentTime());

					String treatmentStr = currentObj.getTreatmentaction();
					if (BasicUtils.isEmpty(treatmentStr) || !treatmentStr.contains("TRE075")) {
						if (BasicUtils.isEmpty(respSupport.getIsactive()) || respSupport.getIsactive() == true) {
							respSupport.setIsactive(false);
							respSupport.setRsVentType(null);
							respSupport = (RespSupport) inicuDao.saveObject(respSupport);
						}
					} else if (treatmentStr.contains("TRE075")) {
						respSupport.setIsactive(true);
						respSupport = (RespSupport) inicuDao.saveObject(respSupport);
					}
				}
			} else {
				SaCnsHydrocephalus hydrocephalus = new SaCnsHydrocephalus();
				hydrocephalus.setUhid(cnsSystemObj.getUhid());
				String uhid = hydrocephalus.getUhid();
				hydrocephalus.setLoggeduser(cnsSystemObj.getLoggedUser());
				hydrocephalus.setAgeatonset(currentObj.getAgeatonset().toString());
				hydrocephalus.setAgeinhoursdays(currentObj.getAgeinhoursdays());
				hydrocephalus.setAgeatassesment(currentObj.getAgeatassesment());
				hydrocephalus.setIsageofassesmentinhours(currentObj.getIsageofassesmentinhours());
				if (currentObj.getEventstatus().equalsIgnoreCase("No")) {
					hydrocephalus.setProgressnotes("Hydrocephalus has resolved,Baby is under observation.");

					// set progress notes
					if (!BasicUtils.isEmpty(hydrocephalus.getProgressnotes())) {
						hydrocephalus.setProgressnotes(
								hydrocephalus.getProgressnotes());
					}
				}
				hydrocephalus.setEventstatus(currentObj.getEventstatus());
				hydrocephalus.setAssessmentTime(currentObj.getAssessmentTime());
				hydrocephalus.setAssessmentDate(currentObj.getAssessmentDate());
				hydrocephalus.setAssessmentHour(currentObj.getAssessmentHour());
				hydrocephalus.setAssessmentMin(currentObj.getAssessmentMin());
				hydrocephalus.setEpisodeNumber(currentObj.getEpisodeNumber());

				if (currentObj.getEventstatus().equalsIgnoreCase("inactive")) {
					List<BabyPrescription> prescriptionList = cnsSystemObj.getCNSEventObject().getHydrocephalusEvent()
							.getPrescriptionList();
					String continuedMedication = "";
					if (!BasicUtils.isEmpty(prescriptionList)) {
						for (int i = 0; i < prescriptionList.size(); i++) {
							BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
							if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
									&& babyPrescription.getContinueReason() != null && babyPrescription.getIsactive()) {
								continuedMedication += babyPrescription.getMedicinename() + " ";
								if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
									continuedMedication += babyPrescription.getDose() + "("
											+ babyPrescription.getDose_unit() + "/"
											+ babyPrescription.getDose_unit_time() + ") ";
								}
								continuedMedication += "prescribed on "
										+ getDateFromTimestamp(babyPrescription.getStartdate())
										+ " and continued due to " + babyPrescription.getContinueReason() + ". ";
							}
						}
						this.savePrescriptionList(null, prescriptionList, "Hydrocephalus", null,
								hydrocephalus.getAssessmentTime());
					}
					hydrocephalus.setProgressnotes(generateInactiveNotesHydrocephalus(null, uhid, continuedMedication));
				}
				try {
					hydrocephalus = (SaCnsHydrocephalus) inicuDao.saveObject(hydrocephalus);
					if (hydrocephalus.getSacnshydrocephalusid() != null) {
						if (hydrocephalus.getEventstatus().equalsIgnoreCase("No")) {
							List<BabyPrescription> prescriptionList = cnsSystemObj.getCNSEventObject()
									.getAsphyxiaEvent().getPrescriptionList();
							if (!BasicUtils.isEmpty(prescriptionList)) {
								this.savePrescriptionList(null, prescriptionList, "Hydrocephalus",
										hydrocephalus.getSacnshydrocephalusid(), hydrocephalus.getAssessmentTime());
							}

							saveOrderInvestigation(cnsSystemObj.getDropDowns().getOrders(),
									hydrocephalus.getSacnshydrocephalusid(), cnsSystemObj.getUhid(),
									cnsSystemObj.getLoggedUser(), "Hydrocephalus", currentObj.getAssessmentTime());
						}
						if (cnsSystemObj.getCNSEventObject().isStopTreatmentFlag()) {
							RespSupport respSupport = cnsSystemObj.getCNSEventObject().getCommonEventsInfo()
									.getRespSupport();
							respSupport.setEventid(hydrocephalus.getSacnshydrocephalusid().toString());
							respSupport.setEventname("Hydrocephalus");
							respSupport.setUhid(cnsSystemObj.getUhid());
							respSupport.setCreationtime(currentObj.getAssessmentTime());
							respSupport.setModificationtime(currentObj.getAssessmentTime());
							respSupport.setIsactive(false);
							respSupport.setRsVentType(null);
							respSupport = (RespSupport) inicuDao.saveObject(respSupport);
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			response.setMessage("Hydrocephalus saved successfully..!!");
			response.setType(BasicConstants.MESSAGE_SUCCESS);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return response;
	}

	private ResponseMessageWithResponseObject saveCnsAsphyxiaEvent(AssessmentCNSSystemPOJO cnsSystemObj)
			throws Exception {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();

		try {
			CNSSystemCommonEventPOJO commmonObj = cnsSystemObj.getCNSEventObject().getCommonEventsInfo();
			SaCnsAsphyxia currentObj = cnsSystemObj.getCNSEventObject().getAsphyxiaEvent().getCurrentEvent()
					.getSaCnsAsphyxia();
			if (BasicUtils.isEmpty(currentObj.getEpisodeid()) && !BasicUtils.isEmpty(currentObj.getUhid())) {
				String queryAssociatedEvents = "select episodeid from sa_cns_asphyxia where uhid='"
						+ currentObj.getUhid() + "' order by creationtime desc";
				List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

				if (!BasicUtils.isEmpty(listAssociatedEvents)) {
					currentObj.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
				}
			}
			Timestamp assessmentTime = currentObj.getAssessmentTime();

			if (!BasicUtils.isEmpty(assessmentTime)) {
				currentObj.setAssessmentTime(assessmentTime);
			}
			currentObj.setUhid(cnsSystemObj.getUhid());
			currentObj.setLoggeduser(cnsSystemObj.getLoggedUser());

			if (currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {

				if (!BasicUtils.isEmpty(currentObj.getTreatmentactioncause())) {
					currentObj.setCauseofAsphyxia(currentObj.getTreatmentactioncause().toString());
				}

				if (!BasicUtils.isEmpty(currentObj.getTreatmentactionlist())) {
					currentObj.setTreatmentaction(currentObj.getTreatmentactionlist().toString());
				}

				if (!BasicUtils.isEmpty(currentObj.getRiskfactorList())) {
					currentObj.setRiskFactor(currentObj.getRiskfactorList().toString());
				}

				// save downes score
				if (commmonObj.isDowneFlag()) {
					ScoreDownes downeObj = commmonObj.getDowneScoreObj();
					downeObj.setUhid(cnsSystemObj.getUhid());

					try {
						downeObj = (ScoreDownes) inicuDao.saveObject(downeObj);
						currentObj.setDownesscoreid(downeObj.getDownesscoreid().toString());
					} catch (Exception e) {
						e.printStackTrace();
					}
				}

				// save thompson score
				if (commmonObj.isThompsonFlag()) {
					ScoreThompson thompsonObj = commmonObj.getThompsonScoreObj();
					thompsonObj.setUhid(cnsSystemObj.getUhid());

					try {
						thompsonObj = (ScoreThompson) inicuDao.saveObject(thompsonObj);
						currentObj.setThompsonscoreid(thompsonObj.getThompsonscoreid().toString());
					} catch (Exception e) {
						e.printStackTrace();
					}
				}

				// save levene score
				if (commmonObj.isLeveneFlag()) {
					ScoreLevene leveneObj = commmonObj.getLeveneObj().getScoreLeveneObj();
					leveneObj.setUhid(cnsSystemObj.getUhid());

					try {
						leveneObj = (ScoreLevene) inicuDao.saveObject(leveneObj);
						currentObj.setLevenescoreid(leveneObj.getLevenescoreid().toString());
					} catch (Exception e) {
						e.printStackTrace();
					}
				}

				// save sarnat score
				if (!BasicUtils.isEmpty(cnsSystemObj.getCNSEventObject().getCommonEventsInfo().getIsSarnatScore())
						&& cnsSystemObj.getCNSEventObject().getCommonEventsInfo().getIsSarnatScore() == true) {

					if (!BasicUtils.isEmpty(cnsSystemObj.getCNSEventObject().getCommonEventsInfo().getSarnatScoreObj()
							.getSarnatScore())) {
						ScoreSarnat scoreSarnat = cnsSystemObj.getCNSEventObject().getCommonEventsInfo()
								.getSarnatScoreObj();
						scoreSarnat.setUhid(cnsSystemObj.getUhid());
						try {
							scoreSarnat = (ScoreSarnat) inicuDao.saveObject(scoreSarnat);
						} catch (Exception e) {
							e.printStackTrace();
						}
						if (!BasicUtils.isEmpty(scoreSarnat) && !BasicUtils.isEmpty(scoreSarnat.getSarnatscoreid())) {
							currentObj.setSarnatscoreid(scoreSarnat.getSarnatscoreid().toString());
						}
					}

				}

				NurseExecutionOrders order = new NurseExecutionOrders();
				String userId = "";
				// set progress notes
				if (!BasicUtils.isEmpty(currentObj.getProgressnotes()) && currentObj.getProgressnotes().indexOf(currentObj.getLoggeduser())==-1) {
					currentObj.setProgressnotes(currentObj.getProgressnotes());
					order.setLoggeduser(currentObj.getLoggeduser());
					userId = currentObj.getLoggeduser();
				}

				if(!BasicUtils.isEmpty(currentObj.getOtherplanComments())) {
					order.setEventname("Asphyxia");
					order.setIsExecution(false);
					order.setOrderText(currentObj.getOtherplanComments());
					order.setAssessmentdate(currentObj.getAssessmentTime());
					order.setUhid(currentObj.getUhid());
					inicuDao.saveObject(order);
				}

				try {
					if (!BasicUtils.isEmpty(currentObj.getIsNewEntry())) {
						if (currentObj.getIsNewEntry()) {
							currentObj.setSacnsasphyxiaid(null);
							currentObj.setCreationtime(null);
						} else {
							currentObj.setSacnsasphyxiaid(currentObj.getSacnsasphyxiaid());
							currentObj.setCreationtime(currentObj.getCreationtime());
						}
					}
					currentObj = (SaCnsAsphyxia) inicuDao.saveObject(currentObj);
				} catch (Exception e) {
					e.printStackTrace();
				}

				// save the Hypothermia
				if (currentObj.getSacnsasphyxiaid() != null
						&& currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)
						&& cnsSystemObj.getCNSEventObject().getAsphyxiaEvent().getTherapeuticHypothermiaSelected()) {

					TherapeuticHypothermia currentHypoObject = cnsSystemObj.getCNSEventObject().getAsphyxiaEvent()
							.getTherapeuticHypothermiaEvent().getCurrentEvent().getTherapeutic_hypothermia_object();

					String uhid = cnsSystemObj.getUhid();
					String loggedUser = cnsSystemObj.getLoggedUser();
					currentHypoObject.setAsphyxiaid(currentObj.getSacnsasphyxiaid().toString());
					currentHypoObject.setLoggeduser(loggedUser);
					currentHypoObject.setUhid(uhid);

//                    if (commmonObj.isLeveneFlag()) {
//                        ScoreLevene leveneObj = commmonObj.getLeveneObj().getScoreLeveneObj();
//                        currentHypoObject.setLevenescoreid(leveneObj.getLevenescoreid().toString());
//                    }

					try {
						currentHypoObject = (TherapeuticHypothermia) inicuDao.saveObject(currentHypoObject);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}

				// save order investigation...
				if (currentObj.getSacnsasphyxiaid() != null
						&& currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {

					List<BabyPrescription> prescriptionList = cnsSystemObj.getCNSEventObject().getAsphyxiaEvent()
							.getPrescriptionList();
					if (!BasicUtils.isEmpty(prescriptionList)) {
						this.savePrescriptionList(null, prescriptionList, "Asphyxia", currentObj.getSacnsasphyxiaid(),
								currentObj.getAssessmentTime());
					}

					saveOrderInvestigation(cnsSystemObj.getDropDowns().getOrders(), currentObj.getSacnsasphyxiaid(),
							cnsSystemObj.getUhid(), cnsSystemObj.getLoggedUser(), "Asphyxia",
							currentObj.getAssessmentTime());

					// save resp suport
					RespSupport respSupport = cnsSystemObj.getCNSEventObject().getCommonEventsInfo().getRespSupport();
					respSupport.setEventid(currentObj.getSacnsasphyxiaid().toString());
					respSupport.setEventname("Asphyxia");
					respSupport.setUhid(cnsSystemObj.getUhid());
					respSupport.setCreationtime(currentObj.getAssessmentTime());
					respSupport.setModificationtime(currentObj.getAssessmentTime());

					String treatmentStr = currentObj.getTreatmentaction();
					if (BasicUtils.isEmpty(treatmentStr) || !treatmentStr.contains("TRE075")) {
						if (BasicUtils.isEmpty(respSupport.getIsactive()) || respSupport.getIsactive() == true) {
							respSupport.setIsactive(false);
							respSupport.setRsVentType(null);
							respSupport = (RespSupport) inicuDao.saveObject(respSupport);
							order = new NurseExecutionOrders();
							order.setEventname("Respiratory Support");
							order.setIsExecution(false);
							order.setOrderText("Baby is removed from Respiratory Support");
							order.setAssessmentdate(currentObj.getAssessmentTime());
							order.setUhid(currentObj.getUhid());
							order.setLoggeduser(userId);
							inicuDao.saveObject(order);

						}
					} else if (treatmentStr.contains("TRE075")) {
						respSupport.setIsactive(true);
						if(!BasicUtils.isEmpty(respSupport.getRsVentType())) {

							String result = "";
							String respSupportSql = "select obj from RespSupport obj where uhid='" + currentObj.getUhid() + "' order by creationtime desc";
							List<RespSupport> respSupportList = inicuDao.getListFromMappedObjQuery(respSupportSql);
							if (!BasicUtils.isEmpty(respSupportList)) {
								RespSupport resp1 = respSupportList.get(0);
								if(!BasicUtils.isEmpty(resp1.getIsactive()) && !resp1.getIsactive()){
									result = "Started";
								}else if(!BasicUtils.isEmpty(resp1.getIsactive()) && resp1.getIsactive()) {
									if(!BasicUtils.isEmpty(resp1.getRsVentType()) && !resp1.getRsVentType().equalsIgnoreCase(respSupport.getRsVentType())) {
										result = "Changed";
									}
								}
							}

							if(!BasicUtils.isEmpty(result)) {

								order = new NurseExecutionOrders();
								order.setEventname("Respiratory Support");
								order.setIsExecution(false);
								if(result.equalsIgnoreCase("Started"))
									order.setOrderText("Started on " + respSupport.getRsVentType());
								else
									order.setOrderText("Respiratory Support is changed to " + respSupport.getRsVentType());
								order.setAssessmentdate(currentObj.getAssessmentTime());
								order.setUhid(currentObj.getUhid());
								order.setLoggeduser(userId);
								inicuDao.saveObject(order);
							}
						}
						respSupport = (RespSupport) inicuDao.saveObject(respSupport);

					}

				}
			} else {
				SaCnsAsphyxia asphyxia = new SaCnsAsphyxia();
				asphyxia.setUhid(cnsSystemObj.getUhid());
				String uhid = asphyxia.getUhid();
				asphyxia.setLoggeduser(cnsSystemObj.getLoggedUser());
				asphyxia.setAgeatonset(currentObj.getAgeatonset().toString());
				asphyxia.setAgeinhoursdays(currentObj.getAgeinhoursdays());
				asphyxia.setAgeatassesment(currentObj.getAgeatassesment());
				asphyxia.setIsageofassesmentinhours(currentObj.getIsageofassesmentinhours());
				asphyxia.setMedicationStr(currentObj.getMedicationStr());
				asphyxia.setProgressnotes(currentObj.getProgressnotes());
				if (!BasicUtils.isEmpty(asphyxia.getProgressnotes()) && asphyxia.getProgressnotes().indexOf(asphyxia.getLoggeduser())==-1) {
					asphyxia.setProgressnotes(asphyxia.getProgressnotes());
				}
				asphyxia.setEventstatus(currentObj.getEventstatus());
				asphyxia.setAssessmentTime(currentObj.getAssessmentTime());
				asphyxia.setAssessmentDate(currentObj.getAssessmentDate());
				asphyxia.setAssessmentHour(currentObj.getAssessmentHour());
				asphyxia.setAssessmentMin(currentObj.getAssessmentMin());
				asphyxia.setEpisodeNumber(currentObj.getEpisodeNumber());
				if (currentObj.getEventstatus().equalsIgnoreCase("inactive")) {
					List<BabyPrescription> prescriptionList = cnsSystemObj.getCNSEventObject().getAsphyxiaEvent()
							.getPrescriptionList();
					String continuedMedication = "";
					if (!BasicUtils.isEmpty(prescriptionList)) {
						for (int i = 0; i < prescriptionList.size(); i++) {
							BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
							if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
									&& babyPrescription.getContinueReason() != null && babyPrescription.getIsactive()) {
								continuedMedication += babyPrescription.getMedicinename() + " ";
								if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
									continuedMedication += babyPrescription.getDose() + "("
											+ babyPrescription.getDose_unit() + "/"
											+ babyPrescription.getDose_unit_time() + ") ";
								}
								continuedMedication += "prescribed on "
										+ getDateFromTimestamp(babyPrescription.getStartdate())
										+ " and continued due to " + babyPrescription.getContinueReason() + ". ";
							}
						}
						this.savePrescriptionList(null, prescriptionList, "Asphyxia", null,
								asphyxia.getAssessmentTime());
					}
					asphyxia.setProgressnotes(cnsSystemObj.getCNSEventObject().getAsphyxiaEvent().getInactiveProgressNote());
				}
				try {
					if (!BasicUtils.isEmpty(currentObj.getIsNewEntry())) {
						if (currentObj.getIsNewEntry()) {
							asphyxia.setSacnsasphyxiaid(null);
							asphyxia.setCreationtime(null);
							asphyxia = (SaCnsAsphyxia) inicuDao.saveObject(asphyxia);
						} else {
							asphyxia.setSacnsasphyxiaid(currentObj.getSacnsasphyxiaid());
							asphyxia.setCreationtime(currentObj.getCreationtime());
							
							 try {
			                        String query = "update sa_cns_asphyxia set progressnotes = '" + asphyxia.getProgressnotes().toString()
			                                + "' where sacnsasphyxiaid = '" + currentObj.getSacnsasphyxiaid()  + "'";
			                        inicuDao.updateOrDeleteNativeQuery(query);
			                    } catch (Exception ex) {
			                        ex.printStackTrace();
			                        System.out.println("Exception occured while updating progressnotes for inactive state");
			                    }
						}
					}
					if (asphyxia.getEventstatus().equalsIgnoreCase("Inactive")) {
					    try {
	                        String query = "update respsupport set eventid = '" + asphyxia.getSacnsasphyxiaid().toString()
	                                + "', is_eventid_updated = 'true' where respsupportid = (select respsupportid from respsupport where uhid='" + uhid
	                                + "' and eventname = 'Asphyxia' and is_eventid_updated = 'false' order by creationtime desc limit 1)";
	                        inicuDao.updateOrDeleteNativeQuery(query);
	                    } catch (Exception ex) {
	                        ex.printStackTrace();
	                        System.out.println("Exception occured while updating eventid in resp support for inactive state");
	                        logger.error("Exception occured while updating eventid in resp support for inactive state", ex);
	                    }

//					    if (!BasicUtils.isEmpty(respSystem.getRespSystemObject().getRespiratoryDistress().getPastRespDistress())) {
//	                        updatePastRDSProgressNotes(currentRespiratoryDistress,
//	                                respSystem.getRespSystemObject().getRespiratoryDistress().getPastRespDistress());
//	                    }
					}
					if (asphyxia.getSacnsasphyxiaid() != null) {
						if (asphyxia.getEventstatus().equalsIgnoreCase("No")) {
							List<BabyPrescription> prescriptionList = cnsSystemObj.getCNSEventObject()
									.getAsphyxiaEvent().getPrescriptionList();
							if (!BasicUtils.isEmpty(prescriptionList)) {
								this.savePrescriptionList(null, prescriptionList, "Asphyxia",
										asphyxia.getSacnsasphyxiaid(), asphyxia.getAssessmentTime());
							}

							saveOrderInvestigation(cnsSystemObj.getDropDowns().getOrders(),
									asphyxia.getSacnsasphyxiaid(), cnsSystemObj.getUhid(), cnsSystemObj.getLoggedUser(),
									"Asphyxia", currentObj.getAssessmentTime());
						}
						if (cnsSystemObj.getCNSEventObject().isStopTreatmentFlag()) {
							RespSupport respSupport = cnsSystemObj.getCNSEventObject().getCommonEventsInfo()
									.getRespSupport();
							respSupport.setEventid(asphyxia.getSacnsasphyxiaid().toString());
							respSupport.setEventname("Asphyxia");
							respSupport.setUhid(cnsSystemObj.getUhid());
							respSupport.setCreationtime(currentObj.getAssessmentTime());
							respSupport.setModificationtime(currentObj.getAssessmentTime());
							respSupport.setIsactive(false);
							respSupport.setRsVentType(null);
							respSupport = (RespSupport) inicuDao.saveObject(respSupport);
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}

			response.setMessage("Asphyxia saved successfully..!!");
			response.setType(BasicConstants.MESSAGE_SUCCESS);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return response;
	}
	/**
	*
	*
	*Purpose: Fixes in IVH assessment

	*@Updated on: June 28 2019
	*@author: Shweta Nichani Mohanani
	*/
	private ResponseMessageWithResponseObject saveCnsIvhEvent(AssessmentCNSSystemPOJO cnsSystemObj) throws Exception {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();

		try {
			SaCnsIvh currentObj = cnsSystemObj.getCNSEventObject().getIvhEvent().getCurrentEvent().getCurrentIvh();
			currentObj.setUhid(cnsSystemObj.getUhid());
			currentObj.setLoggeduser(cnsSystemObj.getLoggedUser());
			currentObj.setAgeatonset(cnsSystemObj.getAgeAtOnset().toString());
			if (BasicUtils.isEmpty(currentObj.getEpisodeid()) && !BasicUtils.isEmpty(currentObj.getUhid())) {
				String queryAssociatedEvents = "select episodeid from sa_cns_ivh where uhid='"
						+ currentObj.getUhid() + "' order by creationtime desc";
				List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

				if (!BasicUtils.isEmpty(listAssociatedEvents)) {
					currentObj.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
				}
			}
			Timestamp assessmentTime = currentObj.getAssessmentTime();

			if (!BasicUtils.isEmpty(assessmentTime)) {
				currentObj.setAssessmentTime(assessmentTime);
			}

			if (currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {
				// save ivh event in case of event status yes
				if (!currentObj.getAgeinhoursdays()) {
					Integer ageonSet = Integer.parseInt(cnsSystemObj.getAgeAtOnset().toString());
					ageonSet = (int) Math.round(ageonSet / 24.0);
					currentObj.setAgeatonset(ageonSet.toString());
				} else {
					currentObj.setAgeatonset(cnsSystemObj.getAgeAtOnset().toString());
				}

				// set causes
				if (!BasicUtils.isEmpty(currentObj.getCauseofIvhList())) {
					currentObj.setCauseofIvh(currentObj.getCauseofIvhList().toString());
				}

				// set treatments
				if (!BasicUtils.isEmpty(currentObj.getTreatmentactionList())) {
					currentObj.setTreatmentaction(currentObj.getTreatmentactionList().toString());
				}

				// set plans
				if (!BasicUtils.isEmpty(currentObj.getTreatmentplanList())) {
					currentObj.setTreatmentplan(currentObj.getTreatmentplanList().toString());
				}

				if (!BasicUtils.isEmpty(currentObj.getRiskfactorList())) {
					currentObj.setRiskfactor(currentObj.getRiskfactorList().toString());
				}

				if (!BasicUtils.isEmpty(cnsSystemObj.getCNSEventObject().getCommonEventsInfo().getIsScoreIvh())
						&& cnsSystemObj.getCNSEventObject().getCommonEventsInfo().getIsScoreIvh() == true) {

					if (!BasicUtils.isEmpty(
							cnsSystemObj.getCNSEventObject().getCommonEventsInfo().getScoreIvh().getIvhscore())) {
						ScoreIVH scoreIVH = cnsSystemObj.getCNSEventObject().getCommonEventsInfo().getScoreIvh();
						scoreIVH.setUhid(cnsSystemObj.getUhid());
						try {
							scoreIVH = (ScoreIVH) inicuDao.saveObject(scoreIVH);
						} catch (Exception e) {
							e.printStackTrace();
						}
						if (!BasicUtils.isEmpty(scoreIVH) && !BasicUtils.isEmpty(scoreIVH.getIvhscoreid())) {
							currentObj.setVolpescoreId(scoreIVH.getIvhscoreid().toString());
						}
					}

				}

				if (!BasicUtils.isEmpty(cnsSystemObj.getCNSEventObject().getCommonEventsInfo().getIsScorePapile())
						&& cnsSystemObj.getCNSEventObject().getCommonEventsInfo().getIsScorePapile() == true) {

					if (!BasicUtils.isEmpty(
							cnsSystemObj.getCNSEventObject().getCommonEventsInfo().getScorePapile().getPapilescore())) {
						ScorePapile scorePapile = cnsSystemObj.getCNSEventObject().getCommonEventsInfo()
								.getScorePapile();
						scorePapile.setUhid(cnsSystemObj.getUhid());
						try {
							scorePapile = (ScorePapile) inicuDao.saveObject(scorePapile);
						} catch (Exception e) {
							e.printStackTrace();
						}
						if (!BasicUtils.isEmpty(scorePapile) && !BasicUtils.isEmpty(scorePapile.getPapilescoreid())) {
							currentObj.setPapilescoreId(scorePapile.getPapilescoreid().toString());
						}
					}

				}

				/*
				 * if(!BasicUtils.isEmpty(cnsSystemObj.getCNSEventObject().
				 * getCommonEventsInfo() .getIsSarnatScore()) &&
				 * cnsSystemObj.getCNSEventObject().getCommonEventsInfo(). getIsSarnatScore()==
				 * true){
				 *
				 * if(!BasicUtils.isEmpty(cnsSystemObj.getCNSEventObject().
				 * getCommonEventsInfo() .getSarnatScoreObj().getSarnatScore())){ ScoreSarnat
				 * scoreSarnat = cnsSystemObj.getCNSEventObject().getCommonEventsInfo().
				 * getSarnatScoreObj(); scoreSarnat.setUhid(cnsSystemObj.getUhid()); try{
				 * scoreSarnat = (ScoreSarnat) inicuDao.saveObject(scoreSarnat); } catch
				 * (Exception e) { e.printStackTrace(); } if(!BasicUtils.isEmpty(scoreSarnat) &&
				 * !BasicUtils.isEmpty(scoreSarnat.getSarnatscoreid())){
				 * //currentObj.setPapilescoreId(scoreSarnat.getSarnatscoreid(). toString()); }
				 * }
				 *
				 * }
				 */

				NurseExecutionOrders order = new NurseExecutionOrders();


				if(!BasicUtils.isEmpty(currentObj.getOthercomments())) {
					order.setEventname("IVH");
					order.setIsExecution(false);
					order.setOrderText(currentObj.getOthercomments());
					order.setAssessmentdate(currentObj.getAssessmentDate());
					order.setUhid(currentObj.getUhid());
					inicuDao.saveObject(order);
				}

				try {
					currentObj = (SaCnsIvh) inicuDao.saveObject(currentObj);
				} catch (Exception e) {
					e.printStackTrace();
				}

				if (currentObj.getSacnsivhid() != null
						&& currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {

					  List<BabyPrescription> prescriptionList = cnsSystemObj.getCNSEventObject().getEncephalopathyEvent()
	                            .getPrescriptionList();
	                    if (!BasicUtils.isEmpty(prescriptionList)) {
	                        this.savePrescriptionList(null, prescriptionList, "IVH",
	                                currentObj.getSacnsivhid(), currentObj.getAssessmentDate());
	                    }

					// save order investigation...
					saveOrderInvestigation(cnsSystemObj.getDropDowns().getOrders(), currentObj.getSacnsivhid(),
							cnsSystemObj.getUhid(), cnsSystemObj.getLoggedUser(), "IVH", currentObj.getAssessmentDate());

					if (!BasicUtils.isEmpty(currentObj.getTreatmentaction())
							&& currentObj.getTreatmentaction().contains("TRE067")) {
						RespSupport respSupport = cnsSystemObj.getCNSEventObject().getCommonEventsInfo()
								.getRespSupport();
						respSupport.setEventid(currentObj.getSacnsivhid().toString());
						respSupport.setEventname("IVH");
						respSupport.setUhid(cnsSystemObj.getUhid());
						respSupport.setCreationtime(currentObj.getAssessmentDate());
						respSupport.setModificationtime(currentObj.getAssessmentDate());
						respSupport.setIsactive(true);
						respSupport = (RespSupport) inicuDao.saveObject(respSupport);
					} else {
						RespSupport respSupport = cnsSystemObj.getCNSEventObject().getCommonEventsInfo()
								.getRespSupport();
						if (BasicUtils.isEmpty(respSupport.getIsactive()) || respSupport.getIsactive() == true) {
							respSupport.setEventid(currentObj.getSacnsivhid().toString());
							respSupport.setEventname("IVH");
							respSupport.setUhid(cnsSystemObj.getUhid());
							respSupport.setIsactive(false);
							respSupport.setCreationtime(currentObj.getAssessmentDate());
							respSupport.setModificationtime(currentObj.getAssessmentDate());
							respSupport.setRsVentType(null);
							respSupport = (RespSupport) inicuDao.saveObject(respSupport);
						}
					}
				}

			} else {

				////
				SaCnsIvh ivh = new SaCnsIvh();
				ivh.setUhid(cnsSystemObj.getUhid());
				String uhid = ivh.getUhid();
				ivh.setLoggeduser(cnsSystemObj.getLoggedUser());
				ivh.setAgeatonset(currentObj.getAgeatonset().toString());
				ivh.setAgeinhoursdays(currentObj.getAgeinhoursdays());
				ivh.setAgeatassesment(currentObj.getAgeatassesment());
				ivh.setIsageofassesmentinhours(currentObj.getIsageofassesmentinhours());
				if (currentObj.getEventstatus().equalsIgnoreCase("No")) {
					ivh.setProgressnotes("IVH has resolved,Baby is under observation.");

					// set progress notes
					if (!BasicUtils.isEmpty(ivh.getProgressnotes())) {
						ivh.setProgressnotes(ivh.getProgressnotes());
					}
				}
				ivh.setEventstatus(currentObj.getEventstatus());
				// ivh.setAgeatassesment(currentObj.getAgeatassesment());
				// ivh.setIsageofassesmentinhours(currentObj.getIsageofassesmentinhours());
				ivh.setAssessmentTime(currentObj.getAssessmentTime());
				ivh.setAssessmentDate(currentObj.getAssessmentDate());
				ivh.setAssessmentHour(currentObj.getAssessmentHour());
				ivh.setAssessmentMin(currentObj.getAssessmentMin());
				ivh.setEpisodeNumber(currentObj.getEpisodeNumber());

				if (currentObj.getEventstatus().equalsIgnoreCase("inactive")) {
					List<BabyPrescription> prescriptionList = cnsSystemObj.getCNSEventObject().getIvhEvent()
							.getPrescriptionList();
					String continuedMedication = "";
					if (!BasicUtils.isEmpty(prescriptionList)) {
						for (int i = 0; i < prescriptionList.size(); i++) {
							BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
							if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
									&& babyPrescription.getContinueReason() != null && babyPrescription.getIsactive()) {
								continuedMedication += babyPrescription.getMedicinename() + " ";
								if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
									continuedMedication += babyPrescription.getDose() + "("
											+ babyPrescription.getDose_unit() + "/"
											+ babyPrescription.getDose_unit_time() + ") ";
								}
								continuedMedication += "prescribed on "
										+ getDateFromTimestamp(babyPrescription.getStartdate())
										+ " and continued due to " + babyPrescription.getContinueReason() + ". ";
							}
						}
						this.savePrescriptionList(null, prescriptionList, "IVH", null, ivh.getAssessmentTime());
					}
					ivh.setProgressnotes(generateInactiveNotesIVH(null, uhid, continuedMedication));
				}
				try {
					ivh = (SaCnsIvh) inicuDao.saveObject(ivh);
					if (ivh.getSacnsivhid() != null) {
						if (ivh.getEventstatus().equalsIgnoreCase("No")) {
							List<BabyPrescription> prescriptionList = cnsSystemObj.getCNSEventObject()
									.getAsphyxiaEvent().getPrescriptionList();
							if (!BasicUtils.isEmpty(prescriptionList)) {
								this.savePrescriptionList(null, prescriptionList, "IVH", ivh.getSacnsivhid(),
										ivh.getAssessmentTime());
							}

							saveOrderInvestigation(cnsSystemObj.getDropDowns().getOrders(), ivh.getSacnsivhid(),
									cnsSystemObj.getUhid(), cnsSystemObj.getLoggedUser(), "IVH",
									currentObj.getAssessmentTime());
						}
						if (cnsSystemObj.getCNSEventObject().isStopTreatmentFlag()) {
							RespSupport respSupport = cnsSystemObj.getCNSEventObject().getCommonEventsInfo()
									.getRespSupport();
							respSupport.setEventid(ivh.getSacnsivhid().toString());
							respSupport.setEventname("IVH");
							respSupport.setUhid(cnsSystemObj.getUhid());
							respSupport.setCreationtime(currentObj.getAssessmentTime());
							respSupport.setModificationtime(currentObj.getAssessmentTime());
							respSupport.setIsactive(false);
							respSupport.setRsVentType(null);
							respSupport = (RespSupport) inicuDao.saveObject(respSupport);
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			response.setMessage("IVH saved successfully..!!");
			response.setType(BasicConstants.MESSAGE_SUCCESS);

		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return response;
	}

	private List<VwAssociatedEvents> getAssessmentAssociatedEvents(String uhid) {

		List<VwAssociatedEvents> associatedEventsOptions = new ArrayList<>();
		/*
		 * String fetchAssociatedEvents =
		 * "Select obj from VwAssociatedEvents as obj where uhid='" + uhid + "'";
		 * List<VwAssociatedEvents> associatedEvents =
		 * inicuDao.getListFromMappedObjQuery(fetchAssociatedEvents); if
		 * (!BasicUtils.isEmpty(associatedEvents)) { associatedEventsOptions =
		 * associatedEvents.get(0); }
		 */
		return associatedEventsOptions;

	}

	private void PopulateInvestigationOrderedCns(VwAssesmentCnsFinal vwAssesmentcnsFinal)
	{
		String res = "";
		String notes = vwAssesmentcnsFinal.getProgressnotes();
		if(notes.contains("Investigation ordered :")) {
			String firstString = "Investigation ordered :";
			String secondstring = ".";
			Pattern p = Pattern.compile(Pattern.quote(firstString)+"(.*?)"+Pattern.quote(secondstring));
			Matcher m = p.matcher(notes);
			while(m.find())
			{
				res+=m.group(1)+",";
			}
		}
		else if(notes.contains("Investigation ordered are"))
		{
			String firstString = "Investigation ordered are";
			String secondstring = ".";
			Pattern p = Pattern.compile(Pattern.quote(firstString)+"(.*?)"+Pattern.quote(secondstring));
			Matcher m = p.matcher(notes);
			while(m.find())
			{
				res+=m.group(1)+",";
			}
		}
		else if(notes.contains("Investigation ordered is")) {
			String firstString = "Investigation ordered is";
			String secondstring = ".";
			Pattern p = Pattern.compile(Pattern.quote(firstString)+"(.*?)"+Pattern.quote(secondstring));
			Matcher m = p.matcher(notes);
			while(m.find())
			{
				res+=m.group(1)+",";
			}
		}
		if(res!=null && res.length()>0){
			res = res.substring(0,res.length()-1);
		}
		vwAssesmentcnsFinal.setOrderlist(res);


	}
	private void PopulateCauseListCNS(VwAssesmentCnsFinal vwAssesmentcnsFinal)
	{
		String causeStr = vwAssesmentcnsFinal.getCauseList();
		if (!BasicUtils.isEmpty(causeStr)) {
			String[] listCause = causeStr.replace(" ", "").trim().replace("[", "").replace("]", "")
					.split(",");
			ArrayList<String> listCauseArray = new ArrayList<String>(Arrays.asList(listCause));
			String tempcause = "";
			for(int i=0;i<listCauseArray.size();i++)
			{
				String fetchQuery = "SELECT causeofcns from ref_causeofcns where causeofcnsid='"+listCauseArray.get(i)+"'";

				List res = inicuDao.getListFromNativeQuery(fetchQuery);
				if(!BasicUtils.isEmpty(res))
				{
					if(i==listCauseArray.size()-1)
					{
						tempcause+=res.get(0).toString();
					}
					else
					{
						tempcause+=res.get(0).toString()+",";
					}
				}
			}
			if(tempcause!=null && tempcause.length()>0){
				tempcause = tempcause.substring(0,tempcause.length()-1);
			}
			vwAssesmentcnsFinal.setCauseList(tempcause);

		}
	}

	private void PopulateTreatmentCns(VwAssesmentCnsFinal vwAssesmentcnsFinal)
	{
		String TreatmentStr = vwAssesmentcnsFinal.getTreatment();
		if (!BasicUtils.isEmpty(TreatmentStr)) {
			String[] listTreatment = TreatmentStr.replace(" ", "").trim().replace("[", "").replace("]", "")
					.split(",");
			ArrayList<String> listTreatmentArray = new ArrayList<String>(Arrays.asList(listTreatment));
			String temptreatment = "";
			for(int i=0;i<listTreatmentArray.size();i++)
			{
				String fetchQuery = "SELECT treatment from ref_assesment_treatment where assesmenttreatmentid='"+listTreatmentArray.get(i)+"'";

				List res = inicuDao.getListFromNativeQuery(fetchQuery);
				if(!BasicUtils.isEmpty(res))
				{
					if(i==listTreatmentArray.size()-1)
					{
						temptreatment+=res.get(0).toString();
					}
					else
					{
						temptreatment+=res.get(0).toString()+",";
					}
				}
			}
			vwAssesmentcnsFinal.setTreatment(temptreatment);
		}
	}

	private List<VwAssesmentCnsFinal> getCnsPastHistory(String uhid) {
		List<VwAssesmentCnsFinal> pastHistory = new ArrayList<>();
		try {
			String queryCnsPastHistory = "Select obj from VwAssesmentCnsFinal as obj where uhid='" + uhid
					+ "' order by creationtime desc, id desc, event desc";
			pastHistory = inicuDao.getListFromMappedObjQuery(queryCnsPastHistory);
			for(VwAssesmentCnsFinal vwAssesmentCnsFinal : pastHistory)
			{
				PopulateInvestigationOrderedCns(vwAssesmentCnsFinal);
				PopulateCauseListCNS(vwAssesmentCnsFinal);
				PopulateTreatmentCns(vwAssesmentCnsFinal);

			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return pastHistory;
	}

	private Integer getLastIvhScore(String uhid, String scoreId) {
		Integer ivhScore = null;

		String fetchIvhScore = "SELECT obj FROM ScoreIVH as obj where uhid='" + uhid + "' and ivhscoreid='" + scoreId
				+ "' order by creationtime desc";
		List<ScoreIVH> ivhScoreList = inicuDao.getListFromMappedObjQuery(fetchIvhScore);
		if (!BasicUtils.isEmpty(ivhScoreList)) {
			if (ivhScoreList.get(0).getIvhscore() != null) {
				ivhScore = ivhScoreList.get(0).getIvhscore();
			}
		}
		return ivhScore;
	}

	private Integer getLastPapileScore(String uhid, String scoreId) {
		Integer papileScore = null;

		String fetchPapileScore = "SELECT obj FROM ScorePapile as obj where uhid='" + uhid + "' and papilescoreid='"
				+ scoreId + "' order by creationtime desc";
		List<ScorePapile> papileScoreList = inicuDao.getListFromMappedObjQuery(fetchPapileScore);
		if (!BasicUtils.isEmpty(papileScoreList)) {
			if (papileScoreList.get(0).getPapilescore() != null) {
				papileScore = papileScoreList.get(0).getPapilescore();
			}
		}
		return papileScore;
	}

	private List<String> getTime(String string) {
		List<String> hours = new ArrayList<String>();
		List<String> minutes = new ArrayList<String>();
		List<String> seconds = new ArrayList<String>();
		if (string.equalsIgnoreCase(BasicConstants.HOURS)) {
			for (int i = 0; i <= 12; i++) {
				if (i < 10) {
					hours.add("0" + i);
				} else {
					hours.add(String.valueOf(i));
				}
			}
			return hours;
		} else if (string.equalsIgnoreCase(BasicConstants.MINUTES)) {
			for (int i = 0; i <= 59; i++) {
				if (i < 10) {
					minutes.add("0" + i);
				} else {
					minutes.add(String.valueOf(i));
				}
			}
			return minutes;
		} else if (string.equalsIgnoreCase(BasicConstants.SECONDS)) {
			for (int i = 0; i <= 59; i++) {
				if (i < 10) {
					seconds.add("0" + i);
				} else {
					seconds.add(String.valueOf(i));
				}
			}
			return seconds;
		}
		return null;
	}

	@Override
	public AssessmentInfectionSystemPOJO getInfectSystemObj(String uhid, String loggedUser) {
		// TODO Auto-generated method stub
		AssessmentInfectionSystemPOJO infectObj = new AssessmentInfectionSystemPOJO();
		InfectionSystemEventPOJO infectSystemEventObj = new InfectionSystemEventPOJO();
		int offset = TimeZone.getTimeZone(BasicConstants.CLIENT_TIME_ZONE).getRawOffset()
				- TimeZone.getDefault().getRawOffset();


		infectObj.setInfectionEventObject(infectSystemEventObj);
		Object ageAtOnset = 0;
		try {
			infectObj.setDropDowns(getInfectionSystemDropdowns(uhid));

			infectObj.getInfectionEventObject().getCommonEventsInfo()
					.setPastInfectionHistory(getInfectionPastHistory(uhid));

			// current Medicine list
			DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date currentDate1 = new Date();
			System.out.println(dateFormat.format(currentDate1));
			String currentDateFinal = dateFormat.format(currentDate1);

			String calDate = CalculateDate48HoursAgo(currentDate1);
			infectSystemEventObj.getCommonEventsInfo()
					.setPastPrescriptionList(getPastPrescriptionList(uhid, calDate, currentDateFinal));

			HashMap<Object, Object> babyBasicInformation = getBabyInformation(uhid);
			ageAtOnset = babyBasicInformation.get(BasicConstants.AGE_AT_ONSET);
			infectObj.setAgeAtOnset(ageAtOnset.toString());

			String downeScoreQuery = "Select obj from ScoreDownes as obj where uhid='" + uhid
					+ "' order by creationtime desc";
			List<ScoreDownes> scoreDownesList = inicuDao.getListFromMappedObjQuery(downeScoreQuery);
			if (!BasicUtils.isEmpty(scoreDownesList)) {
				infectSystemEventObj.getCommonEventsInfo().setDowneScoreObj(scoreDownesList.get(0));
			}

		} catch (Exception e) {
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser, uhid,
					"Getting Infection System", BasicUtils.convertErrorStacktoString(e));
		}


		// Sepsis
		try {
			SepsisEventPOJO sepsisEventObj = new SepsisEventPOJO();
			sepsisEventObj.setPastSepsisList(getSepsisPastList(uhid));
			SaSepsis currentSepsis = sepsisEventObj.getCurrentEvent();
			SaSepsis sepsis = new SaSepsis();

			List<SaSepsis> list = getRiskPastListSepsis(uhid);
			if(!BasicUtils.isEmpty(list)) {
				sepsis = getRiskPastListSepsis(uhid).get(0);
				currentSepsis.setRiskfactor(sepsis.getRiskfactor());
			}

			String fetchNursingVitals = "Select obj from NursingVitalparameter as obj where uhid='" + uhid
					+ "' order by creationtime desc";
			List<NursingVitalparameter> listVitals = inicuDao.getListFromMappedObjQuery(fetchNursingVitals);
			if (!BasicUtils.isEmpty(listVitals)) {

				if (!BasicUtils.isEmpty(listVitals.get(0).getCft())) {
					Integer cft = Integer.parseInt(listVitals.get(0).getCft());
					currentSepsis.setShockCft(cft.toString());
				}

				if (!BasicUtils.isEmpty(listVitals.get(0).getSystBp())) {
					Integer systBp = Integer.parseInt(listVitals.get(0).getSystBp());
					currentSepsis.setShockSystbp(systBp.toString());
				}

				if (!BasicUtils.isEmpty(listVitals.get(0).getDiastBp())) {
					Integer diastBp = Integer.parseInt(listVitals.get(0).getDiastBp());
					currentSepsis.setShockDiastbp(diastBp.toString());
				}

				if (!BasicUtils.isEmpty(listVitals.get(0).getMeanBp())) {
					Integer meanBp = Integer.parseInt(listVitals.get(0).getMeanBp());
					currentSepsis.setShockBp(meanBp.toString());
				}

				if (!BasicUtils.isEmpty(listVitals.get(0).getHrRate())) {
					currentSepsis.setHeartrate(listVitals.get(0).getHrRate().toString());
					if (listVitals.get(0).getHrRate() > 180) {
						currentSepsis.setTachycardiaStatus(true);
					}
				}


				if (!BasicUtils.isEmpty(listVitals.get(0).getCentraltemp())) {
					Float diff = listVitals.get(0).getCentraltemp();
					currentSepsis.setTemperatureCelsius(diff.toString());
				}
				currentSepsis.setNursingVitalsList(listVitals);
			}

			String queryGetSepsis = "select obj from SaSepsis as obj where uhid='" + uhid
					+ "' order by assessmentTime desc, sasepsisid desc";
			List<SaSepsis> listSepsis = inicuDao.getListFromMappedObjQuery(queryGetSepsis);

			if (!BasicUtils.isEmpty(listSepsis)) {

				String eventStatus = listSepsis.get(0).getEventstatus();

				currentSepsis.setEventstatus(listSepsis.get(0).getEventstatus());


				sepsisEventObj.getPastEvents().setPastEventObj(listSepsis.get(0));
				sepsisEventObj.getPastEvents().setPastEventObjList(listSepsis);

				// get all investigation orders..
				String queryInvestigationOrdered = "select obj from InvestigationOrdered as obj where uhid='" + uhid
						+ "' and assesment_type = 'Sepsis' and assesmentid='" + listSepsis.get(0).getSasepsisid() + "'";
				List<InvestigationOrdered> listPastInvestigations = inicuDao
						.getListFromMappedObjQuery(queryInvestigationOrdered);
				sepsisEventObj.getPastEvents().setPastInvestigationsList(listPastInvestigations);


//                String querypresList = "select obj from BabyPrescription as obj where isactive = 'true' and uhid = '" + uhid
//                        + "' and eventname='Sepsis' order by creationtime desc";
//                List<BabyPrescription> pastPrescriptionSepsisList = inicuDao.getListFromMappedObjQuery(querypresList);
//                if (!BasicUtils.isEmpty(pastPrescriptionSepsisList)) {
//                    sepsisEventObj.setPrescriptionList(pastPrescriptionSepsisList);
//                }
			}
//
//			String query = "select obj from VwAntibioticDuration as obj where medicationtype = 'TYPE0001' and uhid = '" + uhid + "'";
//			List<VwAntibioticDuration> presList = inicuDao.getListFromMappedObjQuery(query);
//			int duration = 0 ;
			String sepsisType = "";
//
//			if(!BasicUtils.isEmpty(presList)) {
//				for(int i = 0; i< presList.size();i++) {
//
//					duration += presList.get(i).getAntibiotic_duration();
//
//				}
//			}

			int antibioticUsage = 0;

			Timestamp currentDate = null;
			Timestamp currentDateNew = new Timestamp(new Date().getTime());

			String medQuery = "select obj from BabyPrescription obj where uhid = '" + uhid + "' and medicationtype='TYPE0001' order by startdate asc";

			List<BabyPrescription> medList = inicuDao.getListFromMappedObjQuery(medQuery);

			for(BabyPrescription obj : medList) {

			if(!BasicUtils.isEmpty(obj.getMedicineOrderDate())) {

				if(BasicUtils.isEmpty(obj.getEnddate())){
					   obj.setEnddate(currentDateNew);
					}

			if(currentDate == null || (currentDate != null && obj.getStartdate().getTime() > currentDate.getTime())) {



			currentDate = obj.getEnddate();



			antibioticUsage += ((obj.getEnddate().getTime() - obj.getMedicineOrderDate().getTime()) / (24 * 60 * 60 * 1000));

			}else if(currentDate != null && obj.getEnddate().getTime() > currentDate.getTime()) {



			antibioticUsage += ((obj.getEnddate().getTime() - currentDate.getTime()) / (24 * 60 * 60 * 1000));

			currentDate = obj.getEnddate();

			}



			}





			}


			if(antibioticUsage >= 5) {
				sepsisType = "Clinical Sepsis";
			}

			if(antibioticUsage < 5) {
				sepsisType = "Suspected Sepsis";
			}
			currentSepsis.setSepsis_type(sepsisType);

			HashMap<Object, Object> babyInfo = getBabyInformation(uhid);
			if (babyInfo.get(BasicConstants.AGE_AT_ONSET) != null) {
				currentSepsis.setAgeinhoursdays(true);
				currentSepsis.setIsageofassesmentinhours(true);
				currentSepsis.setAgeatonset(babyInfo.get(BasicConstants.AGE_AT_ONSET).toString());
				currentSepsis.setAgeatassesment(Integer.parseInt(babyInfo.get(BasicConstants.AGE_AT_ONSET).toString()));
			}

			if (!BasicUtils.isEmpty(listSepsis)) {
				SaSepsis pastSepsis = listSepsis.get(0);
				// currentResp = new SaRespRds();
				currentSepsis.setAgeinhoursdays(true);
				currentSepsis.setEventstatus(pastSepsis.getEventstatus());
				currentSepsis.setEpisodeNumber(pastSepsis.getEpisodeNumber());

				if (!pastSepsis.getEventstatus().equalsIgnoreCase("Inactive")) {
					currentSepsis.setAgeatonset(pastSepsis.getAgeatonset());
					currentSepsis.setAgeinhoursdays(pastSepsis.getAgeinhoursdays());
				}
			}

			String sepsisQuery = "select obj from RefTestslist as obj where assesmentCategory!=null and assesmentCategory = 'Infection' and testname = 'Blood culture'";
			List<RefTestslist> listRefTests = inicuDao.getListFromMappedObjQuery(sepsisQuery);
			if(!BasicUtils.isEmpty(listRefTests)) {
				String fetchType = "SELECT vendortestid FROM TestslistMapping as obj WHERE obj.inicutestid='"
						+ listRefTests.get(0).getTestid().trim() + "'";
				List result = inicuDao.getListFromMappedObjQuery(fetchType);

				if(!BasicUtils.isEmpty(result)) {
					String queryMaxBloodculture = "select lab_report_date,value,organismnamedisplayname from test_result where testid = '" + result.get(0).toString().trim()
							+ "' and prn='" + uhid + "' and organismnamedisplayname!='' order by creationtime desc";
					Timestamp sepsisTime = null;
					String sepsisValue = null;

					List<Object[]> resultList = inicuDao.getListFromNativeQuery(queryMaxBloodculture);
					if (!BasicUtils.isEmpty(resultList)) {
						System.out.println(resultList);
						currentSepsis.setBloodCultureStatus("positive");
//						if (!BasicUtils.isEmpty(resultList.get(0))) {
//							if (!BasicUtils.isEmpty(resultList.get(0)[0])) {
//
//								sepsisTime = (Timestamp) (resultList.get(0)[0]);
//								currentSepsis.setBloodCultureStatus("negative");
//							}
//							if (!BasicUtils.isEmpty((resultList.get(0)[1]).toString())) {
//
//								sepsisValue = (resultList.get(0)[1]).toString();
//								currentSepsis.setBloodCultureStatus("positive");
//							}
//							if(!BasicUtils.isEmpty(resultList.get(0)[2])) {
//								sepsisValue = (resultList.get(0)[2]).toString();
//							}
//						}

					}

					String queryMaxBloodculture1 = "select lab_report_date,value,organismnamedisplayname from test_result where testid = '" + result.get(0).toString().trim()
							+ "' and prn='" + uhid + "' and value like '%No growth%' order by creationtime desc";
					List<Object[]> resultList1 = inicuDao.getListFromNativeQuery(queryMaxBloodculture1);
					if(!BasicUtils.isEmpty(resultList1)) {
						currentSepsis.setBloodCultureStatus("negative");

					}

					String getAllTestResults = "select lab_report_date,value,organismnamedisplayname,labobservationname,unit from test_result where testid = '" + result.get(0).toString().trim() + "' and prn = '" + uhid + "'";
					List<Object[]> allResults = inicuDao.getListFromNativeQuery(getAllTestResults);
					if(!BasicUtils.isEmpty(allResults)) {
						for(int i=0;i<allResults.size();i++) {
							Timestamp lab_date=(Timestamp) allResults.get(i)[0];
							lab_date = new Timestamp(lab_date.getTime() - offset);

							Object[] tempObject=new Object[5];
							tempObject[0]= lab_date;
							tempObject[1]=allResults.get(i)[1];
							tempObject[2]=allResults.get(i)[2];
							tempObject[3] = allResults.get(i)[3];
							tempObject[4] = allResults.get(i)[4];

							allResults.remove(i);
							allResults.add(i,tempObject);
						}
						currentSepsis.setTestResultsSet(allResults);
					}

				}
			}
			
			//if (index == 0) {
                try {
                	List<BabyPrescription> prescriptionList = sepsisEventObj.getPrescriptionList();
    				String continuedMedication = "";
    				if (!BasicUtils.isEmpty(prescriptionList)) {
    					for (int i = 0; i < prescriptionList.size(); i++) {
    						BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
    						if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
    								&& babyPrescription.getContinueReason() != null && babyPrescription.getIsactive()) {
    							continuedMedication += babyPrescription.getMedicinename() + " ";
    							if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
    								continuedMedication += babyPrescription.getDose() + "("
    										+ babyPrescription.getDose_unit() + "/" + babyPrescription.getDose_unit_time()
    										+ ") ";
    							}
    							continuedMedication += "prescribed on "
    									+ getDateFromTimestamp(babyPrescription.getStartdate()) + " and continued due to "
    									+ babyPrescription.getContinueReason() + ". ";
    						}
    					}
    					//this.savePrescriptionList(null, prescriptionList, "Sepsis", null, currentObj.getAssessmentTime());
    				}
    				 
    				 if(sepsisEventObj.getCurrentEvent().getAgeinhoursdays()!=null && sepsisEventObj.getCurrentEvent().getAgeinhoursdays() == true) {
    					 if(Integer.parseInt(sepsisEventObj.getCurrentEvent().getAgeatonset())<72) {
    						 currentSepsis.setEarlyLateOnset("Early Onset");
    					 }
    					 else {
    						 currentSepsis.setEarlyLateOnset("Late Onset"); 
    					 }
    				 }
    				 else {
    					 if(Integer.parseInt(sepsisEventObj.getCurrentEvent().getAgeatonset())<3) {
    						 currentSepsis.setEarlyLateOnset("Early Onset");
    					 }
    					 else {
    						 currentSepsis.setEarlyLateOnset("Late Onset"); 
    					 }
    				 }
                    if (currentSepsis.getEventstatus()!=null && currentSepsis.getEventstatus().equalsIgnoreCase("No")) {
                    	sepsisEventObj.setInactiveProgressNote(generateInactiveNotesSepsis(null, uhid, continuedMedication, currentSepsis.getAssessmentTime(), currentSepsis.getEarlyLateOnset()));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    logger.error("Exception while generating inactive note", e);
                }
            //}

			infectSystemEventObj.setSepsisEvent(sepsisEventObj);
		} catch (Exception ex) {
			ex.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser, uhid,
					"Getting Sepsis ", BasicUtils.convertErrorStacktoString(ex));
		}

		// VAP
		try {
			VapEventPOJO vapEventObj = new VapEventPOJO();
			vapEventObj.setPastVapList(getVapPastList(uhid));
			SaInfectVap currentVap = vapEventObj.getCurrentEvent();

			String queryGetVap = "select obj from SaInfectVap as obj where uhid='" + uhid
					+ "' order by creationtime desc";
			List<SaInfectVap> listVap = inicuDao.getListFromMappedObjQuery(queryGetVap);

			if (!BasicUtils.isEmpty(listVap)) {

				String eventStatus = listVap.get(0).getEventstatus();
				currentVap.setEventstatus(listVap.get(0).getEventstatus());
				vapEventObj.getPastEvents().setPastEventObj(listVap.get(0));
				vapEventObj.getPastEvents().setPastEventObjList(listVap);

				// get all investigation orders..
				String queryInvestigationOrdered = "select obj from InvestigationOrdered as obj where uhid='" + uhid
						+ "' and assesment_type = 'Vap' and assesmentid='" + listVap.get(0).getSavapid() + "'";
				List<InvestigationOrdered> listPastInvestigations = inicuDao
						.getListFromMappedObjQuery(queryInvestigationOrdered);
				vapEventObj.getPastEvents().setPastInvestigationsList(listPastInvestigations);
			}

			HashMap<Object, Object> babyInfo = getBabyInformation(uhid);
			if (babyInfo.get(BasicConstants.AGE_AT_ONSET) != null) {
				currentVap.setIsageofassesmentinhours(true);
				currentVap.setAgeinhoursdays(true);
				currentVap.setAgeatonset(babyInfo.get(BasicConstants.AGE_AT_ONSET).toString());
				currentVap.setAgeatassesment(Integer.parseInt(babyInfo.get(BasicConstants.AGE_AT_ONSET).toString()));
			}

			if (!BasicUtils.isEmpty(listVap)) {
				SaInfectVap pastVap = listVap.get(0);
				// currentResp = new SaRespRds();
				currentVap.setAgeinhoursdays(true);
				currentVap.setEventstatus(pastVap.getEventstatus());

				if (!pastVap.getEventstatus().equalsIgnoreCase("Inactive")) {
					currentVap.setAgeatonset(pastVap.getAgeatonset());
					currentVap.setAgeinhoursdays(pastVap.getAgeinhoursdays());
				}
			}
			
			List<BabyPrescription> prescriptionList = vapEventObj.getPrescriptionList();
			String continuedMedication = "";
			if (!BasicUtils.isEmpty(prescriptionList)) {
				for (int i = 0; i < prescriptionList.size(); i++) {
					BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
					if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
							&& babyPrescription.getContinueReason() != null && babyPrescription.getIsactive()) {
						continuedMedication += babyPrescription.getMedicinename() + " ";
						if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
							continuedMedication += babyPrescription.getDose() + "("
									+ babyPrescription.getDose_unit() + "/" + babyPrescription.getDose_unit_time()
									+ ") ";
						}
						continuedMedication += "prescribed on "
								+ getDateFromTimestamp(babyPrescription.getStartdate()) + " and continued due to "
								+ babyPrescription.getContinueReason() + ". ";
					}
				}
				this.savePrescriptionList(null, prescriptionList, "Vap", null, currentVap.getAssessmentTime());
			}
			
			 if (currentVap.getEventstatus()!=null && currentVap.getEventstatus().equalsIgnoreCase("No")) {
             	vapEventObj.setInactiveProgressNote(generateInactiveNotesVap(null, uhid, continuedMedication));
             }

		//	vap.setProgressnotes(generateInactiveNotesVap(null, uhid, continuedMedication));

//            String querypresList = "select obj from BabyPrescription as obj where isactive = 'true' and uhid = '" + uhid
//                    + "' and eventname='Vap' order by creationtime desc";
//            List<BabyPrescription> pastPrescriptionVapList = inicuDao.getListFromMappedObjQuery(querypresList);
//            if (!BasicUtils.isEmpty(pastPrescriptionVapList)) {
//                vapEventObj.setPrescriptionList(pastPrescriptionVapList);
//            }else{
//                vapEventObj.setPrescriptionList(new ArrayList<>());
//            }

			infectSystemEventObj.setVapEvent(vapEventObj);
		} catch (Exception ex) {
			ex.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser, uhid,
					"Getting Vap ", BasicUtils.convertErrorStacktoString(ex));
		}

		// CLABSI
		try {
			ClabsiEventPOJO clabsiEventObj = new ClabsiEventPOJO();
			clabsiEventObj.setPastClabsiList(getClabsiPastList(uhid));
			SaInfectClabsi currentClabsi = clabsiEventObj.getCurrentEvent();

			String queryGetClabsi = "select obj from SaInfectClabsi as obj where uhid='" + uhid
					+ "' order by creationtime desc";
			List<SaInfectClabsi> listClabsi = inicuDao.getListFromMappedObjQuery(queryGetClabsi);

			if (!BasicUtils.isEmpty(listClabsi)) {

				String eventStatus = listClabsi.get(0).getEventstatus();
				currentClabsi.setEventstatus(listClabsi.get(0).getEventstatus());
				clabsiEventObj.getPastEvents().setPastEventObj(listClabsi.get(0));
				clabsiEventObj.getPastEvents().setPastEventObjList(listClabsi);

				// get all investigation orders..
				String queryInvestigationOrdered = "select obj from InvestigationOrdered as obj where uhid='" + uhid
						+ "' and assesment_type = 'Clabsi' and assesmentid='" + listClabsi.get(0).getSaclabsiid() + "'";
				List<InvestigationOrdered> listPastInvestigations = inicuDao
						.getListFromMappedObjQuery(queryInvestigationOrdered);
				clabsiEventObj.getPastEvents().setPastInvestigationsList(listPastInvestigations);
			}

			HashMap<Object, Object> babyInfo = getBabyInformation(uhid);
			if (babyInfo.get(BasicConstants.AGE_AT_ONSET) != null) {
				currentClabsi.setIsageofassesmentinhours(true);
				currentClabsi.setAgeinhoursdays(true);
				currentClabsi.setAgeatonset(babyInfo.get(BasicConstants.AGE_AT_ONSET).toString());
				currentClabsi.setAgeatassesment(Integer.parseInt(babyInfo.get(BasicConstants.AGE_AT_ONSET).toString()));
			}

			if (!BasicUtils.isEmpty(listClabsi)) {
				SaInfectClabsi pastClabsi = listClabsi.get(0);
				currentClabsi.setAgeinhoursdays(true);
				currentClabsi.setEventstatus(pastClabsi.getEventstatus());
				if (!pastClabsi.getEventstatus().equalsIgnoreCase("Inactive")) {
					currentClabsi.setAgeatonset(pastClabsi.getAgeatonset());
					currentClabsi.setAgeinhoursdays(pastClabsi.getAgeinhoursdays());
				}
			}

//            String querypresList = "select obj from BabyPrescription as obj where isactive = 'true' and uhid = '" + uhid
//                    + "' and eventname='Clabsi' order by creationtime desc";
//            List<BabyPrescription> pastPrescriptionClabsiList = inicuDao.getListFromMappedObjQuery(querypresList);
//            if (!BasicUtils.isEmpty(pastPrescriptionClabsiList)) {
//                clabsiEventObj.setPrescriptionList(pastPrescriptionClabsiList);
//            }else{
//                clabsiEventObj.setPrescriptionList(new ArrayList<>());
//            }

			infectSystemEventObj.setClabsiEvent(clabsiEventObj);
		} catch (Exception ex) {
			ex.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser, uhid,
					"Getting Clabsi ", BasicUtils.convertErrorStacktoString(ex));
		}

		// Intrauterine
		try {
			IntrauterineEventPOJO intrauterineEventPOJO = new IntrauterineEventPOJO();
			IntrauterineEventPOJO intrauterineEventObj = intrauterineEventPOJO;
			SaInfectIntrauterine currentIntrauterine = intrauterineEventObj.getCurrentEvent();

			String queryGetIntrauterine = "select obj from SaInfectIntrauterine as obj where uhid='" + uhid
					+ "' order by creationtime desc";
			List<SaInfectIntrauterine> listIntrauterine = inicuDao.getListFromMappedObjQuery(queryGetIntrauterine);

			if (!BasicUtils.isEmpty(listIntrauterine)) {
				String eventStatus = listIntrauterine.get(0).getEventstatus();
				currentIntrauterine.setEventstatus(listIntrauterine.get(0).getEventstatus());
				intrauterineEventObj.getPastEvents().setPastEventObj(listIntrauterine);

				// get all investigation orders..
				String queryInvestigationOrdered = "select obj from InvestigationOrdered as obj where uhid='" + uhid
						+ "' and assesment_type = 'Intrauterine' and assesmentid='"
						+ listIntrauterine.get(0).getSaintrauterineid() + "'";
				List<InvestigationOrdered> listPastInvestigations = inicuDao
						.getListFromMappedObjQuery(queryInvestigationOrdered);
				intrauterineEventObj.getPastEvents().setPastInvestigationsList(listPastInvestigations);
			}
			HashMap<Object, Object> babyInfo = getBabyInformation(uhid);
			if (babyInfo.get(BasicConstants.AGE_AT_ONSET) != null) {
				currentIntrauterine.setIsageofassesmentinhours(true);
				currentIntrauterine.setAgeinhoursdays(true);
				currentIntrauterine.setAgeatonset(babyInfo.get(BasicConstants.AGE_AT_ONSET).toString());
				currentIntrauterine.setAgeatassesment(Integer.parseInt(babyInfo.get(BasicConstants.AGE_AT_ONSET).toString()));
			}

			if (!BasicUtils.isEmpty(listIntrauterine)) {
				SaInfectIntrauterine pastIntrauterine = listIntrauterine.get(0);
				currentIntrauterine.setAgeinhoursdays(true);
				currentIntrauterine.setEventstatus(pastIntrauterine.getEventstatus());
				if (!pastIntrauterine.getEventstatus().equalsIgnoreCase("Inactive")) {
					currentIntrauterine.setAgeatonset(pastIntrauterine.getAgeatonset());
					currentIntrauterine.setAgeinhoursdays(pastIntrauterine.getAgeinhoursdays());
				}
			}
			infectSystemEventObj.setIntrauterineEvent(intrauterineEventObj);
		} catch (Exception ex) {
			ex.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser, uhid,
					"Getting Intrauterine ", BasicUtils.convertErrorStacktoString(ex));
		}

		// Nec
		try {
			NecEventPOJO necObject = new NecEventPOJO();
			SaNec currentNecObject = necObject.getCurrentEvent();
			SaNec nec = new SaNec();

			List<SaNec> list = getRiskPastListNec(uhid);
			if(!BasicUtils.isEmpty(list)) {
				nec = list.get(0);
				currentNecObject.setRiskfactor(nec.getRiskfactor());
			}

			String queryGetNec = "select obj from SaNec as obj where uhid='" + uhid + "' order by creationtime desc";
			List<SaNec> listNec = inicuDao.getListFromMappedObjQuery(queryGetNec);

			// get the Baseline Girth value from nurse intake output table
			// Cycle runs from 8AM to 8AM.
			Timestamp today = new Timestamp((new java.util.Date().getTime()));
			Timestamp yesterday = new Timestamp((new java.util.Date().getTime()) - (24 * 60 * 60 * 1000));

			today.setHours(8);
			today.setMinutes(0);
			today.setSeconds(0);

			yesterday.setHours(8);
			yesterday.setMinutes(0);
			yesterday.setSeconds(0);

			// get the baseline abdominal girth in last 24 hours

//			String queryMinGirth="SELECT t.min_abd, n.entry_timestamp FROM ( SELECT uhid,MIN(abdomen_girth) as min_abd FROM NursingIntakeOutput where uhid='"+ uhid
//					+ "' and entry_timestamp >= '" + yesterday + "' and entry_timestamp <= '" + today
//					+ "' group by uhid ) t INNER JOIN NursingIntakeOutput ON t.uhid ='"+ uhid;
//
//			List<NursingIntakeOutput> minGirth = inicuDao.getListFromMappedObjQuery(queryMinGirth);
//
//			if(!BasicUtils.isEmpty(minGirth))
//			{
//				currentNecObject.setBaseLineAdb(null);
//				currentNecObject.setBaseLineAdbTime(null);
//			}

			// get the current Girth Value From the Nursing Table
			String queryIntakeOutputAll = "Select obj from NursingIntakeOutput obj where uhid='" + uhid
					+ "' and entry_timestamp >= '" + yesterday + "' and entry_timestamp <= '" + today
					+ "' order by entry_timestamp desc";

			List<NursingIntakeOutput> intakeOutputList = inicuDao.getListFromMappedObjQuery(queryIntakeOutputAll);

			if (!BasicUtils.isEmpty(intakeOutputList)) {
				String lastAbdValue = intakeOutputList.get(0).getAbdomenGirth();
				Timestamp entryTime = intakeOutputList.get(0).getEntry_timestamp();
				if (!BasicUtils.isEmpty(lastAbdValue)){
                    if (lastAbdValue.indexOf(".") == -1) {
                        currentNecObject.setCurrentAdb(String.valueOf(Integer.parseInt(lastAbdValue)));
                    }else{
                        currentNecObject.setCurrentAdb(String.valueOf(Float.parseFloat(lastAbdValue)));
                    }

					currentNecObject.setCurrentAdbTime(entryTime);
				}
			}

			// Number of feed intolerance
			String noOfFeedIntolerance = "SELECT count(*) as number_of_npo_days FROM sa_feed_intolerance WHERE uhid='"
					+ uhid + "'";

			List<BigInteger> feedintoleranceCount = inicuDao.getListFromNativeQuery(noOfFeedIntolerance);

			if (!BasicUtils.isEmpty(feedintoleranceCount)) {
				BigInteger npoTemp = feedintoleranceCount.get(0);
				currentNecObject.setNoOfFeedIntolerance(npoTemp.intValue());
			}

			// Number of NPO days
			String noOfNPO = "SELECT count(isenternalgiven) as NPO_days FROM babyfeed_detail where uhid='" + uhid
					+ "' and isenternalgiven=false";

			List<BigInteger> npoCount = inicuDao.getListFromNativeQuery(noOfNPO);

			if (!BasicUtils.isEmpty(npoCount)) {
				BigInteger npoTemp = npoCount.get(0);
				currentNecObject.setNoOfNpoDays(npoTemp.intValue());
			}

			// NPO due to feed intolerance
			String noOfNPOdueToFeed = "SELECT count(isenternalgiven) as NPO_days FROM babyfeed_detail where uhid='"
					+ uhid + "' and isenternalgiven=false and npo_due_to_feedintolerance=true";
//					+ "' and entry_timestamp >= '" + yesterday + "' and entry_timestamp <= '" + today
//					+ "' order by entry_timestamp desc";

			List<BigInteger> npoCountDueToFeed = inicuDao.getListFromNativeQuery(noOfNPOdueToFeed);

			if (!BasicUtils.isEmpty(npoCountDueToFeed)) {
				BigInteger npoTemp = npoCountDueToFeed.get(0);
				currentNecObject.setNpoCountDueToFeedIntolerance(npoTemp.intValue());
			}

			if (!BasicUtils.isEmpty(listNec)) {
				String eventStatus = listNec.get(0).getEventstatus();
				currentNecObject.setEventstatus(listNec.get(0).getEventstatus());
				necObject.getPastEvents().setPastEventObj(listNec);

				// get all investigation orders..
				String queryInvestigationOrdered = "select obj from InvestigationOrdered as obj where uhid='" + uhid
						+ "' and assesment_type = 'Nec' and assesmentid='" + listNec.get(0).getSanec_id() + "'";
				List<InvestigationOrdered> listPastInvestigations = inicuDao
						.getListFromMappedObjQuery(queryInvestigationOrdered);
				necObject.getPastEvents().setPastInvestigationsList(listPastInvestigations);
			}
			HashMap<Object, Object> babyInfo = getBabyInformation(uhid);
			if (babyInfo.get(BasicConstants.AGE_AT_ONSET) != null) {
				currentNecObject.setAgeinhoursdays(true);
				currentNecObject.setIsageofassesmentinhours(true);
				currentNecObject.setAgeatonset(babyInfo.get(BasicConstants.AGE_AT_ONSET).toString());
				currentNecObject.setAgeatassesment(Integer.parseInt(babyInfo.get(BasicConstants.AGE_AT_ONSET).toString()));
			}

			if (!BasicUtils.isEmpty(listNec)) {
				SaNec pastNec = listNec.get(0);
				currentNecObject.setAgeinhoursdays(true);
				currentNecObject.setEventstatus(pastNec.getEventstatus());

				if (!pastNec.getEventstatus().equalsIgnoreCase("Inactive")) {
					currentNecObject.setAgeatonset(pastNec.getAgeatonset());
					currentNecObject.setAgeinhoursdays(pastNec.getAgeinhoursdays());
				}
			}

            if (currentNecObject.getEventstatus()!=null && currentNecObject.getEventstatus().equalsIgnoreCase("No")) {
                necObject.setInactiveProgressNote(generateInactiveNotesNec(null, uhid, ""));
            }

			infectSystemEventObj.setNecEvent(necObject);
		} catch (Exception e) {
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser, uhid,
					"Getting Intrauterine ", BasicUtils.convertErrorStacktoString(e));
		}
		return infectObj;
	}

	@Override
	public ResponseMessageWithResponseObject saveInfectSystem(AssessmentInfectionSystemPOJO infectSystemObj) {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
		try {

			InfectionSystemEventPOJO infectEventObj = infectSystemObj.getInfectionEventObject();
			String eventName = infectEventObj.getEventName();
			SaInfection currentObj = infectSystemObj.getInfectionEventObject().getCurrentEvent();
			String query = "Select obj from SaInfection as obj where uhid = '" + currentObj.getUhid()
					+ "' order by creationtime desc";
			List<SaInfection> listSaInfection = inicuDao.getListFromMappedObjQuery(query);

			if (BasicUtils.isEmpty(currentObj.getEpisodeid()) && !BasicUtils.isEmpty(currentObj.getUhid())) {
				String queryAssociatedEvents = "select episodeid from sa_infection where uhid='"
						+ currentObj.getUhid() + "' order by creationtime desc";
				List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

				if (!BasicUtils.isEmpty(listAssociatedEvents)) {
					currentObj.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
				}
			}

			if (BasicUtils.isEmpty(listSaInfection)) {
				currentObj.setUhid(infectSystemObj.getUhid());
				currentObj.setLoggeduser(infectSystemObj.getLoggedUser());
				try {
					inicuDao.saveObject(currentObj);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else if (!BasicUtils.isEmpty(listSaInfection)) {
				currentObj.setUhid(infectSystemObj.getUhid());
				currentObj.setLoggeduser(infectSystemObj.getLoggedUser());

				try {
					inicuDao.saveObject(currentObj);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			if (!BasicUtils.isEmpty(eventName)) {
				if (eventName.equalsIgnoreCase(BasicConstants.SEPSIS)) {
					try {
						response = saveInfectSepsisEvent(infectSystemObj);
					} catch (Exception e) {
						e.printStackTrace();
					}
				} else if (eventName.equalsIgnoreCase(BasicConstants.VAP)) {
					try {
						response = saveInfectVapEvent(infectSystemObj);
					} catch (Exception e) {
						e.printStackTrace();
					}
				} else if (eventName.equalsIgnoreCase(BasicConstants.CLABSI)) {
					try {
						response = saveInfectClabsiEvent(infectSystemObj);
					} catch (Exception e) {
						e.printStackTrace();
					}
				} else if (eventName.equalsIgnoreCase(BasicConstants.INTRAUTERINE)) {
					try {
						response = saveInfectIntrauterineEvent(infectSystemObj);
					} catch (Exception e) {
						e.printStackTrace();
					}

				} else if (eventName.equalsIgnoreCase(BasicConstants.NEC)) {
					try {
						response = saveInfectNecEvent(infectSystemObj);
					} catch (Exception e) {
						e.printStackTrace();
					}

				} else { // always will be in last...
					response.setMessage("none of the event are matching");
					response.setType(BasicConstants.MESSAGE_FAILURE);
				}
			} else {
				response.setMessage("event name is coming as null or empty");
				response.setType(BasicConstants.MESSAGE_FAILURE);
			}

		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return response;
	}

	private ResponseMessageWithResponseObject saveInfectNecEvent(AssessmentInfectionSystemPOJO infectionSystemObj)
			throws Exception {

		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();

		String loggeduser = infectionSystemObj.getLoggedUser();

		try {
			SaNec currentObj = infectionSystemObj.getInfectionEventObject().getNecEvent().getCurrentEvent();

			currentObj.setUhid(infectionSystemObj.getUhid());
			currentObj.setLoggeduser(loggeduser);
			if (BasicUtils.isEmpty(currentObj.getEpisodeid()) && !BasicUtils.isEmpty(currentObj.getUhid())) {
				String queryAssociatedEvents = "select episodeid from sa_infection_nec where uhid='"
						+ currentObj.getUhid() + "' order by creationtime desc";
				List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

				if (!BasicUtils.isEmpty(listAssociatedEvents)) {
					currentObj.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
				}
			}
			Timestamp assessmentTime = currentObj.getAssessmentDate();

			if (!BasicUtils.isEmpty(assessmentTime)) {
				currentObj.setAssessmentTime(assessmentTime);
			}

			if (currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {

				// always set status to inactive
				currentObj.setEventstatus("yes");

				// set treatments
				if (!BasicUtils.isEmpty(currentObj.getTreatmentactionList())) {
					currentObj.setTreatmentaction(currentObj.getTreatmentactionList().toString());
				}

				// set Medication Str
				if (!BasicUtils.isEmpty(currentObj.getMedicationStr())) {
					currentObj.setMedicationStr(currentObj.getMedicationStr());
				}

				// cause list
				if (!BasicUtils.isEmpty(currentObj.getCauseListofnec())) {
					currentObj.setCauseofnec(currentObj.getCauseListofnec().toString());
				}

				// Systematic Symptoms
				if (!BasicUtils.isEmpty(currentObj.getSystematicSymptomsList())) {
					currentObj.setSystematicSymptoms(currentObj.getSystematicSymptomsList().toString());
				}

				// Abdominal Sign
				if (!BasicUtils.isEmpty(currentObj.getAbdominalsignList())) {
					currentObj.setAbdominalsign(currentObj.getAbdominalsignList().toString());
				}

				// Risk Factor
				if (!BasicUtils.isEmpty(currentObj.getRiskfactorList())) {
					currentObj.setRiskfactor(currentObj.getRiskfactorList().toString());
				}

				NurseExecutionOrders order = new NurseExecutionOrders();

				if (!BasicUtils.isEmpty(currentObj.getProgressnotes())) {
					currentObj
							.setProgressnotes(currentObj.getProgressnotes());
					order.setLoggeduser(currentObj.getLoggeduser());
				}

				if(!BasicUtils.isEmpty(currentObj.getOtherplanComments())) {
					order.setEventname("NEC");
					order.setIsExecution(false);
					order.setOrderText(currentObj.getOtherplanComments());
					order.setAssessmentdate(currentObj.getAssessmentDate());
					order.setUhid(infectionSystemObj.getUhid());
					inicuDao.saveObject(order);
				}

				try {
					currentObj = (SaNec) inicuDao.saveObject(currentObj);
				} catch (Exception e) {
					e.printStackTrace();
					response.setMessage("NEC Not saved !" + e);
					response.setType(BasicConstants.MESSAGE_FAILURE);
					return response;
				}

				if (currentObj.getSanec_id() != null
						&& currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {

					// save order investigation...
					saveOrderInvestigation(infectionSystemObj.getDropDowns().getOrders(), currentObj.getSanec_id(),
							infectionSystemObj.getUhid(), infectionSystemObj.getLoggedUser(), "NEC",
							currentObj.getAssessmentTime());

					// save baby precriptions details
					List<BabyPrescription> prescriptionList = infectionSystemObj.getInfectionEventObject().getNecEvent()
							.getPrescriptionList();
					if (!BasicUtils.isEmpty(prescriptionList)) {
						this.savePrescriptionList(null, prescriptionList, "NEC", currentObj.getSanec_id(),
								currentObj.getAssessmentTime());
					}
				}

			} else if (currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.NO)) {
				// Passive Case
				SaNec nec = new SaNec();
				nec.setUhid(infectionSystemObj.getUhid());
				nec.setLoggeduser(infectionSystemObj.getLoggedUser());
				nec.setAgeatonset(currentObj.getAgeatonset());
				nec.setAgeinhoursdays(currentObj.getAgeinhoursdays());
				nec.setEventstatus(currentObj.getEventstatus());
				nec.setAgeatassesment(currentObj.getAgeatassesment());
				nec.setIsageofassesmentinhours(currentObj.getIsageofassesmentinhours());
				nec.setAssessmentTime(currentObj.getAssessmentDate());
				nec.setAssessmentDate(currentObj.getAssessmentDate());
				nec.setEpisodeNumber(currentObj.getEpisodeNumber());

				if (!BasicUtils.isEmpty(currentObj.getMedicationStr())) {
					nec.setMedicationStr(currentObj.getMedicationStr());
				}
				/*String progressNotes = "";
				progressNotes = "No active NEC.";

				if (!BasicUtils.isEmpty(currentObj.getMedicationStr())) {
					progressNotes += currentObj.getMedicationStr() + ". ";
				}

				nec.setProgressnotes(progressNotes);*/
				nec.setProgressnotes(currentObj.getProgressnotes());

				// set progress notes
				if (!BasicUtils.isEmpty(currentObj.getProgressnotes())) {
					nec.setProgressnotes(nec.getProgressnotes());
				}

				try {
					SaNec newObj = (SaNec) inicuDao.saveObject(nec);
				} catch (Exception e) {
					e.printStackTrace();
					response.setMessage("NEC Not saved !" + e);
					response.setType(BasicConstants.MESSAGE_FAILURE);
					return response;
				}
			} else {
				SaNec nec = new SaNec();
				nec.setUhid(infectionSystemObj.getUhid());
				String uhid = nec.getUhid();
				nec.setLoggeduser(infectionSystemObj.getLoggedUser());
				nec.setAgeatonset(currentObj.getAgeatonset());
				nec.setAgeinhoursdays(currentObj.getAgeinhoursdays());
				nec.setNewEntry(currentObj.isNewEntry());
                nec.setProgressnotes(currentObj.getProgressnotes());

				// Medication Stopped before generating inactive note and baby prescription
				/*List<BabyPrescription> prescriptionList = infectionSystemObj.getInfectionEventObject().getNecEvent()
						.getPrescriptionList();
				String continuedMedication = "";
				if (!BasicUtils.isEmpty(prescriptionList)) {
					for (int i = 0; i < prescriptionList.size(); i++) {
						BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
						if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
								&& babyPrescription.getContinueReason() != null && babyPrescription.getIsactive()) {
							continuedMedication += babyPrescription.getMedicinename() + " ";
							if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
								continuedMedication += babyPrescription.getDose() + "("
										+ babyPrescription.getDose_unit() + "/" + babyPrescription.getDose_unit_time()
										+ ") ";
							}
							continuedMedication += "prescribed on "
									+ getDateFromTimestamp(babyPrescription.getStartdate()) + " and continued due to "
									+ babyPrescription.getContinueReason() + ". ";
						}
					}
					this.savePrescriptionList(null, prescriptionList, "NEC", null, currentObj.getAssessmentTime());
				}
				// TO DO
				nec.setProgressnotes(generateInactiveNotesNec(null, uhid, continuedMedication));*/
				nec.setEpisodeNumber(currentObj.getEpisodeNumber());
				nec.setEventstatus(currentObj.getEventstatus());
				nec.setAssessmentTime(infectionSystemObj.getInfectionEventObject().getNecEvent().getCurrentEvent()
						.getAssessmentTime());
				try {
					SaNec newObj = (SaNec) inicuDao.saveObject(nec);
					updatePastNecProgressNotes(nec);
				} catch (Exception e) {
					e.printStackTrace();
					response.setMessage("NEC Not saved !" + e);
					response.setType(BasicConstants.MESSAGE_FAILURE);
					return response;
				}
			}

			response.setMessage("NEC saved successfully..!!");
			response.setType(BasicConstants.MESSAGE_SUCCESS);

		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return response;
	}

	@SuppressWarnings("unchecked")
	private InfectionSystemDropDowns getInfectionSystemDropdowns(String uhid) throws Exception {

		InfectionSystemDropDowns dropDowns = new InfectionSystemDropDowns();

		String queryRefTestsList = "select obj from RefTestslist as obj where not (obj.assesmentCategory like ('%None%')) order by assesmentCategory";
		List<RefTestslist> listRefTests = inicuDao.getListFromMappedObjQuery(queryRefTestsList);
		// populate drop down hash map for the tests list...
		HashMap<Object, List<RefTestslist>> testsListMap = new HashMap<Object, List<RefTestslist>>();
		for (RefTestslist test : listRefTests) {
			List categoryList = null;
			if (testsListMap.get(test.getAssesmentCategory()) != null) {
				categoryList = testsListMap.get(test.getAssesmentCategory());

			} else {
				categoryList = new ArrayList<RefTestslist>();
			}
			categoryList.add(test);
			testsListMap.put(test.getAssesmentCategory(), categoryList);
		}
		dropDowns.setOrders(testsListMap);

		List<String> activeMedList = new ArrayList<>();
		if (!BasicUtils.isEmpty(uhid)) {
			String activeMed = "select medicinename from baby_prescription where uhid='" + uhid.trim()
					+ "' and isactive = true";
			List<String> result = inicuDao.getListFromNativeQuery(activeMed);
			if (!BasicUtils.isEmpty(result)) {
				activeMedList.addAll(result);
			}
		}

		String queryMedicineList = "select obj from Medicines obj where isactive='true'";
		List<Medicines> medicineList = inicuDao.getListFromMappedObjQuery(queryMedicineList);
		List<Medicines> changedMedList = new ArrayList<>();

		if (!BasicUtils.isEmpty(medicineList)) {
			for (Medicines m : medicineList) {

				boolean isPresent = false;
				if (!BasicUtils.isEmpty(activeMedList)) {
					for (String s : activeMedList) {
						if (s != null && s.equalsIgnoreCase(m.getMedname())) {
							isPresent = true;
						}
					}
				}

				if (isPresent) {
					continue;
				}
				changedMedList.add(m);
			}
		}

		dropDowns.setMedicine(changedMedList);
		dropDowns.setAllMedicine(medicineList);

		String queryGetFrequencyRef = "select obj from RefMedfrequency obj order by frequency_int";
		List<RefMedfrequency> freqList = inicuDao.getListFromMappedObjQuery(queryGetFrequencyRef);
		dropDowns.setFreqListMedcines(freqList);

		List<String> hours = getTime(BasicConstants.HOURS);
		dropDowns.setHours(hours);
		List<String> minutes = getTime(BasicConstants.MINUTES);
		dropDowns.setMinutes(minutes);

		// for Sepsis treatment
		String queryAssessmentSepsis = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment where category='Sepsis' order by assesmenttreatmentid desc";
		List<KeyValueObj> assessmentSepsis = getRefObj(queryAssessmentSepsis);
		KeyValueObj otherKeySepsis = new KeyValueObj();
		otherKeySepsis.setKey("other");
		otherKeySepsis.setValue("Other");
		assessmentSepsis.add(otherKeySepsis);
		dropDowns.setTreatmentActionSepsis(assessmentSepsis);

		// for Nec treatment
		String queryAssessmentNec = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment where category='Nec' order by assesmenttreatmentid desc";
		List<KeyValueObj> assessmentNec = getRefObj(queryAssessmentNec);
		KeyValueObj otherKeyNec = new KeyValueObj();
		otherKeyNec.setKey("other");
		otherKeyNec.setValue("Other");
		assessmentNec.add(otherKeySepsis);
		dropDowns.setTreatmentActionNec(assessmentNec);

		// for Intrauterine treatment
		String queryAssessmentInfection = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment where category='Infection' order by assesmenttreatmentid desc";
		List<KeyValueObj> assessmentInfection = getRefObj(queryAssessmentInfection);
		KeyValueObj otherKeyInfection = new KeyValueObj();
		otherKeyInfection.setKey("other");
		otherKeyInfection.setValue("Other");
		assessmentInfection.add(otherKeySepsis);
		dropDowns.setTreatmentActionIntrauterine(assessmentInfection);

		// for Infection cause
		String queryCauseIntrauterine = "select causeofinfectionid, causeofinfection from ref_causeofinfection where event='Intrauterine'";
		List<KeyValueObj> causeIntrauterineList = getRefObj(queryCauseIntrauterine);
		KeyValueObj otherCauseKeyIntrauterine = new KeyValueObj();
		otherCauseKeyIntrauterine.setKey("other");
		otherCauseKeyIntrauterine.setValue("Other");
		causeIntrauterineList.add(otherCauseKeyIntrauterine);
		dropDowns.setCauseOfIntrauterine(causeIntrauterineList);

		// cause of Sepsis
		String queryCauseSepsis = "select causeofinfectionid, causeofinfection from ref_causeofinfection where event='Sepsis'";
		List<KeyValueObj> causeSepsisList = getRefObj(queryCauseSepsis);
		KeyValueObj otherCauseKeySepsis = new KeyValueObj();
		otherCauseKeySepsis.setKey("other");
		otherCauseKeySepsis.setValue("Other");
		causeSepsisList.add(otherCauseKeySepsis);
		dropDowns.setCauseOfSepsis(causeSepsisList);

		// get associated events....
//		String queryAssociatedEvents = "select uhid,associated_event from associate_assesment_final where uhid='"
//				+ uhid.trim() + "'";
//		List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);
//		dropDowns.setAssociatedEvents(listAssociatedEvents);

		// get the nec risk factor
		String queryNecRiskFactor = "select necrisk_factor_id, riskfactor from ref_necrisk_factor";
		List<KeyValueObj> causeRiskNecList = getRefObj(queryNecRiskFactor);
		dropDowns.setRiskFactorNec(causeRiskNecList);

		// get nec systematic symptoms
		String querySysSymptoms = "select systematic_symptoms_id, systematic_symptoms_cause from ref_systematic_symptoms";
		List<KeyValueObj> sysSymptomsList = getRefObj(querySysSymptoms);
		dropDowns.setNecSystematicSymptom(sysSymptomsList);

		// get nec abdominal
		String queryNecAbd = "select abdominal_sign_id, abdominal_sign_cause from ref_abdominal_sign";
		List<KeyValueObj> necAbdList = getRefObj(queryNecAbd);
		dropDowns.setNecAbdominal(necAbdList);

		// get Xray Finding for Nec
		String queryNecXrayFinding = "select xray_finding_abdomen_id, xray_finding_abdomen_cause from ref_xray_finding_abdomen";
		List<KeyValueObj> necXrayFindingList = getRefObj(queryNecXrayFinding);
		dropDowns.setNecXrayFinding(necXrayFindingList);

		// for Infection nec cause
		String queryCauseNec = "select causeofinfectionid, causeofinfection from ref_causeofinfection where event='NEC'";
		List<KeyValueObj> causeNecList = getRefObj(queryCauseNec);
		KeyValueObj otherCauseKeyNec = new KeyValueObj();
		otherCauseKeyNec.setKey("other");
		otherCauseKeyNec.setValue("Other");
		causeNecList.add(otherCauseKeyNec);
		dropDowns.setCauseOfNec(causeNecList);

		// for Infection ICD cause
		String queryICdCauseSepsis = "select code,cause from ref_icd_code where assessment='Sepsis'";
		List<KeyValueObj> icdCauseSepsisList = getRefObj(queryICdCauseSepsis);
		dropDowns.setIcdCauseOfSepsis(icdCauseSepsisList);

		return dropDowns;
	}

	private void PopulateInvestigationOrderedInfect(VwAssesmentInfectionFinal vwAssesmentInfectionFinal)
	{
		String res = "";
		String notes = vwAssesmentInfectionFinal.getProgressnotes();
		if(notes.contains("Investigation ordered :")) {
			String firstString = "Investigation ordered :";
			String secondstring = ".";
			Pattern p = Pattern.compile(Pattern.quote(firstString)+"(.*?)"+Pattern.quote(secondstring));
			Matcher m = p.matcher(notes);
			while(m.find())
			{
				res+=m.group(1)+",";
			}
		}
		else if(notes.contains("Investigation ordered are"))
		{
			String firstString = "Investigation ordered are";
			String secondstring = ".";
			Pattern p = Pattern.compile(Pattern.quote(firstString)+"(.*?)"+Pattern.quote(secondstring));
			Matcher m = p.matcher(notes);
			while(m.find())
			{
				res+=m.group(1)+",";
			}
		}
		else if(notes.contains("Investigation ordered is")) {
			String firstString = "Investigation ordered is";
			String secondstring = ".";
			Pattern p = Pattern.compile(Pattern.quote(firstString)+"(.*?)"+Pattern.quote(secondstring));
			Matcher m = p.matcher(notes);
			while(m.find())
			{
				res+=m.group(1)+",";
			}
		}
		if(res!=null && res.length()>0){
			res = res.substring(0,res.length()-1);
		}
		vwAssesmentInfectionFinal.setOrderlist(res);


	}
	private void PopulateCauseList(VwAssesmentInfectionFinal vwAssesmentInfectionFinal)
	{
		String causeStr = vwAssesmentInfectionFinal.getCauseList();
		if (!BasicUtils.isEmpty(causeStr)) {
			String[] listCause = causeStr.replace(" ", "").trim().replace("[", "").replace("]", "")
					.split(",");
			ArrayList<String> listCauseArray = new ArrayList<String>(Arrays.asList(listCause));
			String tempcause = "";
			for(int i=0;i<listCauseArray.size();i++)
			{
				String fetchQuery = "SELECT causeofinfection from ref_causeofinfection where causeofinfectionid='"+listCauseArray.get(i)+"'";

				List res = inicuDao.getListFromNativeQuery(fetchQuery);
				if(!BasicUtils.isEmpty(res))
				{
					if(i==listCauseArray.size()-1)
					{
						tempcause+=res.get(0).toString();
					}
					else
					{
						tempcause+=res.get(0).toString()+",";
					}
				}
			}
			if(tempcause!=null && tempcause.length()>0){
				tempcause = tempcause.substring(0,tempcause.length()-1);
			}
			vwAssesmentInfectionFinal.setCauseList(tempcause);
		}
	}

	private void PopulateTreatmentInfect(VwAssesmentInfectionFinal vwAssesmentInfectionFinal)
	{
		String TreatmentStr = vwAssesmentInfectionFinal.getTreatment();
		if (!BasicUtils.isEmpty(TreatmentStr)) {
			String[] listTreatment = TreatmentStr.replace(" ", "").trim().replace("[", "").replace("]", "")
					.split(",");
			ArrayList<String> listTreatmentArray = new ArrayList<String>(Arrays.asList(listTreatment));
			String temptreatment = "";
			for(int i=0;i<listTreatmentArray.size();i++)
			{
				String fetchQuery = "SELECT treatment from ref_assesment_treatment where assesmenttreatmentid='"+listTreatmentArray.get(i)+"'";

				List res = inicuDao.getListFromNativeQuery(fetchQuery);
				if(!BasicUtils.isEmpty(res))
				{
					if(i==listTreatmentArray.size()-1)
					{
						temptreatment+=res.get(0).toString();
					}
					else
					{
						temptreatment+=res.get(0).toString()+",";
					}
				}
			}
			vwAssesmentInfectionFinal.setTreatment(temptreatment);
		}
	}

	private List<VwAssesmentInfectionFinal> getInfectionPastHistory(String uhid) {
		List<VwAssesmentInfectionFinal> pastHistory = new ArrayList<>();
		try {
			String queryInfectPastHistory = "Select obj from VwAssesmentInfectionFinal as obj where uhid='" + uhid
					+ "' order by creationtime desc";
			pastHistory = inicuDao.getListFromMappedObjQuery(queryInfectPastHistory);
			if(!BasicUtils.isEmpty(pastHistory)) {
				for(VwAssesmentInfectionFinal assesmentInfectionFinal : pastHistory)
				{
					PopulateInvestigationOrderedInfect(assesmentInfectionFinal);
					PopulateCauseList(assesmentInfectionFinal);
					PopulateTreatmentInfect(assesmentInfectionFinal);
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return pastHistory;
	}

	private List<SaSepsis> getSepsisPastList(String uhid) {
		List<SaSepsis> pastSepsis = new ArrayList<SaSepsis>();
		try {
			String querySepsisList = "Select obj from VwAssesmentInfectionFinal as obj where uhid = '" + uhid
					+ "' AND event = 'Sepsis' order by creationtime desc";
			pastSepsis = inicuDao.getListFromMappedObjQuery(querySepsisList);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return pastSepsis;
	}

	private List<SaInfectVap> getVapPastList(String uhid) {
		List<SaInfectVap> pastVap = new ArrayList<SaInfectVap>();
		try {
			String queryVapList = "Select obj from VwAssesmentInfectionFinal as obj where uhid = '" + uhid
					+ "' AND event = 'Vap' order by creationtime desc";
			pastVap = inicuDao.getListFromMappedObjQuery(queryVapList);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return pastVap;
	}

	private List<SaInfectClabsi> getClabsiPastList(String uhid) {
		List<SaInfectClabsi> pastClabsi = new ArrayList<SaInfectClabsi>();
		try {
			String queryClabsiList = "Select obj from VwAssesmentInfectionFinal as obj where uhid = '" + uhid
					+ "' AND event = 'Clabsi' order by creationtime desc";
			pastClabsi = inicuDao.getListFromMappedObjQuery(queryClabsiList);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return pastClabsi;
	}

	private ResponseMessageWithResponseObject saveInfectSepsisEvent(AssessmentInfectionSystemPOJO infectSystemObj)
			throws Exception {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
		String loggeduser = infectSystemObj.getLoggedUser();
		try {
			SaSepsis currentObj = infectSystemObj.getInfectionEventObject().getSepsisEvent().getCurrentEvent();
			currentObj.setUhid(infectSystemObj.getUhid());
			currentObj.setLoggeduser(infectSystemObj.getLoggedUser());
			if (BasicUtils.isEmpty(currentObj.getEpisodeid()) && !BasicUtils.isEmpty(currentObj.getUhid())) {
				String queryAssociatedEvents = "select episodeid from sa_infection_sepsis where uhid='"
						+ currentObj.getUhid() + "' order by creationtime desc";
				List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

				if (!BasicUtils.isEmpty(listAssociatedEvents)) {
					currentObj.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
				}
			}

			Timestamp assessmentTime = currentObj.getAssessmentTime();

			if (!BasicUtils.isEmpty(assessmentTime)) {
				currentObj.setAssessmentTime(assessmentTime);
			}

			// currentObj.setAgeatonset(infectSystemObj.getAgeAtOnset().toString());

			if (currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {

				// set causes
				if (!BasicUtils.isEmpty(currentObj.getCauseofsepsisList())) {
					currentObj.setCauseofsepsis(currentObj.getCauseofsepsisList().toString());
				}

				// set treatments
				if (!BasicUtils.isEmpty(currentObj.getTreatmentactionList())) {
					currentObj.setTreatmentaction(currentObj.getTreatmentactionList().toString());
				}

				// set plans
				if (!BasicUtils.isEmpty(currentObj.getTreatmentplanList())) {
					currentObj.setTreatmentplan(currentObj.getTreatmentplanList().toString());
				}

				// set risk factors
				if (!BasicUtils.isEmpty(currentObj.getRiskfactorList())) {
					currentObj.setRiskfactor(currentObj.getRiskfactorList().toString());
				}

				// set temperature
				if (!BasicUtils.isEmpty(currentObj.getTemperatureList())) {
					currentObj.setTemperatureCelsius(currentObj.getTemperatureList().toString());
				}

				// set temperature
				if (!BasicUtils.isEmpty(currentObj.getIcdCauseofSepsisList())) {
					currentObj.setIcdCauseofSepsis(currentObj.getIcdCauseofSepsisList().toString());
				}

				NurseExecutionOrders order = new NurseExecutionOrders();

				// set progress notes
				if (!BasicUtils.isEmpty(currentObj.getProgressnotes())) {
					if(!BasicUtils.isEmpty(currentObj.getProgressnotes()) && currentObj.getProgressnotes().indexOf(loggeduser)==-1) {
						currentObj.setProgressnotes(currentObj.getProgressnotes() );
						order.setLoggeduser(loggeduser);
					}
				}


				if(!BasicUtils.isEmpty(currentObj.getOtherplanComments())) {
					order.setEventname("Sepsis");
					order.setIsExecution(false);
					order.setOrderText(currentObj.getOtherplanComments());
					order.setAssessmentdate(currentObj.getAssessmentTime());
					order.setUhid(infectSystemObj.getUhid());
					inicuDao.saveObject(order);
				}

				// save downes score
				if (infectSystemObj.getInfectionEventObject().getCommonEventsInfo().isDowneFlag()) {
					ScoreDownes downeObj = infectSystemObj.getInfectionEventObject().getCommonEventsInfo()
							.getDowneScoreObj();
					downeObj.setUhid(infectSystemObj.getUhid());

					try {
						downeObj = (ScoreDownes) inicuDao.saveObject(downeObj);
						currentObj.setDownescoreid(downeObj.getDownesscoreid().toString());
					} catch (Exception e) {
						e.printStackTrace();
					}
				}

				if (!BasicUtils.isEmpty(currentObj.getIsNewEntry())) {
					if (currentObj.getIsNewEntry()) {
						currentObj.setSasepsisid(null);
						currentObj.setCreationtime(null);
					}
				}

				try {
					currentObj = (SaSepsis) sysDAO.saveObject(currentObj);
				} catch (Exception e) {
					e.printStackTrace();
				}

				if (currentObj.getSasepsisid() != null
						&& currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {

					// save order investigation...
					saveOrderInvestigation(infectSystemObj.getDropDowns().getOrders(), currentObj.getSasepsisid(),
							infectSystemObj.getUhid(), infectSystemObj.getLoggedUser(), "Sepsis",
							currentObj.getAssessmentTime());

					List<BabyPrescription> prescriptionList = infectSystemObj.getInfectionEventObject().getSepsisEvent()
							.getPrescriptionList();
					if (!BasicUtils.isEmpty(prescriptionList)) {
						this.savePrescriptionList(null, prescriptionList, "Sepsis", currentObj.getSasepsisid(),
								currentObj.getAssessmentTime());
					}
				}

			}
			else if (currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.NO)) {
//				// passive "no" case
				SaSepsis sepsis = new SaSepsis();
				sepsis.setUhid(infectSystemObj.getUhid());
				sepsis.setLoggeduser(infectSystemObj.getLoggedUser());
				sepsis.setAgeatonset(currentObj.getAgeatonset());
				sepsis.setAgeinhoursdays(currentObj.getAgeinhoursdays());
				sepsis.setEventstatus(currentObj.getEventstatus());
				sepsis.setAssessmentTime(infectSystemObj.getInfectionEventObject().getSepsisEvent().getCurrentEvent()
						.getAssessmentTime());
				sepsis.setAgeatassesment(currentObj.getAgeatassesment());
				sepsis.setIsageofassesmentinhours(currentObj.getIsageofassesmentinhours());
				sepsis.setAssessmentDate(currentObj.getAssessmentDate());
				sepsis.setAssessmentHour(currentObj.getAssessmentHour());
				sepsis.setAssessmentMin(currentObj.getAssessmentMin());
				sepsis.setEpisodeNumber(currentObj.getEpisodeNumber());
				sepsis.setEarlyLateOnset(currentObj.getEarlyLateOnset());

				// set the risk Factors
                // set risk factors
                if (!BasicUtils.isEmpty(currentObj.getRiskfactorList())) {
                    sepsis.setRiskfactor(currentObj.getRiskfactorList().toString());
                }

				// set the symptomatic Value
                if (!BasicUtils.isEmpty(currentObj.getSymptomaticValue())) {
                    sepsis.setSymptomaticValue(currentObj.getSymptomaticValue());
                }

				// set progress notes
				if (!BasicUtils.isEmpty(currentObj.getProgressnotes())) {
					if(!BasicUtils.isEmpty(currentObj.getProgressnotes()) && currentObj.getProgressnotes().indexOf(loggeduser)==-1) {
						sepsis.setProgressnotes(currentObj.getProgressnotes());
					} else {
                        sepsis.setProgressnotes(currentObj.getProgressnotes());
                    }
				}

				if (!BasicUtils.isEmpty(currentObj.getMedicationStr())) {
					sepsis.setMedicationStr(currentObj.getMedicationStr());
				}

				if (!BasicUtils.isEmpty(currentObj.getOrderSelectedText())) {
					sepsis.setOrderSelectedText(currentObj.getOrderSelectedText());
				}

				try {
					if (!BasicUtils.isEmpty(currentObj.getIsNewEntry())) {
						if (currentObj.getIsNewEntry()) {
							sepsis.setSasepsisid(null);
							sepsis.setCreationtime(null);
						} else {
							sepsis.setSasepsisid(currentObj.getSasepsisid());
							sepsis.setCreationtime(currentObj.getCreationtime());
						}
					}
					currentObj = (SaSepsis) sysDAO.saveObject(sepsis);
					if (currentObj.getSasepsisid() != null) {

						// save order investigation...
						saveOrderInvestigation(infectSystemObj.getDropDowns().getOrders(), currentObj.getSasepsisid(),
								infectSystemObj.getUhid(), infectSystemObj.getLoggedUser(), "Sepsis",
								currentObj.getAssessmentTime());

						List<BabyPrescription> prescriptionList = infectSystemObj.getInfectionEventObject()
								.getSepsisEvent().getPrescriptionList();
						if (!BasicUtils.isEmpty(prescriptionList)) {
							this.savePrescriptionList(null, prescriptionList, "Sepsis", currentObj.getSasepsisid(),
									currentObj.getAssessmentTime());
						}
					}
//
				} catch (Exception e) {
					e.printStackTrace();
				}
//
			}
			else {
				SaSepsis sepsis = new SaSepsis();
				sepsis.setUhid(infectSystemObj.getUhid());
				String uhid = sepsis.getUhid();
				sepsis.setLoggeduser(infectSystemObj.getLoggedUser());
				sepsis.setAgeatonset(currentObj.getAgeatonset());
				sepsis.setAgeinhoursdays(currentObj.getAgeinhoursdays());
//				sepsis.setAssessmentTime(currentObj.getAssessmentDate());

				// Medication Stopped before generating inactive note and baby prescription
				// table is updated
				List<BabyPrescription> prescriptionList = infectSystemObj.getInfectionEventObject().getSepsisEvent()
						.getPrescriptionList();
				String continuedMedication = "";
				if (!BasicUtils.isEmpty(prescriptionList)) {
					for (int i = 0; i < prescriptionList.size(); i++) {
						BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
						if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
								&& babyPrescription.getContinueReason() != null && babyPrescription.getIsactive()) {
							continuedMedication += babyPrescription.getMedicinename() + " ";
							if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
								continuedMedication += babyPrescription.getDose() + "("
										+ babyPrescription.getDose_unit() + "/" + babyPrescription.getDose_unit_time()
										+ ") ";
							}
							continuedMedication += "prescribed on "
									+ getDateFromTimestamp(babyPrescription.getStartdate()) + " and continued due to "
									+ babyPrescription.getContinueReason() + ". ";
						}
					}
					this.savePrescriptionList(null, prescriptionList, "Sepsis", null, currentObj.getAssessmentTime());
				}

				sepsis.setProgressnotes(infectSystemObj.getInfectionEventObject().getSepsisEvent().getInactiveProgressNote());
				sepsis.setEpisodeNumber(currentObj.getEpisodeNumber());
				sepsis.setEventstatus(currentObj.getEventstatus());
				sepsis.setAssessmentTime(infectSystemObj.getInfectionEventObject().getSepsisEvent().getCurrentEvent()
						.getAssessmentTime());
				try {
//					currentObj = (SaSepsis) inicuDao.saveObject(sepsis);
					if (!BasicUtils.isEmpty(currentObj.getIsNewEntry())) {
						if (currentObj.getIsNewEntry()) {
							sepsis.setSasepsisid(null);
							sepsis.setCreationtime(null);
							currentObj = (SaSepsis) inicuDao.saveObject(sepsis);
						} else {
							sepsis.setSasepsisid(currentObj.getSasepsisid());
							sepsis.setCreationtime(currentObj.getCreationtime());
							
							 try {
			                        String query = "update sa_infection_sepsis set progressnotes = '" + sepsis.getProgressnotes().toString()
			                                + "' where sasepsisid = '" + currentObj.getSasepsisid()  + "'";
			                        inicuDao.updateOrDeleteNativeQuery(query);
			                    } catch (Exception ex) {
			                        ex.printStackTrace();
			                        System.out.println("Exception occured while updating progressnotes for inactive state");
			                    }
						}
					}
					updatePastSepsisProgressNotes(sepsis);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}

			response.setMessage("Sepsis saved successfully..!!");
			response.setType(BasicConstants.MESSAGE_SUCCESS);

		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return response;
	}

	private ResponseMessageWithResponseObject saveInfectVapEvent(AssessmentInfectionSystemPOJO infectSystemObj)
			throws Exception {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();

		try {
			SaInfectVap currentObj = infectSystemObj.getInfectionEventObject().getVapEvent().getCurrentEvent();
			String loggeduser = infectSystemObj.getLoggedUser();
			currentObj.setUhid(infectSystemObj.getUhid());
			currentObj.setLoggeduser(infectSystemObj.getLoggedUser());
			if (BasicUtils.isEmpty(currentObj.getEpisodeid()) && !BasicUtils.isEmpty(currentObj.getUhid())) {
				String queryAssociatedEvents = "select episodeid from sa_infection_vap where uhid='"
						+ currentObj.getUhid() + "' order by creationtime desc";
				List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

				if (!BasicUtils.isEmpty(listAssociatedEvents)) {
					currentObj.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
				}
			}
			Timestamp assessmentTime = currentObj.getAssessmentTime();

			if (!BasicUtils.isEmpty(assessmentTime)) {
				currentObj.setAssessmentTime(assessmentTime);
			}

			if (currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {

				// always set status to inactive
				// currentObj.setEventstatus("inactive");
				if (!BasicUtils.isEmpty(currentObj.getEventstatus())) {
					currentObj.setEventstatus(currentObj.getEventstatus());
				}

				// set treatments
				if (!BasicUtils.isEmpty(currentObj.getTreatmentactionList())) {
					currentObj.setTreatmentaction(currentObj.getTreatmentactionList().toString());
				}

				// set plans
				if (!BasicUtils.isEmpty(currentObj.getTreatmentplanList())) {
					currentObj.setTreatmentplan(currentObj.getTreatmentplanList().toString());
				}

				NurseExecutionOrders order = new NurseExecutionOrders();

				// set progress notes
				if (!BasicUtils.isEmpty(currentObj.getProgressnotes())) {
					if(!BasicUtils.isEmpty(currentObj.getProgressnotes()) && currentObj.getProgressnotes().indexOf(loggeduser)==-1) {
						currentObj.setProgressnotes(currentObj.getProgressnotes());
						order.setLoggeduser(loggeduser);
					}
				}


				if(!BasicUtils.isEmpty(currentObj.getOtherplanComments())) {
					order.setEventname("VAP");
					order.setIsExecution(false);
					order.setOrderText(currentObj.getOtherplanComments());
					order.setAssessmentdate(currentObj.getAssessmentTime());
					order.setUhid(infectSystemObj.getUhid());
					inicuDao.saveObject(order);
				}

				try {
					if (!BasicUtils.isEmpty(currentObj.getIsNewEntry())) {
						if (currentObj.getIsNewEntry()) {
							currentObj.setSavapid(null);
							currentObj.setCreationtime(null);
						}
					}
					currentObj = (SaInfectVap) sysDAO.saveObject(currentObj);
				} catch (Exception e) {
					e.printStackTrace();
				}

				if (currentObj.getSavapid() != null
						&& currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {

					// save order investigation...
					saveOrderInvestigation(infectSystemObj.getDropDowns().getOrders(), currentObj.getSavapid(),
							infectSystemObj.getUhid(), infectSystemObj.getLoggedUser(), "Vap",
							currentObj.getCreationtime());
				}

				//Added by ekpreet ( medication functionality)
				List<BabyPrescription> prescriptionList = infectSystemObj.getInfectionEventObject()
						.getVapEvent().getPrescriptionList();
				if (!BasicUtils.isEmpty(prescriptionList)) {
					this.savePrescriptionList(null, prescriptionList, "Vap", currentObj.getSavapid(),
							currentObj.getAssessmentTime());
				}

			} else if (currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.NO)) {
				// passive "no" case

				SaInfectVap vap = new SaInfectVap();
				vap.setUhid(infectSystemObj.getUhid());
				vap.setLoggeduser(infectSystemObj.getLoggedUser());
				vap.setAgeatonset(currentObj.getAgeatonset());
				vap.setAgeinhoursdays(currentObj.getAgeinhoursdays());
				vap.setEventstatus(currentObj.getEventstatus());
				vap.setAssessmentTime(infectSystemObj.getInfectionEventObject().getVapEvent().getCurrentEvent()
						.getAssessmentTime());
				vap.setAgeatassesment(currentObj.getAgeatassesment());
				vap.setIsageofassesmentinhours(currentObj.getIsageofassesmentinhours());
				vap.setAssessmentDate(currentObj.getAssessmentDate());
				vap.setAssessmentHour(currentObj.getAssessmentHour());
				vap.setAssessmentMin(currentObj.getAssessmentMin());
				vap.setEpisodeNumber(currentObj.getEpisodeNumber());

				if (!BasicUtils.isEmpty(currentObj.getMedicationStr())) {
					vap.setMedicationStr(currentObj.getMedicationStr());
				}
				if (!BasicUtils.isEmpty(currentObj.getOrderSelectedText())) {
					vap.setOrderSelectedText(currentObj.getOrderSelectedText());
				}

				// set progress notes
				if (!BasicUtils.isEmpty(currentObj.getProgressnotes())) {
					if(!BasicUtils.isEmpty(currentObj.getProgressnotes()) && currentObj.getProgressnotes().indexOf(loggeduser)==-1) {
						vap.setProgressnotes(currentObj.getProgressnotes());
					} else {
						vap.setProgressnotes(currentObj.getProgressnotes());
					}
				}

				try {
					if (!BasicUtils.isEmpty(currentObj.getIsNewEntry())) {
						if (currentObj.getIsNewEntry()) {
							vap.setSavapid(null);
							vap.setCreationtime(null);
						} else {
							vap.setSavapid(currentObj.getSavapid());
							vap.setCreationtime(currentObj.getCreationtime());
						}
					}
					currentObj = (SaInfectVap) sysDAO.saveObject(vap);

					if (currentObj.getSavapid() != null) {

						// save order investigation...
						saveOrderInvestigation(infectSystemObj.getDropDowns().getOrders(), currentObj.getSavapid(),
								infectSystemObj.getUhid(), infectSystemObj.getLoggedUser(), "Vap",
								currentObj.getAssessmentTime());

						List<BabyPrescription> prescriptionList = infectSystemObj.getInfectionEventObject()
								.getVapEvent().getPrescriptionList();
						if (!BasicUtils.isEmpty(prescriptionList)) {
							this.savePrescriptionList(null, prescriptionList, "Vap", currentObj.getSavapid(),
									currentObj.getAssessmentTime());
						}
					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				SaInfectVap vap = new SaInfectVap();
				String uhid = infectSystemObj.getUhid();
				vap.setUhid(infectSystemObj.getUhid());
				vap.setLoggeduser(infectSystemObj.getLoggedUser());
				vap.setAgeatonset(currentObj.getAgeatonset());
				vap.setAgeinhoursdays(currentObj.getAgeinhoursdays());
				vap.setAssessmentTime(
						infectSystemObj.getInfectionEventObject().getVapEvent().getCurrentEvent().getAssessmentTime());
				vap.setAgeatassesment(currentObj.getAgeatassesment());
				vap.setIsageofassesmentinhours(currentObj.getIsageofassesmentinhours());
				vap.setEpisodeNumber(currentObj.getEpisodeNumber());
				vap.setEventstatus(currentObj.getEventstatus());


				// Medication Stopped before generating inactive note and baby prescription
				// table is updated
				List<BabyPrescription> prescriptionList = infectSystemObj.getInfectionEventObject().getVapEvent()
						.getPrescriptionList();
				String continuedMedication = "";
				if (!BasicUtils.isEmpty(prescriptionList)) {
					for (int i = 0; i < prescriptionList.size(); i++) {
						BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
						if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
								&& babyPrescription.getContinueReason() != null && babyPrescription.getIsactive()) {
							continuedMedication += babyPrescription.getMedicinename() + " ";
							if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
								continuedMedication += babyPrescription.getDose() + "("
										+ babyPrescription.getDose_unit() + "/" + babyPrescription.getDose_unit_time()
										+ ") ";
							}
							continuedMedication += "prescribed on "
									+ getDateFromTimestamp(babyPrescription.getStartdate()) + " and continued due to "
									+ babyPrescription.getContinueReason() + ". ";
						}
					}
					this.savePrescriptionList(null, prescriptionList, "Vap", null, currentObj.getAssessmentTime());
				}

			//	vap.setProgressnotes(generateInactiveNotesVap(null, uhid, continuedMedication));
				vap.setProgressnotes(infectSystemObj.getInfectionEventObject().getVapEvent().getInactiveProgressNote());
				vap.setEpisodeNumber(currentObj.getEpisodeNumber());
				vap.setEventstatus(currentObj.getEventstatus());
				vap.setAssessmentTime(infectSystemObj.getInfectionEventObject().getVapEvent().getCurrentEvent()
						.getAssessmentTime());
				try {
//					currentObj = (SaInfectVap) inicuDao.saveObject(vap);
					if (!BasicUtils.isEmpty(currentObj.getIsNewEntry())) {
						if (currentObj.getIsNewEntry()) {
							vap.setSavapid(null);
							vap.setCreationtime(null);
							currentObj = (SaInfectVap) inicuDao.saveObject(vap);
						} else {
							vap.setSavapid(currentObj.getSavapid());
							vap.setCreationtime(currentObj.getCreationtime());
							
							 try {
			                        String query = "update sa_infection_vap set progressnotes = '" + vap.getProgressnotes().toString()
			                                + "' where savapid = '" + currentObj.getSavapid()  + "'";
			                        inicuDao.updateOrDeleteNativeQuery(query);
			                    } catch (Exception ex) {
			                        ex.printStackTrace();
			                        System.out.println("Exception occured while updating progressnotes for inactive state");
			                    }
						}
					}
//					updatePastSepsisProgressNotes(sepsis);
				} catch (Exception e) {
					e.printStackTrace();
				}

			}

			response.setMessage("Vap saved successfully..!!");
			response.setType(BasicConstants.MESSAGE_SUCCESS);

		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return response;
	}

	private ResponseMessageWithResponseObject saveInfectIntrauterineEvent(
			AssessmentInfectionSystemPOJO infectionSystemObj) throws Exception {

		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();

		String loggeduser = infectionSystemObj.getLoggedUser();

		try {
			SaInfectIntrauterine currentObj = infectionSystemObj.getInfectionEventObject().getIntrauterineEvent()
					.getCurrentEvent();

			currentObj.setUhid(infectionSystemObj.getUhid());
			currentObj.setLoggeduser(loggeduser);
			if (BasicUtils.isEmpty(currentObj.getEpisodeid()) && !BasicUtils.isEmpty(currentObj.getUhid())) {
				String queryAssociatedEvents = "select episodeid from sa_infection_intrauterine where uhid='"
						+ currentObj.getUhid() + "' order by creationtime desc";
				List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

				if (!BasicUtils.isEmpty(listAssociatedEvents)) {
					currentObj.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
				}
			}
			Timestamp assessmentTime = currentObj.getAssessmentDate();

			if (!BasicUtils.isEmpty(assessmentTime)) {
				currentObj.setTimeofassessment(assessmentTime);
			}

			if (currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {

				// always set status to inactive
				currentObj.setEventstatus("yes");

				// set treatments
				if (!BasicUtils.isEmpty(currentObj.getTreatmentactionList())) {
					currentObj.setTreatmentaction(currentObj.getTreatmentactionList().toString());
				}

				// set plans
				if (!BasicUtils.isEmpty(currentObj.getTreatmentplanList())) {
					currentObj.setTreatmentplan(currentObj.getTreatmentplanList().toString());
				}

				// set Medication Str
				if (!BasicUtils.isEmpty(currentObj.getMedicationStr())) {
					currentObj.setMedicationStr(currentObj.getMedicationStr());
				}

				// cause list
				if (!BasicUtils.isEmpty(currentObj.getCauseList())) {
					currentObj.setCause(currentObj.getCauseList().toString());
				}

				// Risk Factor
				if (!BasicUtils.isEmpty(currentObj.getRiskfactorList())) {
					currentObj.setRiskfactor(currentObj.getRiskfactorList().toString());
				}

				NurseExecutionOrders order = new NurseExecutionOrders();

				if (!BasicUtils.isEmpty(currentObj.getProgressnotes())) {
					currentObj
							.setProgressnotes(currentObj.getProgressnotes());
					order.setLoggeduser(currentObj.getLoggeduser());
				}

				if(!BasicUtils.isEmpty(currentObj.getOthercomments())) {
					order.setEventname("Intrauterine Infection");
					order.setIsExecution(false);
					order.setOrderText(currentObj.getOthercomments());
					order.setAssessmentdate(currentObj.getAssessmentDate());
					order.setUhid(infectionSystemObj.getUhid());
					inicuDao.saveObject(order);
				}

				try {
					currentObj = (SaInfectIntrauterine) inicuDao.saveObject(currentObj);
				} catch (Exception e) {
					e.printStackTrace();
				}

				if (currentObj.getSaintrauterineid() != null
						&& currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {

					// save order investigation...
					saveOrderInvestigation(infectionSystemObj.getDropDowns().getOrders(),
							currentObj.getSaintrauterineid(), infectionSystemObj.getUhid(),
							infectionSystemObj.getLoggedUser(), "Intrauterine", currentObj.getTimeofassessment());

					// save baby precriptions details
					List<BabyPrescription> prescriptionList = infectionSystemObj.getInfectionEventObject()
							.getIntrauterineEvent().getPrescriptionList();
					if (!BasicUtils.isEmpty(prescriptionList)) {
						this.savePrescriptionList(null, prescriptionList, "Intrauterine",
								currentObj.getSaintrauterineid(), currentObj.getTimeofassessment());
					}
				}

			} else if (currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.NO)) {
				// passive "no" case

				SaInfectIntrauterine infection = new SaInfectIntrauterine();
				infection.setUhid(infectionSystemObj.getUhid());
				infection.setLoggeduser(infectionSystemObj.getLoggedUser());
				infection.setAgeatonset(currentObj.getAgeatonset());
				infection.setAgeinhoursdays(currentObj.getAgeinhoursdays());
				infection.setEventstatus(currentObj.getEventstatus());
				infection.setTimeofassessment(infectionSystemObj.getInfectionEventObject().getIntrauterineEvent().getCurrentEvent().getTimeofassessment());
				infection.setAgeatassesment(currentObj.getAgeatassesment());
				infection.setIsageofassesmentinhours(currentObj.getIsageofassesmentinhours());
				infection.setAssessmentDate(currentObj.getAssessmentDate());
//				infection.setAssessmentHour(currentObj.getAssessmentHour());
//				infection.setAssessmentMin(currentObj.getAssessmentMin());
				infection.setEpisodeNumber(currentObj.getEpisodeNumber());


				/*String progressNotes = "";
				progressNotes = "No active Intrauterine.";


				if (!BasicUtils.isEmpty(currentObj.getMedicationStr())) {
					progressNotes += currentObj.getMedicationStr() + ". ";
				}
				if (!BasicUtils.isEmpty(currentObj.getOrderSelectedText())) {
					progressNotes += "Investigation ordered are - " + currentObj.getOrderSelectedText() + ". ";
				}
				infection.setProgressnotes(progressNotes);*/
				infection.setProgressnotes(currentObj.getProgressnotes());

				// set progress notes
				if (!BasicUtils.isEmpty(currentObj.getProgressnotes())) {
					infection.setProgressnotes(infection.getProgressnotes());
				}

				try {
					currentObj = (SaInfectIntrauterine) inicuDao.saveObject(infection);

					if (currentObj.getSaintrauterineid() != null) {

						// save order investigation...
						saveOrderInvestigation(infectionSystemObj.getDropDowns().getOrders(), currentObj.getSaintrauterineid(),
								infectionSystemObj.getUhid(), infectionSystemObj.getLoggedUser(), "Intrauterine",
								currentObj.getTimeofassessment());

						List<BabyPrescription> prescriptionList = infectionSystemObj.getInfectionEventObject()
								.getVapEvent().getPrescriptionList();
						if (!BasicUtils.isEmpty(prescriptionList)) {
							this.savePrescriptionList(null, prescriptionList, "Intrauterine", currentObj.getSaintrauterineid(),
									currentObj.getTimeofassessment());
						}
					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			}else {
				SaInfectIntrauterine infection = new SaInfectIntrauterine();
				String uhid = infectionSystemObj.getUhid();
				infection.setUhid(infectionSystemObj.getUhid());
				infection.setLoggeduser(infectionSystemObj.getLoggedUser());
				infection.setAgeatonset(currentObj.getAgeatonset());
				infection.setAgeinhoursdays(currentObj.getAgeinhoursdays());
				infection.setEventstatus(currentObj.getEventstatus());
				infection.setTimeofassessment(infectionSystemObj.getInfectionEventObject().getIntrauterineEvent().getCurrentEvent().getAssessmentDate());
				infection.setAgeatassesment(currentObj.getAgeatassesment());
				infection.setIsageofassesmentinhours(currentObj.getIsageofassesmentinhours());
				infection.setEpisodeNumber(currentObj.getEpisodeNumber());
				infection.setEventstatus(currentObj.getEventstatus());

				// Medication Stopped before generating inactive note and baby prescription
				// table is updated
				List<BabyPrescription> prescriptionList = infectionSystemObj.getInfectionEventObject().getIntrauterineEvent()
						.getPrescriptionList();
				String continuedMedication = "";
				if (!BasicUtils.isEmpty(prescriptionList)) {
					for (int i = 0; i < prescriptionList.size(); i++) {
						BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
						if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
								&& babyPrescription.getContinueReason() != null && babyPrescription.getIsactive()) {
							continuedMedication += babyPrescription.getMedicinename() + " ";
							if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
								continuedMedication += babyPrescription.getDose() + "("
										+ babyPrescription.getDose_unit() + "/" + babyPrescription.getDose_unit_time()
										+ ") ";
							}
							continuedMedication += "prescribed on "
									+ getDateFromTimestamp(babyPrescription.getStartdate()) + " and continued due to "
									+ babyPrescription.getContinueReason() + ". ";
						}
					}
					this.savePrescriptionList(null, prescriptionList, "Intrauterine", null, currentObj.getTimeofassessment());
				}

				infection.setProgressnotes(generateInactiveNotesIntrauterine(null, uhid, continuedMedication));
				try {
					currentObj = (SaInfectIntrauterine) inicuDao.saveObject(infection);
//					updatePastSepsisProgressNotes(sepsis);
				} catch (Exception e) {
					e.printStackTrace();
				}

			}

			response.setMessage("Intrauterine saved successfully..!!");
			response.setType(BasicConstants.MESSAGE_SUCCESS);

		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return response;
	}

	private ResponseMessageWithResponseObject saveInfectClabsiEvent(AssessmentInfectionSystemPOJO infectSystemObj)
			throws Exception {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();

		try {
			SaInfectClabsi currentObj = infectSystemObj.getInfectionEventObject().getClabsiEvent().getCurrentEvent();
			String loggedUser = infectSystemObj.getLoggedUser();
			currentObj.setUhid(infectSystemObj.getUhid());
			currentObj.setLoggeduser(infectSystemObj.getLoggedUser());
			if (BasicUtils.isEmpty(currentObj.getEpisodeid()) && !BasicUtils.isEmpty(currentObj.getUhid())) {
				String queryAssociatedEvents = "select episodeid from sa_infection_clabsi where uhid='"
						+ currentObj.getUhid() + "' order by creationtime desc";
				List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

				if (!BasicUtils.isEmpty(listAssociatedEvents)) {
					currentObj.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
				}
			}
			Timestamp assessmentTime = currentObj.getAssessmentTime();

			if (!BasicUtils.isEmpty(assessmentTime)) {
				currentObj.setAssessmentTime(assessmentTime);
			}

			if (currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {

				// always set status to inactive
				// currentObj.setEventstatus("active");

				if (!BasicUtils.isEmpty(currentObj.getEventstatus())) {
					currentObj.setEventstatus(currentObj.getEventstatus());
				}

				// set treatments
				if (!BasicUtils.isEmpty(currentObj.getTreatmentactionList())) {
					currentObj.setTreatmentaction(currentObj.getTreatmentactionList().toString());
				}

				// set plans
				if (!BasicUtils.isEmpty(currentObj.getTreatmentplanList())) {
					currentObj.setTreatmentplan(currentObj.getTreatmentplanList().toString());
				}

				NurseExecutionOrders order = new NurseExecutionOrders();

				if(!BasicUtils.isEmpty(currentObj.getProgressnotes()) && currentObj.getProgressnotes().indexOf(loggedUser)==-1) {
					currentObj.setProgressnotes(currentObj.getProgressnotes());
					order.setLoggeduser(loggedUser);
				}

				if(!BasicUtils.isEmpty(currentObj.getOtherplanComments())) {
					order.setEventname("CLABSI");
					order.setIsExecution(false);
					order.setOrderText(currentObj.getOtherplanComments());
					order.setAssessmentdate(currentObj.getAssessmentTime());
					order.setUhid(infectSystemObj.getUhid());
					inicuDao.saveObject(order);
				}

				try {
					if (!BasicUtils.isEmpty(currentObj.getIsNewEntry())) {
						if (currentObj.getIsNewEntry()) {
							currentObj.setSaclabsiid(null);
							currentObj.setCreationtime(null);
						}
					}
					currentObj = (SaInfectClabsi) inicuDao.saveObject(currentObj);
				} catch (Exception e) {
					e.printStackTrace();
				}

				if (currentObj.getSaclabsiid() != null
						&& currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.YES)) {

					// save order investigation...
					saveOrderInvestigation(infectSystemObj.getDropDowns().getOrders(), currentObj.getSaclabsiid(),
							infectSystemObj.getUhid(), infectSystemObj.getLoggedUser(), "Clabsi",
							currentObj.getTimeofassessment());
				}

				//Added by ekpreet ( medication functionality)
				List<BabyPrescription> prescriptionList = infectSystemObj.getInfectionEventObject()
						.getClabsiEvent().getPrescriptionList();
				if (!BasicUtils.isEmpty(prescriptionList)) {
					this.savePrescriptionList(null, prescriptionList, "Clabsi", currentObj.getSaclabsiid(),
							currentObj.getAssessmentTime());
				}

			} else if (currentObj.getEventstatus().equalsIgnoreCase(BasicConstants.NO)) {
				// passive "no" case

				SaInfectClabsi clabsi = new SaInfectClabsi();
				clabsi.setUhid(infectSystemObj.getUhid());
				clabsi.setLoggeduser(infectSystemObj.getLoggedUser());
				clabsi.setAgeatonset(currentObj.getAgeatonset());
				clabsi.setAgeinhoursdays(currentObj.getAgeinhoursdays());
				clabsi.setEventstatus(currentObj.getEventstatus());
				clabsi.setAssessmentTime(infectSystemObj.getInfectionEventObject().getClabsiEvent().getCurrentEvent()
						.getAssessmentTime());
				clabsi.setAgeatassesment(currentObj.getAgeatassesment());
				clabsi.setIsageofassesmentinhours(currentObj.getIsageofassesmentinhours());
				clabsi.setAssessmentDate(currentObj.getAssessmentDate());
				clabsi.setAssessmentHour(currentObj.getAssessmentHour());
				clabsi.setAssessmentMin(currentObj.getAssessmentMin());
				clabsi.setEpisodeNumber(currentObj.getEpisodeNumber());

				if (!BasicUtils.isEmpty(currentObj.getMedicationStr())) {
					clabsi.setMedicationStr(currentObj.getMedicationStr());
				}
				if (!BasicUtils.isEmpty(currentObj.getOrderSelectedText())) {
					clabsi.setOrderSelectedText(currentObj.getOrderSelectedText());
				}

				// set progress notes
				if (!BasicUtils.isEmpty(currentObj.getProgressnotes())) {
					if(!BasicUtils.isEmpty(currentObj.getProgressnotes()) && currentObj.getProgressnotes().indexOf(loggedUser)==-1) {
						clabsi.setProgressnotes(currentObj.getProgressnotes());
					} else {
						clabsi.setProgressnotes(currentObj.getProgressnotes());
					}
				}

				try {
					if (!BasicUtils.isEmpty(currentObj.getIsNewEntry())) {
						if (currentObj.getIsNewEntry()) {
							clabsi.setSaclabsiid(null);
							clabsi.setCreationtime(null);
						} else {
							clabsi.setSaclabsiid(currentObj.getSaclabsiid());
							clabsi.setCreationtime(currentObj.getCreationtime());
						}
					}
					currentObj = (SaInfectClabsi) inicuDao.saveObject(clabsi);

					if (currentObj.getSaclabsiid() != null) {

						// save order investigation...
						saveOrderInvestigation(infectSystemObj.getDropDowns().getOrders(), currentObj.getSaclabsiid(),
								infectSystemObj.getUhid(), infectSystemObj.getLoggedUser(), "Clabsi",
								currentObj.getAssessmentTime());

						List<BabyPrescription> prescriptionList = infectSystemObj.getInfectionEventObject()
								.getClabsiEvent().getPrescriptionList();
						if (!BasicUtils.isEmpty(prescriptionList)) {
							this.savePrescriptionList(null, prescriptionList, "Clabsi", currentObj.getSaclabsiid(),
									currentObj.getAssessmentTime());
						}
					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				SaInfectClabsi clabsi = new SaInfectClabsi();
				String uhid = infectSystemObj.getUhid();
				clabsi.setUhid(infectSystemObj.getUhid());
				clabsi.setLoggeduser(infectSystemObj.getLoggedUser());
				clabsi.setAgeatonset(currentObj.getAgeatonset());
				clabsi.setAgeinhoursdays(currentObj.getAgeinhoursdays());
				clabsi.setAssessmentTime(
						infectSystemObj.getInfectionEventObject().getClabsiEvent().getCurrentEvent().getAssessmentTime());
				clabsi.setAgeatassesment(currentObj.getAgeatassesment());
				clabsi.setIsageofassesmentinhours(currentObj.getIsageofassesmentinhours());
				clabsi.setEpisodeNumber(currentObj.getEpisodeNumber());
				clabsi.setEventstatus(currentObj.getEventstatus());


				// Medication Stopped before generating inactive note and baby prescription
				// table is updated
				List<BabyPrescription> prescriptionList = infectSystemObj.getInfectionEventObject().getClabsiEvent()
						.getPrescriptionList();
				String continuedMedication = "";
				if (!BasicUtils.isEmpty(prescriptionList)) {
					for (int i = 0; i < prescriptionList.size(); i++) {
						BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
						if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
								&& babyPrescription.getContinueReason() != null && babyPrescription.getIsactive()) {
							continuedMedication += babyPrescription.getMedicinename() + " ";
							if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
								continuedMedication += babyPrescription.getDose() + "("
										+ babyPrescription.getDose_unit() + "/" + babyPrescription.getDose_unit_time()
										+ ") ";
							}
							continuedMedication += "prescribed on "
									+ getDateFromTimestamp(babyPrescription.getStartdate()) + " and continued due to "
									+ babyPrescription.getContinueReason() + ". ";
						}
					}
					this.savePrescriptionList(null, prescriptionList, "Clabsi", null, currentObj.getAssessmentTime());
				}

				clabsi.setProgressnotes(generateInactiveNotesClabsi(null, uhid, continuedMedication));
				clabsi.setEpisodeNumber(currentObj.getEpisodeNumber());
				clabsi.setEventstatus(currentObj.getEventstatus());
				clabsi.setAssessmentDate(infectSystemObj.getInfectionEventObject().getClabsiEvent().getCurrentEvent()
						.getAssessmentDate());
				try {
					currentObj = (SaInfectClabsi) inicuDao.saveObject(clabsi);
//					updatePastSepsisProgressNotes(sepsis);
				} catch (Exception e) {
					e.printStackTrace();
				}

			}

			response.setMessage("Clabsi saved successfully..!!");
			response.setType(BasicConstants.MESSAGE_SUCCESS);


		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return response;
	}

	@Override
	public BellMasterJSON getBellScore(Long bellscoreid) {

		BellMasterJSON response = new BellMasterJSON();
		List<GenericScoreStatusJSON> statusList = new ArrayList<GenericScoreStatusJSON>();
		response.setBellStageStatusList(statusList);
		String uhid = "";
		try {

			String queryBellScore = "select obj from ScoreBellStage as obj where bellstagescoreid = " + bellscoreid;
			List<ScoreBellStage> listBellScore = inicuDao.getListFromMappedObjQuery(queryBellScore);

			String selectedRef = "";
			int totalScore = 0;
			ScoreBellStage bellStageScore = null;
			if (!(null == listBellScore || listBellScore.isEmpty() || null == listBellScore.get(0))) {
				bellStageScore = listBellScore.get(0);
				uhid = bellStageScore.getUhid();
				if (!BasicUtils.isEmpty(bellStageScore.getBellstagescore())) {
					totalScore = bellStageScore.getBellstagescore();
				}

				selectedRef = "," + bellStageScore.getSystemsign() + "," + bellStageScore.getIntestinalsign() + ","
						+ bellStageScore.getRadiologicalsign() + "," + bellStageScore.getTreatmentsign() + ",";
			} else {
				bellStageScore = new ScoreBellStage();
			}

			String queryBellScoreRef = "select obj from RefBellScore as obj order by ref_bellscoreid";
			List<RefBellScore> listBellScoreRef = inicuDao.getListFromMappedObjQuery(queryBellScoreRef);
			Iterator<RefBellScore> itr = listBellScoreRef.iterator();

			String currentClinicalStatus = "";
			int currentScore = 0;
			int index = 0;
			boolean statusChangeFlag = false;
			RefBellScore currentScoreRef;
			GenericScoreStatusJSON bellStatusObj = null;
			List<GenericScoreJSON> scoreList = null;
			GenericScoreJSON scoreObj = null;
			List<GenericScoreSignJSON> signList = null;
			GenericScoreSignJSON signObj = null;
			int statusIndex = 0;
			String[] statusScoreArr = { "systemsignscore", "intestinalsignscore", "radiologicalsignscore",
					"treatmentsign" };
			int scoreIndex = -1;
			while (itr.hasNext()) {
				currentScoreRef = itr.next();

				if (!currentScoreRef.getClinicalStatus().equalsIgnoreCase(currentClinicalStatus)
						|| currentClinicalStatus.isEmpty()) {
					// first record or new row/status
					scoreIndex++;
					statusChangeFlag = true;
					currentClinicalStatus = currentScoreRef.getClinicalStatus();

					bellStatusObj = new GenericScoreStatusJSON();
					bellStatusObj.setClinicalStatus(currentClinicalStatus);
					bellStatusObj.setStatusIndex(++statusIndex);

					scoreList = new ArrayList<GenericScoreJSON>();
					bellStatusObj.setScoreList(scoreList);

					statusList.add(bellStatusObj);
				}

				if (Integer.parseInt(currentScoreRef.getBellscore()) != currentScore || statusChangeFlag) {

					// score changed new scoreObj and signList
					index = 0;
					statusChangeFlag = false;

					while (++currentScore < Integer.parseInt(currentScoreRef.getBellscore())) {
						// for creation of blank signlist, if there are no signs
						signList = new ArrayList<GenericScoreSignJSON>();

						scoreObj = new GenericScoreJSON();
						scoreObj.setScoreValue(currentScore);
						scoreObj.setScoreName(statusScoreArr[scoreIndex]);
						scoreObj.setScoreIndex(statusIndex + "-" + currentScore);
						scoreObj.setSignList(signList);

						scoreList.add(scoreObj);

					}

					currentScore = Integer.parseInt(currentScoreRef.getBellscore());

					signList = new ArrayList<GenericScoreSignJSON>();

					scoreObj = new GenericScoreJSON();
					scoreObj.setScoreValue(currentScore);
					scoreObj.setScoreName(statusScoreArr[scoreIndex]);
					scoreObj.setScoreIndex(statusIndex + "-" + currentScore);
					scoreObj.setSignList(signList);

					scoreList.add(scoreObj);
				}

				signObj = new GenericScoreSignJSON();
				signObj.setDbRefId(currentScoreRef.getRef_bellscoreid());
				signObj.setClinicalSign(currentScoreRef.getClinicalSign());
				signObj.setIndex(index);
				if (selectedRef.contains("," + currentScoreRef.getRef_bellscoreid() + ",")) {
					signObj.setSelected(true);
				} else {
					signObj.setSelected(false);
				}
				signList.add(signObj);

				index++;
			}
			response.setScoreBellStageObj(bellStageScore);
			response.setTotalScore(totalScore);
		} catch (Exception e) {
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, "", uhid,
					"GET_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return response;
	}

	@Override
	public ResponseMessageWithResponseObject saveBellScore(ScoreBellStage bellScore) {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
		String uhid = "";
		try {
			bellScore = (ScoreBellStage) inicuDao.saveObject(bellScore);
			response.setType(BasicConstants.MESSAGE_SUCCESS);
			response.setMessage("Bell Stage Score Saved Successfully..!!");
			response.setReturnedObject(bellScore);
		} catch (Exception e) {
			response.setMessage(e.getMessage());
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, "", uhid,
					"SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return response;
	}

	@Override
	public List<InvestigationOrdered> getJaundiceInvestigationOrdered(String searchUhid, String searchDate) {

		// get investigations for "uhid" which are in sent state
		List<RefTestslist> jaundiceOrderId = null;
		List<InvestigationOrdered> invOrderedList = null;
		String queryinvOrderedList = "from InvestigationOrdered inv,  TestItemResult test"
				+ " WHERE inv.uhid=test.prn and inv.assesmentid = test.testid and " + "inv.uhid='" + searchUhid
				+ "' and inv.assesment_type ='" + BasicConstants.JAUNDICE + "'";
		// queryinvOrderedList += " AND testslistid='"+searchTestId+"' ";

		// if(searchDate!="")
		// queryinvOrderedList +=" AND senttolab_time>='"+searchDate+" 00:00:00'
		// "+"AND
		// senttolab_time<='"+searchDate+" 23:59:59.999' ";
		//
		// queryinvOrderedList +=" AND order_status= 'sent' ORDER BY
		// senttolab_time ASC
		// ";

		invOrderedList = inicuDao.getListFromMappedObjQuery(queryinvOrderedList);
		return invOrderedList;
	}

	public String getDurationProgressNotes(long inputMinutes) {
		String duration = "";
		if (inputMinutes < 60) {
			if (inputMinutes == 1)
				duration += "1 min";
			else
				duration += (inputMinutes + " mins");
		} else if (inputMinutes < (60 * 24)) {
			int Hours = (int) (inputMinutes / 60);
			if (Hours == 1) {
				duration += " " + Hours + " hour";
			} else if (Hours > 0) {
				duration += " " + Hours + " hours";
			}
			int remainingMins = (int) (inputMinutes - (Hours * 60));
			if (remainingMins == 1)
				duration += " 1 min";
			else if (remainingMins > 0)
				duration += " " + remainingMins + " mins";
		} else {
			int days = (int) (inputMinutes / (60 * 24));
			if (days == 1)
				duration += " 1 day";
			else
				duration += " " + ((days) + " days");

			int remainingMins = (int) (inputMinutes - (days * 24 * 60));
			if (remainingMins > 0) {
				if (remainingMins > 60) {
					duration += " " + (remainingMins / 60) + " hours";
					remainingMins = remainingMins - ((remainingMins / 60) * 60);
					if (remainingMins > 0) {
						if (remainingMins == 1)
							duration += " 1 min";
						else if (remainingMins < 60)
							duration += " " + remainingMins + " mins";
					}

				} else {
					duration += " " + remainingMins;
					if (remainingMins > 1)
						duration += " mins";
					else
						duration += " min";
				}

			}

		}
		duration += ". ";

		return duration;
	}

	@Override
	public ResponseMessageWithResponseObject saveStableNote(StableNotesPOJO stableNote) {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
		try {
			if (!BasicUtils.isEmpty(stableNote.getNote())) {
				List<BabyPrescription> prescriptionList = stableNote.getNote().getPrescriptionList();

				StableNote currentObj = new StableNote();
				if (BasicUtils.isEmpty(currentObj.getEpisodeid()) && !BasicUtils.isEmpty(currentObj.getUhid())) {
					String queryAssociatedEvents = "select episodeid from stable_notes where uhid='"
							+ currentObj.getUhid() + "' order by creationtime desc";
					List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

					if (!BasicUtils.isEmpty(listAssociatedEvents)) {
						currentObj.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
					}
				}
				String note = stableNote.getNote().getNotes();
				NurseExecutionOrders order = new NurseExecutionOrders();

				if (!BasicUtils.isEmpty(note) && note.indexOf(stableNote.getNote().getLoggeduser())==-1) {
					stableNote.getNote().setNotes(note);
					order.setLoggeduser(stableNote.getNote().getLoggeduser());
				}

				if (!BasicUtils.isEmpty(currentObj.getNewEntry())) {
					if (currentObj.getNewEntry()) {
						stableNote.getNote().setId(null);
						stableNote.getNote().setCreationtime(null);
					} else {
						stableNote.getNote().setId(currentObj.getId());
						stableNote.getNote().setCreationtime(currentObj.getCreationtime());
					}
				}

				if(!BasicUtils.isEmpty(stableNote.getNote().getPlan())) {
					order.setEventname("Assessment");
					order.setIsExecution(false);
					order.setOrderText(stableNote.getNote().getPlan());
					order.setAssessmentdate(stableNote.getNote().getEntrytime());
					order.setUhid(stableNote.getNote().getUhid());
					inicuDao.saveObject(order);
				}
				currentObj = (StableNote) inicuDao.saveObject(stableNote.getNote());

				if (!BasicUtils.isEmpty(prescriptionList)) {
					this.savePrescriptionList(null, prescriptionList, "Stable Notes", currentObj.getId(),
							currentObj.getCreationtime());
				}

				// save order investigation...
				if (currentObj.getId() != null) {
					saveOrderInvestigation(stableNote.getOrders(), currentObj.getId(), currentObj.getUhid(),
							currentObj.getLoggeduser(), "Stable Notes", currentObj.getEntrytime());
				}

				response.setType(BasicConstants.MESSAGE_SUCCESS);
				response.setMessage("Stable notes saved successfully.");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return response;
	}

	@Override
	public StableNotesPOJO getStableNote(String uhid) {
		StableNotesPOJO noteObj = new StableNotesPOJO();
		try {

			String queryRefTestsList = "select obj from RefTestslist as obj where not (obj.assesmentCategory like ('%None%')) order by assesmentCategory";
			List<RefTestslist> listRefTests = inicuDao.getListFromMappedObjQuery(queryRefTestsList);
			// populate drop down hash map for the tests list...
			HashMap<Object, List<RefTestslist>> testsListMap = new HashMap<Object, List<RefTestslist>>();
			for (RefTestslist test : listRefTests) {
				List categoryList = null;
				if (testsListMap.get(test.getAssesmentCategory()) != null) {
					categoryList = testsListMap.get(test.getAssesmentCategory());

				} else {
					categoryList = new ArrayList<RefTestslist>();
				}
				categoryList.add(test);
				testsListMap.put(test.getAssesmentCategory(), categoryList);
			}
			noteObj.setOrders(testsListMap);

			String refFeedMethodSql = "SELECT obj FROM RefMasterfeedmethod as obj";
			List<RefMasterfeedmethod> refFeedMethodList = inicuDao.getListFromMappedObjQuery(refFeedMethodSql);
			if (!BasicUtils.isEmpty(refFeedMethodList)) {
				noteObj.setFeedMethods(refFeedMethodList);
			}

			// Cycle runs from 8AM to 8AM.
			Timestamp currentDate = new Timestamp((new java.util.Date().getTime()));
			Timestamp yesterday = new Timestamp((new java.util.Date().getTime()));

			int offset = TimeZone.getTimeZone(BasicConstants.CLIENT_TIME_ZONE).getRawOffset()
					- TimeZone.getDefault().getRawOffset();

			yesterday.setHours(8);
			yesterday.setMinutes(0);
			yesterday.setSeconds(0);
			yesterday = new Timestamp(yesterday.getTime() - offset);

			String query = "select obj from StableNote obj where uhid='" + uhid + "' order by entrytime desc";
			List<StableNote> notes = inicuDao.getListFromMappedObjQuery(query);
			if (!BasicUtils.isEmpty(notes)) {
				noteObj.setNotesList(notes);
			}

			query = "select obj from StableNote obj where uhid='" + uhid + "' and entrytime >= '" + yesterday
					+ "' order by entrytime desc";
			notes = inicuDao.getListFromMappedObjQuery(query);
			boolean isFirstNote = false;
			if (BasicUtils.isEmpty(notes)) {
				isFirstNote = true;
				currentDate = new Timestamp((new java.util.Date().getTime()));
				yesterday = new Timestamp((new java.util.Date().getTime()) - (24 * 60 * 60 * 1000));
				currentDate.setHours(8);
				currentDate.setMinutes(0);
				currentDate.setSeconds(0);
				yesterday.setHours(8);
				yesterday.setMinutes(0);
				yesterday.setSeconds(0);
				currentDate = new Timestamp(currentDate.getTime() - offset);
				yesterday = new Timestamp(yesterday.getTime() - offset);
			}
			noteObj.getNote().setIsFirstNote(isFirstNote);

			String queryVital = "select obj from NursingVitalparameter obj where uhid='" + uhid + "' and entrydate <= '"
					+ currentDate + "' and entrydate >= '" + yesterday + "' order by entrydate desc";
			List<NursingVitalparameter> listVitalsInfo = notesDao.getListFromMappedObjNativeQuery(queryVital);
			if (!BasicUtils.isEmpty(listVitalsInfo)) {

				if (!BasicUtils.isEmpty(listVitalsInfo.get(0).getHrRate())) {
					noteObj.getNote().setHr(listVitalsInfo.get(0).getHrRate());
				}
				if (!BasicUtils.isEmpty(listVitalsInfo.get(0).getDiastBp())) {
					noteObj.getNote().setDiaStolicBp(Float.parseFloat(listVitalsInfo.get(0).getDiastBp()));
				}
				if (!BasicUtils.isEmpty(listVitalsInfo.get(0).getSystBp())) {
					noteObj.getNote().setSystolicBp(Float.parseFloat(listVitalsInfo.get(0).getSystBp()));
				}
				if (!BasicUtils.isEmpty(listVitalsInfo.get(0).getCentraltemp())) {
					noteObj.getNote().setTemp(listVitalsInfo.get(0).getCentraltemp());
				}
				if (!BasicUtils.isEmpty(listVitalsInfo.get(0).getRrRate())) {
					noteObj.getNote().setRr(listVitalsInfo.get(0).getRrRate());
				}
				if (!BasicUtils.isEmpty(listVitalsInfo.get(0).getSpo2())) {
					noteObj.getNote().setSpo2(Float.parseFloat(listVitalsInfo.get(0).getSpo2()));
				}
				if (!BasicUtils.isEmpty(listVitalsInfo.get(0).getConsciousness())) {
					noteObj.getNote().setActivity((listVitalsInfo.get(0).getConsciousness()));
				}
				if (!BasicUtils.isEmpty(listVitalsInfo.get(0).getCft())) {
					noteObj.getNote().setCrt(listVitalsInfo.get(0).getCft());
				}
			}

			String queryFeed = "select obj from BabyfeedDetail obj where uhid='" + uhid + "' and entrydatetime <= '"
					+ currentDate + "' and entrydatetime >= '" + yesterday + "' order by entrydatetime desc";
			List<BabyfeedDetail> feedList = inicuDao.getListFromMappedObjQuery(queryFeed);
			if (!BasicUtils.isEmpty(feedList)) {
				noteObj.getNote().setBabyFeed(feedList.get(0));
			}

			long duration = ((currentDate.getTime() - yesterday.getTime()) / (1000 * 60 * 60));

			float urineTotal = 0;
			int stoolCount = 0;
			int vomitCount = 0;
			float todayWeight = 0;

			String sql = "SELECT workingweight FROM baby_visit where uhid='" + uhid
					+ "' order by visitdate desc, visittime desc limit 1";
			List<Object> babyWeight = (List<Object>) inicuDao.getListFromNativeQuery(sql);
			if (!BasicUtils.isEmpty(babyWeight)) {
				todayWeight = (Float) babyWeight.get(0) / 1000;
			}

			HashMap<Float, Integer> feedMap = new HashMap<Float, Integer>();

			List<NursingIntakeOutput> pastNursingIntakeList = inicuDao.getListFromMappedObjQuery(
					HqlSqlQueryConstants.getNursingIntakeOutputList(uhid, yesterday, currentDate));
			for (NursingIntakeOutput item : pastNursingIntakeList) {
				float totalFeed = 0;

				if (item.getUrinePassed() != null && item.getUrinePassed() && item.getUrine() != null) {
					urineTotal += Float.parseFloat(item.getUrine());
				}
				if (item.getStoolPassed() != null && item.getStoolPassed()) {
					stoolCount++;
				}
				if (item.getVomitPassed() != null && item.getVomitPassed()) {
					vomitCount++;
				}
				if (!BasicUtils.isEmpty(item.getAbdomenGirth())
						&& BasicUtils.isEmpty(noteObj.getNote().getAbdominalGirth())) {
					noteObj.getNote().setAbdominalGirth(Float.parseFloat(item.getAbdomenGirth()));
				}

				if (!BasicUtils.isEmpty(item.getPrimaryFeedValue())) {
					totalFeed = item.getPrimaryFeedValue();
				}
				if (!BasicUtils.isEmpty(item.getFormulaValue())) {
					totalFeed += item.getFormulaValue();
				}
				if (totalFeed > 0) {
					Integer categoryList = 0;
					if (feedMap.get(totalFeed) != null) {
						categoryList = feedMap.get(totalFeed);
						categoryList++;
					} else {
						categoryList++;
					}
					feedMap.put(totalFeed, categoryList);
				}
			}
			String htmlNextLine = System.getProperty("line.separator");
			String feedIntake = "";
			for (Float itemId : feedMap.keySet()) {
				Integer feedCount = feedMap.get(itemId);
				if (feedIntake == "")
					feedIntake += itemId + " ml " + feedCount + " feeds ";
				else
					feedIntake += "," + itemId + " ml " + feedCount + " feeds ";
			}
			noteObj.getNote().setFeedIntake(feedIntake);
			if (urineTotal > 0 && todayWeight > 0) {
				urineTotal = (urineTotal) / (todayWeight * duration);
				urineTotal = (Math.round(urineTotal * 100) / 100);
				noteObj.getNote().setUrineStatus(true);
				noteObj.getNote().setUrineVolume(urineTotal);
			}
			if (stoolCount > 0) {
				noteObj.getNote().setStoolStatus(true);
				noteObj.getNote().setStoolTimes(stoolCount);
			}
			if (vomitCount > 0) {
				noteObj.getNote().setVomitStatus(true);
			}

			boolean isAssessmentQualified = false;
			String rdsQuery = "select obj from SaRespRds obj where uhid = '" + uhid + "' order by assessment_time desc";
			List<SaRespRds> SaRespRdsList = inicuDao.getListFromMappedObjQuery(rdsQuery);
			if (!BasicUtils.isEmpty(SaRespRdsList)
					&& !SaRespRdsList.get(0).getEventstatus().equalsIgnoreCase("Inactive")) {
				isAssessmentQualified = true;
				noteObj.getNote().setRespiratoryAssessment("Rds");

			}
			rdsQuery = "select obj from SaRespApnea obj where uhid = '" + uhid + "' order by assessment_time desc";
			List<SaRespApnea> SaRespApneaList = inicuDao.getListFromMappedObjQuery(rdsQuery);
			if (!BasicUtils.isEmpty(SaRespApneaList)
					&& !SaRespApneaList.get(0).getEventstatus().equalsIgnoreCase("Inactive")) {
				isAssessmentQualified = true;
				noteObj.getNote().setRespiratoryAssessment("Apnea");
			}
			rdsQuery = "select obj from SaRespPphn obj where uhid = '" + uhid + "' order by assessment_time desc";
			List<SaRespPphn> SaRespPphnList = inicuDao.getListFromMappedObjQuery(rdsQuery);
			if (!BasicUtils.isEmpty(SaRespPphnList)
					&& !SaRespPphnList.get(0).getEventstatus().equalsIgnoreCase("Inactive")) {
				isAssessmentQualified = true;
				noteObj.getNote().setRespiratoryAssessment("Pphn");
			}
			rdsQuery = "select obj from SaRespPneumo obj where uhid = '" + uhid + "' order by assessment_time desc";
			List<SaRespPneumo> SaRespPneumoList = inicuDao.getListFromMappedObjQuery(rdsQuery);
			if (!BasicUtils.isEmpty(SaRespPneumoList)
					&& !SaRespPneumoList.get(0).getEventstatus().equalsIgnoreCase("Inactive")) {
				isAssessmentQualified = true;
				noteObj.getNote().setRespiratoryAssessment("Pneumo");
			}

			if (isAssessmentQualified) {
				noteObj.getNote().setRespNormal(false);
			} else {
				noteObj.getNote().setRespNormal(true);
			}
			isAssessmentQualified = false;
			rdsQuery = "select obj from SaSepsis obj where uhid = '" + uhid + "' order by assessment_time desc";
			List<SaSepsis> SaSepsisList = inicuDao.getListFromMappedObjQuery(rdsQuery);
			if (!BasicUtils.isEmpty(SaSepsisList)
					&& !SaSepsisList.get(0).getEventstatus().equalsIgnoreCase("Inactive")) {
				isAssessmentQualified = true;
				noteObj.getNote().setInfectionAssessment("Sepsis");
			}
			if (isAssessmentQualified) {
				noteObj.getNote().setInfectionNormal(false);
			} else {
				noteObj.getNote().setInfectionNormal(true);
			}
			isAssessmentQualified = false;
			rdsQuery = "select obj from SaJaundice obj where uhid = '" + uhid + "' order by assessment_time desc";
			List<SaJaundice> SaJaundiceList = inicuDao.getListFromMappedObjQuery(rdsQuery);
			if (!BasicUtils.isEmpty(SaJaundiceList)
					&& !SaJaundiceList.get(0).getJaundicestatus().equalsIgnoreCase("Inactive")) {
				isAssessmentQualified = true;
			}
			if (isAssessmentQualified) {
				noteObj.getNote().setJaundiceNormal(false);
			} else {
				noteObj.getNote().setJaundiceNormal(true);
			}
			isAssessmentQualified = false;
			rdsQuery = "select obj from SaCnsSeizures obj where uhid = '" + uhid + "' order by assessment_time desc";
			List<SaCnsSeizures> SaCnsSeizuresList = inicuDao.getListFromMappedObjQuery(rdsQuery);
			if (!BasicUtils.isEmpty(SaCnsSeizuresList)
					&& !SaCnsSeizuresList.get(0).getEventstatus().equalsIgnoreCase("Inactive")) {
				isAssessmentQualified = true;
				noteObj.getNote().setCnsAssessment("Seizure");
			}
			rdsQuery = "select obj from SaCnsAsphyxia obj where uhid = '" + uhid + "' order by assessment_time desc";
			List<SaCnsAsphyxia> SaCnsAsphyxiaList = inicuDao.getListFromMappedObjQuery(rdsQuery);
			if (!BasicUtils.isEmpty(SaCnsAsphyxiaList)
					&& !SaCnsAsphyxiaList.get(0).getEventstatus().equalsIgnoreCase("Inactive")) {
				isAssessmentQualified = true;
				noteObj.getNote().setCnsAssessment("Asphyxia");
			}
			if (isAssessmentQualified) {
				noteObj.getNote().setCnsNormal(false);
			} else {
				noteObj.getNote().setCnsNormal(true);
			}

			isAssessmentQualified = false;
			rdsQuery = "select obj from SaFeedIntolerance obj where uhid = '" + uhid
					+ "' order by assessment_time desc";
			List<SaFeedIntolerance> SaFeedIntoleranceList = inicuDao.getListFromMappedObjQuery(rdsQuery);
			if (!BasicUtils.isEmpty(SaFeedIntoleranceList)
					&& !SaFeedIntoleranceList.get(0).getFeedIntoleranceStatus().equalsIgnoreCase("Inactive")) {
				isAssessmentQualified = true;
			}
			if (isAssessmentQualified) {
				noteObj.getNote().setGiNormal(false);
			} else {
				noteObj.getNote().setGiNormal(true);
			}

			isAssessmentQualified = false;
			rdsQuery = "select obj from SaHypoglycemia obj where uhid = '" + uhid + "' order by assessment_time desc";
			List<SaHypoglycemia> SaHypoglycemiaList = inicuDao.getListFromMappedObjQuery(rdsQuery);
			if (!BasicUtils.isEmpty(SaHypoglycemiaList)
					&& !SaHypoglycemiaList.get(0).getHypoglycemiaEventStatus().equalsIgnoreCase("Inactive")) {
				isAssessmentQualified = true;
			}
			if (isAssessmentQualified) {
				noteObj.getNote().setMetabolicNormal(false);
			} else {
				noteObj.getNote().setMetabolicNormal(true);
			}

			isAssessmentQualified = false;
			rdsQuery = "select obj from SaShock obj where uhid = '" + uhid + "' order by assessment_time desc";
			List<SaShock> SaShockList = inicuDao.getListFromMappedObjQuery(rdsQuery);
			if (!BasicUtils.isEmpty(SaShockList)
					&& !SaShockList.get(0).getShockStatus().equalsIgnoreCase("Inactive")) {
				isAssessmentQualified = true;
			}
			if (isAssessmentQualified) {
				noteObj.getNote().setCvsNormal(false);
			} else {
				noteObj.getNote().setCvsNormal(true);
			}

			noteObj.getNote().setGastroNormal(true);
			noteObj.getNote().setRenalNormal(true);
			noteObj.getNote().setMusculoskeletalNormal(true);
			noteObj.getNote().setHematologyNormal(true);

			DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date currentDate1 = new Date();
			System.out.println(dateFormat.format(currentDate1));
			String currentDateFinal = dateFormat.format(currentDate1);

			String calDate = CalculateDate48HoursAgo(currentDate1);

			noteObj.getNote().setPrescriptionList(getPastPrescriptionList(uhid, calDate, currentDateFinal));

			List<StableNoteEvent> nursingEventList = new ArrayList<StableNoteEvent>();
			String queryApneaEvent = "select obj from NursingEpisode obj where uhid='" + uhid + "'"
					+ " and apnea='true' and creationtime BETWEEN '" + yesterday + "' and '" + currentDate
					+ "' order by creationtime desc";
			List<NursingEpisode> apneaEventList = inicuDao.getListFromMappedObjQuery(queryApneaEvent);

			if (!BasicUtils.isEmpty(apneaEventList)) {

				for (NursingEpisode nursing : apneaEventList) {

					StableNoteEvent noteEvent = new StableNoteEvent();
					noteEvent.setEventType("Apnea");
					noteEvent.setCreationtime(nursing.getCreationtime());
					String unit = "";
					if (!BasicUtils.isEmpty(nursing.getDuration_unit_apnea())) {
						unit = nursing.getDuration_unit_apnea();
					}
					noteEvent.setDuration(nursing.getApneaDuration() + " " + unit);
					if (!BasicUtils.isEmpty(nursing.getHr())) {
						noteEvent.setHr(nursing.getHr());
					}
					if (!BasicUtils.isEmpty(nursing.getSpo2())) {
						noteEvent.setSpo2(nursing.getSpo2());
					}
					if (!BasicUtils.isEmpty(nursing.getRecovery())) {
						noteEvent.setRecovery(nursing.getRecovery());
					}
					nursingEventList.add(noteEvent);
				}
			}
			String querySeizuresEvent = "select obj from NursingEpisode obj where uhid='" + uhid + "'"
					+ " and seizures='true' and creationtime BETWEEN '" + yesterday + "' and '" + currentDate
					+ "' order by creationtime desc";
			List<NursingEpisode> seizuresEventList = inicuDao.getListFromMappedObjQuery(querySeizuresEvent);

			if (!BasicUtils.isEmpty(seizuresEventList)) {

				for (NursingEpisode nursing : seizuresEventList) {

					StableNoteEvent noteEvent = new StableNoteEvent();
					noteEvent.setEventType("Seizures");
					noteEvent.setCreationtime(nursing.getCreationtime());
					String unit = "";
					if (!BasicUtils.isEmpty(nursing.getDuration_unit_seizure())) {
						unit = nursing.getDuration_unit_seizure();
					}
					noteEvent.setDuration(nursing.getSeizureDuration() + " " + unit);
					nursingEventList.add(noteEvent);
				}
			}
			String queryDesaturationEvent = "select obj from NursingEpisode obj where uhid='" + uhid + "'"
					+ " and desaturation='true' and creationtime BETWEEN '" + yesterday + "' and '" + currentDate
					+ "' order by creationtime desc";
			List<NursingEpisode> desaturationEventList = inicuDao.getListFromMappedObjQuery(queryDesaturationEvent);

			if (!BasicUtils.isEmpty(desaturationEventList)) {

				for (NursingEpisode nursing : desaturationEventList) {

					StableNoteEvent noteEvent = new StableNoteEvent();
					noteEvent.setEventType("Desaturation");
					noteEvent.setCreationtime(nursing.getCreationtime());
					if (!BasicUtils.isEmpty(nursing.getSpo2())) {
						noteEvent.setSpo2(nursing.getSpo2());
					}
					nursingEventList.add(noteEvent);
				}
			}

			if (!BasicUtils.isEmpty(nursingEventList)) {
				noteObj.setNursingEventList(nursingEventList);
			}

		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return noteObj;
	}

	public void savePrescriptionList(InicuDao inicuDaoObj, List<BabyPrescription> prescriptionList,
			String assessmentName, Long assessmentId, Timestamp currentTime) {
		if (inicuDaoObj != null) {
			inicuDao = inicuDaoObj;
		}
		try {
			for (BabyPrescription babyPrescription : prescriptionList) {
				if (babyPrescription.getBabyPresid() == null) {
					babyPrescription.setEventid(assessmentId.toString());
					babyPrescription.setEventname(assessmentName);
				}
				if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
						&& babyPrescription.getContinueReason() != null && babyPrescription.getIsactive()
						&& babyPrescription.getEventname() != null
						&& babyPrescription.getEventname().equalsIgnoreCase("Stable Notes")) {
					StableNote currentObj = new StableNote();
					String reason = "Continue " + babyPrescription.getMedicinename() + " due to "
							+ babyPrescription.getContinueReason();
					currentObj.setNotes(reason);
					currentObj.setUhid(babyPrescription.getUhid());
					currentObj.setEntrytime(currentTime);
					currentObj.setLoggeduser(babyPrescription.getLoggeduser());
					currentObj.setEpisodeid("12");
					inicuDao.saveObject(currentObj);
				}

				babyPrescription=(BabyPrescription)inicuDao.saveObject(babyPrescription);

//				boolean isEditTrue=false;
//				if(babyPrescription.getRefBabyPresid()!=null){
//					// get item for that refrence ID
//					for (BabyPrescription babyObj : prescriptionList) {
//						if(babyObj.getBabyPresid().equals(babyPrescription.getRefBabyPresid()) && babyObj.getIsEdit()!=null
//								&& babyObj.getIsEdit()){
//							isEditTrue=true;
//							break;
//						}
//					}
//				}

				// Additional code added to check the case where only rate is changed in the revised medication
				if(		babyPrescription.getBabyPresid()!=null && babyPrescription.getRefBabyPresid()!=null &&
						babyPrescription.getFreq_type()!=null && babyPrescription.getFreq_type().equalsIgnoreCase("continuous")){

					// get the current nursing medicationpreparation object using the baby_presid
					String medPrepString="select obj from MedicationPreparation as obj where uhid='"+babyPrescription.getUhid()+"' and baby_presid='"+babyPrescription.getRefBabyPresid()+"'";
					List<MedicationPreparation> medicationPreparationsList=inicuDao.getListFromMappedObjQuery(medPrepString);

					if(medicationPreparationsList.size()>0) {
						MedicationPreparation medicationPreparationObject =medicationPreparationsList.get(0);

						// now update the med instruction note of the object
						String note=updateMedInstructionNote(babyPrescription,medicationPreparationObject);

						medicationPreparationObject.setMedication_preparation_id(null);
						medicationPreparationObject.setCreationtime(null);
						medicationPreparationObject.setModificationtime(null);
						medicationPreparationObject.setNursing_instruction(note);
						medicationPreparationObject.setBaby_presid(babyPrescription.getBabyPresid());
						medicationPreparationObject.setLoggeduser(babyPrescription.getLoggeduser());
						medicationPreparationObject=(MedicationPreparation)inicuDao.saveObject(medicationPreparationObject);
					}
				}
			}
//			List<BabyPrescription> prescriptionListTemp = (List<BabyPrescription>) inicuDao.saveMultipleObject(prescriptionList);

//			for(BabyPrescription babyPrescription: prescriptionListTemp){
//
//
//			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private String updateMedInstructionNote(BabyPrescription babyPrescription,MedicationPreparation medicationPreparation) {
//		StringBuilder instruction = new StringBuilder();
		String instruction = "";
		float calculated_cal_dose_volume = 0;
		float cal_strength = 0;
		float med_volume= 0;
		float dil_volume= 0;
		if (babyPrescription.getDose_unit().equalsIgnoreCase("μg")) {
			 calculated_cal_dose_volume = babyPrescription.getCal_dose_volume() / 1000;
		}else{
			 calculated_cal_dose_volume = babyPrescription.getCal_dose_volume();
		}

		// round off the value upto 2 decimal places
		calculated_cal_dose_volume=BasicUtils.round(calculated_cal_dose_volume,2);


		// Now Calculate the strength
		if (medicationPreparation.getFinal_strength()!=null && medicationPreparation.getFinal_strength()!=0) {
			cal_strength = medicationPreparation.getFinal_strength();
		}else{
			cal_strength = medicationPreparation.getMed_strength();
		}

		med_volume=BasicUtils.round(calculated_cal_dose_volume/cal_strength,2);
		dil_volume=BasicUtils.round(babyPrescription.getInf_volume()-med_volume,2);

		if(babyPrescription.getOverfill_factor()!=null){
			instruction += "Give " + BasicUtils.round(calculated_cal_dose_volume * babyPrescription.getOverfill_factor(), 1) + " mg (" +
					BasicUtils.round((med_volume * babyPrescription.getOverfill_factor()), 1) + " ml)  of " + babyPrescription.getMedicinename() + " with "+
					BasicUtils.round((dil_volume * babyPrescription.getOverfill_factor()), 1);
		}else{
			instruction += "Give " + BasicUtils.round(calculated_cal_dose_volume, 1) + " mg (" +
					med_volume + " ml) of " + babyPrescription.getMedicinename() + " with " + dil_volume;
		}

		instruction += " ml of " + babyPrescription.getDilution_type() + " and give as continuous infusion @ of " +
				BasicUtils.round(babyPrescription.getRate(), 1) + " ml/hr" + (babyPrescription.getOverfill_factor() == null ?  "." : ", with overfill factor.");

		return instruction;
	}

	private void updatePastJaundiceProgressNotes(SaJaundice jaundice, List<SaJaundice> pastJaundiceList) {
		try {
			int episodeNo = 2;
			String episodeStr = "Episode number: " + episodeNo + ".";
			ListIterator<SaJaundice> itr = pastJaundiceList.listIterator(pastJaundiceList.size());
			while (itr.hasPrevious()) {
				SaJaundice currentObj = itr.previous();
				if (currentObj.getJaundicestatus().equalsIgnoreCase("inactive")) {
					episodeNo++;
				} else if (jaundice.getAssessmentTime().compareTo(currentObj.getAssessmentTime()) < 0
						&& currentObj.getJaundicestatus().equalsIgnoreCase("yes")) {
					episodeStr = "Episode number: " + episodeNo + ".";
					String progressNote = currentObj.getComment();

					if (progressNote.contains("Episode number: ")) {
						String progressNoteEpisodeStr = progressNote.substring(progressNote.indexOf("Episode number: "),
								progressNote.indexOf(".") + 1);
						progressNote = progressNote.replace(progressNoteEpisodeStr, episodeStr);
						currentObj.setComment(progressNote);
						currentObj.setEpisodeNumber(episodeNo);
						try {
							inicuDao.saveObject(currentObj);
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

    private void updatePastFeedIntoleranceProgressNotes(SaFeedIntolerance feedIntolerance, List<SaFeedIntolerance> pastfeedList) {
        try {
            int episodeNo = 2;
            String episodeStr = "Episode number: " + episodeNo + ".";
            ListIterator<SaFeedIntolerance> itr = pastfeedList.listIterator(pastfeedList.size());
            while (itr.hasPrevious()) {
                SaFeedIntolerance currentObj = itr.previous();
                if (currentObj.getFeedIntoleranceStatus().equalsIgnoreCase("inactive")) {
                    episodeNo++;
                } else if (feedIntolerance.getAssessmentTime().compareTo(currentObj.getAssessmentTime()) < 0
                        && currentObj.getFeedIntoleranceStatus().equalsIgnoreCase("yes")) {
                    episodeStr = "Episode number: " + episodeNo + ".";
                    String progressNote = currentObj.getComment();

                    if (progressNote.contains("Episode number: ")) {
                        String progressNoteEpisodeStr = progressNote.substring(progressNote.indexOf("Episode number: "),
                                progressNote.indexOf(".") + 1);
                        progressNote = progressNote.replace(progressNoteEpisodeStr, episodeStr);
                        currentObj.setComment(progressNote);
                        currentObj.setEpisodeNumber(episodeNo);
                        try {
                            inicuDao.saveObject(currentObj);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

	private void updatePastRDSProgressNotes(SaRespRds rds, List<SaRespRds> pastRdsList) {
		try {
			int episodeNo = 2;
			String episodeStr = "Episode number: " + episodeNo + ".";
			ListIterator<SaRespRds> itr = pastRdsList.listIterator(pastRdsList.size());
			while (itr.hasPrevious()) {
				SaRespRds currentObj = itr.previous();
				if (currentObj.getEventstatus().equalsIgnoreCase("inactive")) {
					episodeNo++;
				} else if (rds.getAssessmentTime().compareTo(currentObj.getAssessmentTime()) < 0
						&& currentObj.getEventstatus().equalsIgnoreCase("yes")) {
					episodeStr = "Episode number: " + episodeNo + ".";
					String progressNote = currentObj.getProgressnotes();

					if (progressNote.contains("Episode number: ")) {
						String progressNoteEpisodeStr = progressNote.substring(progressNote.indexOf("Episode number: "),
								progressNote.indexOf(".") + 1);
						progressNote = progressNote.replace(progressNoteEpisodeStr, episodeStr);
						currentObj.setProgressnotes(progressNote);
						currentObj.setEpisodeNumber(episodeNo);
						try {
							inicuDao.saveObject(currentObj);
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void updatePastApneaProgressNotes(SaRespApnea apnea, List<SaRespApnea> pastApneaList) {
		try {
			int episodeNo = 2;
			String episodeStr = "Episode number: " + episodeNo + ".";
			ListIterator<SaRespApnea> itr = pastApneaList.listIterator(pastApneaList.size());
			while (itr.hasPrevious()) {
				SaRespApnea currentObj = itr.previous();
				if (currentObj.getEventstatus().equalsIgnoreCase("inactive")) {
					episodeNo++;
				} else if (apnea.getAssessmentTime().compareTo(currentObj.getAssessmentTime()) < 0
						&& currentObj.getEventstatus().equalsIgnoreCase("yes")) {
					episodeStr = "Episode number: " + episodeNo + ".";
					String progressNote = currentObj.getApneaComment();

					if (progressNote.contains("Episode number: ")) {
						String progressNoteEpisodeStr = progressNote.substring(progressNote.indexOf("Episode number: "),
								progressNote.indexOf(".") + 1);
						progressNote = progressNote.replace(progressNoteEpisodeStr, episodeStr);
						currentObj.setApneaComment(progressNote);
						currentObj.setEpisodeNumber(episodeNo);
						try {
							inicuDao.saveObject(currentObj);
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void updatePastPphnProgressNotes(SaRespPphn pphn, List<SaRespPphn> pastPphnList) {
		try {
			int episodeNo = 2;
			String episodeStr = "Episode number: " + episodeNo + ".";
			ListIterator<SaRespPphn> itr = pastPphnList.listIterator(pastPphnList.size());
			while (itr.hasPrevious()) {
				SaRespPphn currentObj = itr.previous();
				if (currentObj.getEventstatus().equalsIgnoreCase("inactive")) {
					episodeNo++;
				} else if (pphn.getAssessmentTime().compareTo(currentObj.getAssessmentTime()) < 0
						&& currentObj.getEventstatus().equalsIgnoreCase("yes")) {
					episodeStr = "Episode number: " + episodeNo + ".";
					String progressNote = currentObj.getProgressnotes();

					if (progressNote.contains("Episode number: ")) {
						String progressNoteEpisodeStr = progressNote.substring(progressNote.indexOf("Episode number: "),
								progressNote.indexOf(".") + 1);
						progressNote = progressNote.replace(progressNoteEpisodeStr, episodeStr);
						currentObj.setProgressnotes(progressNote);
						currentObj.setEpisodeNumber(episodeNo);
						try {
							inicuDao.saveObject(currentObj);
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void updatePastPneumoProgressNotes(SaRespPneumo pneumo, List<SaRespPneumo> pastPneumoList) {
		try {
			int episodeNo = 2;
			String episodeStr = "Episode number: " + episodeNo + ".";
			ListIterator<SaRespPneumo> itr = pastPneumoList.listIterator(pastPneumoList.size());
			while (itr.hasPrevious()) {
				SaRespPneumo currentObj = itr.previous();
				if (currentObj.getEventstatus().equalsIgnoreCase("inactive")) {
					episodeNo++;
				} else if (pneumo.getAssessmentTime().compareTo(currentObj.getAssessmentTime()) < 0
						&& currentObj.getEventstatus().equalsIgnoreCase("yes")) {
					episodeStr = "Episode number: " + episodeNo + ".";
					String progressNote = currentObj.getProgressnotes();

					if (progressNote.contains("Episode number: ")) {
						String progressNoteEpisodeStr = progressNote.substring(progressNote.indexOf("Episode number: "),
								progressNote.indexOf(".") + 1);
						progressNote = progressNote.replace(progressNoteEpisodeStr, episodeStr);
						currentObj.setProgressnotes(progressNote);
						currentObj.setEpisodeNumber(episodeNo);
						try {
							inicuDao.saveObject(currentObj);
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void updatePastNecProgressNotes(SaNec nec) {
		try {
			List<SaNec> pastNecList = inicuDao
					.getListFromMappedObjQuery("select obj from SaNec obj where uhid='" + nec.getUhid()
							+ "' and assessmentTime >'" + nec.getAssessmentTime() + "' order by assessmentTime desc");

			if (!BasicUtils.isEmpty(pastNecList)) {
				int episodeNo = 2;
				String episodeStr = "Episode number: " + episodeNo + ".";
				ListIterator<SaNec> itr = pastNecList.listIterator(pastNecList.size());
				while (itr.hasPrevious()) {
					SaNec currentObj = itr.previous();
					if (currentObj.getEventstatus().equalsIgnoreCase("inactive")) {
						episodeNo++;
					} else if (nec.getAssessmentTime().compareTo(currentObj.getAssessmentTime()) < 0
							&& currentObj.getEventstatus().equalsIgnoreCase("yes")) {
						episodeStr = "Episode number: " + episodeNo + ".";
						String progressNote = currentObj.getProgressnotes();

						if (progressNote.contains("Episode number: ")) {
							String progressNoteEpisodeStr = progressNote
									.substring(progressNote.indexOf("Episode number: "), progressNote.indexOf(".") + 1);
							progressNote = progressNote.replace(progressNoteEpisodeStr, episodeStr);
							currentObj.setProgressnotes(progressNote);
							currentObj.setEpisodeNumber(episodeNo);
							try {
								inicuDao.saveObject(currentObj);
							} catch (Exception e) {
								e.printStackTrace();
							}
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void updatePastSepsisProgressNotes(SaSepsis sepsis) {
		try {
			List<SaSepsis> pastSepsisList = inicuDao.getListFromMappedObjQuery(
					"select obj from SaSepsis obj where uhid='" + sepsis.getUhid() + "' and assessmentTime >'"
							+ sepsis.getAssessmentTime() + "' order by assessmentTime desc");

			if (!BasicUtils.isEmpty(pastSepsisList)) {
				int episodeNo = 2;
				String episodeStr = "Episode number: " + episodeNo + ".";
				ListIterator<SaSepsis> itr = pastSepsisList.listIterator(pastSepsisList.size());
				while (itr.hasPrevious()) {
					SaSepsis currentObj = itr.previous();
					if (currentObj.getEventstatus().equalsIgnoreCase("inactive")) {
						episodeNo++;
					} else if (sepsis.getAssessmentTime().compareTo(currentObj.getAssessmentTime()) < 0
							&& currentObj.getEventstatus().equalsIgnoreCase("yes")) {
						episodeStr = "Episode number: " + episodeNo + ".";
						String progressNote = currentObj.getProgressnotes();

						if (progressNote.contains("Episode number: ")) {
							String progressNoteEpisodeStr = progressNote
									.substring(progressNote.indexOf("Episode number: "), progressNote.indexOf(".") + 1);
							progressNote = progressNote.replace(progressNoteEpisodeStr, episodeStr);
							currentObj.setProgressnotes(progressNote);
							currentObj.setEpisodeNumber(episodeNo);
							try {
								inicuDao.saveObject(currentObj);
							} catch (Exception e) {
								e.printStackTrace();
							}
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void updatePastSeizuresProgressNotes(SaCnsSeizures seizures) {
		try {
			List<SaCnsSeizures> pastSeizuresList = inicuDao.getListFromMappedObjQuery(
					"select obj from SaCnsSeizures obj where uhid='" + seizures.getUhid() + "' and assessmentTime >'"
							+ seizures.getAssessmentTime() + "' order by assessmentTime desc");

			if (!BasicUtils.isEmpty(pastSeizuresList)) {
				int episodeNo = 2;
				String episodeStr = "Episode number: " + episodeNo + ".";
				ListIterator<SaCnsSeizures> itr = pastSeizuresList.listIterator(pastSeizuresList.size());
				while (itr.hasPrevious()) {
					SaCnsSeizures currentObj = itr.previous();
					if (currentObj.getEventstatus().equalsIgnoreCase("inactive")) {
						episodeNo++;
					} else if (seizures.getAssessmentTime().compareTo(currentObj.getAssessmentTime()) < 0
							&& currentObj.getEventstatus().equalsIgnoreCase("yes")) {
						episodeStr = "Episode number: " + episodeNo + ".";
						String progressNote = currentObj.getProgressnotes();

						if (progressNote.contains("Episode number: ")) {
							String progressNoteEpisodeStr = progressNote
									.substring(progressNote.indexOf("Episode number: "), progressNote.indexOf(".") + 1);
							progressNote = progressNote.replace(progressNoteEpisodeStr, episodeStr);
							currentObj.setProgressnotes(progressNote);
							currentObj.setEpisodeNumber(episodeNo);
							try {
								inicuDao.saveObject(currentObj);
							} catch (Exception e) {
								e.printStackTrace();
							}
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public SaMiscellaneousJSON getMiscellaneous(String uhid, String loggedUser) throws InicuDatabaseExeption {
		SaMiscellaneousJSON json = new SaMiscellaneousJSON();
		Long timeHours = null;
		Calendar birthDateCal = null;
		Integer gestation = null;
		try {
			// Miscellaneous Object
			SaMiscellaneous joundiceCurrent = new SaMiscellaneous();

			// Miscellaneous2 Object
			SaMiscellaneous2 miscellaneous2Object = new SaMiscellaneous2();

			HashMap<Object, Object> babyBasicInformation = getBabyInformation(uhid);
			Object ageAtOnset = babyBasicInformation.get(BasicConstants.AGE_AT_ONSET);
			Object ageAtAssessment = babyBasicInformation.get(BasicConstants.AGE_AT_ONSET);

			joundiceCurrent.setAgeofonset(Math.round(Float.valueOf(ageAtOnset.toString())));
			joundiceCurrent.setAgeatassesment(Math.round(Float.valueOf(ageAtAssessment.toString())));

			miscellaneous2Object.setAgeofonset(Math.round(Float.valueOf(ageAtOnset.toString())));
			miscellaneous2Object.setAgeatassesment(Math.round(Float.valueOf(ageAtAssessment.toString())));

			String queryBabyDetails = "select obj from BabyDetail obj where uhid='" + uhid + "'";

			List<BabyDetail> babyDetailsLsit = inicuDao.getListFromMappedObjQuery(queryBabyDetails);

			if (!BasicUtils.isEmpty(babyDetailsLsit)) {
				BabyDetail babyDetails = babyDetailsLsit.get(0);
				joundiceCurrent.setDateofbirth(babyDetails.getDateofbirth());
				miscellaneous2Object.setDateofbirth(babyDetails.getDateofbirth());
			}

			// Miscellaneous List Query
			List<SaMiscellaneous> miscellaneousList = new ArrayList<SaMiscellaneous>();
			String queryForMiscellaneous = "SELECT misc FROM SaMiscellaneous AS misc WHERE uhid='" + uhid
					+ "' order by creationtime desc";

			miscellaneousList = inicuDao.getListFromMappedObjQuery(queryForMiscellaneous);

			// Miscellaneous2 List Query
			List<SaMiscellaneous2> miscellaneous2List = new ArrayList<SaMiscellaneous2>();
			String queryForMiscellaneous2 = "SELECT misc2 FROM SaMiscellaneous2 AS misc2 WHERE uhid='" + uhid
					+ "' order by creationtime desc";

			miscellaneous2List = inicuDao.getListFromMappedObjQuery(queryForMiscellaneous2);

			// get dropdown values
			MiscDropDownsJSON dropDown = new MiscDropDownsJSON();

			String queryOrderInvestigation = "SELECT testid, testname FROM ref_testslist";
			List<KeyValueObj> orderInvestigation = getRefObj(queryOrderInvestigation);
			dropDown.setOrderInvestigation(orderInvestigation);

			// getting hours data....
			List<String> hours = new ArrayList<String>();
			for (int i = 0; i <= 23; i++) {
				if (i < 10) {
					hours.add("0" + i);
				} else {
					hours.add(String.valueOf(i));
				}
			}
			// dropDown.setHours(hours);

			List<String> hoursValues = getTime(BasicConstants.HOURS);
			dropDown.setHours(hoursValues);
			List<String> minutesValues = getTime(BasicConstants.MINUTES);
			dropDown.setMinutes(minutesValues);

			// get tests list from ref table...
			String queryRefTestsList = "select obj from RefTestslist as obj where not (obj.assesmentCategory like ('%None%')) order by assesmentCategory, testid asc";
			List<RefTestslist> listRefTests = inicuDao.getListFromMappedObjQuery(queryRefTestsList);
			// populate drop down hash map for the tests list...
			HashMap<Object, List<RefTestslist>> testsListMap = new HashMap<Object, List<RefTestslist>>();
			for (RefTestslist test : listRefTests) {
				List categoryList = null;
				if (testsListMap.get(test.getAssesmentCategory()) != null) {
					categoryList = testsListMap.get(test.getAssesmentCategory());

				} else {
					categoryList = new ArrayList<RefTestslist>();
				}
				categoryList.add(test);
				testsListMap.put(test.getAssesmentCategory(), categoryList);
			}

			dropDown.setTestsList(testsListMap);
			json.setDropDowns(dropDown);

			String disease = "";
			String disease2 = "";

			if(!BasicUtils.isEmpty(miscellaneousList))
				 disease = miscellaneousList.get(0).getDisease();

			if(disease.equalsIgnoreCase("Others"))
				disease = miscellaneousList.get(0).getOtherDisease();


			if(!BasicUtils.isEmpty(miscellaneous2List))
				disease2 = miscellaneous2List.get(0).getDisease();

			if(disease2.equalsIgnoreCase("Others"))
				disease2 = miscellaneous2List.get(0).getOtherDisease();

			String diseaseListQuery = "Select initcap(assessment_name) from ref_misc_dropdowns order by assessment_name";
			List<String> diseaseList = inicuDao.getListFromNativeQuery(diseaseListQuery);

			if (!BasicUtils.isEmpty(diseaseList)) {
				miscellaneousList.forEach(misc -> misc.setDiseaseList(diseaseList));
				miscellaneous2List.forEach(misc -> misc.setDiseaseList(diseaseList));
			}


			List<String> diseaseList1 = new ArrayList<String>();
			List<String> diseaseList2 = new ArrayList<String>();
			if(disease!=null && disease!="") {
				String diseaseListQuery1 = "Select initcap(assessment_name) from ref_misc_dropdowns where assessment_name != '" + disease + "' order by assessment_name";
				diseaseList1 = inicuDao.getListFromNativeQuery(diseaseListQuery1);
			}

			if(disease2 != null && disease2 != "") {
				String diseaseListQuery2 = "Select initcap(assessment_name) from ref_misc_dropdowns where assessment_name != '" + disease2 + "' order by assessment_name";
				diseaseList2 = inicuDao.getListFromNativeQuery(diseaseListQuery2);
			}

			// Miscellaneous List
			json.setListMiscellaneous(miscellaneousList);

			// Miscellaneous2 List
			json.setListMiscellaneous2(miscellaneous2List);

			List<SaMiscellaneous> miscellaneousListTemp = new ArrayList<SaMiscellaneous>();
			for (int index = 0; index < miscellaneousList.size(); index++) { // do some
				SaMiscellaneous jaund = miscellaneousList.get(index);

				String queryInvestigationOrder = "Select obj from InvestigationOrdered obj where uhid='" + uhid
						+ "' and assesment_type='Miscellaneous' and assesmentid='" + jaund.getSamiscellaneousid()
						+ "' order by creationtime desc";
				List<InvestigationOrdered> investigationOrderList = inicuDao
						.getListFromMappedObjQuery(queryInvestigationOrder);
				ArrayList<String> investOrder = new ArrayList<>();
				if (!BasicUtils.isEmpty(investigationOrderList)) {
					for (InvestigationOrdered order : investigationOrderList) {
						if (!BasicUtils.isEmpty(order.getTestname())) {
							investOrder.add(order.getTestname());
						}
					}
					jaund.setOrderinvestigationList(investOrder);
				}

				miscellaneousListTemp.add(jaund);

                if (index == 0) {
                    try {
                        if (jaund.getMiscellaneousstatus().equalsIgnoreCase("No")) {
                            List<SaMiscellaneous> miscList = new ArrayList<SaMiscellaneous>();
                            miscList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getMiscellaneousList(uhid));

                            // Medication of Miscellaneous Data Fetching Function
                            String medicationNotes = getMedicationOfMiscellaneous(miscList);

                            String progressNotes = medicationNotes+" ";
                            if(!BasicUtils.isEmpty(jaund.getDisease()) && jaund.getDisease().equalsIgnoreCase("Others")){
                                progressNotes += jaund.getOtherDisease() + " has resolved.";
                            }else{
                                progressNotes += jaund.getDisease() + " has resolved.";
                            }

//                            json.setInactiveProgressNoteMisc1(medicationNotes + " " + jaund.getDisease() + " has resolved.");
                            json.setInactiveProgressNoteMisc1(progressNotes);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        logger.error("Exception while generating inactive note", e);
                    }
                }
			}

			joundiceCurrent.setGestation(gestation);

			if (!BasicUtils.isEmpty(miscellaneousListTemp)) { // set previous data
				// entry here...
				SaMiscellaneous jaund = miscellaneousListTemp.get(0);
				joundiceCurrent.setMiscellaneousstatus(jaund.getMiscellaneousstatus());
				joundiceCurrent.setEventstatus(jaund.getEventstatus());
				joundiceCurrent.setOrderinvestigationList(jaund.getOrderinvestigationList());
			}

			if (!BasicUtils.isEmpty(diseaseList)) {
				joundiceCurrent.setDiseaseList(diseaseList);
			}

			if(disease2 != null && disease2 != "" && !miscellaneous2List.get(0).getMiscellaneousstatus().equalsIgnoreCase("inactive")) {
				joundiceCurrent.setDiseaseList(diseaseList2);
			}

			String prevMiscStatusQuery = "Select miscellaneousstatus from sa_miscellaneous where uhid='" + uhid
					+ "' order by creationtime desc";
			List<String> prevMiscStatusList = inicuDao.getListFromNativeQuery(prevMiscStatusQuery);

			if (!BasicUtils.isEmpty(prevMiscStatusList)) {
				joundiceCurrent.setPreviousMiscStatus(prevMiscStatusList.get(0));
			}

			// keep previous age of onset boolean and value
			// ONLY if same episode is continuing
			if (!BasicUtils.isEmpty(miscellaneousList)) {
				if (!miscellaneousList.get(0).getMiscellaneousstatus().equalsIgnoreCase("inactive")) {
					joundiceCurrent.setAgeofonset(miscellaneousList.get(0).getAgeofonset());
					joundiceCurrent.setIsageofonsetinhours(miscellaneousList.get(0).getIsageofonsetinhours());
				}

			}

			// set past order investigation and treatment....
			if (!BasicUtils.isEmpty(miscellaneousList)) {
				Long assessmentId = miscellaneousList.get(0).getSamiscellaneousid();
				String pastInvestigationOrderStr = "";
				java.sql.Date sqlTodayDate = new java.sql.Date(new Date().getTime());
				String queryPastOrderInvestigation = "Select obj from InvestigationOrdered obj where uhid='" + uhid
						+ "' and assesmentid='" + assessmentId + "' order by creationtime desc";
				List<InvestigationOrdered> pastOrderInvestigationList = inicuDao
						.getListFromMappedObjQuery(queryPastOrderInvestigation);
				// past order investigation
				if (!BasicUtils.isEmpty(pastOrderInvestigationList)) {
					for (InvestigationOrdered order : pastOrderInvestigationList) {
						if (!BasicUtils.isEmpty(order.getTestname())) {
							if (!BasicUtils.isEmpty(pastInvestigationOrderStr)) {
								pastInvestigationOrderStr = pastInvestigationOrderStr + ", " + order.getTestname();
							} else {
								pastInvestigationOrderStr = order.getTestname();
							}
						}
					}
					joundiceCurrent.setPastOrderInvestigationStr(pastInvestigationOrderStr);
				}

				joundiceCurrent.setDisease(miscellaneousList.get(0).getDisease());

				if(miscellaneousList.get(0).getDisease().equalsIgnoreCase("Others") && miscellaneousList.get(0).getOtherDisease()!=null) {
					joundiceCurrent.setDisease(miscellaneousList.get(0).getOtherDisease());
				}
			}
			json.setMiscellaneous(joundiceCurrent);


			List<SaMiscellaneous2> miscellaneous2ListTemp = new ArrayList<SaMiscellaneous2>();
			for (int index = 0; index < miscellaneous2List.size(); index++) {
				SaMiscellaneous2 miscellaneous2ListObj = miscellaneous2List.get(index);

				String queryInvestigationOrderForMisellaneous2 = "Select obj from InvestigationOrdered obj where uhid='"
						+ uhid + "' and assesment_type='Miscellaneous2' and assesmentid='"
						+ miscellaneous2ListObj.getSaMiscellaneous2Id() + "' order by creationtime desc";
				List<InvestigationOrdered> investigationOrderListForMisellaneous2 = inicuDao
						.getListFromMappedObjQuery(queryInvestigationOrderForMisellaneous2);
				ArrayList<String> investOrderForMisellaneous2 = new ArrayList<>();
				if (!BasicUtils.isEmpty(investigationOrderListForMisellaneous2)) {
					for (InvestigationOrdered order : investigationOrderListForMisellaneous2) {
						if (!BasicUtils.isEmpty(order.getTestname())) {
							investOrderForMisellaneous2.add(order.getTestname());
						}
					}
					miscellaneous2ListObj.setOrderinvestigationList(investOrderForMisellaneous2);
				}

				miscellaneous2ListTemp.add(miscellaneous2ListObj);

                if (index == 0) {
                    try {
                        if (miscellaneous2ListObj.getMiscellaneousstatus().equalsIgnoreCase("No")) {
                            List<SaMiscellaneous2> misc2List = new ArrayList<SaMiscellaneous2>();
                            misc2List = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getMiscellaneous2List(uhid));

                            // Medication of Miscellaneous Data Fetching Function
                            String medicationNotes = getMedicationOfMiscellaneous2(misc2List);

                            String progressNotes = medicationNotes+" ";
                            if(!BasicUtils.isEmpty(miscellaneous2ListObj.getDisease()) && miscellaneous2ListObj.getDisease().equalsIgnoreCase("Others")){
                                progressNotes += miscellaneous2ListObj.getOtherDisease() + " has resolved.";
                            }else{
                                progressNotes += miscellaneous2ListObj.getDisease() + " has resolved.";
                            }

//                            json.setInactiveProgressNoteMisc2(medicationNotes + " " + miscellaneous2ListObj.getDisease() + " has resolved.");
                            json.setInactiveProgressNoteMisc2(progressNotes);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        logger.error("Exception while generating inactive note", e);
                    }
                }
			}

			miscellaneous2Object.setGestation(gestation);
			if (!BasicUtils.isEmpty(miscellaneous2ListTemp)) { // set previous data
				// entry here...
				SaMiscellaneous2 miscellaneous2Obj = miscellaneous2ListTemp.get(0);
				miscellaneous2Object.setMiscellaneousstatus(miscellaneous2Obj.getMiscellaneousstatus());
				miscellaneous2Object.setEventstatus(miscellaneous2Obj.getEventstatus());
				miscellaneous2Object.setOrderinvestigationList(miscellaneous2Obj.getOrderinvestigationList());
			}

			if (!BasicUtils.isEmpty(diseaseList)) {
				miscellaneous2Object.setDiseaseList(diseaseList);

			}

			if(disease != null && disease!= "" && !joundiceCurrent.getMiscellaneousstatus().equalsIgnoreCase("inactive")) {
				miscellaneous2Object.setDiseaseList(diseaseList1);
			}

			String prevMisc2StatusQuery = "Select miscellaneousstatus from sa_miscellaneous_2 where uhid='" + uhid
					+ "' order by creationtime desc";
			List<String> prevMisc2StatusList = inicuDao.getListFromNativeQuery(prevMisc2StatusQuery);

			if (!BasicUtils.isEmpty(prevMisc2StatusList)) {
				miscellaneous2Object.setPreviousMiscStatus(prevMisc2StatusList.get(0));
			}

			// keep previous age of onset boolean and value
			// ONLY if same episode is continuing
			if (!BasicUtils.isEmpty(miscellaneous2List)) {
				if (!miscellaneous2List.get(0).getMiscellaneousstatus().equalsIgnoreCase("inactive")) {
					miscellaneous2Object.setAgeofonset(miscellaneous2List.get(0).getAgeofonset());
					miscellaneous2Object.setIsageofonsetinhours(miscellaneous2List.get(0).getIsageofonsetinhours());
				}

			}

			// set past order investigation and treatment....
			if (!BasicUtils.isEmpty(miscellaneous2List)) {
				Long assessmentId = miscellaneous2List.get(0).getSaMiscellaneous2Id();
				String pastInvestigationOrderStrForMiscellaneous2 = "";
				java.sql.Date sqlTodayDate = new java.sql.Date(new Date().getTime());
				String queryPastOrderInvestigation = "Select obj from InvestigationOrdered obj where uhid='" + uhid
						+ "' and assesmentid='" + assessmentId + "' order by creationtime desc";
				List<InvestigationOrdered> pastOrderInvestigationList = inicuDao
						.getListFromMappedObjQuery(queryPastOrderInvestigation);
				// past order investigation
				if (!BasicUtils.isEmpty(pastOrderInvestigationList)) {
					for (InvestigationOrdered order : pastOrderInvestigationList) {
						if (!BasicUtils.isEmpty(order.getTestname())) {
							if (!BasicUtils.isEmpty(pastInvestigationOrderStrForMiscellaneous2)) {
								pastInvestigationOrderStrForMiscellaneous2 = pastInvestigationOrderStrForMiscellaneous2
										+ ", " + order.getTestname();
							} else {
								pastInvestigationOrderStrForMiscellaneous2 = order.getTestname();
							}
						}
					}
					miscellaneous2Object.setPastOrderInvestigationStr(pastInvestigationOrderStrForMiscellaneous2);
				}
				miscellaneous2Object.setDisease(miscellaneous2List.get(0).getDisease());

				if(miscellaneous2List.get(0).getDisease().equalsIgnoreCase("Others") && miscellaneous2List.get(0).getOtherDisease()!=null) {
					miscellaneous2Object.setDisease(miscellaneous2List.get(0).getOtherDisease());
				}
			}
			json.setMiscellaneous2(miscellaneous2Object);

			DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date currentDate = new Date();
			System.out.println(dateFormat.format(currentDate));
			String currentDateFinal = dateFormat.format(currentDate);

			String calDate = CalculateDate48HoursAgo(currentDate);

			// get past prescriptions
			json.setPrescriptionList(getPastPrescriptionList(uhid, calDate, currentDateFinal));

			// json.setAssociatedEvents(listAssociatedEvents);

		} catch (Exception e) {
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser, uhid,
					"SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return json;
	}

	@Override
	public ResponseMessageObject saveMiscellaneous(SaMiscellaneousJSON sysMiscellaneousObj, String userId)
			throws InicuDatabaseExeption {
		ResponseMessageObject obj = new ResponseMessageObject();

		SaMiscellaneous miscellaneous = sysMiscellaneousObj.getMiscellaneous();
		// miscellaneous.setLoggeduser(sysMiscellaneousObj.getUserId());
		obj.setMessage("Save successfully.");
		obj.setType(BasicConstants.MESSAGE_SUCCESS);
		try {
			// Save Miscellaneous Object
			String uhid = miscellaneous.getUhid();
			String causeofjaundice = miscellaneous.getCauseofmiscellaneous();
			/*
			 * jaundice.setSajaundiceid(null); // due to list is not deatched..
			 */
			if (miscellaneous.getMiscellaneousstatus() != null
					&& !miscellaneous.getMiscellaneousstatus().equalsIgnoreCase("Yes")) {
				SaMiscellaneous miscellaneousnew = new SaMiscellaneous();
				miscellaneousnew.setEventstatus(miscellaneous.getEventstatus());
				miscellaneousnew.setMiscellaneousstatus(miscellaneous.getMiscellaneousstatus());
				miscellaneousnew.setDisease(miscellaneous.getDisease());
				miscellaneousnew.setAgeofonset(miscellaneous.getAgeofonset());
				miscellaneousnew.setIsageofonsetinhours(miscellaneous.getIsageofonsetinhours());

				if(!BasicUtils.isEmpty(miscellaneous.getDisease()) && miscellaneous.getDisease().equalsIgnoreCase("others") &&
				        !BasicUtils.isEmpty(miscellaneous.getOtherDisease())) {
                    miscellaneousnew.setOtherDisease(miscellaneous.getOtherDisease());
                }

				if (BasicUtils.isEmpty(miscellaneous.getEpisodeid()) && !BasicUtils.isEmpty(miscellaneous.getUhid())) {
					String queryAssociatedEvents = "select episodeid from sa_miscellaneous where uhid='"
							+ miscellaneous.getUhid() + "' order by creationtime desc";
					List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

					if (!BasicUtils.isEmpty(listAssociatedEvents)) {
						miscellaneousnew.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
					}
				}

				// set progress notes
                /*if (miscellaneousnew.getMiscellaneousstatus().equalsIgnoreCase("Inactive")) {
                    miscellaneousnew.setComment(miscellaneousnew.getDisease() + " has resolved.");
                } else {
                }*/
                miscellaneousnew.setComment(miscellaneous.getComment());
                miscellaneousnew.setIsNewEntry(miscellaneous.getIsNewEntry());

				miscellaneousnew.setAssessmentTime(miscellaneous.getAssessmentTime());
				miscellaneous = miscellaneousnew;
			} else {

				// setting list to string
				String causeOfJaundiceList = miscellaneous.getCauseofmiscellaneous();
				if (!BasicUtils.isEmpty(causeOfJaundiceList)) {
					miscellaneous.setCauseofmiscellaneous(causeOfJaundiceList.toString());
				}

                if(!BasicUtils.isEmpty(miscellaneous.getDisease()) && miscellaneous.getDisease().equalsIgnoreCase("others") &&
                        !BasicUtils.isEmpty(miscellaneous.getOtherDisease())) {
                        miscellaneous.setOtherDisease(miscellaneous.getOtherDisease());
                }else{
                    miscellaneous.setOtherDisease("");
                }

				List orderInvList = miscellaneous.getOrderinvestigationList();
				if (!BasicUtils.isEmpty(orderInvList)) {
					miscellaneous.setOrderinvestigation(orderInvList.toString());
				}
				if (BasicUtils.isEmpty(miscellaneous.getEpisodeid()) && !BasicUtils.isEmpty(miscellaneous.getUhid())) {
					String queryAssociatedEvents = "select episodeid from sa_miscellaneous where uhid='"
							+ miscellaneous.getUhid() + "' order by creationtime desc";
					List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

					if (!BasicUtils.isEmpty(listAssociatedEvents)) {
						miscellaneous.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
					}
				}
			}

			if (!BasicUtils.isEmpty(uhid)) {

				miscellaneous.setUhid(uhid);
				{
					if (userId != null) {
						miscellaneous.setLoggeduser(userId);

						NurseExecutionOrders order = new NurseExecutionOrders();


						if(!BasicUtils.isEmpty(miscellaneous.getPlanOther())) {
							order.setEventname("Miscellaneous");
							order.setIsExecution(false);
							order.setOrderText(miscellaneous.getPlanOther());
							order.setAssessmentdate(miscellaneous.getAssessmentTime());
							order.setUhid(miscellaneous.getUhid());
							order.setLoggeduser(userId);
							inicuDao.saveObject(order);
						}

                        if(!BasicUtils.isEmpty(miscellaneous.getComment())  && miscellaneous.getComment().indexOf(userId)==-1){
                            miscellaneous.setComment(miscellaneous.getComment());
                        }

						if (!BasicUtils.isEmpty(sysMiscellaneousObj.getMiscellaneous().getIsNewEntry())) {
							if (sysMiscellaneousObj.getMiscellaneous().getIsNewEntry()) {
								miscellaneous.setSa_miscellaneous_id(null);
								miscellaneous.setCreationtime(null);
                                miscellaneous = (SaMiscellaneous) inicuDao.saveObject(miscellaneous);
							} else {
                                if (miscellaneous.getMiscellaneousstatus().equalsIgnoreCase("inactive")) {
                                    try {
                                        String query = "update sa_miscellaneous set comment = '" + miscellaneous.getComment()
                                                + "' where sa_miscellaneous_id = '" + sysMiscellaneousObj.getMiscellaneous().getSa_miscellaneous_id() + "'";
                                        inicuDao.updateOrDeleteNativeQuery(query);
                                    } catch (Exception ex) {
                                        ex.printStackTrace();
                                        System.out.println("Exception occured while updating progressnotes for inactive state");
                                    }
                                } else {
                                    miscellaneous.setSa_miscellaneous_id(
                                            sysMiscellaneousObj.getMiscellaneous().getSa_miscellaneous_id());
                                    miscellaneous.setCreationtime(sysMiscellaneousObj.getMiscellaneous().getCreationtime());
                                    miscellaneous = (SaMiscellaneous) inicuDao.saveObject(miscellaneous);
                                }
							}
						}

						if (!BasicUtils.isEmpty(sysMiscellaneousObj.getPrescriptionList())) {
							this.savePrescriptionList(null, sysMiscellaneousObj.getPrescriptionList(), "Miscellaneous",
									miscellaneous.getSa_miscellaneous_id(), miscellaneous.getAssessmentTime());
						}

						// for each of the order ordered, update to the database
						saveOrderInvestigation(sysMiscellaneousObj.getDropDowns().getTestsList(),
								miscellaneous.getSa_miscellaneous_id(), miscellaneous.getUhid(), userId,
								"Miscellaneous", miscellaneous.getAssessmentTime());

					} else {
						obj.setMessage("logged user id is coming as null");
						obj.setType(BasicConstants.MESSAGE_FAILURE);
					}

				}
			} else {
				obj.setMessage("uhid is coming as null");
				obj.setType(BasicConstants.MESSAGE_FAILURE);
			}

			String query = "select obj from RefMiscDropdowns as obj order by misc_id desc";
			List<RefMiscDropdowns> dropdownList = inicuDao.getListFromMappedObjQuery(query);
			int misc_id = dropdownList.get(0).getMiscId();
			int id = misc_id + 1;
			boolean isPresent = false;

			if(miscellaneous!=null && miscellaneous.getOtherDisease()!=null) {
				for(int index = 0; index<dropdownList.size();index++) {
					if(dropdownList.get(index).getAssessmentName().equals(miscellaneous.getOtherDisease())) {

						isPresent = true;
						break;
					}
				}

				if(isPresent == false) {
						RefMiscDropdowns obj1 = new RefMiscDropdowns();
						obj1.setMiscId(id);
						obj1.setAssessmentName(miscellaneous.getOtherDisease());
						obj1.setDescription(miscellaneous.getOtherDisease());
						inicuDao.saveObject(obj1);
				}

			}

//

			// save logs
			String desc = mapper.writeValueAsString(miscellaneous);

			String action = BasicConstants.INSERT;

			if (miscellaneous.getIsEdit() != null && miscellaneous.getIsEdit()) {
				action = BasicConstants.UPDATE;
			}

			String loggeduser = null;
			if (!BasicUtils.isEmpty(userId)) {
				loggeduser = userId;
			} else {
				loggeduser = "1234"; // setting dummy user as of now needs to be
				// removed
			}

			String pageName = BasicConstants.SA_MISC;
			logService.saveLog(desc, action, loggeduser, uhid, pageName);
		} catch (Exception e) {
			obj.setType(BasicConstants.MESSAGE_FAILURE);
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, userId,
					miscellaneous.getUhid(), "SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return obj;
	}

	@Override
	public ResponseMessageObject saveMiscellaneous2(SaMiscellaneousJSON sysMiscellaneous2Obj, String userId)
			throws InicuDatabaseExeption {
		ResponseMessageObject obj = new ResponseMessageObject();
		SaMiscellaneous2 miscellaneous2 = sysMiscellaneous2Obj.getMiscellaneous2();
		obj.setMessage("Save successfully.");
		obj.setType(BasicConstants.MESSAGE_SUCCESS);
		try {
			// Save Miscellaneous Object
			String uhid = miscellaneous2.getUhid();
			String causeofjaundice = miscellaneous2.getCauseofmiscellaneous();
			if (miscellaneous2.getMiscellaneousstatus() != null
					&& !miscellaneous2.getMiscellaneousstatus().equalsIgnoreCase("Yes")) {
				SaMiscellaneous2 miscellaneousnew = new SaMiscellaneous2();
				miscellaneousnew.setEventstatus(miscellaneous2.getEventstatus());
				miscellaneousnew.setMiscellaneousstatus(miscellaneous2.getMiscellaneousstatus());
				miscellaneousnew.setAgeofonset(miscellaneous2.getAgeofonset());
				miscellaneousnew.setDisease(miscellaneous2.getDisease());
				miscellaneousnew.setIsageofonsetinhours(miscellaneous2.getIsageofonsetinhours());

                if(!BasicUtils.isEmpty(miscellaneous2.getDisease()) && miscellaneous2.getDisease().equalsIgnoreCase("others") &&
                        !BasicUtils.isEmpty(miscellaneous2.getOtherDisease())) {
                    miscellaneousnew.setOtherDisease(miscellaneous2.getOtherDisease());
                }

				if (BasicUtils.isEmpty(miscellaneous2.getEpisodeid()) && !BasicUtils.isEmpty(miscellaneous2.getUhid())) {
					String queryAssociatedEvents = "select episodeid from sa_miscellaneous_2 where uhid='"
							+ miscellaneous2.getUhid() + "' order by creationtime desc";
					List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

					if (!BasicUtils.isEmpty(listAssociatedEvents)) {
						miscellaneousnew.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
					}
				}

				// set progress notes
                /*if (miscellaneousnew.getMiscellaneousstatus().equalsIgnoreCase("Inactive")) {
                    miscellaneousnew.setComment(miscellaneousnew.getDisease() + " has resolved.");
                } else {
                }*/
                miscellaneousnew.setComment(miscellaneous2.getComment());
                miscellaneousnew.setIsNewEntry(miscellaneous2.getIsNewEntry());

				miscellaneousnew.setAssessmentTime(miscellaneous2.getAssessmentTime());
				miscellaneous2 = miscellaneousnew;
			} else {

				// setting list to string
				String causeOfJaundiceList = miscellaneous2.getCauseofmiscellaneous();
				if (!BasicUtils.isEmpty(causeOfJaundiceList)) {
					miscellaneous2.setCauseofmiscellaneous(causeOfJaundiceList.toString());
				}

                if(!BasicUtils.isEmpty(miscellaneous2.getDisease()) && miscellaneous2.getDisease().equalsIgnoreCase("others") &&
                        !BasicUtils.isEmpty(miscellaneous2.getOtherDisease())) {
                    miscellaneous2.setOtherDisease(miscellaneous2.getOtherDisease());
                }else{
                    miscellaneous2.setOtherDisease("");
                }

				List orderInvList = miscellaneous2.getOrderinvestigationList();
				if (!BasicUtils.isEmpty(orderInvList)) {
					miscellaneous2.setOrderinvestigation(orderInvList.toString());
				}
				if (BasicUtils.isEmpty(miscellaneous2.getEpisodeid()) && !BasicUtils.isEmpty(miscellaneous2.getUhid())) {
					String queryAssociatedEvents = "select episodeid from sa_miscellaneous_2 where uhid='"
							+ miscellaneous2.getUhid() + "' order by creationtime desc";
					List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

					if (!BasicUtils.isEmpty(listAssociatedEvents)) {
						miscellaneous2.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
					}
				}
			}

			if (!BasicUtils.isEmpty(uhid)) {

				miscellaneous2.setUhid(uhid);
				{
					if (userId != null) {
						miscellaneous2.setLoggeduser(userId);

						NurseExecutionOrders order = new NurseExecutionOrders();


						if(!BasicUtils.isEmpty(miscellaneous2.getPlanOther())) {
							order.setEventname("Miscellaneous2");
							order.setIsExecution(false);
							order.setOrderText(miscellaneous2.getPlanOther());
							order.setAssessmentdate(miscellaneous2.getAssessmentTime());
							order.setUhid(miscellaneous2.getUhid());
							order.setLoggeduser(userId);
							inicuDao.saveObject(order);
						}

                        if(!BasicUtils.isEmpty(miscellaneous2.getComment())  && miscellaneous2.getComment().indexOf(userId)==-1){
                            miscellaneous2.setComment(miscellaneous2.getComment());
                        }

						if (!BasicUtils.isEmpty(sysMiscellaneous2Obj.getMiscellaneous2().getIsNewEntry())) {
							if (sysMiscellaneous2Obj.getMiscellaneous2().getIsNewEntry()) {
								miscellaneous2.setSaMiscellaneous2Id(null);
								miscellaneous2.setCreationtime(null);
                                miscellaneous2 = (SaMiscellaneous2) inicuDao.saveObject(miscellaneous2);
							} else {
                                if (miscellaneous2.getMiscellaneousstatus().equalsIgnoreCase("inactive")) {
                                    try {
                                        String query = "update sa_miscellaneous_2 set comment = '" + miscellaneous2.getComment()
                                                + "' where sa_miscellaneous_2_id = '" + sysMiscellaneous2Obj.getMiscellaneous2().getSaMiscellaneous2Id() + "'";
                                        inicuDao.updateOrDeleteNativeQuery(query);
                                    } catch (Exception ex) {
                                        ex.printStackTrace();
                                        System.out.println("Exception occured while updating progressnotes for inactive state");
                                    }
                                } else {
                                    miscellaneous2.setSaMiscellaneous2Id(
                                            sysMiscellaneous2Obj.getMiscellaneous2().getSaMiscellaneous2Id());
                                    miscellaneous2
                                            .setCreationtime(sysMiscellaneous2Obj.getMiscellaneous2().getCreationtime());
                                    miscellaneous2 = (SaMiscellaneous2) inicuDao.saveObject(miscellaneous2);
                                }
							}
						}

						if (!BasicUtils.isEmpty(sysMiscellaneous2Obj.getPrescriptionList())) {
							this.savePrescriptionList(null, sysMiscellaneous2Obj.getPrescriptionList(),
									"Miscellaneous2", miscellaneous2.getSaMiscellaneous2Id(),
									miscellaneous2.getAssessmentTime());
						}

						// for each of the order ordered, update to the database
						saveOrderInvestigation(sysMiscellaneous2Obj.getDropDowns().getTestsList(),
								miscellaneous2.getSaMiscellaneous2Id(), miscellaneous2.getUhid(), userId,
								"Miscellaneous2", miscellaneous2.getAssessmentTime());

					} else {
						obj.setMessage("logged user id is coming as null");
						obj.setType(BasicConstants.MESSAGE_FAILURE);
					}

				}
			} else {
				obj.setMessage("uhid is coming as null");
				obj.setType(BasicConstants.MESSAGE_FAILURE);
			}

			String query = "select obj from RefMiscDropdowns as obj order by misc_id desc";
			List<RefMiscDropdowns> dropdownList = inicuDao.getListFromMappedObjQuery(query);
			int misc_id = dropdownList.get(0).getMiscId();
			int id = misc_id + 1;
			boolean isPresent = false;

			if(miscellaneous2!=null && miscellaneous2.getOtherDisease()!=null) {
				for(int index = 0; index<dropdownList.size();index++) {
					if(dropdownList.get(index).getAssessmentName().equals(miscellaneous2.getOtherDisease())) {

						isPresent = true;
						break;
					}
				}

				if(isPresent == false) {
						RefMiscDropdowns obj1 = new RefMiscDropdowns();
						obj1.setMiscId(id);
						obj1.setAssessmentName(miscellaneous2.getOtherDisease());
						obj1.setDescription(miscellaneous2.getOtherDisease());
						inicuDao.saveObject(obj1);
				}

			}

			// save logs
			String desc = mapper.writeValueAsString(miscellaneous2);

			String action = BasicConstants.INSERT;

			if (miscellaneous2.getIsEdit() != null && miscellaneous2.getIsEdit()) {
				action = BasicConstants.UPDATE;
			}

			String loggeduser = null;
			if (!BasicUtils.isEmpty(userId)) {
				loggeduser = userId;
			} else {
				loggeduser = "1234"; // setting dummy user as of now needs to be
				// removed
			}

			String pageName = BasicConstants.SA_MISC;
			logService.saveLog(desc, action, loggeduser, uhid, pageName);
		} catch (Exception e) {
			obj.setType(BasicConstants.MESSAGE_FAILURE);
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, userId,
					miscellaneous2.getUhid(), "SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return obj;
	}

	/**
	 * This method generates Inactive Notes for Jaundice
	 *
	 * @param uhid
	 * @param jaundicenew
	 * @throws InicuDatabaseExeption
	 */
	public String generateInactiveNotesJaundice(InicuDao inicuDaoObj, String uhid, String continuedMedication)
			throws InicuDatabaseExeption {
		if (inicuDaoObj != null) {
			inicuDao = inicuDaoObj;
		}
		// Creating Inactive Notes from here
		String progressNotesJaundice = "";
		SysJaundJSON json = new SysJaundJSON();
		String htmlNextLine = System.getProperty("line.separator");
		try {

			// Fetching Current Episode Number for Jaundice
			int epCountJaundice = 1;
			String queryEpCountJaundice = "SELECT MAX(episode_number) FROM sa_jaundice WHERE uhid='" + uhid + "'";
			List<Integer> epCountListJaundice = inicuDao.getListFromNativeQuery(queryEpCountJaundice);
			if (!BasicUtils.isEmpty(epCountListJaundice)) {
				epCountJaundice = epCountListJaundice.get(0).intValue();
				if (epCountJaundice != 1) {
					progressNotesJaundice += "Baby developed " + epCountJaundice + " episodes of Jaundice"
							+ " during hospital stay. " + htmlNextLine;
					if (epCountJaundice < 3) {
						progressNotesJaundice += "Episode 1: ";
					} else {
						progressNotesJaundice += " ";
					}

				}
			}

			// Old Episodes Inactive Notes List of Jaundice Generating Query
			List<SaJaundice> oldJaundiceList = new ArrayList<SaJaundice>();
			oldJaundiceList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getOldInactiveJaundiceList(uhid));
			if (!BasicUtils.isEmpty(oldJaundiceList)) {
				// Old Episodes Inactive Notes of Jaundice Fetching Function
				String oldInactiveNotes = getOldInactiveNotesJaundice(oldJaundiceList, epCountJaundice);
				progressNotesJaundice += oldInactiveNotes + htmlNextLine;
			}

			// Current Episode
			// progressNotesJaundice += "Episode " + epCountJaundice + " : ";
			if (epCountJaundice > 1) {
				progressNotesJaundice += "Episode " + epCountJaundice + " : ";
			}
			List<SaJaundice> jaundiceList = new ArrayList<SaJaundice>();
			jaundiceList = inicuDao
					.getListFromMappedObjQuery(HqlSqlQueryConstants.getJaundiceList(uhid, epCountJaundice));

			if (!BasicUtils.isEmpty(jaundiceList)) {
				// Age of Onset Data Fetching Function for Jaundice
				String ageOnsetNotes = getAgeOnsetJaundice(jaundiceList);
				progressNotesJaundice += ageOnsetNotes;

				String babyDetailNotes = getBabyDetailNotes(uhid, epCountJaundice);
				progressNotesJaundice += babyDetailNotes;

				// Risk Factors Fetching Function
				String riskFactorNotes = getRiskFactorJaundice(jaundiceList);
				progressNotesJaundice += riskFactorNotes;

				// TCB or TSB Data Fetching Function
				String tcbValueNotes = getTcbValueJaundice(jaundiceList, uhid);
				progressNotesJaundice += tcbValueNotes;

				// Chart Name Fetching function
				String chartNameNotes = getChartNameJaundice(jaundiceList, uhid);
				progressNotesJaundice += chartNameNotes;

				// Bind Score Data Fetching Function
				String bindScoreNotes = getBindScoreJaundice(jaundiceList, uhid, epCountJaundice);
				progressNotesJaundice += bindScoreNotes;

				// Investigation Order Detail Fetching Function
				String investigationOrderNotes = getInvestigationOrderJaundice(jaundiceList);
				progressNotesJaundice += investigationOrderNotes;

				// Phototherapy Data Fetching Function
				String phototherapyNotes = getPhototherapyJaundice(jaundiceList, uhid);
				progressNotesJaundice += phototherapyNotes;

				// Exchange Transfusion Data Fetching Function
				String exchangeNotes = getExchangeJaundice(jaundiceList, uhid);
				progressNotesJaundice += exchangeNotes;

				// Medication of Jaundice Data Fetching Function
				String medicationNotes = getMedicationOfJaundice(jaundiceList, false);
				progressNotesJaundice += medicationNotes + continuedMedication;

				// Causes of Jaundice Fetching Function
				String causesNotes = getCausesOfJaundice(jaundiceList);
				progressNotesJaundice += causesNotes;

				// Inactive Notes End Here
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return progressNotesJaundice;
	}

	// Functions for Jaundice
	// Age Onset Data Fetching Function
	public String getAgeOnsetJaundice(List<SaJaundice> jaundiceList) throws InicuDatabaseExeption {
		String ageOnSetNotesJaundice = "";
		boolean done = false;
		try {
			for (int i = 0; i < jaundiceList.size(); i++) {
				SaJaundice jaundiceObj = (SaJaundice) jaundiceList.get(i);
				if (jaundiceObj != null && done != true && jaundiceObj.getAgeofonset() != null) {
					if (jaundiceObj.getAgeofonset() == 0) {
						ageOnSetNotesJaundice += "Baby developed Jaundice at birth. ";
					} else {
						if (jaundiceObj.getIsageofonsetinhours() != null
								&& jaundiceObj.getIsageofonsetinhours() == true) {
							ageOnSetNotesJaundice += "Baby developed Jaundice at the age of "
									+ jaundiceObj.getAgeofonset();
							if (jaundiceObj.getAgeofonset() == 1) {
								ageOnSetNotesJaundice += " hour. ";
							} else {
								ageOnSetNotesJaundice += " hours. ";
							}
						} else {
							ageOnSetNotesJaundice += "Baby developed Jaundice at the age of "
									+ jaundiceObj.getAgeofonset();
							if (jaundiceObj.getAgeofonset() == 1) {
								ageOnSetNotesJaundice += " day. ";
							} else {
								ageOnSetNotesJaundice += " days. ";
							}
						}
					}
					done = true;
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ageOnSetNotesJaundice;
	}
	
	public String getAgeOnsetShock(List<SaShock> shockList) throws InicuDatabaseExeption {
		String ageOnSetNotesShock = "";
		boolean done = false;
		try {
			String features = "";
			List<String> featureList = new ArrayList<String>();
			String type = "";
			List<String> typeList = new ArrayList<String>();
			for (int i = 0; i < shockList.size(); i++) {
				SaShock shockObj = (SaShock) shockList.get(i);
				
				//Types
				if(!BasicUtils.isEmpty(shockObj.getSepsisDistributive()) && shockObj.getSepsisDistributive()){
					if(!typeList.contains("septic shock")) {
						typeList.add("septic shock");
					}
				}
				
				if(!BasicUtils.isEmpty(shockObj.getInternalHemorrhage()) && shockObj.getInternalHemorrhage()){
					if(!typeList.contains("hemorrhage")) {
						typeList.add("hemorrhage");
					}
				}
				
				if(!BasicUtils.isEmpty(shockObj.getGiLosses()) && shockObj.getGiLosses()){
					if(!typeList.contains("GI losses")) {
						typeList.add("GI losses");
					}
				}
				  
				if(!BasicUtils.isEmpty(shockObj.getFluidLoss()) && shockObj.getFluidLoss()){
					if(!typeList.contains("diuresis")) {
						typeList.add("diuresis");
					}
				}
				
				if(!BasicUtils.isEmpty(shockObj.getPoorFeeding()) && shockObj.getPoorFeeding()){
					if(!typeList.contains("poor feeding")) {
						typeList.add("poor feeding");
					}
				}
				   
				if(!BasicUtils.isEmpty(shockObj.getOtherHypovolemic()) && shockObj.getOtherHypovolemic() && !BasicUtils.isEmpty(shockObj.getOtherHypovolemicType())){
					if(!typeList.contains(shockObj.getOtherHypovolemicType())) {
						typeList.add(shockObj.getOtherHypovolemicType());
					}
				}
				    
			    if(!BasicUtils.isEmpty(shockObj.getAsphyxia()) && shockObj.getAsphyxia()){
					if(!typeList.contains("asphyxia")) {
						typeList.add("asphyxia");
					}
				}

			    if(!BasicUtils.isEmpty(shockObj.getChd()) && shockObj.getChd()){
					if(!typeList.contains("CHD")) {
						typeList.add("CHD");
					}
				}
			    
			    if(!BasicUtils.isEmpty(shockObj.getMetabolic()) && shockObj.getMetabolic()){
					if(!typeList.contains("metabolic")) {
						typeList.add("metabolic");
					}
				}

			    if(!BasicUtils.isEmpty(shockObj.getMyocarditis()) && shockObj.getMyocarditis()){
					if(!typeList.contains("myocarditis")) {
						typeList.add("myocarditis");
					}
				}
				    
			    if(!BasicUtils.isEmpty(shockObj.getArrhythmia()) && shockObj.getArrhythmia()){
					if(!typeList.contains("arrhythmia")) {
						typeList.add("arrhythmia");
					}
				}
			    
			    if(!BasicUtils.isEmpty(shockObj.getOtherCardiogenic()) && shockObj.getOtherCardiogenic() && !BasicUtils.isEmpty(shockObj.getOtherCardiogenicType())){
					if(!typeList.contains(shockObj.getOtherCardiogenicType())) {
						typeList.add(shockObj.getOtherCardiogenicType());
					}
				}
			    
			    if(!BasicUtils.isEmpty(shockObj.getNeurologicInjury()) && shockObj.getNeurologicInjury()){
					if(!typeList.contains("neurologic injury")) {
						typeList.add("neurologic injury");
					}
				}
			    
			    if(!BasicUtils.isEmpty(shockObj.getAnaphylacticShock()) && shockObj.getAnaphylacticShock()){
					if(!typeList.contains("anaphylactic shock")) {
						typeList.add("anaphylactic shock");
					}
				}
			    
			    if(!BasicUtils.isEmpty(shockObj.getOtherDistributive()) && shockObj.getOtherDistributive() && !BasicUtils.isEmpty(shockObj.getOtherDistributiveType())){
					if(!typeList.contains(shockObj.getOtherDistributiveType())) {
						typeList.add(shockObj.getOtherDistributiveType());
					}
				}

			    if(!BasicUtils.isEmpty(shockObj.getArterial()) && shockObj.getArterial()){
					if(!typeList.contains("arterial")) {
						typeList.add("arterial");
					}
				}
			    
			    if(!BasicUtils.isEmpty(shockObj.getVenous()) && shockObj.getVenous()){
					if(!typeList.contains("venous")) {
						typeList.add("venous");
					}
				}
			    
			    if(!BasicUtils.isEmpty(shockObj.getOtherObstructive()) && shockObj.getOtherObstructive() && !BasicUtils.isEmpty(shockObj.getOtherObstructiveType())){
					if(!typeList.contains(shockObj.getOtherObstructiveType())) {
						typeList.add(shockObj.getOtherObstructiveType());
					}
				}
				    
				//Features
				if(!BasicUtils.isEmpty(shockObj.getPulses()) && (shockObj.getPulses().equalsIgnoreCase("not palpable") || shockObj.getPulses().equalsIgnoreCase("feeble"))) {
					String dummyFeature = shockObj.getPulses() + " Pulses";
					if(!featureList.contains(dummyFeature)) {
						featureList.add(dummyFeature);
					}
				}
				if(!BasicUtils.isEmpty(shockObj.getPeripheries()) && (shockObj.getPeripheries().equalsIgnoreCase("mottled") || shockObj.getPeripheries().equalsIgnoreCase("cold"))) {
					String dummyFeature = shockObj.getPeripheries() + " Peripheries";
					if(!featureList.contains(dummyFeature)) {
						featureList.add(dummyFeature);
					}
				}
				if(!BasicUtils.isEmpty(shockObj.getHeartrate()) && (shockObj.getHeartrate() > 180)) {
					String dummyFeature = "Tachycardia";
					if(!featureList.contains(dummyFeature)) {
						featureList.add(dummyFeature);
					}
				}
				if(!BasicUtils.isEmpty(shockObj.getCrt()) && (shockObj.getCrt() > 2)) {
					String dummyFeature = "Prolonged capillary refill time";
					if(!featureList.contains(dummyFeature)) {
						featureList.add(dummyFeature);
					}
				}
				if(!BasicUtils.isEmpty(shockObj.getTempDiff()) && (shockObj.getTemperatureDiff() > 4)) {
					String dummyFeature = "High Temperature Difference";
					if(!featureList.contains(dummyFeature)) {
						featureList.add(dummyFeature);
					}
				}
				if(!BasicUtils.isEmpty(shockObj.getLactate()) && (shockObj.getLactate() > 5)) {
					String dummyFeature = "High Serum lactate levels";
					if(!featureList.contains(dummyFeature)) {
						featureList.add(dummyFeature);
					}
				}
				if(!BasicUtils.isEmpty(shockObj.getUrine()) && (shockObj.getUrine() < 0.5)) {
					String dummyFeature = "Oliguria";
					if(!featureList.contains(dummyFeature)) {
						featureList.add(dummyFeature);
					}
				}
			}
			for(int index = 0; index < featureList.size(); index++) {
				if (BasicUtils.isEmpty(features)) {
					features = "on the basis of " + featureList.get(index);
			    } else {
			    	if(index == featureList.size() - 1){
			    		features = features + " and " + featureList.get(index);
			    	}
			        else{
			        	features = features + ", " + featureList.get(index);
			        }
			    }
			}
			if (!BasicUtils.isEmpty(features)) {
				features = features + " ";
			}
			for(int index = 0; index < typeList.size(); index++) {
				if (BasicUtils.isEmpty(type)) {
					if(typeList.size() > 1)
						type = "Type of Shock were " + typeList.get(index);
					else
						type = "Type of Shock was " + typeList.get(index);
			    } else {
			    	if(index == typeList.size() - 1){
			    		type = type + " and " + typeList.get(index);
			    	}
			        else{
			        	type = type + ", " + typeList.get(index);
			        }
			    }
			}
			if (!BasicUtils.isEmpty(type)) {
				type = type + ". ";
			}
			for (int i = 0; i < shockList.size(); i++) {
				SaShock shockObj = (SaShock) shockList.get(i);
				if (shockObj != null && done != true && shockObj.getAgeofonset() != null) {
					if (shockObj.getAgeofonset() == 0) {
						ageOnSetNotesShock += "Baby developed Shock " + features + "at birth. ";
					} else {
						if (shockObj.getIsageofonsetinhours() != null
								&& shockObj.getIsageofonsetinhours() == true) {
							ageOnSetNotesShock += "Baby developed Shock " + features + "at the age of "
									+ shockObj.getAgeofonset();
							if (shockObj.getAgeofonset() == 1) {
								ageOnSetNotesShock += " hour. ";
							} else {
								ageOnSetNotesShock += " hours. ";
							}
						} else {
							ageOnSetNotesShock += "Baby developed Shock " + features + "at the age of "
									+ shockObj.getAgeofonset();
							if (shockObj.getAgeofonset() == 1) {
								ageOnSetNotesShock += " day. ";
							} else {
								ageOnSetNotesShock += " days. ";
							}
						}
					}
					done = true;
				}
			}
			ageOnSetNotesShock = ageOnSetNotesShock + type;
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ageOnSetNotesShock;
	}

	public String getBabyDetailNotes(String uhid, int epCountJaundice) {

		SysJaundJSON json = new SysJaundJSON();
		String babyNotes = "";
		String antentalHistoryDetails = "select obj from AntenatalHistoryDetail obj where uhid='" + uhid + "'";
		String motherBloodGroup = "";
		List<AntenatalHistoryDetail> antentalHistoryList = inicuDao.getListFromMappedObjQuery(antentalHistoryDetails);

		// get baby blood group
		String babyDetailsQuery = "select obj from BabyDetail obj where uhid='" + uhid + "'";
		String babyBloodGroup = "";

		String queryGetJaundiceDetails = "select obj from SaJaundice as obj where uhid = '" + uhid
				+ "' order by creationtime desc";
		List<SaJaundice> jaundiceDetailsList = inicuDao.getListFromMappedObjQuery(queryGetJaundiceDetails);

		if (epCountJaundice == 1) {
			babyNotes += "";
			if (!BasicUtils.isEmpty(antentalHistoryList)) {
				AntenatalHistoryDetail obj = antentalHistoryList.get(0);
				if (!BasicUtils.isEmpty(obj.getMotherBloodGroupAbo())) {
					motherBloodGroup = obj.getMotherBloodGroupAbo();
					if (!BasicUtils.isEmpty(obj.getMotherBloodGroupRh())) {
						motherBloodGroup = motherBloodGroup
								+ (obj.getMotherBloodGroupRh().equalsIgnoreCase("positive") ? " +ve"
										: (obj.getMotherBloodGroupRh().equalsIgnoreCase("negative")) ? " -ve" : "");
					}
					json.setMotherBloodGroup(motherBloodGroup);
					babyNotes = "Mother Blood group is " + json.getMotherBloodGroup() + ". ";
				}
			}
			List<BabyDetail> babyDetailsList = inicuDao.getListFromMappedObjQuery(babyDetailsQuery);
			if (!BasicUtils.isEmpty(babyDetailsList)) {
				BabyDetail obj = babyDetailsList.get(0);
				if (!BasicUtils.isEmpty(obj.getBloodgroup()) && obj.getBloodgroup() != null) {
					babyBloodGroup = obj.getBloodgroup();
					json.setBabyBloodGroup(babyBloodGroup);
					babyNotes += "Blood group is " + json.getBabyBloodGroup() + ". ";
				}
			}

			if(!(BasicUtils.isEmpty(json.getMotherBloodGroup())) && !(BasicUtils.isEmpty(json.getBabyBloodGroup())) ) {
			if(!(json.getMotherBloodGroup().equalsIgnoreCase(json.getBabyBloodGroup()))) {
				babyNotes += "(ABO incompatibility). ";
				}
			}

		}

		if (!BasicUtils.isEmpty(jaundiceDetailsList)) {
			if (jaundiceDetailsList.get(0).getWeightloss() != null) {
				if (Float.parseFloat(jaundiceDetailsList.get(0).getWeightloss()) > 0) {
					babyNotes += "Baby's weight loss since birth is "
							+ Float.parseFloat(jaundiceDetailsList.get(0).getWeightloss()) + "%. ";
				} else {
					babyNotes += "No significant weight loss since birth. ";
				}
			}
		}

		return babyNotes;
	}

	// Risk Factor Data Fetching Function
	public String getRiskFactorJaundice(List<SaJaundice> jaundiceList) throws InicuDatabaseExeption {
		String riskFactorNameJaundice, riskFactorUniqueIdJaundice;
		riskFactorNameJaundice = riskFactorUniqueIdJaundice = "";
		List<String> riskFactorIdList = new ArrayList<>();
		try {
			for (int i = 0; i < jaundiceList.size(); i++) {
				SaJaundice jaundiceObj = (SaJaundice) jaundiceList.get(i);
				if (jaundiceObj != null && jaundiceObj.getRiskfactor() != null) {
					riskFactorIdList.add(jaundiceObj.getRiskfactor());
				}
			}

			List<String> symptomIdJaundice = new ArrayList<>();
			riskFactorUniqueIdJaundice += listProcessingHelper(riskFactorIdList);
			if (!BasicUtils.isEmpty(riskFactorUniqueIdJaundice)) {
				String queryRiskFactorNameJaundice = "SELECT riskfactor FROM  ref_jaundiceriskfactor "
						+ "WHERE riskfactorid IN (" + (riskFactorUniqueIdJaundice) + ")";
				List<String> riskFactorNameListJaundice = inicuDao.getListFromNativeQuery(queryRiskFactorNameJaundice);
				if (!BasicUtils.isEmpty(riskFactorNameListJaundice)) {
					if (riskFactorNameListJaundice.size() == 1) {
						riskFactorNameJaundice += "The risk factor was ";
					} else {
						riskFactorNameJaundice += "The risk factors were ";
					}

					String riskFactorNameListStringJaundice = riskFactorNameListJaundice.toString();
					riskFactorNameListStringJaundice = riskFactorNameListStringJaundice.replace("[", "");
					riskFactorNameListStringJaundice = riskFactorNameListStringJaundice.replace("]", "");
					if(riskFactorNameListStringJaundice.indexOf(",")!=-1) {
						int index = riskFactorNameListStringJaundice.lastIndexOf(",");
						riskFactorNameListStringJaundice = new StringBuilder(riskFactorNameListStringJaundice).replace(index, index+1, " and ").toString();
					}
					riskFactorNameJaundice += riskFactorNameListStringJaundice + ". ";
				}
			}

//			if (!BasicUtils.isEmpty(symptomIdJaundice)) {
//				String symptomStringJaundice = "";
//				if (symptomIdJaundice.contains("'RSK00009'")) {
//					symptomStringJaundice += "Baby developed jaundice within 24 hours";
//				}
//				if (symptomIdJaundice.contains("'RSK00001'")) {
//					if (!BasicUtils.isEmpty(symptomIdJaundice)) {
//						symptomStringJaundice += ", was Lethargic";
//					} else {
//						symptomStringJaundice += "Baby was Lethargic";
//					}
//				}
//
//				List<String> symptomList = new ArrayList<>();
//				if (symptomIdJaundice.contains("'RSK00002'")) {
//					symptomList.add("Temperature Instability");
//				}
//
//				if (symptomIdJaundice.contains("'RSK00004'")) {
//					symptomList.add("Acidosis");
//				}
//
//				if (symptomIdJaundice.contains("'RSK00005'")) {
//					symptomList.add("S. Albumin < 3 gm/dl");
//				}
//
//				if (!BasicUtils.isEmpty(symptomList)) {
//					String symptomListStringJaundice = symptomList.toString();
//					symptomListStringJaundice = symptomListStringJaundice.replace("[", "");
//					symptomListStringJaundice = symptomListStringJaundice.replace("]", "");
//
//					if (!BasicUtils.isEmpty(symptomStringJaundice)) {
//						symptomStringJaundice += ", had " + symptomListStringJaundice;
//					} else {
//						symptomStringJaundice += "Baby had " + symptomListStringJaundice;
//					}
//				}
//				symptomStringJaundice += ". ";
//				riskFactorNameJaundice += symptomStringJaundice;
//			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return riskFactorNameJaundice;
	}

	// Chart Data Function
	public String getChartNameJaundice(List<SaJaundice> jaundiceList, String uhid) throws InicuDatabaseExeption {
		String chartNameNotes = "";
		boolean done = false;
		try {
			for (int i = 0; i < jaundiceList.size(); i++) {
				SaJaundice jaundiceObj = (SaJaundice) jaundiceList.get(i);
				if (jaundiceObj != null && done != true) {
					// TCB/TSB Name Fetching
					String tcbortsb = "TCB";
					if (!BasicUtils.isEmpty(jaundiceObj.getTcbortsb())) {
						if (jaundiceObj.getTcbortsb() == false) {
							tcbortsb = "TSB";
						}
					} else {
						continue;
					}

					// calculation for generating chart name
					String chartName = "";
					String queryChartValueJaundice = "SELECT actualgestationweek FROM baby_detail WHERE " + "uhid='"
							+ uhid + "'";
					List<Integer> chartValueListJaundice = inicuDao.getListFromNativeQuery(queryChartValueJaundice);
					if (!BasicUtils.isEmpty(chartValueListJaundice)) {
						int gest = (int) chartValueListJaundice.get(0);
						if (gest < 35) {
							chartName = "NICE Chart";
						} else {
							chartName = "AAP Chart";
						}

					}

					// Threshold Value
					if (!BasicUtils.isEmpty(jaundiceObj.getIsphotobelowthreshold())) {
						if (jaundiceObj.getIsphotobelowthreshold().equalsIgnoreCase("aboveThreshold")) {
							chartNameNotes += " and it was above threshold as per " + chartName + ". ";
						} else {
							if (jaundiceObj.getIsphotobelowthreshold().equalsIgnoreCase("belowThreshold")) {
								chartNameNotes += " and it was below threshold as per " + chartName
										+ ". ";
							} else {
								chartNameNotes += " and it was at threshold as per " + chartName
										+ ". ";
							}
						}
						done = true;
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return chartNameNotes;
	}

	// TCB or TSB Data Fetching Function
	public String getTcbValueJaundice(List<SaJaundice> jaundiceList, String uhid) throws InicuDatabaseExeption {
		String tcbValueNotes = "";
		float worstTcbValue, initialTcbValue;
		worstTcbValue = initialTcbValue = 0f;
		try {
			Timestamp worstTcbValueAssessmentTime = null;
			// TCB/TSB Name Fetching
			String tcbortsb = "TcB";
			for (int i = 0; i < jaundiceList.size(); i++) {
				SaJaundice jaundiceObj = (SaJaundice) jaundiceList.get(i);
				if (jaundiceObj != null && jaundiceObj.getTbcvalue() != null) {
					if (initialTcbValue == 0f && worstTcbValue == initialTcbValue) {
						worstTcbValue = initialTcbValue = jaundiceObj.getTbcvalue();
						if (!BasicUtils.isEmpty(jaundiceObj.getTcbortsb()) && jaundiceObj.getTcbortsb() == false) {
							tcbortsb = "TsB";
						}
					} else {
						if (worstTcbValue < jaundiceObj.getTbcvalue()) {
							worstTcbValue = jaundiceObj.getTbcvalue();
							if (jaundiceObj.getAssessmentTime() != null) {
								worstTcbValueAssessmentTime = jaundiceObj.getAssessmentTime();
							}
						}
					}
				}
			}

			if (initialTcbValue != 0) {
				String decimal = "";
				String integer = "";
				String initialTcbValueStr = String.valueOf(initialTcbValue);
				if(initialTcbValueStr.indexOf(".")!=-1) {
					int indexOfDecimal = initialTcbValueStr.indexOf(".");
					 integer = initialTcbValueStr.substring(0,indexOfDecimal);
					 decimal = initialTcbValueStr.substring(indexOfDecimal+1);

				}

				if(decimal.equalsIgnoreCase("0")) {
					tcbValueNotes += "The " + tcbortsb + " value was " + integer
							+ "(mg/dL) ";
				}else {
				tcbValueNotes += "The " + tcbortsb + " value was " + initialTcbValue
						+ "(mg/dL) ";
				}
			}
			if (worstTcbValue != initialTcbValue) {
				tcbValueNotes += "During this episode, the worst " + tcbortsb + " values was " + worstTcbValue
						+ "(mg/dL) at DOL#";
				if (worstTcbValueAssessmentTime != null) {
					tcbValueNotes += getDayOfLife(uhid, worstTcbValueAssessmentTime) + ". ";
				} else {
					tcbValueNotes += ". ";
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return tcbValueNotes;
	}

	// Bind Score Data Fetching Function
	public String getBindScoreJaundice(List<SaJaundice> jaundiceList, String uhid, int epCountJaundice)
			throws InicuDatabaseExeption {
		String bindScoreNotes = "";
		List<Integer> bindScoreIdList = new ArrayList<>();
		try {
			for (int i = 0; i < jaundiceList.size(); i++) {
				SaJaundice jaundiceObj = (SaJaundice) jaundiceList.get(i);
				if (jaundiceObj != null && jaundiceObj.getBindscoreid() != null) {
					bindScoreIdList.add(jaundiceObj.getBindscoreid());
				}
			}

			if (!BasicUtils.isEmpty(bindScoreIdList)) {
				String bindScoreIdListString = bindScoreIdList.toString();
				bindScoreIdListString = bindScoreIdListString.replace("[", "");
				bindScoreIdListString = bindScoreIdListString.replace("]", "");

				String queryBindScoreJaundice = "SELECT bindscore,bindscoreid from score_bind WHERE bindscoreid IN ("
						+ (bindScoreIdListString) + ") and bindscore IS NOT NULL";
				List<Object> bindScoreValueListJaundice = inicuDao.getListFromNativeQuery(queryBindScoreJaundice);
				if (!BasicUtils.isEmpty(bindScoreValueListJaundice)) {
					int worstBindScore, initialBindScore;
					worstBindScore = initialBindScore = 0;
					BigInteger worstBindScoreId = null;
					Object[] bindScoreValueObj = (Object[]) bindScoreValueListJaundice.get(0);
					worstBindScore = initialBindScore = (int) bindScoreValueObj[0];
					for (int i = 0; i < bindScoreValueListJaundice.size(); i++) {
						bindScoreValueObj = (Object[]) bindScoreValueListJaundice.get(i);
						if (worstBindScore <= (int) bindScoreValueObj[0]) {
							worstBindScore = (int) bindScoreValueObj[0];
							worstBindScoreId = (BigInteger) bindScoreValueObj[1];
						}
					}

					if (initialBindScore != 0) {
						bindScoreNotes += "The BIND Score value at the time of first assessment was " + initialBindScore
								+ ". ";
					}
					if (worstBindScore != initialBindScore) {
						String queryWorstBindScoreTime = "SELECT assessment_time FROM sa_jaundice WHERE uhid='" + uhid
								+ "' and bindscoreid=" + worstBindScoreId + " and episode_number=" + epCountJaundice;
						List<Timestamp> worstBindScoreTimeValue = inicuDao
								.getListFromNativeQuery(queryWorstBindScoreTime);
						if (!BasicUtils.isEmpty(worstBindScoreTimeValue)) {
							bindScoreNotes += "During this episode, the worst bind Score values was " + worstBindScore
									+ " at DOL#" + getDayOfLife(uhid, (Timestamp) worstBindScoreTimeValue.get(0))
									+ ". ";
						}
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return bindScoreNotes;
	}

	// Investigation Order Detail Fetch Function
	public String getInvestigationOrderJaundice(List<SaJaundice> jaundiceList) throws InicuDatabaseExeption {
		String investigationOrderNotesJaundice = "";
		List<String> jaundiceIdList = new ArrayList<String>();
		try {
			for (int i = 0; i < jaundiceList.size(); i++) {
				SaJaundice jaundiceObj = (SaJaundice) jaundiceList.get(i);
				jaundiceIdList.add("'" + jaundiceObj.getSajaundiceid().toString() + "'");

			}

			if (!BasicUtils.isEmpty(jaundiceIdList)) {
				String jaundiceIdListString = jaundiceIdList.toString();
				jaundiceIdListString = jaundiceIdListString.replace("[", "");
				jaundiceIdListString = jaundiceIdListString.replace("]", "");
				List<String> investigationOrderHelperList = new ArrayList<>();
				investigationOrderHelperList = getInvestigationOrderHelper(jaundiceIdListString, "Jaundice");
				if (!BasicUtils.isEmpty(investigationOrderHelperList)) {
					Set<String> uniqueInvestigationOrderHelperList = new HashSet<String>(investigationOrderHelperList);
					String uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperList.toString();
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("[",
							"");
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("]",
							"");

					if(uniqueInvestigationOrderHelperListString.indexOf(",")!=-1) {
						uniqueInvestigationOrderHelperListString = formatString(uniqueInvestigationOrderHelperListString);
					}

					if (uniqueInvestigationOrderHelperList.size() == 1) {
						investigationOrderNotesJaundice += "Investigation done during this episode was "
								+ uniqueInvestigationOrderHelperListString + ". ";

					} else {
						investigationOrderNotesJaundice += "Investigations done during this episode were "
								+ uniqueInvestigationOrderHelperListString + ". ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return investigationOrderNotesJaundice;
	}

	
	// Investigation Order Detail Fetch Function
	public String getInvestigationOrderShock(List<SaShock> shockList) throws InicuDatabaseExeption {
		String investigationOrderNotesShock = "";
		List<String> shockIdList = new ArrayList<String>();
		try {
			for (int i = 0; i < shockList.size(); i++) {
				SaShock jaundiceObj = (SaShock) shockList.get(i);
				shockIdList.add("'" + jaundiceObj.getSashockid().toString() + "'");

			}

			if (!BasicUtils.isEmpty(shockIdList)) {
				String shockIdListString = shockIdList.toString();
				shockIdListString = shockIdListString.replace("[", "");
				shockIdListString = shockIdListString.replace("]", "");
				List<String> investigationOrderHelperList = new ArrayList<>();
				investigationOrderHelperList = getInvestigationOrderHelper(shockIdListString, "Shock");
				if (!BasicUtils.isEmpty(investigationOrderHelperList)) {
					Set<String> uniqueInvestigationOrderHelperList = new HashSet<String>(investigationOrderHelperList);
					String uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperList.toString();
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("[",
							"");
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("]",
							"");
					
					if(uniqueInvestigationOrderHelperListString.indexOf(",")!=-1) {
						uniqueInvestigationOrderHelperListString = formatString(uniqueInvestigationOrderHelperListString);
					}
					
					if (uniqueInvestigationOrderHelperList.size() == 1) {
						investigationOrderNotesShock += "Investigation done during this episode was "
								+ uniqueInvestigationOrderHelperListString + ". ";

					} else {
						investigationOrderNotesShock += "Investigations done during this episode were "
								+ uniqueInvestigationOrderHelperListString + ". ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return investigationOrderNotesShock;
	}
		
	// Echo Findings Detail Fetch Function
	public String getEchoFindingsShock(List<SaShock> shockList) throws InicuDatabaseExeption {
		String echoFindingsNotesShock = "";
		List<String> echoList = new ArrayList<String>();
		int offset = TimeZone.getTimeZone(BasicConstants.CLIENT_TIME_ZONE).getRawOffset()
				- TimeZone.getDefault().getRawOffset();
		try {
			for (int i = 0; i < shockList.size(); i++) {
				SaShock shockObj = (SaShock) shockList.get(i);
				if(!BasicUtils.isEmpty(shockObj.getEchoFindings())) {
					Timestamp startDate = new Timestamp(shockObj.getAssessmentTime().getTime() + offset);
					String finding = shockObj.getEchoFindings() + " on " + getDateFromTimestamp(startDate);
					echoList.add(finding);
				}
			}
			for(int index = 0; index < echoList.size(); index++) {
				if (BasicUtils.isEmpty(echoFindingsNotesShock)) {
					if(echoList.size() > 1)
						echoFindingsNotesShock = "Echo findings were " + echoList.get(index);
					else
						echoFindingsNotesShock = "Echo findings was " + echoList.get(index);
			    } else {
			    	if(index == echoList.size() - 1){
			    		echoFindingsNotesShock = echoFindingsNotesShock + " and " + echoList.get(index);
			    	}
			        else{
			        	echoFindingsNotesShock = echoFindingsNotesShock + ", " + echoList.get(index);
			        }
			    }
			}
			if (!BasicUtils.isEmpty(echoFindingsNotesShock)) {
				echoFindingsNotesShock = echoFindingsNotesShock + ". ";
			}
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return echoFindingsNotesShock;
	}
		
	// Phototherapy Data Fetching function
	public String getPhototherapyJaundice(List<SaJaundice> jaundiceList, String uhid) throws InicuDatabaseExeption {
		String phototherapyNotes = "";
		String phototherapyType = "";
		boolean start, stop, isPhotodone, notDone;
		start = stop = isPhotodone = notDone = false;
		String phototherapytcbortsbJaundice = "TcB";
		float phototherapytcbValueJaundice = 0f;
		Timestamp startTime, stopTime, firstStartTime;
		startTime = stopTime = firstStartTime = null;
		Long totalDuration, totalDay, totalHour, totalMinute;
		totalDuration = totalDay = totalHour = totalMinute = 0L;
		try {
            Collections.reverse(jaundiceList);
			for (int i = 0; i < jaundiceList.size(); i++) {
				SaJaundice jaundiceObj = (SaJaundice) jaundiceList.get(i);
				if (jaundiceObj != null && jaundiceObj.getPhototherapyvalue() != null
						&& (jaundiceObj.getPhototherapyvalue()).equalsIgnoreCase("start")) {
					if (!start && !stop) {
						start = true;
						if (startTime == null) {
							firstStartTime = jaundiceObj.getAssessmentTime();
						}
						startTime = jaundiceObj.getAssessmentTime();

						if (jaundiceObj.getTbcvalue() != null) {
							phototherapytcbValueJaundice = jaundiceObj.getTbcvalue();
							if (jaundiceObj.getTcbortsb() != null && jaundiceObj.getTcbortsb() == false) {
								phototherapytcbortsbJaundice = "TsB";
							}
						}
					}
					phototherapyType = jaundiceObj.getPhototherapyType();

				} else {
					if (jaundiceObj.getPhototherapyvalue() != null
							&& (jaundiceObj.getPhototherapyvalue()).equalsIgnoreCase("stop")) {
						if (start) {
							stop = true;
						}

						if (start && stop) {
							stopTime = jaundiceObj.getAssessmentTime();
							if (jaundiceObj.getTbcvalue() != null) {
								phototherapytcbValueJaundice = jaundiceObj.getTbcvalue();
								if (jaundiceObj.getTcbortsb() != null && jaundiceObj.getTcbortsb() == false) {
									phototherapytcbortsbJaundice = "TsB";
								}
							}

							if (startTime != null && stopTime != null) {
								totalDuration += (stopTime.getTime() - startTime.getTime()) / (1000 * 60);
								isPhotodone = true;
							}
							start = stop = false;
						}
					}

					if (totalDuration != 0) {
						totalDay = totalDuration / (60 * 24);
						totalHour = totalDuration / (60) - (totalDay * 24);
						totalMinute = totalDuration - ((totalDay * 24 * 60) + (totalHour * 60));
					}
					if (jaundiceObj.getPhototherapyvalue() != null
							&& (jaundiceObj.getPhototherapyvalue()).equalsIgnoreCase("continue")) {
						if (jaundiceObj.getTbcvalue() != null) {
							phototherapytcbValueJaundice = jaundiceObj.getTbcvalue();
							if (jaundiceObj.getTcbortsb() != null && jaundiceObj.getTcbortsb() == false) {
								phototherapytcbortsbJaundice = "TsB";
							}
						}
					}
				}
			}

			if (isPhotodone) {
				if (totalDay != 0) {
					phototherapyNotes += "Baby was on " + phototherapyType + " phototherapy on "
							+ getDateFromTimestamp(firstStartTime) + "(DOL#" + getDayOfLife(uhid, firstStartTime)
							+ "), recieved for " + totalDay + " days ";
					if(totalHour!=0) {
						phototherapyNotes+=	", " + totalHour + " hours ";
					}
					if(totalMinute!=0) {
						phototherapyNotes += "and " + totalMinute + "minutes ";
					}
					phototherapyNotes += ". ";
					notDone = false;
				} else {
					if (totalHour != 0) {
						phototherapyNotes += "Baby was started on " + phototherapyType + " phototherapy on "
								+ getDateFromTimestamp(firstStartTime) + "(DOL#" + getDayOfLife(uhid, firstStartTime)
								+ "), recieved for " + totalHour + " hours and " + totalMinute + " minutes. ";
						notDone = false;
					} else {
						if (totalMinute != 0) {
							phototherapyNotes += "Baby was started on " + phototherapyType + " phototherapy on "
									+ getDateFromTimestamp(firstStartTime) + "(DOL#"
									+ getDayOfLife(uhid, firstStartTime) + "), recieved for " + totalMinute
									+ " minute. ";
							notDone = false;
						} else {
							notDone = true;
						}
					}
				}

				if (notDone != true) {
					if (phototherapytcbValueJaundice != 0f) {
						String decimal = "";
						String integer = "";
						String phototherapytcbValueJaundiceStr = String.valueOf(phototherapytcbValueJaundice);
						if(phototherapytcbValueJaundiceStr.indexOf(".")!=-1) {
							int indexOfDecimal = phototherapytcbValueJaundiceStr.indexOf(".");
							 integer = phototherapytcbValueJaundiceStr.substring(0,indexOfDecimal);
							 decimal = phototherapytcbValueJaundiceStr.substring(indexOfDecimal+1);

						}
						if(decimal.equalsIgnoreCase("0")) {
							phototherapyNotes += "Phototherapy was stopped at the " + phototherapytcbortsbJaundice + " value of "
									+ integer + " mg/dL. ";
						}
						else {
						phototherapyNotes += "Phototherapy was stopped at the " + phototherapytcbortsbJaundice + " value of "
								+ phototherapytcbValueJaundice + " mg/dL. ";
						}
					} else {
						phototherapyNotes += ". ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return phototherapyNotes;
	}

	// Exchange Transfusion Data Fetching Function
	public String getExchangeJaundice(List<SaJaundice> jaundiceList, String uhid) throws InicuDatabaseExeption {
		String exchangeNotes = "";
		try {
			int countExchange = 0;
			for (int i = 0; i < jaundiceList.size(); i++) {
				SaJaundice jaundiceObj = (SaJaundice) jaundiceList.get(i);
				if (jaundiceObj != null && jaundiceObj.getExchangetrans() != null) {
					if (jaundiceObj.getExchangetrans() == true) {
						countExchange++;
						if (countExchange == 1) {
							exchangeNotes += "First ";
						}
						if (countExchange == 2) {
							exchangeNotes += "Second ";
						}
						if (countExchange == 3) {
							exchangeNotes += "Third ";
						}
						if (countExchange == 4) {
							exchangeNotes += "Fourth ";
						}
						if (countExchange == 5) {
							exchangeNotes += "Fifth ";
						}

						exchangeNotes += "Exchange Transfusion was done on (DOL#"
								+ getDayOfLife(uhid, jaundiceObj.getAssessmentTime()) + "). ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return exchangeNotes;
	}

	// Medication of Jaundice Fetching Function
	public String getMedicationOfJaundice(List<SaJaundice> jaundiceList, boolean isSkip) throws InicuDatabaseExeption {
		String medicationNotesJaundice = "";
		List<String> finalEventIdListJaundice = new ArrayList<>();
		try {
			for (int i = 0; i < jaundiceList.size(); i++) {
				SaJaundice jaundiceObj = (SaJaundice) jaundiceList.get(i);
				if (jaundiceObj != null && jaundiceObj.getSajaundiceid() != null) {
					String saJaundiceIdJaundice = "'" + jaundiceObj.getSajaundiceid().toString() + "'";
					finalEventIdListJaundice.add(saJaundiceIdJaundice);
				}
			}

			if (!BasicUtils.isEmpty(finalEventIdListJaundice)) {
				String finalEventIdListStringJaundice = finalEventIdListJaundice.toString();
				finalEventIdListStringJaundice = finalEventIdListStringJaundice.replace("[", "");
				finalEventIdListStringJaundice = finalEventIdListStringJaundice.replace("]", "");
				medicationNotesJaundice += getMedicationHelper(finalEventIdListStringJaundice, "Jaundice"
                        , jaundiceList.get(0).getUhid(), isSkip);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return medicationNotesJaundice;
	}
	
	public String getMedicationOfShock(List<SaShock> shockList) throws InicuDatabaseExeption {
		String medicationNotesShock = "";
		List<String> finalEventIdListShock = new ArrayList<>();
		try {
			for (int i = 0; i < shockList.size(); i++) {
				SaShock shockObj = (SaShock) shockList.get(i);
				if (shockObj != null && shockObj.getSashockid() != null) {
					String saJaundiceIdJaundice = "'" + shockObj.getSashockid().toString() + "'";
					finalEventIdListShock.add(saJaundiceIdJaundice);
				}
			}

			if (!BasicUtils.isEmpty(finalEventIdListShock)) {
				String finalEventIdListStringJaundice = finalEventIdListShock.toString();
				finalEventIdListStringJaundice = finalEventIdListStringJaundice.replace("[", "");
				finalEventIdListStringJaundice = finalEventIdListStringJaundice.replace("]", "");
				medicationNotesShock += getMedicationHelper(finalEventIdListStringJaundice, "Shock"
                        , shockList.get(0).getUhid(), false);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return medicationNotesShock;
	}

	// Causes of Jaundice Fetching Function
	public String getCausesOfJaundice(List<SaJaundice> jaundiceList) throws InicuDatabaseExeption {
		String causesNameJaundice, causesUniqueIdJaundice;
		causesNameJaundice = causesUniqueIdJaundice = "";
		List<String> causesIdList = new ArrayList<>();
		try {
			for (int i = 0; i < jaundiceList.size(); i++) {
				SaJaundice jaundiceObj = (SaJaundice) jaundiceList.get(i);
				if (jaundiceObj != null && jaundiceObj.getCauseofjaundice() != null) {
					causesIdList.add(jaundiceObj.getCauseofjaundice());
				}
			}

			causesUniqueIdJaundice += listProcessingHelper(causesIdList);
			if (!BasicUtils.isEmpty(causesUniqueIdJaundice)) {
				String queryCausesNameJaundice = "SELECT causeofjaundice FROM  ref_causeofjaundice WHERE "
						+ "causeofjaundiceid IN (" + (causesUniqueIdJaundice) + ")";
				List<String> causesNameListJaundice = inicuDao.getListFromNativeQuery(queryCausesNameJaundice);
				if (!BasicUtils.isEmpty(causesNameListJaundice)) {
					if (causesNameListJaundice.size() == 1) {
						causesNameJaundice += "Cause of jaundice was ";
					} else {
						causesNameJaundice += "Causes of jaundice were ";
					}

					String causesNameListStringJaundice = causesNameListJaundice.toString();
					causesNameListStringJaundice = causesNameListStringJaundice.replace("[", "");
					causesNameListStringJaundice = causesNameListStringJaundice.replace("]", "");
					if(causesNameListStringJaundice.indexOf(",")!=-1) {
						int index = causesNameListStringJaundice.lastIndexOf(",");
						causesNameListStringJaundice = new StringBuilder(causesNameListStringJaundice).replace(index, index+1, " and ").toString();
					}
					causesNameJaundice += causesNameListStringJaundice + ". ";
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return causesNameJaundice;
	}
	
	// Causes of Shock Fetching Function
	public String getCausesOfShock(List<SaShock> shockList) throws InicuDatabaseExeption {
		String causesNameShock, causesUniqueIdShock;
		causesNameShock = causesUniqueIdShock = "";
		List<String> causesIdList = new ArrayList<>();
		try {
			for (int i = 0; i < shockList.size(); i++) {
				SaShock shockObj = (SaShock) shockList.get(i);
				if (shockObj != null && shockObj.getCauseofshock() != null) {
					causesIdList.add(shockObj.getCauseofshock());
				}
			}

			causesUniqueIdShock += listProcessingHelper(causesIdList);
			if (!BasicUtils.isEmpty(causesUniqueIdShock)) {
				String queryCausesNameShock = "SELECT causeofshock FROM  ref_causeofshock WHERE "
						+ "causeofshockid IN (" + (causesUniqueIdShock) + ")";
				List<String> causesNameListShock = inicuDao.getListFromNativeQuery(queryCausesNameShock);
				if (!BasicUtils.isEmpty(causesNameListShock)) {
					if (causesNameListShock.size() == 1) {
						causesNameShock += "Cause of shock was ";
					} else {
						causesNameShock += "Causes of shock were ";
					}

					String causesNameListStringShock = causesNameListShock.toString();
					causesNameListStringShock = causesNameListStringShock.replace("[", "");
					causesNameListStringShock = causesNameListStringShock.replace("]", "");
					if(causesNameListStringShock.indexOf(",")!=-1) {
						int index = causesNameListStringShock.lastIndexOf(",");
						causesNameListStringShock = new StringBuilder(causesNameListStringShock).replace(index, index+1, " and ").toString();
					}
					causesNameShock += causesNameListStringShock + ". ";
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return causesNameShock;
	}

	// Old Episodes Inactive Notes of Jaundice Fetching Function
	public String getOldInactiveNotesJaundice(List<SaJaundice> oldJaundiceList, int epCountJaundice)
			throws InicuDatabaseExeption {
		String oldInactiveNotes = "";
		try {
			if (epCountJaundice == 1) {
				return oldInactiveNotes;
			}

			for (int i = 0; i < oldJaundiceList.size(); i++) {
				SaJaundice jaundiceObj = (SaJaundice) oldJaundiceList.get(i);
				if (jaundiceObj != null && jaundiceObj.getComment() != null) {
					oldInactiveNotes = jaundiceObj.getComment();
				}
			}

			if (epCountJaundice > 2) {
				oldInactiveNotes = oldInactiveNotes.substring(oldInactiveNotes.indexOf('\n') + 1);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return oldInactiveNotes;
	}
	
	public String getOldInactiveNotesShock(List<SaShock> oldShockList, int epCountShock)
			throws InicuDatabaseExeption {
		String oldInactiveNotes = "";
		try {
			if (epCountShock == 1) {
				return oldInactiveNotes;
			}

			for (int i = 0; i < oldShockList.size(); i++) {
				SaShock shockObj = (SaShock) oldShockList.get(i);
				if (shockObj != null && shockObj.getComment() != null) {
					oldInactiveNotes = shockObj.getComment();
				}
			}

			if (epCountShock > 2) {
				oldInactiveNotes = oldInactiveNotes.substring(oldInactiveNotes.indexOf('\n') + 1);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return oldInactiveNotes;
	}

	/**
	 * Purpose: Feed intolerance inactive notes
	 *
	 * @Created on: 20/6/2019
	 * @author:Shweta Mohanani
	 *
	 */

	/**
	 * This method generates Inactive Notes for feed intolerance
	 *
	 * @param uhid
	 * @param feed intolerance
	 * @throws InicuDatabaseExeption
	 */

	// functions for feed intolerance

	public String generateInactiveNotesFeedIntolerance(InicuDao inicuDaoObj, String uhid, String continuedMedication) {

		if (inicuDaoObj != null) {
			inicuDao = inicuDaoObj;
		}
		String progressNotesFeedIntolerance = "";
		String htmlNextLine = System.getProperty("line.separator");
		try {
			// Fetching Current Episode Number for feed
			int epCountFeedIntolerance = 1;
			String queryEpCountFeedIntolerance = "SELECT MAX(episode_number) FROM sa_feed_intolerance WHERE uhid='"
					+ uhid + "'";
			List<Integer> epCountListFeedIntolerance = inicuDao.getListFromNativeQuery(queryEpCountFeedIntolerance);

			if (!BasicUtils.isEmpty(epCountListFeedIntolerance)) {
				epCountFeedIntolerance = epCountListFeedIntolerance.get(0).intValue();
				if (epCountFeedIntolerance != 1) {
					progressNotesFeedIntolerance += "Baby developed " + epCountFeedIntolerance
							+ " episodes of feedintolerance" + " during hospital stay. " + htmlNextLine + " ";
					if (epCountFeedIntolerance < 3)
						progressNotesFeedIntolerance += "Episode 1: ";
					else
						progressNotesFeedIntolerance += " ";
				}
			}

			// Old Episodes Inactive Notes List of feed intolerance Generating Query
			List<SaFeedIntolerance> oldFeedIntoleranceList = new ArrayList<SaFeedIntolerance>();
			oldFeedIntoleranceList = inicuDao
					.getListFromMappedObjQuery(HqlSqlQueryConstants.getOldInactiveFeedIntoleranceList(uhid) +
                                                " order by feedIntoleranceId asc");
			if (!BasicUtils.isEmpty(oldFeedIntoleranceList)) {
				// Old Episodes Inactive Notes of Sepsis Fetching Function
				String oldInactiveNotes = getOldInactiveNotesFeedIntolerance(oldFeedIntoleranceList,
						epCountFeedIntolerance);
				progressNotesFeedIntolerance += oldInactiveNotes + htmlNextLine;
			}

			if (epCountFeedIntolerance > 1) {
				progressNotesFeedIntolerance += "Episode " + epCountFeedIntolerance + " : ";
			}

			List<SaFeedIntolerance> feedIntoleranceList = new ArrayList<SaFeedIntolerance>();
			feedIntoleranceList = inicuDao.getListFromMappedObjQuery(
					HqlSqlQueryConstants.getFeedIntoleranceList(uhid, epCountFeedIntolerance));

			if (!BasicUtils.isEmpty(feedIntoleranceList)) {
				// Age of Onset Data Fetching Function for Jaundice
				String ageOnsetNotes = getAgeOnsetFeedIntolerance(feedIntoleranceList);
				progressNotesFeedIntolerance += ageOnsetNotes;

				// Risk Factors Fetching Function
				String riskFactorNotes = getRiskFactorFeedIntolerance(feedIntoleranceList);
				progressNotesFeedIntolerance += riskFactorNotes;

				String symptomsNotes = getSymptomsFeedIntolerance(feedIntoleranceList, uhid);
				progressNotesFeedIntolerance += symptomsNotes;

				// Investigation Order Detail Fetching Function
				String investigationOrderNotes = getInvestigationOrderFeedIntolerance(feedIntoleranceList);
				progressNotesFeedIntolerance += investigationOrderNotes;
				//
				// feeding type Data Fetching Function
				String feedingNotes = getFeedTypeFeedIntolerance(feedIntoleranceList, uhid);
				progressNotesFeedIntolerance += feedingNotes;

				// Medication of Jaundice Data Fetching Function
				String medicationNotes = getMedicationOfFeedIntolerance(feedIntoleranceList);
				progressNotesFeedIntolerance += medicationNotes + continuedMedication;

				// Causes of Jaundice Fetching Function
				String causesNotes = getCausesOfFeedIntolerance(feedIntoleranceList);
				progressNotesFeedIntolerance += causesNotes;

				// Inactive Notes End Here

			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return progressNotesFeedIntolerance;

	}

	// Functions for feedintolerance
	// Age Onset Data Fetching Function
	public String getAgeOnsetFeedIntolerance(List<SaFeedIntolerance> feedIntoleranceList) throws InicuDatabaseExeption {
		String ageOnSetNotesFeedIntolerance = "";
		boolean done = false;
		try {
			for (int i = 0; i < feedIntoleranceList.size(); i++) {
				SaFeedIntolerance feedintoleranceObj = (SaFeedIntolerance) feedIntoleranceList.get(i);
				if (feedintoleranceObj != null && done != true && feedintoleranceObj.getAgeOfOnset() != null) {
					if (feedintoleranceObj.getAgeOfOnset() == 0) {
						ageOnSetNotesFeedIntolerance += "Baby developed feed intolerance at birth ";
					} else {
						if (feedintoleranceObj.getAgeOfOnsetInHours() != null
								&& feedintoleranceObj.getAgeOfOnsetInHours() == true) {
							ageOnSetNotesFeedIntolerance += "Baby developed feed intolerance at the age of "
									+ feedintoleranceObj.getAgeOfOnset();
							if (feedintoleranceObj.getAgeOfOnset() == 1) {
								ageOnSetNotesFeedIntolerance += " hour ";
							} else {
								ageOnSetNotesFeedIntolerance += " hours ";
							}
						} else {
							ageOnSetNotesFeedIntolerance += "Baby developed Jaundice at the age of "
									+ feedintoleranceObj.getAgeOfOnset();
							if (feedintoleranceObj.getAgeOfOnset() == 1) {
								ageOnSetNotesFeedIntolerance += " day ";
							} else {
								ageOnSetNotesFeedIntolerance += " days ";
							}
						}
					}
					done = true;
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ageOnSetNotesFeedIntolerance;
	}

	// Risk Factor Data Fetching Function
	public String getRiskFactorFeedIntolerance(List<SaFeedIntolerance> feedIntoleranceList)
			throws InicuDatabaseExeption {
		String riskFactorNameFeedIntolerance, riskFactorUniqueIdFeedIntolerance, riskFactorName;
		riskFactorNameFeedIntolerance = riskFactorUniqueIdFeedIntolerance = riskFactorName = "";
		try {
			List<String> riskFactorIdList = new ArrayList<>();
			for (int i = 0; i < feedIntoleranceList.size(); i++) {
				SaFeedIntolerance FeedIntoleranceObj = (SaFeedIntolerance) feedIntoleranceList.get(i);
				if (FeedIntoleranceObj != null && FeedIntoleranceObj.getRiskfactors() != null) {
					riskFactorIdList.add(FeedIntoleranceObj.getRiskfactors());
				}
			}

			riskFactorUniqueIdFeedIntolerance += listProcessingHelper(riskFactorIdList);
			if (!BasicUtils.isEmpty(riskFactorUniqueIdFeedIntolerance)) {
				String[] riskFactorNameString = riskFactorUniqueIdFeedIntolerance.split(",");
				int firstFactorDone = 0;
				for (String s : riskFactorNameString) {
					s = s.trim();
					if (s.equalsIgnoreCase("'Prematurity'")) {
						riskFactorName += "Prematurity, ";
						firstFactorDone++;
					}

					if (s.equalsIgnoreCase("'Umblical Doppler'")) {
						riskFactorName += "Umblical Doppler, ";
						firstFactorDone++;
					}

					if (s.equalsIgnoreCase("'Severe Growth Restriction'")) {
						riskFactorName += "Severe Growth Restriction, ";
						firstFactorDone++;
					}

					if (s.equalsIgnoreCase("'Low APGAR'")) {
						riskFactorName += "Low APGAR, ";
						firstFactorDone++;

					}

					if (s.equalsIgnoreCase("'Sepsis'")) {
						riskFactorName += "Sepsis, ";
						firstFactorDone++;

					}

				}
				int index = riskFactorName.lastIndexOf(",");
				riskFactorName = new StringBuilder(riskFactorName).replace(index, index+1, "").toString();
				if(riskFactorName.indexOf(",")!=-1) {
					riskFactorName = formatString(riskFactorName);
				}
				if (firstFactorDone == 1) {
					riskFactorNameFeedIntolerance += "with risk factor ";
					// riskFactorNameFeedIntolerance += riskFactorName;
				} else {
					riskFactorNameFeedIntolerance += "with risk factors ";
					// riskFactorNameFeedIntolerance += ", " + riskFactorName;
				}

				riskFactorNameFeedIntolerance += riskFactorName + ". ";
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return riskFactorNameFeedIntolerance;
	}

	public String getSymptomsFeedIntolerance(List<SaFeedIntolerance> feedIntoleranceList, String uhid) {
		String SymptomsNameFeedIntolerance, SymptomsUniqueIdFeedIntolerance, AbdominalDistinctionFeedIntolerance;
		String sympList;
		float abdomenDiff = 0;
		String[] abdominalDistinction = null;
		SymptomsNameFeedIntolerance = SymptomsUniqueIdFeedIntolerance = AbdominalDistinctionFeedIntolerance = "";
		sympList = "";
		try {
			List<String> symptomsIdList = new ArrayList<>();
			for (int i = 0; i < feedIntoleranceList.size(); i++) {
				SaFeedIntolerance FeedIntoleranceObj = (SaFeedIntolerance) feedIntoleranceList.get(i);
				if (FeedIntoleranceObj != null && FeedIntoleranceObj.getAbdominalSigns() != null) {
					symptomsIdList.add(FeedIntoleranceObj.getAbdominalSigns());
				}
			}

			List<String> abdominalDistinctionList = new ArrayList<>();
			for (int i = 0; i < feedIntoleranceList.size(); i++) {
				SaFeedIntolerance FeedIntoleranceObj = (SaFeedIntolerance) feedIntoleranceList.get(i);
				if (FeedIntoleranceObj != null && FeedIntoleranceObj.getAbdominalDistinctionValue() != null) {
					abdominalDistinctionList.add(FeedIntoleranceObj.getAbdominalDistinctionValue());
				}

			}

			SymptomsUniqueIdFeedIntolerance += listProcessingHelper(symptomsIdList);
			AbdominalDistinctionFeedIntolerance += listProcessingHelper(abdominalDistinctionList);

			String queryBaselineGirthFeed = "select obj from SaFeedIntolerance as obj where uhid = '" + uhid
					+ "' and baseline_abdominal_girth is not null order by creationtime desc ";
			List<SaFeedIntolerance> baselineGirthListFeed = inicuDao.getListFromMappedObjQuery(queryBaselineGirthFeed);

			// float baselineGirthFeed =
			// baselineGirthListFeed.get(0).getBaselineAbdominalGirth();
			if (!BasicUtils.isEmpty(baselineGirthListFeed)) {
				Timestamp timeToday = baselineGirthListFeed.get(0).getCreationtime();
				Timestamp yest = new Timestamp(timeToday.getTime() - (24 * 60 * 60 * 1000));
				float baselineAbdomenGirthFeed = baselineGirthListFeed.get(0).getBaselineAbdominalGirth();

				// float baselineGirthFeed =
				// baselineGirthListFeed.get(0).getBaselineAbdominalGirth();
				String queryBaselineGirth = "Select abdomen_girth from nursing_intake_output where uhid='" + uhid
						+ "' and abdomen_girth is not null and entry_timestamp >= '" + yest
						+ "' and entry_timestamp <= '" + timeToday + "' ";
				List<String> baselineGirthList = inicuDao.getListFromNativeQuery(queryBaselineGirth);
				if (!BasicUtils.isEmpty(baselineGirthList)) {

					for (int i = 0; i < baselineGirthList.size(); i++) {
						abdomenDiff = baselineAbdomenGirthFeed - Float.parseFloat(baselineGirthList.get(i));

						if (abdomenDiff > 2) {
							sympList += "The basis of diagnosing feed intolerance was ";
							sympList += "was increase in abdomenal gitrh (" + abdomenDiff + " cm from baseline ),";
							break;
						}
					}
				}
			}
			if (abdomenDiff < 2) {
				sympList += "The basis of diagnosing feed intolerance was ";
			}

			if (!BasicUtils.isEmpty(SymptomsUniqueIdFeedIntolerance)) {
				String[] riskFactorNameString = SymptomsUniqueIdFeedIntolerance.split(",");
				String[] AbdominalDistinctionNameString = AbdominalDistinctionFeedIntolerance.split(",");
				int firstFactorDone = 0;
				for (String s : riskFactorNameString) {
					s = s.trim();
					if (s.equalsIgnoreCase("'Abdominal distension'")) {
						sympList += "abdominal distension ";

						if (AbdominalDistinctionNameString.length > 0 && AbdominalDistinctionNameString.length <= 3) {
							if (AbdominalDistinctionNameString.length == 3) {
								if ((AbdominalDistinctionNameString[0].trim().equalsIgnoreCase("'Visible Loops'"))
										|| (AbdominalDistinctionNameString[1].trim()
												.equalsIgnoreCase("'Visible Loops'"))
										|| (AbdominalDistinctionNameString[2].trim()
												.equalsIgnoreCase("'Visible Loops'"))) {
									sympList += "with visible loops, ";
								} else {
									sympList += "without visible loops, ";
								}
							}

							if (AbdominalDistinctionNameString.length == 2) {
								if ((AbdominalDistinctionNameString[0].trim().equalsIgnoreCase("'Visible Loops'"))
										|| (AbdominalDistinctionNameString[1].trim()
												.equalsIgnoreCase("'Visible Loops'"))) {
									sympList += "with visible loops, ";
								} else {
									sympList += "without visible loops, ";
								}
							}

							if (AbdominalDistinctionNameString.length == 1) {
								if ((AbdominalDistinctionNameString[0].trim().equalsIgnoreCase("'Visible Loops'"))) {
									sympList += "with visible loops, ";
								} else {
									sympList += "without visible loops, ";
								}
							}
						}

						if (AbdominalDistinctionNameString.length == 0) {
							sympList += "without visible loops, ";
						}

					}

					if (s.equalsIgnoreCase("'Vomit'")) {
						sympList += "vomitting , ";
					}

					if (s.equalsIgnoreCase("'Erythema'")) {
						sympList += "abdominal wall erythema , ";
					}

					if (s.equalsIgnoreCase("'Visible Veins'")) {
						sympList += "visible veins , ";
					}

					if (s.equalsIgnoreCase("'Edema'")) {
						sympList += "edema , ";
					}

					if (s.equalsIgnoreCase("'Gastric Aspirate'")) {
						sympList += "gastric aspirate ";
					}

				}
				sympList += ". ";

			}

			if (feedIntoleranceList.get(0).getSystemicSigns() != null) {
				sympList += feedIntoleranceList.get(0).getSystemicSigns() + " .";
			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return sympList;
	}

	public String getFeedTypeFeedIntolerance(List<SaFeedIntolerance> feedIntoleranceList, String uhid) {
		String feedingNotes = "";
		String feeds = "";
		String NPOIdList = "";
		List<String> NPOCause = new ArrayList<String>();
		List<RefCauseOfNpo> NpoList = new ArrayList<RefCauseOfNpo>();
		SaFeedIntolerance FeedIntoleranceObj = null;
		try {
			List<Long> symptomsIdList = new ArrayList<>();
			for (int i = 0; i < feedIntoleranceList.size(); i++) {
				FeedIntoleranceObj = (SaFeedIntolerance) feedIntoleranceList.get(i);
				if (FeedIntoleranceObj != null && FeedIntoleranceObj.getBabyfeedid() != null) {
					symptomsIdList.add(FeedIntoleranceObj.getBabyfeedid());

				}
			}

			String query = "Select obj from SaFeedIntolerance as obj where uhid = '" + uhid
					+ "' and feedingContinue != null order by creationtime desc";
			List<SaFeedIntolerance> feedIntolerantList = inicuDao.getListFromMappedObjQuery(query);
			if (!BasicUtils.isEmpty(feedIntolerantList)) {
				if (feedIntolerantList.get(0).getFeedingContinue().equalsIgnoreCase("NPO")) {
					feedingNotes += "Baby got NPO on #DOL " + getDayOfLife(uhid, FeedIntoleranceObj.getAssessmentTime())
							+ ". ";
				}

				if (feedIntolerantList.get(0).getFeedingContinue().equalsIgnoreCase("Continue same feed")) {
					feedingNotes += "Baby was continued with same feed on #DOL "
							+ getDayOfLife(uhid, FeedIntoleranceObj.getAssessmentTime()) + ". ";
				}

				if (feedIntolerantList.get(0).getFeedingContinue() == "Skip one feed") {
					feedingNotes += "Baby was continued with same feed on #DOL "
							+ getDayOfLife(uhid, FeedIntoleranceObj.getAssessmentTime()) + ". ";
				}
			}

			String feedIdList = symptomsIdList.toString();
			feedIdList = feedIdList.replace("[", "").replace("]", "");
			String QueryCausesOfNpo = "Select obj from RefCauseOfNpo as obj";
			NpoList = inicuDao.getListFromMappedObjQuery(QueryCausesOfNpo);

			String query1 = "select obj from BabyfeedDetail as obj where babyfeedid IN (" + feedIdList + ")";
			List<BabyfeedDetail> babyFeedDetailsList = inicuDao.getListFromMappedObjQuery(query1);
			if (!BasicUtils.isEmpty(babyFeedDetailsList)) {
				int NPOCount = 0;
				String[] feedIds = feedIdList.split(", ");
				for (int i = 0; i < babyFeedDetailsList.size(); i++) {
					for (String s : feedIds) {

						if (babyFeedDetailsList.get(i).getBabyfeedid().toString().contentEquals(s)) {
							NPOCause.add(babyFeedDetailsList.get(i).getCauseofnpo());
						}
					}
				}
				NPOIdList += listProcessingHelper(NPOCause);

				String[] npoIdListFromBabyFeed = NPOIdList.split(",");

				if (!feedIntolerantList.get(0).getFeedingContinue().equals("Skip one feed")) {

					for (String s : npoIdListFromBabyFeed) {

						s = s.trim();
						if (s.equalsIgnoreCase("'NPO001'")) {
							feeds += NpoList.get(0).getCasueName() + ", ";
							NPOCount++;
						}
						if (s.equalsIgnoreCase("'NPO002'")) {
							feeds += NpoList.get(1).getCasueName() + ", ";
							NPOCount++;
						}
						if (s.equalsIgnoreCase("'NPO003'")) {
							feeds += NpoList.get(2).getCasueName() + ", ";
							NPOCount++;
						}

						if (s.equalsIgnoreCase("'NPO004'")) {
							feeds += NpoList.get(3).getCasueName() + ", ";
							NPOCount++;
						}
						if (s.equalsIgnoreCase("'NPO005'")) {
							feeds += NpoList.get(4).getCasueName() + ", ";
							NPOCount++;
						}
						if (s.equalsIgnoreCase("'NPO006'")) {
							feeds += NpoList.get(5).getCasueName() + ", ";
							NPOCount++;
						}
						if (s.equalsIgnoreCase("'NPO007'")) {
							feeds += NpoList.get(6).getCasueName() + ", ";
							NPOCount++;
						}
						if (s.equalsIgnoreCase("'NPO008'")) {
							feeds += NpoList.get(7).getCasueName() + ", ";
							NPOCount++;
						}

					}

					if (NPOCount == 1) {
						feedingNotes += "NPO reason is " + feeds + ". ";
					} else {
						feedingNotes += "NPO reasons are " + feeds + ". ";
					}
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return feedingNotes;
	}

	// Medication of Jaundice Fetching Function
	public String getMedicationOfFeedIntolerance(List<SaFeedIntolerance> feedIntoleranceList)
			throws InicuDatabaseExeption {
		String medicationNotesFeedIntolerance = "";
		List<String> finalEventIdListJaundice = new ArrayList<>();
		try {
			for (int i = 0; i < feedIntoleranceList.size(); i++) {
				SaFeedIntolerance jaundiceObj = (SaFeedIntolerance) feedIntoleranceList.get(i);
				if (jaundiceObj != null && jaundiceObj.getFeedIntoleranceId() != null) {
					String saJaundiceIdJaundice = "'" + jaundiceObj.getFeedIntoleranceId().toString() + "'";
					finalEventIdListJaundice.add(saJaundiceIdJaundice);
				}
			}

			if (!BasicUtils.isEmpty(finalEventIdListJaundice)) {
				String finalEventIdListStringJaundice = finalEventIdListJaundice.toString();
				finalEventIdListStringJaundice = finalEventIdListStringJaundice.replace("[", "");
				finalEventIdListStringJaundice = finalEventIdListStringJaundice.replace("]", "");
				medicationNotesFeedIntolerance += getMedicationHelper(finalEventIdListStringJaundice, "FeedIntolerance"
                        , feedIntoleranceList.get(0).getUhid(), false)
						+ ". ";
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return medicationNotesFeedIntolerance;
	}

	// Causes of Jaundice Fetching Function
	public String getCausesOfFeedIntolerance(List<SaFeedIntolerance> feedIntoleranceList) throws InicuDatabaseExeption {
		String causesNameJaundice, causesUniqueIdJaundice;
		causesNameJaundice = causesUniqueIdJaundice = "";
		List<String> causesIdList = new ArrayList<>();
		try {
			for (int i = 0; i < feedIntoleranceList.size(); i++) {
				SaFeedIntolerance jaundiceObj = (SaFeedIntolerance) feedIntoleranceList.get(i);
				if (jaundiceObj != null && jaundiceObj.getCauseOfFeed() != null) {
					causesIdList.add(jaundiceObj.getCauseOfFeed());
				}
			}

			causesUniqueIdJaundice += listProcessingHelper(causesIdList);
			if (!BasicUtils.isEmpty(causesUniqueIdJaundice)) {
				String queryCausesNameJaundice = "SELECT cause FROM  ref_feedintolerance_causes WHERE " + "cause IN ("
						+ (causesUniqueIdJaundice) + ")";
				List<String> causesNameListJaundice = inicuDao.getListFromNativeQuery(queryCausesNameJaundice);
				if (!BasicUtils.isEmpty(causesNameListJaundice)) {

					String causesNameListStringJaundice = causesNameListJaundice.toString();
					causesNameListStringJaundice = causesNameListStringJaundice.replace("[", "");
					causesNameListStringJaundice = causesNameListStringJaundice.replace("]", "");
					if(causesNameListStringJaundice.indexOf(",")!=-1) {
						causesNameListStringJaundice = formatString(causesNameListStringJaundice);
					}
					causesNameJaundice += causesNameListStringJaundice;
					if (causesNameListJaundice.size() == 1) {
						causesNameJaundice += " is most likely the feed intolerance. ";
					} else {
						causesNameJaundice += " are most likely the causes of feed intolerance. ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return causesNameJaundice;
	}

	// Investigation Order Detail Fetch Function
	public String getInvestigationOrderFeedIntolerance(List<SaFeedIntolerance> feedList) throws InicuDatabaseExeption {
		String investigationOrderNotesFeed = "";
		List<String> feedIdList = new ArrayList<String>();
		try {
			for (int i = 0; i < feedList.size(); i++) {
				SaFeedIntolerance feedObj = (SaFeedIntolerance) feedList.get(i);
				feedIdList.add("'" + feedObj.getFeedIntoleranceId().toString() + "'");

			}

			if (!BasicUtils.isEmpty(feedIdList)) {
				String feedIdListString = feedIdList.toString();
				feedIdListString = feedIdListString.replace("[", "");
				feedIdListString = feedIdListString.replace("]", "");
				List<String> investigationOrderHelperList = new ArrayList<>();
				investigationOrderHelperList = getInvestigationOrderHelper(feedIdListString, "FeedIntolerance");
				if (!BasicUtils.isEmpty(investigationOrderHelperList)) {
					Set<String> uniqueInvestigationOrderHelperList = new HashSet<String>(investigationOrderHelperList);
					String uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperList.toString();
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("[",
							"");
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("]",
							"");

					if(uniqueInvestigationOrderHelperListString.indexOf(",")!=-1) {
						uniqueInvestigationOrderHelperListString = formatString(uniqueInvestigationOrderHelperListString);
					}
					if (uniqueInvestigationOrderHelperList.size() == 1) {
						investigationOrderNotesFeed += "Investigation done during this episode was "
								+ uniqueInvestigationOrderHelperListString + ". ";

					} else {
						investigationOrderNotesFeed += "Investigations done during this episode were "
								+ uniqueInvestigationOrderHelperListString + ". ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return investigationOrderNotesFeed;
	}

	// Old Episodes Inactive Notes of Sepsis Fetching Function
	public String getOldInactiveNotesFeedIntolerance(List<SaFeedIntolerance> oldfeedintolerancelist, int epCount)
			throws InicuDatabaseExeption {
		String oldInactiveNotes = "";
		try {
			if (epCount == 1) {
				return oldInactiveNotes;
			}

			for (int i = 0; i < oldfeedintolerancelist.size(); i++) {
				SaFeedIntolerance feedintoleranceObj = (SaFeedIntolerance) oldfeedintolerancelist.get(i);
				if (feedintoleranceObj.getComment() != null) {
					oldInactiveNotes = feedintoleranceObj.getComment();
				}
			}

			if (epCount > 2) {
				oldInactiveNotes = oldInactiveNotes.substring(oldInactiveNotes.indexOf('\n') + 1);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return oldInactiveNotes;
	}

	/**
	 * This method generates Inactive Notes for Sepsis
	 *
	 * @param uhid
	 * @param sepsis
	 * @throws InicuDatabaseExeption
	 */
	public String generateInactiveNotesSepsis(InicuDao inicuDaoObj, String uhid, String continuedMedication
            , Timestamp assessmentTime, String earlyLateOnset)
			throws InicuDatabaseExeption {
		if (inicuDaoObj != null) {
			inicuDao = inicuDaoObj;
		}
		// Creating Inactive Notes from here
		String progressNotesSepsis = "";
		String htmlNextLine = System.getProperty("line.separator");
		try {
			// Fetching Latest Episode Number for Sepsis
			int epCountSepsis = 1;
			String queryEpCountSepsis = "SELECT MAX(episode_number) FROM sa_infection_sepsis WHERE uhid='" + uhid + "'";
			List<Integer> epCountListSepsis = inicuDao.getListFromNativeQuery(queryEpCountSepsis);
			if (!BasicUtils.isEmpty(epCountListSepsis)) {
				epCountSepsis = (int) epCountListSepsis.get(0);
				if (epCountSepsis != 1) {
					progressNotesSepsis = "Baby developed " + epCountSepsis + " episodes of Sepsis. "
							+  htmlNextLine;
				}
			}

			// Old Episodes Inactive Notes List of Sepsis Generating Query
			List<SaSepsis> oldSepsisList = new ArrayList<SaSepsis>();
			oldSepsisList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getOldInactiveSepsisList(uhid));
			if (!BasicUtils.isEmpty(oldSepsisList)) {
				// Old Episodes Inactive Notes of Sepsis Fetching Function
                if (epCountSepsis == 2) {
                    progressNotesSepsis += "Episode 1 : ";
                }
				String oldInactiveNotes = getOldInactiveNotesSepsis(oldSepsisList, epCountSepsis);
				progressNotesSepsis += oldInactiveNotes + htmlNextLine;
			}

			// Current Episode
			// progressNotesSepsis += "Episode " + epCountSepsis + " : ";
			if (epCountSepsis > 1) {
				progressNotesSepsis += "Episode " + epCountSepsis + " : ";
			}
			List<SaSepsis> sepsisList = new ArrayList<SaSepsis>();
			sepsisList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getSepsisList(uhid, epCountSepsis));
			if (!BasicUtils.isEmpty(sepsisList)) {
				// Age of Onset Data Fetching Function for Sepsis
				String ageOnsetNotes = getAgeOnsetSepsis(sepsisList, earlyLateOnset);
				progressNotesSepsis += ageOnsetNotes;

				boolean isAsymptomaticFirst = false;
				for (int i = 0; i < sepsisList.size(); i++) {
					SaSepsis sepsisObj = (SaSepsis) sepsisList.get(i);
					if (sepsisObj != null && sepsisObj.getSymptomaticStatus() != null) {
						if (sepsisObj.getSymptomaticStatus() == false) {
							isAsymptomaticFirst = true;
						}
						break;
					}
				}

			//	if (isAsymptomaticFirst) {
					// Asymptomatic & Risk Factors Data Fetching Function for Sepsis
					String asymptomaticNotes = getAsymptomaticSepsis(sepsisList, uhid, epCountSepsis);
					progressNotesSepsis += asymptomaticNotes;

					// Symptomatic & Symptoms Data Fetching Function for Sepsis
					String symptomaticNotes = getSymptomaticSepsis(sepsisList, uhid);
					progressNotesSepsis += symptomaticNotes;
//				} else {
//					// Symptomatic & Symptoms Data Fetching Function for Sepsis
//					String symptomaticNotes = getSymptomaticSepsis(sepsisList, uhid);
//					progressNotesSepsis += symptomaticNotes;
//
//					// Asymptomatic & Risk Factors Data Fetching Function for Sepsis
//					String asymptomaticNotes = getAsymptomaticSepsis(sepsisList, uhid, epCountSepsis);
//					progressNotesSepsis += asymptomaticNotes;
//				}

                progressNotesSepsis += " ";

                // Body Temperature Detail of baby During Sepsis Fetching Function
//				String bodyTemperatureNotesSepsis = getBodyTemperatureDetailSepsis(sepsisList, uhid);
//				progressNotesSepsis += bodyTemperatureNotesSepsis;

				// Central To Pheripheral Temperature Detail of baby During Sepsis Fetching
				// Function
//				String centToPhertemperatureNotesSepsis = getCentToPerTemperatureDetailSepsis(sepsisList, uhid);
//				progressNotesSepsis += centToPhertemperatureNotesSepsis;

				// Blood Culture Status of baby During Sepsis Fetching Function
//				String bloodCultureNotesSepsis = getBloodCultureSepsis(, uhid);
//				progressNotesSepsis += bloodCultureNotesSepsis;

				// Urine Culture Status of baby During Sepsis Fetching Function
//				String urineCultureNotesSepsis = getUrineCultureSepsis(sepsisList, uhid);
//				progressNotesSepsis += urineCultureNotesSepsis;

				String cultureNotes = getCultureStatus(sepsisList,uhid);
				progressNotesSepsis += cultureNotes;

				// Csf Culture Status of baby During Sepsis Fetching Function
//				String csfCultureNotesSepsis = getCsfCultureSepsis(sepsisList, uhid);
//				progressNotesSepsis += csfCultureNotesSepsis;

				// Umblical Discharge of baby During Sepsis Fetching Function
				String umblicalDischargeNotesSepsis = getUmblicalDischargeSepsis(sepsisList, uhid);
				progressNotesSepsis += umblicalDischargeNotesSepsis;

				// Shock Developed During Sepsis Data Fetching Function
//				String shockNotesSepsis = getShockDetailSepsis(sepsisList, uhid);
//				progressNotesSepsis += shockNotesSepsis;

				// Abdominal Distension Developed During Sepsis Data Fetching Function
//				String abdominalDistensionNotesSepsis = getAbdominalDistensionDetailSepsis(sepsisList, uhid);
//				progressNotesSepsis += abdominalDistensionNotesSepsis;

				// Investigation Order Detail Fetching Function
				String investigationOrderNotes = getInvestigationOrderSepsis(sepsisList);
				progressNotesSepsis += investigationOrderNotes;

				// Medication of Sepsis Data Fetching Function
				String medicationNotes = getMedicationOfSepsis(sepsisList,false);
				progressNotesSepsis += medicationNotes + continuedMedication;

				// Causes of Sepsis Fetching Function
				String causesNotes = getCausesOfSepsis(sepsisList);
				progressNotesSepsis += causesNotes;

//                Date date = new Date(assessmentTime.getTime());
//                DateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
//				progressNotesSepsis += "Treatment was stopped on " + sdf.format(date) + " (DOL# " + getDayOfLife(uhid, assessmentTime)
//                        + ") because Blood culture was sterile. ";


				// Ending Inactive Notes Here
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return progressNotesSepsis;
	}


	public String getRiskFactorNec(List<SaNec> necList, String uhid) throws InicuDatabaseExeption {
		String riskFactorNameNec, riskFactorUniqueIdNec;
		riskFactorNameNec = riskFactorUniqueIdNec = "";
		try {
			List<String> riskFactorIdList = new ArrayList<>();
			for (int i = 0; i < necList.size(); i++) {
				SaNec NecObj = (SaNec) necList.get(i);
				if (NecObj != null && NecObj.getRiskfactor() != null) {
					riskFactorIdList.add(NecObj.getRiskfactor());
				}
			}

			riskFactorUniqueIdNec += listProcessingHelper(riskFactorIdList);
			if (!BasicUtils.isEmpty(riskFactorUniqueIdNec)) {
				String[] riskFactorNameString = riskFactorUniqueIdNec.split(",");
				int firstFactorDone = 0;
				for (String s : riskFactorNameString) {
					s = s.trim();
					if (s.equalsIgnoreCase("'NEC0001'")) {
						s = "Prematurity";
						firstFactorDone++;
					}

					if (s.equalsIgnoreCase("'NEC0002'")) {
						s = "ARDF";
						firstFactorDone++;
					}

					if (s.equalsIgnoreCase("'NEC0003'")) {
						s = "Sepsis";
						firstFactorDone++;
					}

					if (s.equalsIgnoreCase("'NEC0004'")) {
						s = "Formula Feed";
						firstFactorDone++;

					}

					if (firstFactorDone == 1) {
						riskFactorNameNec += s;
					} else {
						riskFactorNameNec += ", " + s;
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return riskFactorNameNec;
	}

	public String getAgeOnsetNec(List<SaNec> necList) throws InicuDatabaseExeption {
		String ageOnSetNotesNec = "";
		boolean done = false;
		try {
			for (int i = 0; i < necList.size(); i++) {
				SaNec necObj = (SaNec) necList.get(i);
				if (necObj != null && done != true && necObj.getAgeatonset() != null) {
					if (necObj.getAgeatonset().equalsIgnoreCase("0")) {
						ageOnSetNotesNec += "Baby developed Nec at birth. ";
					} else {
						if (necObj.getAgeinhoursdays() != null && necObj.getAgeinhoursdays() == true) {
							ageOnSetNotesNec += "Baby developed Nec at the age of " + necObj.getAgeatonset();
							if (necObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesNec += " hour. ";
							} else {
								ageOnSetNotesNec += " hours. ";
							}
						} else {
							ageOnSetNotesNec += "Baby developed Nec at the age of " + necObj.getAgeatonset();
							if (necObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesNec += " day. ";
							} else {
								ageOnSetNotesNec += " days. ";
							}
						}
					}
					done = true;
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ageOnSetNotesNec;
	}

	// Function for Sepsis
	// Age of OnSet Data Fetching Function
	public String getAgeOnsetSepsis(List<SaSepsis> sepsisList, String earlyLateOnset) throws InicuDatabaseExeption {
		String ageOnSetNotesSepsis = "";
		boolean done = false;
		try {
			for (int i = 0; i < sepsisList.size(); i++) {
				SaSepsis sepsisObj = (SaSepsis) sepsisList.get(i);
				if (sepsisObj != null && done != true && sepsisObj.getAgeatonset() != null) {
					if (sepsisObj.getAgeatonset().equalsIgnoreCase("0") || sepsisObj.getAgeatonset().equalsIgnoreCase("1")) {
						ageOnSetNotesSepsis += "Baby developed  "+earlyLateOnset+" sepsis at birth ";
					} else {
						if (sepsisObj.getAgeinhoursdays() != null && sepsisObj.getAgeinhoursdays() == true) {
							if(sepsisObj.getEpisodeNumber()==1)
								ageOnSetNotesSepsis += "Baby developed  "+earlyLateOnset+" sepsis at the age of " + sepsisObj.getAgeatonset();
							else
								ageOnSetNotesSepsis += "Baby developed  "+earlyLateOnset+" sepsis again at the age of " + sepsisObj.getAgeatonset();
							if (sepsisObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesSepsis += " hour ";
							} else {
								ageOnSetNotesSepsis += " hours ";
							}
						} else {
							//ageOnSetNotesSepsis += "Baby developed  "+earlyLateOnset+" sepsis at the age of " + sepsisObj.getAgeatonset();
							if(sepsisObj.getEpisodeNumber()==1)
								ageOnSetNotesSepsis += "Baby developed  "+earlyLateOnset+" sepsis at the age of " + sepsisObj.getAgeatonset();
							else
								ageOnSetNotesSepsis += "Baby developed  "+earlyLateOnset+" sepsis again at the age of " + sepsisObj.getAgeatonset();

							if (sepsisObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesSepsis += " day ";
							} else {
								ageOnSetNotesSepsis += " days ";
							}
						}
					}
					done = true;
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ageOnSetNotesSepsis;
	}

	// Asymptomatic Risk Factors Fetching Function
	public String getRiskFactorSepsis(List<SaSepsis> sepsisList) throws InicuDatabaseExeption {
		String riskFactorNameSepsis, riskFactorUniqueIdSepsis;
		riskFactorNameSepsis = riskFactorUniqueIdSepsis = "";
		try {
			List<String> riskFactorIdList = new ArrayList<>();
            LinkedList<String> riskFactorOtherList = new LinkedList<>();
			for (int i = 0; i < sepsisList.size(); i++) {
				SaSepsis sepsisObj = (SaSepsis) sepsisList.get(i);
				if (sepsisObj != null && sepsisObj.getRiskfactor() != null) {
					riskFactorIdList.add(sepsisObj.getRiskfactor());
					if (sepsisObj.getRiskfactor().contains("other")) {
                        riskFactorOtherList.add(sepsisObj.getRiskfactorOther());
                    }
				}
			}

			riskFactorUniqueIdSepsis += listProcessingHelper(riskFactorIdList);
			if (!BasicUtils.isEmpty(riskFactorUniqueIdSepsis)) {
				String[] riskFactorNameString = riskFactorUniqueIdSepsis.split(",");
				int firstFactorDone = 0;
				for (String s : riskFactorNameString) {
					s = s.trim();
					if (s.equalsIgnoreCase("'RS001'")) {
						s = "PPROM";
						firstFactorDone++;
					}

					if (s.equalsIgnoreCase("'RS002'")) {
						s = "PROM";
						firstFactorDone++;
					}

					if (s.equalsIgnoreCase("'RS003'")) {
						s = "Manteral Fever";
						firstFactorDone++;
					}

					if (s.equalsIgnoreCase("'RS004'")) {
						s = "Manteral Infection";
						firstFactorDone++;

					}
					if (s.equalsIgnoreCase("'RS005'")) {
						s = "Chorioamnionitis";
						firstFactorDone++;
					}

					if (s.equalsIgnoreCase("'RS006'")) {
						s = "Low BW";
						firstFactorDone++;
					}

					if (s.equalsIgnoreCase("'RS007'")) {
						s = "Low Gestational age";
						firstFactorDone++;
					}

					if (s.equalsIgnoreCase("'RS008'")) {
						s = "Previous Antimicrobial Exposure";
						firstFactorDone++;
					}

					if (s.equalsIgnoreCase("'RS009'")) {
						s = "Poor hand hygiene";
						firstFactorDone++;
					}

					if (s.equalsIgnoreCase("'RS0010'")) {
						s = "Parenteral feeding";
						firstFactorDone++;
					}

					if (s.equalsIgnoreCase("'RS0011'")) {
						s = "CVC";
						firstFactorDone++;
					}

					if (s.equalsIgnoreCase("'RS0012'")) {
						s = "Mechanical ventilate";
						firstFactorDone++;
					}
					if (s.equalsIgnoreCase("'RS0013'")) {
						s = "Low-5 minute APGAR scores";
						firstFactorDone++;
					}

					if (s.equalsIgnoreCase("'RS0014'")) {
						s = "CVC";
						firstFactorDone++;
					}

                    if (s.equalsIgnoreCase("'other'")) {
                        s = riskFactorOtherList.getFirst();
                        riskFactorOtherList.removeFirst();
                        firstFactorDone++;
                    }

					if (firstFactorDone == 1) {
						riskFactorNameSepsis += s;
					} else {
						riskFactorNameSepsis += ", " + s;
					}
				}
				if(riskFactorNameSepsis.indexOf(",")!=-1) {
					riskFactorNameSepsis = formatString(riskFactorNameSepsis);
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return riskFactorNameSepsis;
	}

	// Asymptomatic Sepsis Data Fetching Function
	public String getAsymptomaticSepsis(List<SaSepsis> sepsisList, String uhid, int epCountSepsis)
			throws InicuDatabaseExeption {
		String asymptomaticNotesSepsis = "";
		try {
			// Symptoms Data is Fetched
			if (!BasicUtils.isEmpty(getRiskFactorSepsis(sepsisList))) {
				asymptomaticNotesSepsis += "with risk factor(s) of " + getRiskFactorSepsis(sepsisList);
			}

//			for (int i = 0; i < sepsisList.size(); i++) {
//				SaSepsis sepsisObj = (SaSepsis) sepsisList.get(i);
//				if (sepsisObj != null && sepsisObj.getaSymptomaticStatus() != null
//						&& sepsisObj.getaSymptomaticStatus() == true) {
//					if (asymptomaticNotesSepsis == "") {
//						asymptomaticNotesSepsis += "Sepsis was Asymptomatic on DOL#"
//								+ getDayOfLife(uhid, sepsisObj.getAssessmentTime());
//					} else {
//						asymptomaticNotesSepsis += "Again Asymptomatic on DOL# "
//								+ getDayOfLife(uhid, sepsisObj.getAssessmentTime());
//					}
//
//					// Symptoms Data is Fetched
//					if (!BasicUtils.isEmpty(getRiskFactorSepsis(sepsisList))) {
//						asymptomaticNotesSepsis += " based on risk factors " + getRiskFactorSepsis(sepsisList)+". ";
//					} else {
//						asymptomaticNotesSepsis += ". ";
//					}
//				}
//			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return asymptomaticNotesSepsis;
	}



	// Symptomatic and Symptoms Fetching Function
	public String getSymptomaticSepsis(List<SaSepsis> sepsisList, String uhid) throws InicuDatabaseExeption {
		String symptomaticNotesSepsis = "";
        String symptomaticNotesSepsisFinal = "";

		try {
			for (int i = 0; i < sepsisList.size(); i++) {
				SaSepsis sepsisObj = (SaSepsis) sepsisList.get(i);
				if (sepsisObj != null && sepsisObj.getSymptomaticStatus() != null
						&& sepsisObj.getSymptomaticStatus() == true) {

 //					if (symptomaticNotesSepsis == "") {
//						symptomaticNotesSepsis += "On DOL#"
//								+ getDayOfLife(uhid, sepsisObj.getAssessmentTime());
//					} else {
//						symptomaticNotesSepsis += " and again symptomatic on DOL# "
//								+ getDayOfLife(uhid, sepsisObj.getAssessmentTime());
//					}
                    if (!BasicUtils.isEmpty(sepsisObj.getSymptomaticValue())) {

                        StringTokenizer tokenizer = new StringTokenizer(sepsisObj.getSymptomaticValue(), ",");

                        System.out.println("sepsisObj.getSymptomaticValue()------------"+sepsisObj.getSymptomaticValue());

                        while (tokenizer.hasMoreElements()) {

                            String token = tokenizer.nextToken();

                            if (symptomaticNotesSepsis.indexOf(token) == -1) {

                                if (symptomaticNotesSepsis.length() > 1) symptomaticNotesSepsis += ",";

                                symptomaticNotesSepsis += token;
                            }

                        }
                    }

					}
				}


			if (!BasicUtils.isEmpty(symptomaticNotesSepsis)) {
                // Symptoms Data is Fetched
                if(symptomaticNotesSepsis.indexOf(",")!=-1) {
                    int index = symptomaticNotesSepsis.lastIndexOf(",");
                    symptomaticNotesSepsis = new StringBuilder(symptomaticNotesSepsis).replace(index, index+1," and").toString();
                }
                symptomaticNotesSepsisFinal = " and was symptomatic for "+symptomaticNotesSepsis;
            }
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return symptomaticNotesSepsisFinal;
	}

	// Body Temperature Data Fetching Function
	public String getBodyTemperatureDetailSepsis(List<SaSepsis> sepsisList, String uhid) throws InicuDatabaseExeption {
		String bodyTemperatureNotesSepsis = "";
		Float initialBodyTemperature, lowestBodyTemperature, highestBodyTemperature;
		initialBodyTemperature = lowestBodyTemperature = highestBodyTemperature = null;
		SaSepsis lowestTempSepsisObj, highestTempSepsisObj;
		lowestTempSepsisObj = highestTempSepsisObj = null;
		try {
			for (int i = 0; i < sepsisList.size(); i++) {
				SaSepsis sepsisObj = (SaSepsis) sepsisList.get(i);
				if (sepsisObj != null && sepsisObj.getTemperatureCelsius() != null) {
					if (bodyTemperatureNotesSepsis == "") {
						bodyTemperatureNotesSepsis += "At the time of first assessment,baby had ";
						initialBodyTemperature = (float) (Math
								.round(Float.valueOf(sepsisObj.getTemperatureCelsius()) * 100) / 100);
						lowestBodyTemperature = highestBodyTemperature = initialBodyTemperature;
						if (initialBodyTemperature > 37.5) {
							bodyTemperatureNotesSepsis += "fever with body temperature of " + initialBodyTemperature
									+ " degree Celsius. ";
						} else {
							if (initialBodyTemperature < 36.5) {
								bodyTemperatureNotesSepsis += "Hypothermia with body temperature of "
										+ initialBodyTemperature + " degree Celsius. ";
							} else {
								bodyTemperatureNotesSepsis += "normal body temperature. ";
							}
						}
					}

					if ((Float.compare(lowestBodyTemperature, Float.valueOf(sepsisObj.getTemperatureCelsius())) < 0)) {
						lowestBodyTemperature = (float) (Math
								.round(Float.valueOf(sepsisObj.getTemperatureCelsius()) * 100) / 100);
						lowestTempSepsisObj = sepsisObj;
					}

					if ((Float.compare(lowestBodyTemperature, Float.valueOf(sepsisObj.getTemperatureCelsius())) < 0)) {
						highestBodyTemperature = (float) (Math
								.round(Float.valueOf(sepsisObj.getTemperatureCelsius()) * 100) / 100);
						highestTempSepsisObj = sepsisObj;
					}
				}
			}

			if (!BasicUtils.isEmpty(lowestTempSepsisObj)
					&& Float.compare(lowestBodyTemperature, initialBodyTemperature) < 0) {
				bodyTemperatureNotesSepsis += "During this episode,baby's lowest body temperature was  "
						+ lowestBodyTemperature.toString() + " degree celcius on DOL# "
						+ getDayOfLife(uhid, lowestTempSepsisObj.getAssessmentTime()) + ". ";
			}

			if (!BasicUtils.isEmpty(highestTempSepsisObj)
					&& Float.compare(lowestBodyTemperature, initialBodyTemperature) < 0) {
				bodyTemperatureNotesSepsis += "During this episode,baby's highest body temperature was  "
						+ highestBodyTemperature.toString() + " degree celcius on DOL# "
						+ getDayOfLife(uhid, highestTempSepsisObj.getAssessmentTime()) + ". ";
			}
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return bodyTemperatureNotesSepsis;
	}

	// Central to Peripheral Temperature Data Fetching Function
	public String getCentToPerTemperatureDetailSepsis(List<SaSepsis> sepsisList, String uhid)
			throws InicuDatabaseExeption {
		String centToPerTemperatureNotesSepsis = "";
		Float initialCentToPerTemp, lowestCentToPerTemp, highestCentToPerTemp;
		initialCentToPerTemp = lowestCentToPerTemp = highestCentToPerTemp = null;
		SaSepsis lowestTempSepsisObj, highestTempSepsisObj;
		lowestTempSepsisObj = highestTempSepsisObj = null;
		try {
			for (int i = 0; i < sepsisList.size(); i++) {
				SaSepsis sepsisObj = (SaSepsis) sepsisList.get(i);
				if (sepsisObj != null && sepsisObj.getCentralPeripheralValue() != null) {
					if (centToPerTemperatureNotesSepsis == "") {
						centToPerTemperatureNotesSepsis += "At the time of Assessment,baby had ";
						initialCentToPerTemp = (float) (Math
								.round(Float.valueOf(sepsisObj.getCentralPeripheralValue()) * 100) / 100);
						lowestCentToPerTemp = highestCentToPerTemp = initialCentToPerTemp;
						centToPerTemperatureNotesSepsis += "central to peripheral temperature of "
								+ initialCentToPerTemp + " degree Celsius. ";
					}

					if ((Float.compare(lowestCentToPerTemp,
							Float.valueOf(sepsisObj.getCentralPeripheralValue())) < 0)) {
						lowestCentToPerTemp = (float) (Math
								.round(Float.valueOf(sepsisObj.getCentralPeripheralValue()) * 100) / 100);
						lowestTempSepsisObj = sepsisObj;
					}

					if ((Float.compare(highestCentToPerTemp,
							Float.valueOf(sepsisObj.getCentralPeripheralValue())) > 0)) {
						highestCentToPerTemp = (float) (Math
								.round(Float.valueOf(sepsisObj.getCentralPeripheralValue()) * 100) / 100);
						highestTempSepsisObj = sepsisObj;
					}
				}
			}

			if (!BasicUtils.isEmpty(lowestTempSepsisObj)
					&& Float.compare(lowestCentToPerTemp, initialCentToPerTemp) < 0) {
				centToPerTemperatureNotesSepsis += "During this episode,baby's lowest central to "
						+ "peripheral temperature was  " + lowestCentToPerTemp.toString() + " degree celcius on DOL# "
						+ getDayOfLife(uhid, lowestTempSepsisObj.getAssessmentTime()) + ". ";
			}

			if (!BasicUtils.isEmpty(lowestTempSepsisObj)
					&& Float.compare(highestCentToPerTemp, initialCentToPerTemp) > 0) {
				centToPerTemperatureNotesSepsis += "During this episode,baby's highest central to "
						+ "peripheral temperature was  " + highestCentToPerTemp.toString() + " degree celcius on DOL# "
						+ getDayOfLife(uhid, highestTempSepsisObj.getAssessmentTime()) + ". ";
			}
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return centToPerTemperatureNotesSepsis;
	}

	// Blood Culture Status Data Fetching Function
	public String getBloodCultureSepsis(SaSepsis sepsisObj, String uhid) throws InicuDatabaseExeption {
		String bloodCultureNotesSepsis = "";
		String status = "";
		try {
			//for (int i = 0; i < sepsisList.size(); i++) {
				//SaSepsis sepsisObj = (SaSepsis) sepsisList.get(i);
				if (sepsisObj != null && sepsisObj.getBloodCultureStatus() != null) {
					bloodCultureNotesSepsis += "Blood culture report status was "
							+ sepsisObj.getBloodCultureStatus() + " on DOL#"
							+ getDayOfLife(uhid, sepsisObj.getAssessmentTime()) + ". ";
					status = sepsisObj.getBloodCultureStatus() + "-" + getDayOfLife(uhid, sepsisObj.getAssessmentTime());
				}
			//}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return bloodCultureNotesSepsis;
	}

	// Urine Culture Status Data Fetching Function
	public String getUrineCultureSepsis(SaSepsis sepsisObj, String uhid) throws InicuDatabaseExeption {
		String urineCultureNotesSepsis = "";
		String status = "";
		try {
			//for (int i = 0; i < sepsisList.size(); i++) {
				//SaSepsis sepsisObj = (SaSepsis) sepsisList.get(i);
				if (sepsisObj != null && sepsisObj.getUrineCultureStatus() != null) {
					urineCultureNotesSepsis += "Baby's urine culture report status was "
							+ sepsisObj.getUrineCultureStatus() + " on DOL#"
							+ getDayOfLife(uhid, sepsisObj.getAssessmentTime()) + ". ";

					status = sepsisObj.getUrineCultureStatus() + "-" + getDayOfLife(uhid, sepsisObj.getAssessmentTime());
				}
			//}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return urineCultureNotesSepsis;
	}

	// Csf Culture Status Data Fetching Function
	public String getCsfCultureSepsis(SaSepsis sepsisObj, String uhid) throws InicuDatabaseExeption {
		String csfCultureNotesSepsis = "";
		try {
//			for (int i = 0; i < sepsisList.size(); i++) {
//				SaSepsis sepsisObj = (SaSepsis) sepsisList.get(i);
				if (sepsisObj != null && sepsisObj.getCsfCultureStatus() != null) {
					csfCultureNotesSepsis += "Baby's csf culture report status was " + sepsisObj.getCsfCultureStatus()
							+ " on DOL#" + getDayOfLife(uhid, sepsisObj.getAssessmentTime()) + ". ";
				}
			//}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return csfCultureNotesSepsis;
	}

    public String getCultureStatus(List<SaSepsis> sepsisList, String uhid) {


		String cultureNotes = "";
		String cultureNotesFinal = "";
		String cultureNotes1 = "";
		String bnotes = "";
		String unotes = "";
		String cnotes = "";
		try {

			if(!BasicUtils.isEmpty(sepsisList) && sepsisList.size() == 2) {
				cultureNotes += getCultureStatus1(sepsisList, uhid);
			}
			else {
			    Map<Long, String> cultureCheckMap = new HashMap<>();
                long dayOfLife;
                boolean checkCultureForSameDOL = false;
                String[] culturalStringArr = new String[5];

                String bloodCultureNotesSepsis = "";
                String sepsisQuery = "select obj from RefTestslist as obj where assesmentCategory!=null and assesmentCategory = 'Infection' and testname = 'Blood culture'";
                System.out.println("sepsisQuery -- > " + sepsisQuery);
                List<RefTestslist> listRefTests = inicuDao.getListFromMappedObjQuery(sepsisQuery);
                if(!BasicUtils.isEmpty(listRefTests)) {
                    String fetchType = "SELECT vendortestid FROM TestslistMapping as obj WHERE obj.inicutestid='"
                            + listRefTests.get(0).getTestid().trim() + "'";
                    System.out.println("fetchType -- > " + fetchType);
                    List result = inicuDao.getListFromMappedObjQuery(fetchType);

                    if(!BasicUtils.isEmpty(result)) {
                        String queryMaxBloodculture = "select lab_report_date,testid, rn from " +
                                "( SELECT lab_report_date,testid,ROW_NUMBER() OVER (PARTITION BY lab_report_date ORDER BY MAX(creationtime) DESC ) AS rn " +
                                " from test_result where testid='" + result.get(0).toString().trim() + "' and prn ='" + uhid + "' and organismnamedisplayname!='' " +
                                " GROUP BY  lab_report_date,testid ) " +
                                " AS t WHERE rn <= 1 ORDER BY  rn, lab_report_date desc";

                        System.out.println("queryMaxBloodculture -- > " + queryMaxBloodculture);
                        List<Object[]> resultList = inicuDao.getListFromNativeQuery(queryMaxBloodculture);
                        if (!BasicUtils.isEmpty(resultList)) {
                            Timestamp labOrderDate = null;
                            Iterator<Object[]> itr = resultList.iterator();
                            while (itr.hasNext()) {
                                Object[] obj = itr.next();
                                if (!BasicUtils.isEmpty(obj[0])) {
                                    labOrderDate = (Timestamp) obj[0];

                                    if (BasicUtils.isEmpty(bloodCultureNotesSepsis)) {
                                        bloodCultureNotesSepsis += "Blood culture report status was "
                                                + "Positive" + " on DOL#"
                                                + getDayOfLife(uhid, labOrderDate) + ". ";
                                    } else {
                                        bloodCultureNotesSepsis.replace(".", ",");
                                        bloodCultureNotesSepsis += " blood culture report status was "
                                                + "Positive" + " on DOL#"
                                                + getDayOfLife(uhid, labOrderDate) + ". ";
                                    }
                                }
                            }
                        }

                        String queryMaxBloodculture1 = "select lab_report_date,testid, rn from " +
                                "( SELECT lab_report_date,testid,ROW_NUMBER() OVER (PARTITION BY lab_report_date ORDER BY MAX(creationtime) DESC ) AS rn " +
                                " from test_result where testid='"+ result.get(0).toString().trim() +"'  and prn ='" + uhid + "' and value like '%No growth%' " +
                                " GROUP BY  lab_report_date,testid ) " +
                                " AS t WHERE rn <= 1 ORDER BY  rn, lab_report_date desc";

                        System.out.println("queryMaxBloodculture1 -- > " + queryMaxBloodculture1);
                        List<Object[]> resultList1 = inicuDao.getListFromNativeQuery(queryMaxBloodculture1);
                        if(!BasicUtils.isEmpty(resultList1)) {
                            Timestamp labOrderDate = null;
                            Iterator<Object[]> itr = resultList1.iterator();
                            while (itr.hasNext()) {
                                Object[] obj = itr.next();
                                if (!BasicUtils.isEmpty(obj[0])) {
                                    labOrderDate = (Timestamp) obj[0];

                                    if (BasicUtils.isEmpty(bloodCultureNotesSepsis)) {
                                        bloodCultureNotesSepsis += "Blood culture report status was "
                                                + "Negative" + " on DOL#"
                                                + getDayOfLife(uhid, labOrderDate) + ". ";
                                    } else {
                                        bloodCultureNotesSepsis.replace(".", ",");
                                        bloodCultureNotesSepsis += " blood culture report status was "
                                                + "Negative" + " on DOL#"
                                                + getDayOfLife(uhid, labOrderDate) + ". ";
                                    }
                                }
                            }
                        }
                    }
                }

                for (int i = 0; i < sepsisList.size(); i++) {
					SaSepsis sepsisObj = sepsisList.get(i);
					//bnotes = getBloodCultureSepsis(sepsisObj, uhid);
					unotes = getUrineCultureSepsis(sepsisObj, uhid);
					cnotes = getCsfCultureSepsis(sepsisObj, uhid);

                    dayOfLife = getDayOfLife(uhid, sepsisObj.getAssessmentTime());
					if (cultureCheckMap != null && cultureCheckMap.size() > 0) {
					    String existingCultural = cultureCheckMap.get(dayOfLife);
					    if (!BasicUtils.isEmpty(existingCultural)) {
					        culturalStringArr = existingCultural.split("##");
                            checkCultureForSameDOL = true;
                        }
                    }

					if(!BasicUtils.isEmpty(bnotes))
					{
					    if (checkCultureForSameDOL && sepsisObj.getBloodCultureStatus().equalsIgnoreCase(culturalStringArr[0])) { }
					    else {
                            if(BasicUtils.isEmpty(cultureNotes)) {
                                bnotes = bnotes.replace(".", " ");
                                cultureNotes += bnotes;
                            }
                            else
                            {
                                bnotes = bnotes.replace(".", " ");
                                bnotes = bnotes.replace("Baby's", ",");
                                cultureNotes += bnotes;
                            }
                        }
					}
					if(!BasicUtils.isEmpty(unotes))
					{
                        if (checkCultureForSameDOL && sepsisObj.getUrineCultureStatus().equalsIgnoreCase(culturalStringArr[1])) { }
                        else {
                            if(BasicUtils.isEmpty(cultureNotes)) {
                                unotes = unotes.replace(".", " ");
                                cultureNotes += unotes;
                            }
                            else {
                                unotes = unotes.replace(".", " ");
                                unotes = unotes.replace("Baby's", ",");
                                cultureNotes += unotes;
                            }
                        }
					}
					if(!BasicUtils.isEmpty(cnotes))
					{
                        if (checkCultureForSameDOL && sepsisObj.getCsfCultureStatus().equalsIgnoreCase(culturalStringArr[2])) { }
                        else {
                            if(BasicUtils.isEmpty(cultureNotes)) {
                                cnotes = cnotes.replace(".", " ");
                                cultureNotes += cnotes;
                            }
                            else {
                                cnotes = cnotes.replace(".", " ");
                                cnotes = cnotes.replace("Baby's", ",");
                                cultureNotes += cnotes;

                            }
                        }
					}

                    checkCultureForSameDOL = false;
                    String culturalString = sepsisObj.getBloodCultureStatus() + "##" + sepsisObj.getUrineCultureStatus()
                            + "##" + sepsisObj.getCsfCultureStatus();
					cultureCheckMap.put(dayOfLife, culturalString);
				}
                System.out.println("bloodCultureNotesSepsis -- > " + bloodCultureNotesSepsis);
                if (!BasicUtils.isEmpty(bloodCultureNotesSepsis)) {
                    cultureNotes += bloodCultureNotesSepsis;
                }

				if(cultureNotes!="" && cultureNotes!= null && cultureNotes.indexOf(",")!=-1) {
					cultureNotes = formatString(cultureNotes);
				}
				if(!cultureNotes.endsWith(".") && !cultureNotes.endsWith(". ")) cultureNotes += ". ";
			}
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		return cultureNotes;
	}
	public String getCultureStatus1(List<SaSepsis> sepsisList, String uhid) {
			String cultureNotes = "";
			String cultureNotesFinal = "";
			String cultureNotes1 = "";

			boolean bloodculture = false;
			boolean urineculture = false;
			boolean csfculture = false;
			try {
				int count = 0;
				int countNeg = 0;
				String bnotes = "";
				String urineStatus ="";
				String urineDol = "";
				String unotes = "";
				if(sepsisList.size()==2) {
					if(sepsisList.get(0).getUrineCultureStatus()!=null && sepsisList.get(0).getCsfCultureStatus()!=null) {
						if(sepsisList.get(0).getUrineCultureStatus().equalsIgnoreCase(sepsisList.get(0).getCsfCultureStatus())) {
							cultureNotes = "Baby's urine culture and CSF culture report were " + sepsisList.get(0).getCsfCultureStatus() + " on DOL#" + getDayOfLife(uhid, sepsisList.get(0).getAssessmentTime());
						}
						else
							cultureNotes = "Baby's urine culture report was " + sepsisList.get(0).getUrineCultureStatus() + " and CSF culture report was " + sepsisList.get(0).getCsfCultureStatus() + " on DOL#" + getDayOfLife(uhid, sepsisList.get(0).getAssessmentTime());

					}

					if(sepsisList.get(0).getBloodCultureStatus()!=null && sepsisList.get(0).getCsfCultureStatus()!=null) {
						if(sepsisList.get(0).getBloodCultureStatus().equalsIgnoreCase(sepsisList.get(0).getCsfCultureStatus())) {
							cultureNotes = "Blood culture and CSF culture report were " + sepsisList.get(0).getCsfCultureStatus() + " on DOL#" + getDayOfLife(uhid, sepsisList.get(0).getAssessmentTime());
						}
						else
							cultureNotes = "Blood culture report was " + sepsisList.get(0).getBloodCultureStatus() + " and CSF culture report was " + sepsisList.get(0).getCsfCultureStatus() + " on DOL#" + getDayOfLife(uhid, sepsisList.get(0).getAssessmentTime());

					}

					if(sepsisList.get(0).getBloodCultureStatus()!=null && sepsisList.get(0).getUrineCultureStatus()!=null) {
						if(sepsisList.get(0).getBloodCultureStatus().equalsIgnoreCase(sepsisList.get(0).getUrineCultureStatus())) {
							cultureNotes = "Blood culture and urine culture report were " + sepsisList.get(0).getUrineCultureStatus() + " on DOL#" + getDayOfLife(uhid, sepsisList.get(0).getAssessmentTime());
						}
						else
							cultureNotes = "Blood culture report was " + sepsisList.get(0).getBloodCultureStatus() + " and urine culture report was " + sepsisList.get(0).getUrineCultureStatus() + " on DOL#" + getDayOfLife(uhid, sepsisList.get(0).getAssessmentTime());

					}

					if(sepsisList.get(0).getBloodCultureStatus()!=null && sepsisList.get(0).getUrineCultureStatus()!=null && sepsisList.get(0).getCsfCultureStatus()!=null) {
						bloodculture = sepsisList.get(0).getBloodCultureStatus().equalsIgnoreCase(sepsisList.get(0).getUrineCultureStatus());
						urineculture = sepsisList.get(0).getUrineCultureStatus().equalsIgnoreCase(sepsisList.get(0).getCsfCultureStatus());
						csfculture = sepsisList.get(0).getCsfCultureStatus().equalsIgnoreCase(sepsisList.get(0).getBloodCultureStatus());


						if(!urineculture && !csfculture && sepsisList.get(0).getBloodCultureStatus().equalsIgnoreCase(sepsisList.get(0).getUrineCultureStatus())) {
							cultureNotes = "Blood culture, urine culture report were " + sepsisList.get(0).getUrineCultureStatus() + " and CSF culture report was " + sepsisList.get(0).getCsfCultureStatus() + " on DOL#" + getDayOfLife(uhid, sepsisList.get(0).getAssessmentTime());
						}
						else if(!urineculture && !bloodculture && sepsisList.get(0).getBloodCultureStatus().equalsIgnoreCase(sepsisList.get(0).getCsfCultureStatus())) {
							cultureNotes = "Blood culture, CSF culture report were " + sepsisList.get(0).getCsfCultureStatus() + " and urine culture report was " + sepsisList.get(0).getUrineCultureStatus() + " on DOL#" + getDayOfLife(uhid, sepsisList.get(0).getAssessmentTime());
						}
						else if(!bloodculture && !csfculture && sepsisList.get(0).getUrineCultureStatus().equalsIgnoreCase(sepsisList.get(0).getCsfCultureStatus())) {
							cultureNotes = "Baby's urine culture, CSF culture report were " + sepsisList.get(0).getUrineCultureStatus() + " and blood culture report was " + sepsisList.get(0).getBloodCultureStatus() + " on DOL#" + getDayOfLife(uhid, sepsisList.get(0).getAssessmentTime());
						}
						else
							cultureNotes = "Baby's urine culture, CSF culture and urine culture report were " + sepsisList.get(0).getUrineCultureStatus() + " on DOL#" + getDayOfLife(uhid, sepsisList.get(0).getAssessmentTime());
					}

					cultureNotes += ". ";
				}

			}catch(Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return cultureNotes;
	}

	// Umblical Discharge Data Fetching Function
	public String getUmblicalDischargeSepsis(List<SaSepsis> sepsisList, String uhid) throws InicuDatabaseExeption {
		String umblicalDischargNotesSepsis = "";
		try {
			for (int i = 0; i < sepsisList.size(); i++) {
				SaSepsis sepsisObj = (SaSepsis) sepsisList.get(i);
				if (sepsisObj != null && sepsisObj.getUmblicalDischargeStatus() != null) {
					umblicalDischargNotesSepsis += "Baby's umblical discharge report status was "
							+ sepsisObj.getUmblicalDischargeStatus() + " on DOL#"
							+ getDayOfLife(uhid, sepsisObj.getAssessmentTime()) + ". ";
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return umblicalDischargNotesSepsis;
	}

// Shock Developed During Sepsis Data Fetching Function

	public String getShockDetailSepsis(List<SaSepsis> sepsisList, String uhid) throws InicuDatabaseExeption {
		String shockNotesSepsis = "";
		try {
			for (int i = 0; i < sepsisList.size(); i++) {
				SaSepsis sepsisObj = (SaSepsis) sepsisList.get(i);
				boolean withDone = false;
//				if (sepsisObj != null && sepsisObj.getShock() != null && sepsisObj.getShock() == true) {
//					shockNotesSepsis += "Baby developed shock on DOL#"
//							+ getDayOfLife(uhid, sepsisObj.getAssessmentTime())
				if (!BasicUtils.isEmpty(sepsisObj.getShockCft())) {
//						if (!withDone) {
//							withDone = true;
//							shockNotesSepsis += " with";
//						}
					shockNotesSepsis += " CFT " + sepsisObj.getShockCft() + " seconds, ";
				}

				if (!BasicUtils.isEmpty(sepsisObj.getShockSystbp())) {
//						if (!withDone) {
//							withDone = true;
//							shockNotesSepsis += " with";
//						}
					shockNotesSepsis += " SysBP " + sepsisObj.getShockSystbp() + " mmHg, ";
				}

				if (!BasicUtils.isEmpty(sepsisObj.getShockDiastbp())) {
//						if (!withDone) {
//							withDone = true;
//							shockNotesSepsis += " with";
//						}
					shockNotesSepsis += " DiasBP " + sepsisObj.getShockDiastbp() + " mmHg, ";
				}

				if (!BasicUtils.isEmpty(sepsisObj.getHeartrate())) {
//						if (!withDone) {
//							withDone = true;
//							shockNotesSepsis += " with";
//						}
					shockNotesSepsis += " Heart Rate " + sepsisObj.getHeartrate() + "beats per min, ";
				}

				if ((sepsisObj.getPoorpulses() != null && sepsisObj.getPoorpulses() == true)) {
					shockNotesSepsis += " Poor Pulses. ";
				}

//					if ((sepsisObj.getPoorpulses() != null && sepsisObj.getPoorpulses() == true)
//							&& (sepsisObj.getColdExtremities() != null && sepsisObj.getColdExtremities() == true)) {
//						if (!withDone) {
//							withDone = true;
//							shockNotesSepsis += " with";
//						}
//						shockNotesSepsis += " Poor Pulses & Cold Extremities. ";
//					} else {
//						if (sepsisObj.getPoorpulses() != null && sepsisObj.getPoorpulses() == true) {
//							if (!withDone) {
//								withDone = true;
//								shockNotesSepsis += " with";
//							}
//							shockNotesSepsis += " Poor Pulses. ";
//						}
//
//						if (sepsisObj.getColdExtremities() != null && sepsisObj.getColdExtremities() == true) {
//							if (!withDone) {
//								withDone = true;
//								shockNotesSepsis += " with";
//							}
//							shockNotesSepsis += " Cold Extremities. ";
//						}
//					}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return shockNotesSepsis;
	}

	// Abdominal Distension Developed During Sepsis Data Fetching Function
	public String getAbdominalDistensionDetailSepsis(List<SaSepsis> sepsisList, String uhid)
			throws InicuDatabaseExeption {
		String abdominalDistensionNotesSepsis = "";
		try {
			for (int i = 0; i < sepsisList.size(); i++) {
				SaSepsis sepsisObj = (SaSepsis) sepsisList.get(i);
				if (sepsisObj != null && sepsisObj.getAbdominalStatus() != null
						&& sepsisObj.getAbdominalStatus() == true) {
					abdominalDistensionNotesSepsis += " Baby showed abdominal distension on DOL#"
							+ getDayOfLife(uhid, sepsisObj.getAssessmentTime());
					if (sepsisObj.getNecStatus() != null && sepsisObj.getNecStatus() == false) {
						abdominalDistensionNotesSepsis += " with no evidence of SaNec";
					} else {
						if (sepsisObj.getNecStatus() != null && sepsisObj.getNecStatus() == true) {
							abdominalDistensionNotesSepsis += " with evidence of SaNec";
						}

						if (sepsisObj.getBellscoreid() != null) {
							Integer bellStageId = Integer.valueOf(sepsisObj.getBellscoreid());
							String queryBellScore = "SELECT bellstagescore FROM score_bellstage "
									+ "WHERE bellstagescoreid =" + bellStageId;
							List<Integer> bellScoreListSepsis = inicuDao.getListFromNativeQuery(queryBellScore);
							if (!BasicUtils.isEmpty(bellScoreListSepsis)) {
								abdominalDistensionNotesSepsis += "(Bell staging ";
								if (bellScoreListSepsis.get(0) == 0) {
									abdominalDistensionNotesSepsis += "IA)";
								}
								if (bellScoreListSepsis.get(0) == 1) {
									abdominalDistensionNotesSepsis += "IB)";
								}
								if (bellScoreListSepsis.get(0) == 2) {
									abdominalDistensionNotesSepsis += "IIA)";
								}
								if (bellScoreListSepsis.get(0) == 3) {
									abdominalDistensionNotesSepsis += "IIB)";
								}
								if (bellScoreListSepsis.get(0) == 4) {
									abdominalDistensionNotesSepsis += "IIIA)";
								}
								if (bellScoreListSepsis.get(0) == 5) {
									abdominalDistensionNotesSepsis += "IIIB)";
								}
							}
						}
						abdominalDistensionNotesSepsis += ". ";
					}
				}
			}
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return abdominalDistensionNotesSepsis;
	}

	// Investigation Order Detail Fetch Function
	public String getInvestigationOrderSepsis(List<SaSepsis> sepsisList) throws InicuDatabaseExeption {
		String investigationOrderNotesSepsis = "";
		List<String> sepsisIdList = new ArrayList<String>();
		try {
			for (int i = 0; i < sepsisList.size(); i++) {
				SaSepsis sepsisObj = (SaSepsis) sepsisList.get(i);
				sepsisIdList.add("'" + sepsisObj.getSasepsisid().toString() + "'");

			}

			if (!BasicUtils.isEmpty(sepsisIdList)) {
				String sepsisIdListString = sepsisIdList.toString();
				sepsisIdListString = sepsisIdListString.replace("[", "");
				sepsisIdListString = sepsisIdListString.replace("]", "");

				List<String> investigationOrderHelperList = new ArrayList<>();
				investigationOrderHelperList = getInvestigationOrderHelper(sepsisIdListString, "Sepsis");
				if (!BasicUtils.isEmpty(investigationOrderHelperList)) {
					Set<String> uniqueInvestigationOrderHelperList = new HashSet<String>(investigationOrderHelperList);
					String uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperList.toString();
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("[",
							"");
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("]",
							"");
					if(uniqueInvestigationOrderHelperListString.indexOf(",")!=-1) {
						uniqueInvestigationOrderHelperListString = formatString(uniqueInvestigationOrderHelperListString);
					}
					if (uniqueInvestigationOrderHelperList.size() == 1) {
						investigationOrderNotesSepsis += uniqueInvestigationOrderHelperListString + " was done. ";
					} else {
						investigationOrderNotesSepsis += uniqueInvestigationOrderHelperListString + " were done. ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return investigationOrderNotesSepsis;
	}

	// Medication Used For Treating Sepsis Data Fetching Function
	public String getMedicationOfSepsis(List<SaSepsis> sepsisList, boolean isSkip) throws InicuDatabaseExeption {
		String medicationNotesSepsis = "";
		List<String> finalEventIdListSepsis = new ArrayList<>();
		try {
			for (int i = 0; i < sepsisList.size(); i++) {
				SaSepsis sepsisObj = (SaSepsis) sepsisList.get(i);
				if (sepsisObj != null && sepsisObj.getSasepsisid() != null) {
					String saSepsisIdSepsis = "'" + sepsisObj.getSasepsisid().toString() + "'";
					finalEventIdListSepsis.add(saSepsisIdSepsis);
				}
			}

			if (!BasicUtils.isEmpty(finalEventIdListSepsis)) {
				String finalEventIdListStringSepsis = finalEventIdListSepsis.toString();
				finalEventIdListStringSepsis = finalEventIdListStringSepsis.replace("[", "");
				finalEventIdListStringSepsis = finalEventIdListStringSepsis.replace("]", "");
				medicationNotesSepsis += getMedicationHelper(finalEventIdListStringSepsis, "Sepsis"
                        , sepsisList.get(0).getUhid(), isSkip);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return medicationNotesSepsis;
	}

	// Causes of Sepsis Fetching Function
	public String getCausesOfSepsis(List<SaSepsis> sepsisList) throws InicuDatabaseExeption {
		String causesNameSepsis, causesUniqueIdSepsis;
		causesNameSepsis = causesUniqueIdSepsis = "";
		List<String> causesIdList = new ArrayList<>();
		try {
			for (int i = 0; i < sepsisList.size(); i++) {
				SaSepsis sepsisObj = (SaSepsis) sepsisList.get(i);
				if (sepsisObj != null && sepsisObj.getCauseofsepsis() != null) {
					causesIdList.add(sepsisObj.getCauseofsepsis());
				}
			}

			causesUniqueIdSepsis += listProcessingHelper(causesIdList);
			if (!BasicUtils.isEmpty(causesUniqueIdSepsis)) {
				String queryCausesNameSepsis = "SELECT causeofinfection FROM  ref_causeofinfection WHERE causeofinfectionid IN ("
						+ (causesUniqueIdSepsis) + ")";
				List<String> causesNameListSepsis = inicuDao.getListFromNativeQuery(queryCausesNameSepsis);
				if (!BasicUtils.isEmpty(causesNameListSepsis)) {
					if (causesNameListSepsis.size() == 1) {
						causesNameSepsis += "The cause of Sepsis was ";
					} else {
						causesNameSepsis += "The causes of Sepsis were ";
					}

					String causesNameListStringSepsis = causesNameListSepsis.toString();
					causesNameListStringSepsis = causesNameListStringSepsis.replace("[", "");
					causesNameListStringSepsis = causesNameListStringSepsis.replace("]", "");
					if(causesNameListStringSepsis.indexOf(",")!=-1) {
						causesNameListStringSepsis = formatString(causesNameListStringSepsis);
					}
					causesNameSepsis += causesNameListStringSepsis + ". ";
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return causesNameSepsis;
	}


	// Old Episodes Inactive Notes of Sepsis Fetching Function
	public String getOldInactiveNotesSepsis(List<SaSepsis> oldSepsisList, int epCountSepsis)
			throws InicuDatabaseExeption {
		String oldInactiveNotes = "";
		try {
			if (epCountSepsis == 1) {
				return oldInactiveNotes;
			}

			for (int i = 0; i < oldSepsisList.size(); i++) {
				SaSepsis sepsisObj = (SaSepsis) oldSepsisList.get(i);
				if (sepsisObj.getProgressnotes() != null) {
					oldInactiveNotes = sepsisObj.getProgressnotes();
				}
			}

			if (epCountSepsis > 2) {
				oldInactiveNotes = oldInactiveNotes.substring(oldInactiveNotes.indexOf('\n') + 1);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return oldInactiveNotes;
	}

	/**
	 * This method generates Inactive Notes for Nec
	 *
	 * @param uhid
	 * @param nec
	 * @throws InicuDatabaseExeption
	 */
	public String generateInactiveNotesNec(InicuDao inicuDaoObj, String uhid, String continuedMedication)
			throws InicuDatabaseExeption {
		if (inicuDaoObj != null) {
			inicuDao = inicuDaoObj;
		}
		// Creating Inactive Notes from here
		String progressNotesNec = "";
		String htmlNextLine = System.getProperty("line.separator");
		try {
			// Fetching Latest Episode Number for Sepsis
			int epCountNec = 1;
			String queryEpCountNec = "SELECT MAX(episode_number) FROM sa_infection_nec WHERE uhid='" + uhid + "'";
			List<Integer> epCountListNec = inicuDao.getListFromNativeQuery(queryEpCountNec);
			if (!BasicUtils.isEmpty(epCountListNec)) {
				epCountNec = (int) epCountListNec.get(0);
				if (epCountNec != 1) {
					progressNotesNec = "Baby developed " + epCountNec + " episodes of NEC " + "during hospital stay. "
							+ htmlNextLine + " Episode 1 : ";
				}
			}

			// Old Episodes Inactive Notes List of NEC Generating Query
			List<SaNec> oldNecList = new ArrayList<SaNec>();
			oldNecList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getOldInactiveNecList(uhid));
			if (!BasicUtils.isEmpty(oldNecList)) {
				// Old Episodes Inactive Notes of Sepsis Fetching Function
				String oldInactiveNotes = getOldInactiveNotesNec(oldNecList, epCountNec);
				progressNotesNec += oldInactiveNotes + htmlNextLine;
			}

			// Current Episode
			// progressNotesNec += "Episode " + epCountNec + " : ";
			if (epCountNec > 1) {
				progressNotesNec += "Episode " + epCountNec + " : ";
			}
			List<SaNec> necList = new ArrayList<SaNec>();
			necList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getNecList(uhid));
			if (!BasicUtils.isEmpty(necList)) {
				// Age of Onset Data Fetching Function for Sepsis
				String ageOnsetNotes = getAgeOnsetNec(necList);
				progressNotesNec += ageOnsetNotes;

				// Risk Factors
				String riskFactorNotes = getAsymptomaticNec(necList,uhid, epCountNec);
				progressNotesNec += riskFactorNotes;

				//  Abdominal Sign
				String abdominalSignsNotes=getAbdominalSignNec(necList,uhid);
				progressNotesNec += abdominalSignsNotes;

//				//Systematic Symptoms
				String symptematicNotes = symptematicNec(necList,uhid, epCountNec);
				progressNotesNec += symptematicNotes;

				// Investigation Order Detail Fetching Function
				String investigationOrderNotes = getInvestigationOrderNec(necList);
				progressNotesNec += investigationOrderNotes;

				// Medication of NEC Data Fetching Function
				String medicationNotes = getMedicationOfNec(necList);
				progressNotesNec += medicationNotes + continuedMedication;

				// Treatment of NEC Fetching Function
				String treatmentNotes = getTreatmentOfNec(necList);
				progressNotesNec += treatmentNotes;

				// Causes of NEC Fetching Function
				String causesNotes = getCausesOfNec(necList);
				progressNotesNec += causesNotes;

				// Ending Inactive Notes Here
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return progressNotesNec;
	}

	// Treatment of NEC
	public String getTreatmentOfNec(List<SaNec> necList){
		String treatmentNotesNec = "";
		String treatmentUniqueIdNec="";
		List<String> necIdList = new ArrayList<String>();
		try {
			for (int i = 0; i < necList.size(); i++) {
				SaNec necObj = (SaNec) necList.get(i);
				if(necObj!=null && necObj.getTreatmentaction()!=null){
					necIdList.add(necObj.getTreatmentaction());
				}
			}

			treatmentUniqueIdNec += listProcessingHelper(necIdList);
			if (!BasicUtils.isEmpty(treatmentUniqueIdNec)) {
				String queryCausesNameNec = "SELECT treatment FROM ref_assesment_treatment WHERE assesmenttreatmentid IN ("
						+ (treatmentUniqueIdNec) + ") and category='Nec'";
				List<String> treatmentNameListNec = inicuDao.getListFromNativeQuery(queryCausesNameNec);
				if (!BasicUtils.isEmpty(treatmentNameListNec)) {
					if (treatmentNameListNec.size() == 1) {
						treatmentNotesNec += "Treatment given was ";
					} else {
						treatmentNotesNec += "Treatment given were ";
					}

					String causesNameListStringNec = treatmentNameListNec.toString();
					causesNameListStringNec = causesNameListStringNec.replace("[", "");
					causesNameListStringNec = causesNameListStringNec.replace("]", "");
					treatmentNotesNec += causesNameListStringNec + ". ";
				}
			}

		}catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return treatmentNotesNec;
	}


	public String getAbdominalSignNec(List<SaNec> necList,String uhid) {
		String abdominalSignNotesNec = "";
		String causesUniqueIdNec="";
		List<String> necIdList = new ArrayList<String>();
		try {
			for (int i = 0; i < necList.size(); i++) {
				SaNec necObj = (SaNec) necList.get(i);
				if(necObj!=null && necObj.getAbdominalsign()!=null){
					necIdList.add(necObj.getAbdominalsign());
				}
			}

			causesUniqueIdNec += listProcessingHelper(necIdList);
			if (!BasicUtils.isEmpty(causesUniqueIdNec)) {
				String queryCausesNameNec = "SELECT abdominal_sign_cause FROM  ref_abdominal_sign WHERE abdominal_sign_id IN ("
						+ (causesUniqueIdNec) + ")";
				List<String> causesNameListNec = inicuDao.getListFromNativeQuery(queryCausesNameNec);
				if (!BasicUtils.isEmpty(causesNameListNec)) {
					if (causesNameListNec.size() == 1) {
						abdominalSignNotesNec += "The abdominal sign of NEC was ";
					} else {
						abdominalSignNotesNec += "The abdominal sign of NEC were ";
					}

					String causesNameListStringNec = causesNameListNec.toString();
					causesNameListStringNec = causesNameListStringNec.replace("[", "");
					causesNameListStringNec = causesNameListStringNec.replace("]", "");
					if(causesNameListStringNec.indexOf(",")!=-1) {
						int index = causesNameListStringNec.lastIndexOf(",");
						causesNameListStringNec = new StringBuilder(causesNameListStringNec).replace(index, index+1, " and ").toString();
					}
					abdominalSignNotesNec += causesNameListStringNec + ". ";
				}
			}

		}catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return abdominalSignNotesNec;
	}

	// getAsymptomaticNEc
	public String 	getAsymptomaticNec(List<SaNec> necList, String uhid, int epCountNec)
			throws InicuDatabaseExeption {
		String riskFactorNotesNec = "";
		String causesUniqueIdNec="";
		List<String> necIdList = new ArrayList<String>();
		try {
			for (int i = 0; i < necList.size(); i++) {
				SaNec necObj = (SaNec) necList.get(i);
				if(necObj!=null && necObj.getRiskfactor()!=null){
					necIdList.add(necObj.getRiskfactor());
				}
			}
			causesUniqueIdNec += listProcessingHelper(necIdList);
			if (!BasicUtils.isEmpty(causesUniqueIdNec)) {
				String queryCausesNameNec = "SELECT riskfactor FROM ref_necrisk_factor WHERE necrisk_factor_id IN ("
						+ (causesUniqueIdNec) + ")";
				List<String> causesNameListNec = inicuDao.getListFromNativeQuery(queryCausesNameNec);
				if (!BasicUtils.isEmpty(causesNameListNec)) {
					if (causesNameListNec.size() == 1) {
						riskFactorNotesNec += "The risk factor of NEC was ";
					} else {
						riskFactorNotesNec += "The risk factors of NEC were ";
					}

					String causesNameListStringNec = causesNameListNec.toString();
					causesNameListStringNec = causesNameListStringNec.replace("[", "");
					causesNameListStringNec = causesNameListStringNec.replace("]", "");
					if(causesNameListStringNec.indexOf(",")!=-1) {
						causesNameListStringNec = formatString(causesNameListStringNec);
					}
					riskFactorNotesNec += causesNameListStringNec + ". ";
				}
			}

		}catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return riskFactorNotesNec;
	}

	public String symptematicNec(List<SaNec> necList, String uhid, int epCountNec)
			throws InicuDatabaseExeption {
		String symptematicNotesNec = "";
		String causesUniqueIdNec="";
		List<String> necIdList = new ArrayList<String>();
		try {
			for (int i = 0; i < necList.size(); i++) {
				SaNec necObj = (SaNec) necList.get(i);
				if(necObj!=null && necObj.getSystematicSymptoms()!=null){
					necIdList.add(necObj.getSystematicSymptoms());
				}
			}

			causesUniqueIdNec += listProcessingHelper(necIdList);
			if (!BasicUtils.isEmpty(causesUniqueIdNec)) {
				String queryCausesNameNec = "SELECT systematic_symptoms_cause FROM  ref_systematic_symptoms WHERE systematic_symptoms_id IN ("
						+ (causesUniqueIdNec) + ")";
				List<String> causesNameListNec = inicuDao.getListFromNativeQuery(queryCausesNameNec);
				if (!BasicUtils.isEmpty(causesNameListNec)) {
					if (causesNameListNec.size() == 1) {
						symptematicNotesNec += "The systematic symptoms of NEC was ";
					} else {
						symptematicNotesNec += "The systematic symptoms of NEC were ";
					}

					String causesNameListStringNec = causesNameListNec.toString();
					causesNameListStringNec = causesNameListStringNec.replace("[", "");
					causesNameListStringNec = causesNameListStringNec.replace("]", "");
					if(causesNameListStringNec.indexOf(",")!=-1) {
						int index = causesNameListStringNec.lastIndexOf(",");
						causesNameListStringNec = new StringBuilder(causesNameListStringNec).replace(index, index+1, " and ").toString();
					}
					symptematicNotesNec += causesNameListStringNec + ". ";
				}
			}

		}catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return symptematicNotesNec;
	}

	// Investigation Order Detail Fetch Function
	public String getInvestigationOrderNec(List<SaNec> necList) throws InicuDatabaseExeption {
		String investigationOrderNotesNec = "";
		List<String> necIdList = new ArrayList<String>();
		try {
			for (int i = 0; i < necList.size(); i++) {
				SaNec necObj = (SaNec) necList.get(i);
				necIdList.add("'" + necObj.getSanec_id().toString() + "'");
			}

			if (!BasicUtils.isEmpty(necIdList)) {
				String necIdListString = necIdList.toString();
				necIdListString = necIdListString.replace("[", "");
				necIdListString = necIdListString.replace("]", "");

				List<String> investigationOrderHelperList = new ArrayList<>();
				investigationOrderHelperList = getInvestigationOrderHelper(necIdListString, "NEC");
				if (!BasicUtils.isEmpty(investigationOrderHelperList)) {
					Set<String> uniqueInvestigationOrderHelperList = new HashSet<String>(investigationOrderHelperList);
					String uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperList.toString();
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("[",
							"");
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("]",
							"");

					if (uniqueInvestigationOrderHelperList.size() == 1) {
						investigationOrderNotesNec += "Investigation Ordered:"
								+ uniqueInvestigationOrderHelperListString + ". ";
					} else {
						if(uniqueInvestigationOrderHelperListString.indexOf(",")!=-1) {
							int index = uniqueInvestigationOrderHelperListString.lastIndexOf(",");
							uniqueInvestigationOrderHelperListString = new StringBuilder(uniqueInvestigationOrderHelperListString).replace(index, index+1, " and ").toString();
						}
						investigationOrderNotesNec += "Investigations Ordered:"
								+ uniqueInvestigationOrderHelperListString + ". ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return investigationOrderNotesNec;
	}

	// Medication Used For Treating Sepsis Data Fetching Function
	public String getMedicationOfNec(List<SaNec> necList) throws InicuDatabaseExeption {
		String medicationNotesNec = "";
		List<String> finalEventIdListNec = new ArrayList<>();
		try {
			for (int i = 0; i < necList.size(); i++) {
				SaNec necObj = (SaNec) necList.get(i);
				if (necObj != null && necObj.getSanec_id() != null) {
					String SaNecId = "'" + necObj.getSanec_id().toString() + "'";
					finalEventIdListNec.add(SaNecId);
				}
			}

			if (!BasicUtils.isEmpty(finalEventIdListNec)) {
				String finalEventIdListStringNec = finalEventIdListNec.toString();
				finalEventIdListStringNec = finalEventIdListStringNec.replace("[", "");
				finalEventIdListStringNec = finalEventIdListStringNec.replace("]", "");
				medicationNotesNec += getMedicationHelper(finalEventIdListStringNec, "NEC"
                        , necList.get(0).getUhid(), false);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return medicationNotesNec;
	}


	// Causes of NEC Fetching Function
	public String getCausesOfNec(List<SaNec> necList) throws InicuDatabaseExeption {
		String causesNameNec, causesUniqueIdNec;
		causesNameNec = causesUniqueIdNec = "";
		List<String> causesIdList = new ArrayList<>();
		try {
			for (int i = 0; i < necList.size(); i++) {
				SaNec necObj = (SaNec) necList.get(i);
				if (necObj != null && necObj.getCauseofnec() != null) {
					causesIdList.add(necObj.getCauseofnec());
				}
			}

			causesUniqueIdNec += listProcessingHelper(causesIdList);
			if (!BasicUtils.isEmpty(causesUniqueIdNec)) {
				String queryCausesNameNec = "SELECT causeofinfection FROM  ref_causeofinfection WHERE causeofinfectionid IN ("
						+ (causesUniqueIdNec) + ")";
				List<String> causesNameListNec = inicuDao.getListFromNativeQuery(queryCausesNameNec);
				if (!BasicUtils.isEmpty(causesNameListNec)) {
					if (causesNameListNec.size() == 1) {
						causesNameNec += "The cause of NEC was ";
					} else {
						causesNameNec += "The causes of NEC were ";
					}

					String causesNameListStringNec = causesNameListNec.toString();
					causesNameListStringNec = causesNameListStringNec.replace("[", "");
					causesNameListStringNec = causesNameListStringNec.replace("]", "");
					if(causesNameListStringNec.indexOf(",")!=-1) {
						int index = causesNameListStringNec.lastIndexOf(",");
						causesNameListStringNec = new StringBuilder(causesNameListStringNec).replace(index, index+1, " and ").toString();
					}
					causesNameNec += causesNameListStringNec + ". ";
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return causesNameNec;
	}

	// Old Episodes Inactive Notes of NEC Fetching Function
	public String getOldInactiveNotesNec(List<SaNec> oldNecList, int epCountNec)
			throws InicuDatabaseExeption {
		String oldInactiveNotes = "";
		try {
			if (epCountNec == 1) {
				return oldInactiveNotes;
			}

			for (int i = 0; i < oldNecList.size(); i++) {
				SaNec necObj = (SaNec) oldNecList.get(i);
				if (necObj.getProgressnotes() != null) {
					oldInactiveNotes = necObj.getProgressnotes();
				}
			}

			if (epCountNec > 2) {
				oldInactiveNotes = oldInactiveNotes.substring(oldInactiveNotes.indexOf('\n') + 1);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return oldInactiveNotes;
	}

	/**
	 * This method generates Inactive Notes for Respiratory Distress
	 *
	 * @param uhid
	 * @param rds
	 * @throws InicuDatabaseExeption
	 */
	public String generateInactiveNotesRds(InicuDao inicuDaoObj, String uhid, String continuedMedication,
			AssessmentRespSystemPOJO respSystem, String eventId) throws InicuDatabaseExeption {
		if (inicuDaoObj != null) {
			inicuDao = inicuDaoObj;
		}
		// Creating Inactive Notes from here
		String progressNotesRds = "";
		String htmlNextLine = System.getProperty("line.separator");
		try {
			// Fetching Latest Episode Number for Rds
			int epCountRds = 1;
			String queryEpCountRds = "SELECT MAX(episode_number) FROM sa_resp_rds WHERE uhid='" + uhid + "'";
			List<Integer> epCountListRds = inicuDao.getListFromNativeQuery(queryEpCountRds);
			if (!BasicUtils.isEmpty(epCountListRds)) {
				epCountRds = (int) epCountListRds.get(0);
				if (epCountRds != 1) {
					progressNotesRds = "Baby developed " + epCountRds + " episodes of Respiratory "
							+ "Distress during hospital stay. " + htmlNextLine + " Episode 1 : ";
				}
			}

			// Old Episodes Inactive Notes List of Rds Generating Query
			List<SaRespRds> oldRdsList = new ArrayList<SaRespRds>();
			oldRdsList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getOldInactiveRdsList(uhid));
			if (!BasicUtils.isEmpty(oldRdsList)) {
				// Old Episodes Inactive Notes of Rds Fetching Function
				String oldInactiveNotes = getOldInactiveNotesRds(oldRdsList, epCountRds);
				progressNotesRds += oldInactiveNotes + htmlNextLine;
			}

			// Current Episode
			// progressNotesRds += "Episode " + epCountRds + " : ";
			if (epCountRds > 1) {
				progressNotesRds += "Episode " + epCountRds + " : ";
			}
			List<SaRespRds> rdsList = new ArrayList<SaRespRds>();
			rdsList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getRdsList(uhid, epCountRds));
			if (!BasicUtils.isEmpty(rdsList)) {
				// Age of Onset Data Fetching Function for Rds
				String ageOnsetNotes = getAgeOnsetRds(rdsList);
				progressNotesRds += ageOnsetNotes;

				// Risk Factors Fetching Function
				String riskFactorNotes = getRiskFactorRds(rdsList);
				progressNotesRds += riskFactorNotes;

				// Downes Score Data Fetching Function
				String downesScoreNotes = getDownesScoreRds(rdsList, uhid, epCountRds);
				progressNotesRds += downesScoreNotes;

				// Investigation Order Detail Fetching Function
				String investigationOrderNotes = getInvestigationOrderRds(rdsList);
				progressNotesRds += investigationOrderNotes;

				// Respiratory Support Detail Fetching Function
				String respiratorySupportNotes = getRespiratorySupportRds(rdsList, uhid, eventId);
				progressNotesRds += respiratorySupportNotes;

				// Surfactant Detail Fetching Function
				String surfactantNotes = getSurfactantRds(rdsList, uhid);
				progressNotesRds += surfactantNotes;

				// Medication of Rds Data Fetching Function
				String medicationNotes = getMedicationOfRds(rdsList, false);
				progressNotesRds += medicationNotes + continuedMedication;

				// Causes of Rds Fetching Function
				String causesNotes = getCausesOfRds(rdsList);
				progressNotesRds += causesNotes;

				// Bpd Respiratory of Rds Fetching Function
				String bpdRespiratoryNotes = getCausesOfBpdRespiratory(uhid);
				if (!BasicUtils.isEmpty(bpdRespiratoryNotes)) {
					progressNotesRds += bpdRespiratoryNotes;
				}

				// Ending Inactive Notes Here
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return progressNotesRds;
	}

	// Function for Rds
	// Age of OnSet Data Fetching Function
	public String getAgeOnsetRds(List<SaRespRds> rdsList) throws InicuDatabaseExeption {
		String ageOnSetNotesRds = "";
		boolean done = false;
		try {
			for (int i = 0; i < rdsList.size(); i++) {
				SaRespRds rdsObj = (SaRespRds) rdsList.get(i);
				if (rdsObj != null && done != true && rdsObj.getAgeatonset() != null) {
					if (rdsObj.getAgeatonset().equalsIgnoreCase("0")) {
						ageOnSetNotesRds += "Baby developed Respiratory Distress at birth. ";
					} else {
						if (rdsObj.getAgeinhoursdays() != null && rdsObj.getAgeinhoursdays() == true) {
							ageOnSetNotesRds += "Baby developed Respiratory Distress at the age of "
									+ rdsObj.getAgeatonset();
							if (rdsObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesRds += " hour. ";
							} else {
								ageOnSetNotesRds += " hours. ";
							}
						} else {
							ageOnSetNotesRds += "Baby developed Respiratory Distress at the age of "
									+ rdsObj.getAgeatonset();
							if (rdsObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesRds += " day. ";
							} else {
								ageOnSetNotesRds += " days. ";
							}
						}
					}
					done = true;
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ageOnSetNotesRds;
	}

	// Risk Factor Data Fetching Function
	public String getRiskFactorRds(List<SaRespRds> rdsList) throws InicuDatabaseExeption {
		String riskFactorNameRds, riskFactorUniqueIdRds;
		riskFactorNameRds = riskFactorUniqueIdRds = "";
		try {
			List<String> riskFactorIdList = new ArrayList<>();
			for (int i = 0; i < rdsList.size(); i++) {
				SaRespRds rdsObj = (SaRespRds) rdsList.get(i);
				if (rdsObj != null && rdsObj.getRiskfactor() != null) {
					riskFactorIdList.add(rdsObj.getRiskfactor());
				}
			}

			riskFactorUniqueIdRds += listProcessingHelper(riskFactorIdList);
			if (!BasicUtils.isEmpty(riskFactorUniqueIdRds)) {
				String queryRiskFactorNameRds = "SELECT riskfactor FROM  ref_rdsriskfactor " + "WHERE riskfactorid IN ("
						+ (riskFactorUniqueIdRds) + ")";
				List<String> riskFactorNameListRds = inicuDao.getListFromNativeQuery(queryRiskFactorNameRds);
				if (!BasicUtils.isEmpty(riskFactorNameListRds)) {
					if (riskFactorNameListRds.size() == 1) {
						riskFactorNameRds += "The risk factor was ";
					} else {
						riskFactorNameRds += "The risk factors were ";
					}

					String riskFactorNameListStringRds = riskFactorNameListRds.toString();
					riskFactorNameListStringRds = riskFactorNameListStringRds.replace("[", "");
					riskFactorNameListStringRds = riskFactorNameListStringRds.replace("]", "");
					if(riskFactorNameListStringRds.indexOf(",")!=-1) {
						riskFactorNameListStringRds = formatString(riskFactorNameListStringRds);
					}
					riskFactorNameRds += riskFactorNameListStringRds + ". ";
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return riskFactorNameRds;
	}

	// Downes Score Data Fetching Function
	public String getDownesScoreRds(List<SaRespRds> rdsList, String uhid, int epCountRds) throws InicuDatabaseExeption {
		String downesScoreNotes = "";
		boolean isInitialDownesScore = true;
		List<Integer> downesScoreIdList = new ArrayList<>();
		try {
			for (int i = 0; i < rdsList.size(); i++) {
				SaRespRds rdsObj = (SaRespRds) rdsList.get(i);
				if (rdsObj != null) {
					if (rdsObj.getDownesscoreid() != null) {
						downesScoreIdList.add(Integer.valueOf(rdsObj.getDownesscoreid()));
					} else {
						if (i == 0) {
							isInitialDownesScore = false;
						}
					}
				}
			}

			if (!BasicUtils.isEmpty(downesScoreIdList)) {
				String downesScoreIdListString = downesScoreIdList.toString();
				downesScoreIdListString = downesScoreIdListString.replace("[", "");
				downesScoreIdListString = downesScoreIdListString.replace("]", "");

				String querydownesScoreRds = "SELECT downesscore,downesscoreid from score_downes "
						+ "WHERE downesscoreid " + "IN (" + (downesScoreIdListString) + ") and "
						+ "downesscore IS NOT NULL";
				List<Object> downesScoreValueListRds = inicuDao.getListFromNativeQuery(querydownesScoreRds);
				if (!BasicUtils.isEmpty(downesScoreValueListRds)) {
					int worstDownesScore, initialDownesScore;
					worstDownesScore = initialDownesScore = 0;
					BigInteger worstDownesScoreId = null;
					Object[] downesScoreValueObj = (Object[]) downesScoreValueListRds.get(0);
					worstDownesScore = initialDownesScore = (int) downesScoreValueObj[0];
					for (int i = 0; i < downesScoreValueListRds.size(); i++) {
						downesScoreValueObj = (Object[]) downesScoreValueListRds.get(i);
						if (worstDownesScore <= (int) downesScoreValueObj[0]) {
							worstDownesScore = (int) downesScoreValueObj[0];
							worstDownesScoreId = (BigInteger) downesScoreValueObj[1];
						}
					}

					if (isInitialDownesScore) {
						downesScoreNotes += "The downe's score value at the time of first assessment was "
								+ initialDownesScore + ". ";
					}

					String queryWorstDownesScoreTime = "SELECT assessment_time FROM sa_resp_rds WHERE uhid='" + uhid
							+ "' and downesscoreid='" + worstDownesScoreId + "' and episode_number=" + epCountRds;
					List<Timestamp> worstDownesScoreTimeValue = inicuDao
							.getListFromNativeQuery(queryWorstDownesScoreTime);
					if (!BasicUtils.isEmpty(worstDownesScoreTimeValue)) {
						if (worstDownesScore != initialDownesScore) {
							downesScoreNotes += "During this episode, the worst downe's score values was "
									+ worstDownesScore + " at DOL#"
									+ getDayOfLife(uhid, (Timestamp) worstDownesScoreTimeValue.get(0)) + ". ";
						} else {
							if (downesScoreValueListRds.size() == 1) {
								downesScoreNotes += "During this episode, the worst downe's score values was "
										+ worstDownesScore + " at DOL#"
										+ getDayOfLife(uhid, (Timestamp) worstDownesScoreTimeValue.get(0)) + ". ";
							}
						}
					}
				}
			}
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return downesScoreNotes;
	}

	// Investigation Order Detail Fetch Function
	public String getInvestigationOrderRds(List<SaRespRds> rdsList) throws InicuDatabaseExeption {
		String investigationOrderNotesRds = "";
		List<String> rdsIdList = new ArrayList<String>();
		try {
			for (int i = 0; i < rdsList.size(); i++) {
				SaRespRds rdsObj = (SaRespRds) rdsList.get(i);
				rdsIdList.add("'" + rdsObj.getResprdsid().toString() + "'");

			}

			if (!BasicUtils.isEmpty(rdsIdList)) {
				String rdsIdListString = rdsIdList.toString();
				rdsIdListString = rdsIdListString.replace("[", "");
				rdsIdListString = rdsIdListString.replace("]", "");
				List<String> investigationOrderHelperList = new ArrayList<>();
				investigationOrderHelperList = getInvestigationOrderHelper(rdsIdListString, "Respiratory");
				if (!BasicUtils.isEmpty(investigationOrderHelperList)) {
					Set<String> uniqueInvestigationOrderHelperList = new HashSet<String>(investigationOrderHelperList);
					String uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperList.toString();
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("[",
							"");
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("]",
							"");
					if(uniqueInvestigationOrderHelperListString.indexOf(",")!=-1) {
						uniqueInvestigationOrderHelperListString = formatString(uniqueInvestigationOrderHelperListString);
					}
					if (uniqueInvestigationOrderHelperList.size() == 1) {
						investigationOrderNotesRds += "Investigation done during this episode was "
								+ uniqueInvestigationOrderHelperListString + ". ";

					} else {
						investigationOrderNotesRds += "Investigations done during this episode were "
								+ uniqueInvestigationOrderHelperListString + ". ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return investigationOrderNotesRds;
	}

	// Respiratory Support Detail Fetching Function
	public String getRespiratorySupportRds(List<SaRespRds> rdsList, String uhid, String eventId) throws InicuDatabaseExeption {
		String respiratorySupportNotesRds = "";
		List<String> respSupportIdListRds = new ArrayList<>();
		try {
			for (int i = 0; i < rdsList.size(); i++) {
				SaRespRds rdsObj = (SaRespRds) rdsList.get(i);
				respSupportIdListRds.add("'" + rdsObj.getResprdsid().toString() + "'");
			}

			if (!BasicUtils.isEmpty(respSupportIdListRds)) {
				String respSupportIdListStringRds = respSupportIdListRds.toString();
				respSupportIdListStringRds = respSupportIdListStringRds.replace("[", "");
				respSupportIdListStringRds = respSupportIdListStringRds.replace("]", "");

				if (!BasicUtils.isEmpty(eventId)) {
                    respSupportIdListStringRds += ",'" + eventId + "'";
                }

//				String queryRespiratorySupport = "SELECT distinct rs_vent_type,rs_mech_vent_type,creationtime "
//						+ "FROM respsupport WHERE uhid='" + uhid + "' and eventid IN (" + respSupportIdListStringRds
//						+ ") OR (is_eventid_updated = false and eventname = 'Respiratory Distress') order by creationtime";
//
//				List<Object> respiratorySupportList = inicuDao.getListFromNativeQuery(queryRespiratorySupport);

                String queryRespiratorySupport = "SELECT obj FROM RespSupport obj WHERE uhid='" + uhid + "' and (eventid in (" + respSupportIdListStringRds
                        + ") OR (isEventidUpdated = 'false' and eventname = 'Respiratory Distress')) order by creationtime";
                List<RespSupport> respiratorySupportList = inicuDao.getListFromMappedObjQuery(queryRespiratorySupport);

				if (!BasicUtils.isEmpty(respiratorySupportList)) {
					respiratorySupportNotesRds += respiratorySupportHelper(respiratorySupportList, uhid);
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return respiratorySupportNotesRds;
	}

	// Surfactant Detail Fetch Function
	public String getSurfactantRds(List<SaRespRds> rdsList, String uhid) throws InicuDatabaseExeption {
		String surfactantNotesRds = "";
		//String dose = "";
		List<String> surfactantDolListRds = new ArrayList<>();
		String prevSurfactantName, currSurfactantName;
		prevSurfactantName = currSurfactantName = null;
		boolean isSamesurfactant = true;
		int countSurfactant = 0;
		try {
			for (int i = 0; i < rdsList.size(); i++) {
				SaRespRds rdsObj = (SaRespRds) rdsList.get(i);
				if (rdsObj != null && rdsObj.getSurfactantDose() != null) {
					countSurfactant++;
					//dose = rdsObj.getSurfactantDoseMl();
					surfactantDolListRds.add(getDayOfLife(uhid, rdsObj.getAssessmentTime()).toString());
					if (prevSurfactantName == null) {
						prevSurfactantName = currSurfactantName = rdsObj.getSufactantname();
					} else {
						currSurfactantName = rdsObj.getSufactantname();
						if (prevSurfactantName != currSurfactantName) {
							isSamesurfactant = false;
						} else {
							prevSurfactantName = currSurfactantName;
						}
					}
				}
			}

			if (!BasicUtils.isEmpty(surfactantDolListRds)) {
				String surfactantDolListRdsString = surfactantDolListRds.toString();
				surfactantDolListRdsString = surfactantDolListRdsString.replace("[", "");
				surfactantDolListRdsString = surfactantDolListRdsString.replace("]", "");

				if (isSamesurfactant) {
					if (countSurfactant == 1) {
						surfactantNotesRds += "Baby was treated with " + countSurfactant + " dose of Surfactant ("
								+ currSurfactantName + ") on DOL#" + surfactantDolListRdsString + ". ";
					} else {
						surfactantNotesRds += "Baby was treated with " + countSurfactant + " doses of Surfactant ("
								+ currSurfactantName + ") on DOL#" + surfactantDolListRdsString + " respectively. ";
					}
				} else {
					if (countSurfactant == 1) {
						surfactantNotesRds += "Baby was treated with " + countSurfactant + " dose of Surfactant on DOL#"
								+ surfactantDolListRdsString + ". ";
					} else {
						surfactantNotesRds += "Baby was treated with " + countSurfactant
								+ " doses of Surfactant on DOL#" + surfactantDolListRdsString + " respectively. ";
					}
				}

//				String QuerySurfactant = "select obj from SaRespRds as obj where uhid ='"+ uhid + "' and surfactantDose!=null and isinsuredone!=null order by creationtime desc ";
//				List<SaRespRds> list = inicuDao.getListFromMappedObjQuery(QuerySurfactant);
//				if(!BasicUtils.isEmpty(list)) {
//					String queryVent = "select obj from RespSupport as obj where uhid = '" + uhid + "' and eventid = '" + list.get(0).getResprdsid() +
//							"'";
//					List<RespSupport> list1 = inicuDao.getListFromMappedObjQuery(queryVent);
//
//					if(!BasicUtils.isEmpty(list1)) {
//
//						if(list1.get(0).get)
//						if(list.get(0).getIsinsuredone()!=null && list.get(0).getIsinsuredone() == false)
//							surfactantNotesRds += "Now baby is continued with " + list1.get(index);
//
//
//					}
//
//				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return surfactantNotesRds;
	}

	// Medication Used For Treating Rds Data Fetching Function
	public String getMedicationOfRds(List<SaRespRds> rdsList, boolean isSkip) throws InicuDatabaseExeption {
		String medicationNotesRds = "";
		List<String> finalEventIdListRds = new ArrayList<>();
		try {
			for (int i = 0; i < rdsList.size(); i++) {
				SaRespRds rdsObj = (SaRespRds) rdsList.get(i);
				if (rdsObj != null && rdsObj.getResprdsid() != null) {
					String saRespRdsIdSepsis = "'" + rdsObj.getResprdsid().toString() + "'";
					finalEventIdListRds.add(saRespRdsIdSepsis);
				}
			}

			if (!BasicUtils.isEmpty(finalEventIdListRds)) {
				String finalEventIdListStringRds = finalEventIdListRds.toString();
				finalEventIdListStringRds = finalEventIdListStringRds.replace("[", "");
				finalEventIdListStringRds = finalEventIdListStringRds.replace("]", "");
				medicationNotesRds += getMedicationHelper(finalEventIdListStringRds, "RDS"
                        ,rdsList.get(0).getUhid(), isSkip);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return medicationNotesRds;
	}

	// Causes of Rds Fetching Function
	public String getCausesOfRds(List<SaRespRds> rdsList) throws InicuDatabaseExeption {
		String causesNameRds, causesUniqueIdRds;
		causesNameRds = causesUniqueIdRds = "";
		List<String> causesIdList = new ArrayList<>();
		try {
			for (int i = 0; i < rdsList.size(); i++) {
				SaRespRds rdsObj = (SaRespRds) rdsList.get(i);
				if (rdsObj != null && rdsObj.getCauseofrds() != null) {
					causesIdList.add(rdsObj.getCauseofrds());
				}
			}

			causesUniqueIdRds += listProcessingHelper(causesIdList);
			if (!BasicUtils.isEmpty(causesUniqueIdRds)) {
				String queryCausesNameRds = "SELECT rdscause FROM  ref_rdscause WHERE rdscauseid IN ("
						+ (causesUniqueIdRds) + ")";
				List<String> causesNameListRds = inicuDao.getListFromNativeQuery(queryCausesNameRds);
				if (!BasicUtils.isEmpty(causesNameListRds)) {
					if (causesNameListRds.size() == 1) {
						causesNameRds += "The cause of Respiratory Distress was ";
					} else {
						causesNameRds += "The causes of Respiratory Distress were ";
					}

					String causesNameListStringRds = causesNameListRds.toString();
					causesNameListStringRds = causesNameListStringRds.replace("[", "");
					causesNameListStringRds = causesNameListStringRds.replace("]", "");
					if(causesNameListStringRds.indexOf(",")!=-1) {
						causesNameListStringRds = formatString(causesNameListStringRds);
					}
					causesNameRds += causesNameListStringRds + ". ";
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return causesNameRds;
	}

	// Old Episodes Inactive Notes of Rds Fetching Function
	public String getOldInactiveNotesRds(List<SaRespRds> oldRdsList, int epCountRds) throws InicuDatabaseExeption {
		String oldInactiveNotes = "";
		try {
			if (epCountRds == 1) {
				return oldInactiveNotes;
			}

			for (int i = 0; i < oldRdsList.size(); i++) {
				SaRespRds rdsObj = (SaRespRds) oldRdsList.get(i);
				if (rdsObj.getProgressnotes() != null) {
					oldInactiveNotes = rdsObj.getProgressnotes();
				}
			}

			if (epCountRds > 2) {
				oldInactiveNotes = oldInactiveNotes.substring(oldInactiveNotes.indexOf('\n') + 1);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return oldInactiveNotes;
	}

	/**
	 * This method generates Inactive Notes for Apnea
	 *
	 * @param uhid
	 * @param apnea
	 * @throws InicuDatabaseExeption
	 */
	public String generateInactiveNotesApnea(InicuDao inicuDaoObj, String uhid, String continuedMedication,
			AssessmentRespSystemPOJO respSystem, String tempEventId) throws InicuDatabaseExeption {
		if (inicuDaoObj != null) {
			inicuDao = inicuDaoObj;
		}
		// Creating Inactive Notes from here
		String progressNotesApnea = "";
		String htmlNextLine = System.getProperty("line.separator");
		try {
			// Fetching Current Episode Number for Apnea
			int epCountApnea = 1;
			String queryEpCountApnea = "SELECT MAX(episode_number) FROM sa_resp_apnea WHERE uhid='" + uhid + "'";
			List<Integer> epCountListApnea = inicuDao.getListFromNativeQuery(queryEpCountApnea);
			if (!BasicUtils.isEmpty(epCountListApnea)) {
				epCountApnea = epCountListApnea.get(0).intValue();
				if (epCountApnea != 1) {
					progressNotesApnea = "Baby developed " + epCountApnea + " episodes of Apnea "
							+ "during hospital stay. " + htmlNextLine + " Episode 1 : ";
				}
			}

			// Old Episodes Inactive Notes List of Apnea Generating Query
			List<SaRespApnea> oldApneaList = new ArrayList<SaRespApnea>();
			oldApneaList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getOldInactiveApneaList(uhid));
			if (!BasicUtils.isEmpty(oldApneaList)) {
				// Old Episodes Inactive Notes of Apnea Fetching Function
				String oldInactiveNotes = getOldInactiveNotesApnea(oldApneaList, epCountApnea);
				progressNotesApnea += oldInactiveNotes + htmlNextLine;
			}

			// Current Episode
			// progressNotesApnea += "Episode " + epCountApnea + " : ";
			if (epCountApnea > 1) {
				progressNotesApnea += "Episode " + epCountApnea + " : ";

			}
			List<SaRespApnea> apneaList = new ArrayList<SaRespApnea>();
			apneaList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getApneaList(uhid, epCountApnea));
			if (!BasicUtils.isEmpty(apneaList)) {
				// Age of Onset Data Fetching Function for Apnea
				String ageOnsetNotes = getAgeOnsetApnea(apneaList);
				progressNotesApnea += ageOnsetNotes;

				//if (!BasicUtils.isEmpty(oldApneaList)) {
					// Apnea Details Fetching Function
					String apneaDetailNotes = getApneaDetail(apneaList, uhid);
					progressNotesApnea += apneaDetailNotes;
				//}

				// Investigation Order Detail Fetching Function
				String investigationOrderNotes = getInvestigationOrderApnea(apneaList);
				progressNotesApnea += investigationOrderNotes;

				// Respiratory Support Detail Fetching Function
				String respiratorySupportNotes = getRespiratorySupportApnea(apneaList, uhid, tempEventId);
				progressNotesApnea += respiratorySupportNotes;

				// Caffeine Treatment detail Fetching Function
//				String caffeineNotes = getCaffeineDetailApnea(apneaList, uhid);
//				progressNotesApnea += caffeineNotes;

				// Medication of Apnea Data Fetching Function
				String medicationNotes = getMedicationOfApnea(apneaList, false);
				progressNotesApnea += medicationNotes + continuedMedication;

				// Discharge Details Fetching Function
				String dischargeNotes = getDischargeDetailApnea(apneaList);
				progressNotesApnea += dischargeNotes;

				// Causes of Apnea Fetching Function
				String causesNotes = getCausesOfApnea(apneaList);
				progressNotesApnea += causesNotes;

				//String apneaNotes = ApneaEpisodes(apneaList);
				//progressNotesApnea += apneaNotes;

				// Bpd Respiratory of Apnea Fetching Function
				String bpdRespiratoryNotes = getCausesOfBpdRespiratory(uhid);
				if (!BasicUtils.isEmpty(bpdRespiratoryNotes)) {
					progressNotesApnea += bpdRespiratoryNotes;
				}

				String apneaEndNote = getApneaInactiveDate(apneaList);
				if (!BasicUtils.isEmpty(apneaEndNote)) {
					progressNotesApnea += apneaEndNote;
				}
			}

			// Inactive Notes ending here
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return progressNotesApnea;
	}

	// Functions for Apnea
	// Age Onset Data Fetching Function
	public String getAgeOnsetApnea(List<SaRespApnea> apneaList) throws InicuDatabaseExeption {
		String ageOnSetNotesApnea = "";
		boolean done = false;
		try {
			for (int i = 0; i < apneaList.size(); i++) {
				SaRespApnea apneaObj = (SaRespApnea) apneaList.get(i);
				if (apneaObj != null && done != true && apneaObj.getAgeatonset() != null) {
					if (apneaObj.getAgeatonset().equalsIgnoreCase("0")) {
						ageOnSetNotesApnea += "Baby developed Apnea at birth. ";
					} else {
						if (apneaObj.getAgeinhours() != null && apneaObj.getAgeinhours() == true) {
							if(apneaObj.getEpisodeNumber()==1)
								ageOnSetNotesApnea += "Baby developed Apnea at the age of " + apneaObj.getAgeatonset();
							else
								ageOnSetNotesApnea += "Baby developed Apnea again at the age of " + apneaObj.getAgeatonset();
							if (apneaObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesApnea += " hour. ";
							} else {
								ageOnSetNotesApnea += " hours. ";
							}
						} else {
							if(apneaObj.getEpisodeNumber()==1)
								ageOnSetNotesApnea += "Baby developed Apnea at the age of " + apneaObj.getAgeatonset();
							else
								ageOnSetNotesApnea += "Baby developed Apnea again at the age of " + apneaObj.getAgeatonset();
							if (apneaObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesApnea += " day. ";
							} else {
								ageOnSetNotesApnea += " days. ";
							}
						}
					}
					done = true;
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ageOnSetNotesApnea;
	}

//	public String ApneaEpisodes(List<SaRespApnea> apneaList) {
//
//		String caffeineNotes = "";
//		for(int i=0;i<apneaList.size();i++) {
//			if(apneaList.get(i).getEpisodeNumber() == 1) {
//				if(apneaList.get(i).getCummulative_number_of_episodes()!=null && apneaList.get(i).getCummulative_number_of_episodes()!=0) {
//					caffeineNotes += "Cummulative number of apnea episodes were " + apneaList.get(i).getCummulative_number_of_episodes() + ". ";
//					break;
//				}
//			}
//		}
//		return caffeineNotes;
//	}

	// Apnea Detail Fetching Function
	public String getApneaDetail(List<SaRespApnea> oldApneaList, String uhid) throws InicuDatabaseExeption {
		String apneaDetailNotes = "";
		int totalApnea, countBradycardia, countSpontaneous, countPhysicalStimulation, countPPV;
		totalApnea = countBradycardia = countSpontaneous = countPhysicalStimulation = countPPV = 0;
		try {
			SaRespApnea apneaObj = (SaRespApnea) oldApneaList.get(oldApneaList.size() - 1);
			List<NursingEpisode> nursingEpisodeListApnea = new ArrayList<NursingEpisode>();
			nursingEpisodeListApnea = inicuDao.getListFromMappedObjQuery(
					HqlSqlQueryConstants.getVitalDetailHelper(uhid, apneaObj.getAssessmentTime()));
			if (!BasicUtils.isEmpty(nursingEpisodeListApnea)) {
				for (int i = 0; i < nursingEpisodeListApnea.size(); i++) {
					NursingEpisode nursingEpisodeObj = (NursingEpisode) nursingEpisodeListApnea.get(i);
					if (nursingEpisodeObj != null) {
						if (nursingEpisodeObj.getApnea() != null && nursingEpisodeObj.getApnea() == true) {
							totalApnea++;
						}

						if (nursingEpisodeObj.getBradycardia() != null && nursingEpisodeObj.getBradycardia() == true) {
							countBradycardia++;
						}

						if (nursingEpisodeObj.getRecovery() != null) {
							if (nursingEpisodeObj.getRecovery().equalsIgnoreCase("Spontaneous")) {
								countSpontaneous++;
							}
							if (nursingEpisodeObj.getRecovery().equalsIgnoreCase("Physical stimulation")) {
								countPhysicalStimulation++;
							}
							if (nursingEpisodeObj.getRecovery().equalsIgnoreCase("PPV")) {
								countPPV++;
							}
						}

					}
				}
			}

			if (totalApnea == 1) {
				apneaDetailNotes += "The cumulative number of Apnea events during this episode was 1 ";
				if (countBradycardia == 1) {
					apneaDetailNotes += ", which was associated with bradycardia ";
				}
				if (countSpontaneous == 1) {
					apneaDetailNotes += ", which was recovered spontaneously ";
				}
				if (countPhysicalStimulation == 1) {
					apneaDetailNotes += ", which required physical stimulation ";
				}
				if (countPPV == 1) {
					apneaDetailNotes += ", which required positive pressure ventilation (PPV). ";
				}
				apneaDetailNotes += ". ";
			}

			if (totalApnea > 1) {
				apneaDetailNotes += "The cumulative number of Apnea events during this episode was " + totalApnea + "";
				if (countBradycardia == 1) {
					apneaDetailNotes += ", " + countBradycardia + " were associated with bradycardia";
				}
				if (countBradycardia != 0 && countBradycardia != 1) {
					apneaDetailNotes += ", " + countBradycardia + " were associated with bradycardia";

				}

				if (countSpontaneous == 1) {
					apneaDetailNotes += ", " + countSpontaneous + " recovered spontaneously";
				}
				if (countSpontaneous != 0 && countSpontaneous != 1) {
					apneaDetailNotes += ", " + countSpontaneous + " recovered spontaneously";

				}

				if (countPhysicalStimulation != 0) {
					apneaDetailNotes += ", " + countPhysicalStimulation + " required physical stimulation";
				}

				if (countPPV != 0) {
					apneaDetailNotes += ", " + countPPV + " required positive pressure ventilation (PPV)";
				}
				apneaDetailNotes += ". ";
			}

			if(apneaDetailNotes.indexOf(",")!=-1) {
				apneaDetailNotes = formatString(apneaDetailNotes);
			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return apneaDetailNotes;
	}

	// Investigation Order Detail Fetch Function
	public String getInvestigationOrderApnea(List<SaRespApnea> apneaList) throws InicuDatabaseExeption {
		String investigationOrderNotesApnea = "";
		List<String> apneaIdList = new ArrayList<String>();
		try {
			for (int i = 0; i < apneaList.size(); i++) {
				SaRespApnea apneaObj = (SaRespApnea) apneaList.get(i);
				apneaIdList.add("'" + apneaObj.getApneaid().toString() + "'");

			}

			if (!BasicUtils.isEmpty(apneaIdList)) {
				String apneaIdListString = apneaIdList.toString();
				apneaIdListString = apneaIdListString.replace("[", "");
				apneaIdListString = apneaIdListString.replace("]", "");
				List<String> investigationOrderHelperList = new ArrayList<>();
				investigationOrderHelperList = getInvestigationOrderHelper(apneaIdListString, "Apnea");
				if (!BasicUtils.isEmpty(investigationOrderHelperList)) {
					Set<String> uniqueInvestigationOrderHelperList = new HashSet<String>(investigationOrderHelperList);
					String uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperList.toString();
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("[",
							"");
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("]",
							"");
					if(uniqueInvestigationOrderHelperListString.indexOf(",")!=-1) {
						uniqueInvestigationOrderHelperListString = formatString(uniqueInvestigationOrderHelperListString);
					}
					if (uniqueInvestigationOrderHelperList.size() == 1) {
						investigationOrderNotesApnea += "Investigation done during this episode was "
								+ uniqueInvestigationOrderHelperListString + ". ";

					} else {
						investigationOrderNotesApnea += "Investigations done during this episode were "
								+ uniqueInvestigationOrderHelperListString + ". ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return investigationOrderNotesApnea;
	}

	// Respiratory Support Detail Fetching Function
	public String getRespiratorySupportApnea(List<SaRespApnea> apneaList, String uhid, String eventId) throws InicuDatabaseExeption {
		String respiratorySupportNotesApnea = "";
		List<String> respSupportIdListApnea = new ArrayList<>();
		try {
			for (int i = 0; i < apneaList.size(); i++) {
				SaRespApnea apneaObj = (SaRespApnea) apneaList.get(i);
				respSupportIdListApnea.add("'" + apneaObj.getApneaid().toString() + "'");
			}

			if (!BasicUtils.isEmpty(respSupportIdListApnea)) {
				String respSupportIdListStringApnea = respSupportIdListApnea.toString();
				respSupportIdListStringApnea = respSupportIdListStringApnea.replace("[", "");
				respSupportIdListStringApnea = respSupportIdListStringApnea.replace("]", "");

                if (!BasicUtils.isEmpty(eventId)) {
                    respSupportIdListStringApnea += ",'" + eventId + "'";
                }


                String queryRespiratorySupport = "SELECT obj FROM RespSupport obj WHERE uhid='" + uhid + "' and eventid in (" + respSupportIdListStringApnea
                        + ") OR (isEventidUpdated = 'false' and eventname = 'apnea') order by creationtime";
                List<RespSupport> respiratorySupportList = inicuDao.getListFromMappedObjQuery(queryRespiratorySupport);

				String prevRespiratorySupport = null;

				if (!BasicUtils.isEmpty(respiratorySupportList)) {
					respiratorySupportNotesApnea += respiratorySupportHelper(respiratorySupportList, uhid);
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return respiratorySupportNotesApnea;
	}
	
	public String getRespiratorySupportShock(List<SaShock> shockList, String uhid, String tempRespEventId) throws InicuDatabaseExeption {
		String respiratorySupportNotesShock = "";
		List<String> respSupportIdListShock = new ArrayList<>();
		try {
			for (int i = 0; i < shockList.size(); i++) {
				SaShock shockObj = (SaShock) shockList.get(i);
				respSupportIdListShock.add("'" + shockObj.getSashockid().toString() + "'");
			}

			if (!BasicUtils.isEmpty(respSupportIdListShock)) {
				String respSupportIdListStringShock = respSupportIdListShock.toString();
				respSupportIdListStringShock = respSupportIdListStringShock.replace("[", "");
				respSupportIdListStringShock = respSupportIdListStringShock.replace("]", "");

                if (!BasicUtils.isEmpty(tempRespEventId)) {
                    respSupportIdListStringShock += ",'" + tempRespEventId + "'";
                }


                String queryRespiratorySupport = "SELECT obj FROM RespSupport obj WHERE uhid='" + uhid + "' and eventid in (" + respSupportIdListStringShock
                        + ") OR (isEventidUpdated = 'false' and eventname = 'Shock') order by creationtime";
                List<RespSupport> respiratorySupportList = inicuDao.getListFromMappedObjQuery(queryRespiratorySupport);


                String prevRespiratorySupport = null;
			
				if (!BasicUtils.isEmpty(respiratorySupportList)) {
					respiratorySupportNotesShock += respiratorySupportHelper(respiratorySupportList, uhid);
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return respiratorySupportNotesShock;
	}

	// Caffeine Treatment Detail Fetching Function
	public String getCaffeineDetailApnea(List<SaRespApnea> apneaList, String uhid) throws InicuDatabaseExeption {
		String caffeineNotes = "";
		Timestamp firstStartTime, lastStopTime;
		firstStartTime = lastStopTime = null;
		try {
			for (int i = 0; i < apneaList.size(); i++) {
				SaRespApnea apneObj = (SaRespApnea) apneaList.get(i);
				if (apneObj.getCaffeineAction() != null && (apneObj.getCaffeineAction()).equalsIgnoreCase("start")) {
					if (firstStartTime == null) {
						firstStartTime = apneObj.getAssessmentTime();
					}
				}

				if (apneObj.getCaffeineAction() != null && (apneObj.getCaffeineAction()).equalsIgnoreCase("stop")) {
					lastStopTime = apneObj.getAssessmentTime();
				}
			}

			if (firstStartTime != null) {
				caffeineNotes += "Baby's treatment with caffeine was started on " + getDateFromTimestamp(firstStartTime)
						+ "(DOL#" + getDayOfLife(uhid, firstStartTime) + ")";
				String date, visitDate;
				date = getDateFromTimestamp(firstStartTime);
				visitDate = date.substring(6, 10) + "-" + date.substring(3, 5) + "-" + date.substring(0, 2);
				String queryGestationApnea = "SELECT corrected_ga FROM baby_visit WHERE " + "uhid='" + uhid
						+ "' and visitdate >='" + visitDate + "' and corrected_ga IS NOT NULL";
				List<String> gestationValueListApnea = inicuDao.getListFromNativeQuery(queryGestationApnea);
				if (!BasicUtils.isEmpty(gestationValueListApnea)) {
					caffeineNotes += " at ";
					String corrGa = (String) gestationValueListApnea.get(0);
					String[] corrGaString = corrGa.split(",");
					if (corrGaString[0].equalsIgnoreCase("1")) {
						caffeineNotes += corrGaString[0] + " week ";
					}

					if (!corrGaString[0].equalsIgnoreCase("0") && !corrGaString[0].equalsIgnoreCase("1")) {
						caffeineNotes += corrGaString[0] + " weeks ";
					}

					if (corrGaString[1].equalsIgnoreCase("1")) {
						caffeineNotes += "and " + corrGaString[1] + " day of CGA(Corrected) ";
					}

					if (!corrGaString[1].equalsIgnoreCase("0") && !corrGaString[1].equalsIgnoreCase("1")) {
						caffeineNotes += "and " + corrGaString[1] + " days of CGA(Corrected) ";
					}
				}
			}

			if (lastStopTime != null) {
				caffeineNotes += "and stopped on " + getDateFromTimestamp(lastStopTime) + "(DOL#"
						+ getDayOfLife(uhid, lastStopTime) + ") at ";
				String queryGestationApnea = "SELECT corrected_ga FROM baby_visit WHERE " + "uhid='" + uhid
						+ "' and visitdate >='" + getDateFromTimestamp(lastStopTime) + "' and corrected_ga IS NOT NULL";
				List<String> gestationValueListApnea = inicuDao.getListFromNativeQuery(queryGestationApnea);
				if (!BasicUtils.isEmpty(gestationValueListApnea)) {
					String corrGa = (String) gestationValueListApnea.get(0);
					String[] corrGaString = corrGa.split(",");
					if (corrGaString[0].equalsIgnoreCase("1")) {
						caffeineNotes += corrGaString[0] + " week ";
					}

					if (!corrGaString[0].equalsIgnoreCase("0") && !corrGaString[0].equalsIgnoreCase("1")) {
						caffeineNotes += corrGaString[0] + " weeks ";
					}

					if (corrGaString[1].equalsIgnoreCase("1")) {
						caffeineNotes += "and " + corrGaString[1] + " day of CGA(Corrected). ";
					}

					if (!corrGaString[1].equalsIgnoreCase("0") && !corrGaString[1].equalsIgnoreCase("1")) {
						caffeineNotes += "and " + corrGaString[1] + " days of CGA(Corrected). ";
					}

					if(apneaList.get(0).getCummulative_number_of_episodes()!=null && apneaList.get(0).getCummulative_number_of_episodes()!=0) {
						caffeineNotes += "Cummulative number of apnea episodes were " + apneaList.get(0).getCummulative_number_of_episodes() + ". ";
					}


				}
			} else {
				caffeineNotes += ". ";
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return caffeineNotes;
	}

	// Medication of Apnea Fetching Function
	public String getMedicationOfApnea(List<SaRespApnea> apneaList, boolean isSkip) throws InicuDatabaseExeption {
		String medicationNotesApnea = "";
		List<String> finalEventIdListApnea = new ArrayList<>();
		try {
			for (int i = 0; i < apneaList.size(); i++) {
				SaRespApnea apneaObj = (SaRespApnea) apneaList.get(i);
				if (apneaObj != null && apneaObj.getApneaid() != null) {
					String saRespApneaIdApnea = "'" + apneaObj.getApneaid().toString() + "'";
					finalEventIdListApnea.add(saRespApneaIdApnea);
				}
			}

			if (!BasicUtils.isEmpty(finalEventIdListApnea)) {
				String finalEventIdListStringApnea = finalEventIdListApnea.toString();
				finalEventIdListStringApnea = finalEventIdListStringApnea.replace("[", "");
				finalEventIdListStringApnea = finalEventIdListStringApnea.replace("]", "");
				medicationNotesApnea += getMedicationHelper(finalEventIdListStringApnea, "Apnea"
                        , apneaList.get(0).getUhid(), isSkip);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return medicationNotesApnea;
	}

	// Discharge Detail Fetching Function
	public String getDischargeDetailApnea(List<SaRespApnea> apneaList) throws InicuDatabaseExeption {
		String dischargeNotesApnea = "";
		int apneaFreeDayAfterStoppingCaffeine = 0;
		try {
			for (int i = 0; i < apneaList.size(); i++) {
				SaRespApnea apneaObj = (SaRespApnea) apneaList.get(i);
				if (apneaObj != null && apneaObj.getApnea_free_days_after_caffeine() != null
						&& apneaObj.getApnea_free_days_after_caffeine() != 0) {
					apneaFreeDayAfterStoppingCaffeine = apneaObj.getApnea_free_days_after_caffeine();
				}
			}

			if (apneaFreeDayAfterStoppingCaffeine == 1) {
				dischargeNotesApnea += "Baby was discharged after " + apneaFreeDayAfterStoppingCaffeine
						+ " apnea free day(after stopping caffeine). ";
			}

			if (apneaFreeDayAfterStoppingCaffeine != 0 && apneaFreeDayAfterStoppingCaffeine != 1) {
				dischargeNotesApnea += "Baby was discharged after " + apneaFreeDayAfterStoppingCaffeine
						+ " apnea free days(after stopping caffeine). ";
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return dischargeNotesApnea;
	}

	// Causes of Apnea Fetching Function
	public String getCausesOfApnea(List<SaRespApnea> apneaList) throws InicuDatabaseExeption {
		String causesNameApnea, causesUniqueIdApnea;
		causesNameApnea = causesUniqueIdApnea = "";
		List<String> causesIdList = new ArrayList<>();
		try {
			for (int i = 0; i < apneaList.size(); i++) {
				SaRespApnea apneaObj = (SaRespApnea) apneaList.get(i);
				if (apneaObj != null && apneaObj.getApneaCause() != null) {
					causesIdList.add(apneaObj.getApneaCause());
				}
			}

			causesUniqueIdApnea += listProcessingHelper(causesIdList);
			if (!BasicUtils.isEmpty(causesUniqueIdApnea)) {
				String queryCausesNameApnea = "SELECT apneacause FROM  ref_apneacause WHERE apneacauseid " + "IN ("
						+ (causesUniqueIdApnea) + ")";
				List<String> causesNameListApnea = inicuDao.getListFromNativeQuery(queryCausesNameApnea);
				if (!BasicUtils.isEmpty(causesNameListApnea)) {
					if (causesNameListApnea.size() == 1) {
						causesNameApnea += "The cause of Apnea was ";
					} else {
						causesNameApnea += "The causes of Apnea were ";
					}

					String causesNameListStringApnea = causesNameListApnea.toString();
					causesNameListStringApnea = causesNameListStringApnea.replace("[", "");
					causesNameListStringApnea = causesNameListStringApnea.replace("]", "");
					if(causesNameListStringApnea.indexOf(",")!=-1) {
						causesNameListStringApnea = formatString(causesNameListStringApnea);
					}
					causesNameApnea += causesNameListStringApnea + ". ";
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return causesNameApnea;
	}

	// Old Episodes Inactive Notes of Apnea Fetching Function
	public String getOldInactiveNotesApnea(List<SaRespApnea> oldApneaList, int epCountApnea)
			throws InicuDatabaseExeption {
		String oldInactiveNotes = "";
		try {
			if (epCountApnea == 1) {
				return oldInactiveNotes;
			}

			for (int i = 0; i < oldApneaList.size(); i++) {
				SaRespApnea apneaObj = (SaRespApnea) oldApneaList.get(i);
				if (apneaObj.getApneaComment() != null) {
					oldInactiveNotes = apneaObj.getApneaComment();
				}
			}

			if (epCountApnea > 2) {
				oldInactiveNotes = oldInactiveNotes.substring(oldInactiveNotes.indexOf('\n') + 1);

			}
			if (epCountApnea > 1) {
				oldInactiveNotes = oldInactiveNotes.replace("Now baby is Apnea free since", "Baby became Apnea free on");
			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return oldInactiveNotes;
	}

	/**
	 * This method generates Inactive Notes for PPHN
	 *
	 * @param uhid
	 * @param pphn
	 * @throws InicuDatabaseExeption
	 */
	public String generateInactiveNotesPPHN(InicuDao inicuDaoObj, String uhid, String continuedMedication,
			AssessmentRespSystemPOJO respSystem, String tempEventId) throws InicuDatabaseExeption {
		if (inicuDaoObj != null) {
			inicuDao = inicuDaoObj;
		}
		// Creating Inactive Notes from here
		String progressNotesPphn = "";
		String htmlNextLine = System.getProperty("line.separator");
		try {
			// Fetching Current Episode Number for PPHN
			int epCountPphn = 1;
			String queryEpCountPphn = "SELECT MAX(episode_number) FROM sa_resp_pphn WHERE uhid='" + uhid + "'";
			List<Integer> epCountListPphn = inicuDao.getListFromNativeQuery(queryEpCountPphn);
			if (!BasicUtils.isEmpty(epCountListPphn)) {
				epCountPphn = epCountListPphn.get(0).intValue();
				if (epCountPphn != 1) {
					progressNotesPphn = "Baby developed " + epCountPphn + " episodes of PPHN "
							+ "during hospital stay. " + htmlNextLine + " Episode 1 : ";
				}
			}

			// Old Episodes Inactive Notes List of PPHN Generating Query
			List<SaRespPphn> oldPphnList = new ArrayList<SaRespPphn>();
			oldPphnList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getOldInactivePPHNList(uhid));
			if (!BasicUtils.isEmpty(oldPphnList)) {
				// Old Episodes Inactive Notes of PPHN Fetching Function
				String oldInactiveNotes = getOldInactiveNotesPphn(oldPphnList, epCountPphn);
				progressNotesPphn += oldInactiveNotes + htmlNextLine;
			}

			// Current Episode
			// progressNotesPphn += "Episode " + epCountPphn + " : ";
			if (epCountPphn > 1) {
				progressNotesPphn += "Episode " + epCountPphn + " : ";
			}
			List<SaRespPphn> pphnList = new ArrayList<SaRespPphn>();
			pphnList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getPPHNList(uhid, epCountPphn));

			if (!BasicUtils.isEmpty(pphnList)) {
				// Age of Onset Data Fetching Function for PPHN
				String ageOnsetNotes = getAgeOnsetPphn(pphnList);
				progressNotesPphn += ageOnsetNotes;

				// Risk Factors Fetching Function
				String riskFactorNotes = getRiskFactorPphn(pphnList);
				progressNotesPphn += riskFactorNotes;

				// PPHN Detail Data Fetching Function
				String pphnDetailNotes = getDetailPphn(pphnList, uhid, epCountPphn);
				progressNotesPphn += pphnDetailNotes;

				// Downes Score Data Fetching Function
				String downesScoreNotes = getDownesScorePphn(pphnList, uhid, epCountPphn);
				progressNotesPphn += downesScoreNotes;

				// Investigation Order Detail Fetching Function
				String investigationOrderNotes = getInvestigationOrderPphn(pphnList);
				progressNotesPphn += investigationOrderNotes;

				// Respiratory Support Detail Fetching Function
				String respiratorySupportNotes = getRespiratorySupportPphn(pphnList, uhid, tempEventId);
				progressNotesPphn += respiratorySupportNotes;

				// Surfactant Detail Fetching Function
				String surfactantNotes = getSurfactantPphn(pphnList, uhid);
				progressNotesPphn += surfactantNotes;

				// Medication of PPHN Data Fetching Function
				String medicationNotes = getMedicationOfPphn(pphnList, false);
				progressNotesPphn += medicationNotes + continuedMedication;

				// Causes of PPHN Fetching Function
				String causesNotes = getCausesOfPphn(pphnList);
				progressNotesPphn += causesNotes;

				// Bpd Respiratory of PPHN Fetching Function
				String bpdRespiratoryNotes = getCausesOfBpdRespiratory(uhid);
				if (!BasicUtils.isEmpty(bpdRespiratoryNotes)) {
					progressNotesPphn += bpdRespiratoryNotes;
				}

			}

			// Inactive Notes ending here
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return progressNotesPphn;
	}

	// Functions for PPHN
	// Age Onset Data Fetching Function
	public String getAgeOnsetPphn(List<SaRespPphn> pphnList) throws InicuDatabaseExeption {
		String ageOnSetNotesPphn = "";
		boolean done = false;
		try {
			for (int i = 0; i < pphnList.size(); i++) {
				SaRespPphn pphnObj = (SaRespPphn) pphnList.get(i);
				if (pphnObj != null && done != true && pphnObj.getAgeatonset() != null) {
					if (pphnObj.getAgeatonset().equalsIgnoreCase("0")) {
						ageOnSetNotesPphn += "Baby was diagnosed to have PPHN, at birth ";
					} else {
						if (pphnObj.getAgeinhoursdays() != null && pphnObj.getAgeinhoursdays() == true) {
							ageOnSetNotesPphn += "Baby was diagnosed to have PPHN, at the age of "
									+ pphnObj.getAgeatonset();
							if (pphnObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesPphn += " hour ";
							} else {
								ageOnSetNotesPphn += " hours ";
							}
						} else {
							ageOnSetNotesPphn += "Baby was diagnosed to have PPHN, at the age of "
									+ pphnObj.getAgeatonset();
							if (pphnObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesPphn += " day ";
							} else {
								ageOnSetNotesPphn += " days ";
							}
						}
					}

					if (pphnObj.getLabileOxygenation() != null && pphnObj.getLabileOxygenation() == true) {
						ageOnSetNotesPphn += "with labile oxygenation. ";
					} else {
						ageOnSetNotesPphn += ". ";
					}
					done = true;
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ageOnSetNotesPphn;
	}

	// Risk Factor Data Fetching Function
	public String getRiskFactorPphn(List<SaRespPphn> pphnList) throws InicuDatabaseExeption {
		String riskFactorNamePphn, riskFactorUniqueIdPphn;
		riskFactorNamePphn = riskFactorUniqueIdPphn = "";
		List<String> riskFactorIdList = new ArrayList<>();
		try {
			for (int i = 0; i < pphnList.size(); i++) {
				SaRespPphn pphnObj = (SaRespPphn) pphnList.get(i);
				if (pphnObj != null && pphnObj.getRiskfactor() != null) {
					riskFactorIdList.add(pphnObj.getRiskfactor());
				}
			}

			riskFactorUniqueIdPphn += listProcessingHelper(riskFactorIdList);
			if (!BasicUtils.isEmpty(riskFactorUniqueIdPphn)) {
				String queryRiskFactorNamePphn = "SELECT riskfactor FROM  ref_pphnriskfactor "
						+ "WHERE riskfactorid IN (" + (riskFactorUniqueIdPphn) + ")";
				List<String> riskFactorNameListPphn = inicuDao.getListFromNativeQuery(queryRiskFactorNamePphn);
				if (riskFactorNameListPphn.size() == 1) {
					riskFactorNamePphn += "The risk factor was ";
				} else {
					riskFactorNamePphn += "The risk factors were ";
				}

				String riskFactorNameListStringPphn = riskFactorNameListPphn.toString();
				riskFactorNameListStringPphn = riskFactorNameListStringPphn.replace("[", "");
				riskFactorNameListStringPphn = riskFactorNameListStringPphn.replace("]", "");
				if(riskFactorNameListStringPphn.indexOf(",")!=-1) {
					riskFactorNameListStringPphn = formatString(riskFactorNameListStringPphn);
				}
				riskFactorNamePphn += riskFactorNameListStringPphn + ". ";
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return riskFactorNamePphn;
	}

	// PPHN Detail Data Fetching Function
	public String getDetailPphn(List<SaRespPphn> pphnList, String uhid, int epCountPphn) throws InicuDatabaseExeption {
		String pphnDetailNotes = "";
		int initialSD, initialPP, initialSP, initialOI, worstSD, worstPP, worstSP, worstOI;
		initialSD = initialPP = initialSP = initialOI = worstSD = worstPP = worstSP = worstOI = Integer.MIN_VALUE;
		Timestamp worstSDTime, worstPPTime, worstSPTime, worstOITime;
		worstSDTime = worstPPTime = worstSPTime = worstOITime = null;
		try {
			SaRespPphn pphnObj = (SaRespPphn) pphnList.get(0);
			if (pphnObj != null) {
				boolean isFirstdone = false;
				if (pphnObj.getLabileDifference() != null || pphnObj.getPulmonaryPressure() != null
						|| pphnObj.getSystolicBp() != null || pphnObj.getOxgenationIndex() != null) {
					pphnDetailNotes += "At first Assessment, ";
				}

				if (pphnObj.getLabileDifference() != null) {
					initialSD = Integer.valueOf(pphnObj.getLabileDifference());
					pphnDetailNotes += "lab preductal and lab post ductal SpO2 difference was " + initialSD;

					if (pphnObj.getPulmonaryPressure() == null && pphnObj.getSystolicBp() == null
							&& pphnObj.getOxgenationIndex() == null) {
						pphnDetailNotes += ". ";
					} else {
						pphnDetailNotes += " with ";
					}
				}

				if (pphnObj.getPulmonaryPressure() != null) {
					initialPP = Integer.valueOf(pphnObj.getPulmonaryPressure());
					pphnDetailNotes += "pulmonary pressure of " + initialPP + " mmHg ";

					if (isFirstdone == false) {
						if (pphnObj.getSystolicBp() == null && pphnObj.getOxgenationIndex() == null) {
							pphnDetailNotes += ". ";
						} else {
							pphnDetailNotes += ", ";
						}
					} else {
						isFirstdone = true;
					}
				}

				if (pphnObj.getSystolicBp() != null) {
					initialSP = Integer.valueOf(pphnObj.getSystolicBp());
					pphnDetailNotes += "systemic systolic pressure of " + initialSP + " mmHg ";

					if (isFirstdone == false) {
						if (pphnObj.getOxgenationIndex() == null) {
							pphnDetailNotes += ". ";
						} else {
							pphnDetailNotes += ", ";
						}
					} else {
						isFirstdone = true;
					}

				}

				if (pphnObj.getOxgenationIndex() != null) {
					initialOI = Integer.valueOf(pphnObj.getOxgenationIndex());
					pphnDetailNotes += "oxygenation index of " + initialOI + ". ";
				}

			}

			for (int i = 0; i < pphnList.size(); i++) {
				pphnObj = (SaRespPphn) pphnList.get(i);
				if (pphnObj != null) {
					if (pphnObj.getLabileDifference() != null) {
						worstSD = Math.max(worstSD, Integer.valueOf(pphnObj.getLabileDifference()));
						worstSDTime = pphnObj.getAssessmentTime();
					}

					if (pphnObj.getPulmonaryPressure() != null) {
						worstPP = Math.max(worstPP, Integer.valueOf(pphnObj.getPulmonaryPressure()));
						worstPPTime = pphnObj.getAssessmentTime();
					}

					if (pphnObj.getSystolicBp() != null) {
						worstSP = Math.max(worstSP, Integer.valueOf(pphnObj.getSystolicBp()));
						worstSPTime = pphnObj.getAssessmentTime();
					}

					if (pphnObj.getOxgenationIndex() != null) {
						worstOI = Math.max(worstOI, Integer.valueOf(pphnObj.getOxgenationIndex()));
						worstOITime = pphnObj.getAssessmentTime();
					}
				}
			}

			boolean isFirstdone = false;
			if (worstSD != Integer.MIN_VALUE || worstPP != Integer.MIN_VALUE || worstSP != Integer.MIN_VALUE
					|| worstOI != Integer.MIN_VALUE) {
				pphnDetailNotes += "During this episode, the worst ";
			}

			if (worstSD != Integer.MIN_VALUE) {
				pphnDetailNotes += "lab preductal and lab post ductal SpO2 difference was " + worstSD + " at DOL#"
						+ getDayOfLife(uhid, worstSDTime);

				if (worstPP == Integer.MIN_VALUE && worstSP == Integer.MIN_VALUE && worstOI == Integer.MIN_VALUE) {
					pphnDetailNotes += ". ";
				} else {
					pphnDetailNotes += " with ";
				}
			}

			if (worstPP != Integer.MIN_VALUE) {
				pphnDetailNotes += "pulmonary pressure of " + worstPP + " mmHg at DOL#"
						+ getDayOfLife(uhid, worstPPTime);

				if (isFirstdone == false) {
					if (worstSP == Integer.MIN_VALUE && worstOI == Integer.MIN_VALUE) {
						pphnDetailNotes += ". ";
					} else {
						pphnDetailNotes += ", ";
					}
				} else {
					isFirstdone = true;
				}
			}

			if (worstSP != Integer.MIN_VALUE) {
				pphnDetailNotes += "systemic systolic pressure of " + worstSP + " mmHg at DOL#"
						+ getDayOfLife(uhid, worstSPTime);

				if (isFirstdone == false) {
					if (worstOI == Integer.MIN_VALUE) {
						pphnDetailNotes += ". ";
					} else {
						pphnDetailNotes += ", ";
					}
				} else {
					isFirstdone = true;
				}

			}

			if (worstOI != Integer.MIN_VALUE) {
				pphnDetailNotes += "oxygenation index of " + worstOI + " at DOL#" + getDayOfLife(uhid, worstOITime)
						+ ". ";
			}
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return pphnDetailNotes;
	}

	// Downes Score Data Fetching Function
	public String getDownesScorePphn(List<SaRespPphn> pphnList, String uhid, int epCountPphn)
			throws InicuDatabaseExeption {
		String downesScoreNotes = "";
		boolean isInitialDownesScore = true;
		List<Integer> downesScoreIdList = new ArrayList<>();
		try {
			for (int i = 0; i < pphnList.size(); i++) {
				SaRespPphn pphnObj = (SaRespPphn) pphnList.get(i);
				if (pphnObj != null) {
					if (pphnObj.getDownesscoreid() != null) {
						downesScoreIdList.add(Integer.valueOf(pphnObj.getDownesscoreid()));
					} else {
						if (i == 0) {
							isInitialDownesScore = false;
						}
					}
				}
			}

			if (!BasicUtils.isEmpty(downesScoreIdList)) {
				String downesScoreIdListString = downesScoreIdList.toString();
				downesScoreIdListString = downesScoreIdListString.replace("[", "");
				downesScoreIdListString = downesScoreIdListString.replace("]", "");

				String querydownesScorePphn = "SELECT downesscore,downesscoreid from score_downes "
						+ "WHERE downesscoreid " + "IN (" + (downesScoreIdListString) + ") and "
						+ "downesscore IS NOT NULL";
				List<Object> downesScoreValueListPphn = inicuDao.getListFromNativeQuery(querydownesScorePphn);
				if (!BasicUtils.isEmpty(downesScoreValueListPphn)) {
					int worstDownesScore, initialDownesScore;
					worstDownesScore = initialDownesScore = 0;
					BigInteger worstDownesScoreId = null;
					Object[] downesScoreValueObj = (Object[]) downesScoreValueListPphn.get(0);
					worstDownesScore = initialDownesScore = (int) downesScoreValueObj[0];
					for (int i = 0; i < downesScoreValueListPphn.size(); i++) {
						downesScoreValueObj = (Object[]) downesScoreValueListPphn.get(i);
						if (worstDownesScore <= (int) downesScoreValueObj[0]) {
							worstDownesScore = (int) downesScoreValueObj[0];
							worstDownesScoreId = (BigInteger) downesScoreValueObj[1];
						}
					}

					if (isInitialDownesScore) {
						downesScoreNotes += "The downe's score value at the time of first assessment was "
								+ initialDownesScore + ". ";
					}

					String queryWorstDownesScoreTime = "SELECT assessment_time FROM sa_resp_pphn WHERE uhid='" + uhid
							+ "' and downesscoreid='" + worstDownesScoreId + "' and episode_number=" + epCountPphn;
					List<Timestamp> worstDownesScoreTimeValue = inicuDao
							.getListFromNativeQuery(queryWorstDownesScoreTime);

					if (worstDownesScore != initialDownesScore) {
						downesScoreNotes += "During this episode, the worst downe's score values was "
								+ worstDownesScore + " at DOL#"
								+ getDayOfLife(uhid, (Timestamp) worstDownesScoreTimeValue.get(0)) + ". ";
					} else {
						if (isInitialDownesScore != true && downesScoreValueListPphn.size() == 1) {
							downesScoreNotes += "During this episode, the worst downe's score values was "
									+ worstDownesScore + " at DOL#"
									+ getDayOfLife(uhid, (Timestamp) worstDownesScoreTimeValue.get(0)) + ". ";
						}
					}
				}
			}
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return downesScoreNotes;
	}

	// Investigation Order Detail Fetch Function
	public String getInvestigationOrderPphn(List<SaRespPphn> pphnList) throws InicuDatabaseExeption {
		String investigationOrderNotesPphn = "";
		List<String> pphnIdList = new ArrayList<String>();
		try {
			for (int i = 0; i < pphnList.size(); i++) {
				SaRespPphn pphnObj = (SaRespPphn) pphnList.get(i);
				pphnIdList.add("'" + pphnObj.getResppphnid().toString() + "'");

			}

			if (!BasicUtils.isEmpty(pphnIdList)) {
				String pphnIdListString = pphnIdList.toString();
				pphnIdListString = pphnIdListString.replace("[", "");
				pphnIdListString = pphnIdListString.replace("]", "");
				List<String> investigationOrderHelperList = new ArrayList<>();
				investigationOrderHelperList = getInvestigationOrderHelper(pphnIdListString, "pphn");
				if (!BasicUtils.isEmpty(investigationOrderHelperList)) {
					Set<String> uniqueInvestigationOrderHelperList = new HashSet<String>(investigationOrderHelperList);
					String uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperList.toString();
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("[",
							"");
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("]",
							"");
					if(uniqueInvestigationOrderHelperListString.indexOf(",")!=-1) {
						uniqueInvestigationOrderHelperListString = formatString(uniqueInvestigationOrderHelperListString);
					}
					if (uniqueInvestigationOrderHelperList.size() == 1) {
						investigationOrderNotesPphn += "Investigation done during this episode was "
								+ uniqueInvestigationOrderHelperListString + ". ";
					} else {
						investigationOrderNotesPphn += "Investigations done during this episode were "
								+ uniqueInvestigationOrderHelperListString + ". ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return investigationOrderNotesPphn;
	}

	// Respiratory Support Detail Fetching Function
	public String getRespiratorySupportPphn(List<SaRespPphn> pphnList, String uhid, String eventId) throws InicuDatabaseExeption {
		String respiratorySupportNotesPphn = "";
		List<String> respSupportIdListPphn = new ArrayList<>();
		try {
			for (int i = 0; i < pphnList.size(); i++) {
				SaRespPphn pphnObj = (SaRespPphn) pphnList.get(i);
				respSupportIdListPphn.add("'" + pphnObj.getResppphnid().toString() + "'");
			}

			if (!BasicUtils.isEmpty(respSupportIdListPphn)) {
				String respSupportIdListStringPphn = respSupportIdListPphn.toString();
				respSupportIdListStringPphn = respSupportIdListStringPphn.replace("[", "");
				respSupportIdListStringPphn = respSupportIdListStringPphn.replace("]", "");

                if (!BasicUtils.isEmpty(eventId)) {
                    respSupportIdListStringPphn += ",'" + eventId + "'";
                }


                String queryRespiratorySupport = "SELECT obj FROM RespSupport obj WHERE uhid='" + uhid + "' and eventid in (" + respSupportIdListStringPphn
                        + ") OR (isEventidUpdated = 'false' and eventname = 'PPHN') order by creationtime";
                List<RespSupport> respiratorySupportList = inicuDao.getListFromMappedObjQuery(queryRespiratorySupport);


                if (!BasicUtils.isEmpty(respiratorySupportList)) {
					respiratorySupportNotesPphn += respiratorySupportHelper(respiratorySupportList, uhid);
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return respiratorySupportNotesPphn;
	}

	// Surfactant Detail Fetch Function
	public String getSurfactantPphn(List<SaRespPphn> pphnList, String uhid) throws InicuDatabaseExeption {
		String surfactantNotesPphn = "";
		List<String> surfactantDolListPphn = new ArrayList<>();
		String prevSurfactantName, currSurfactantName;
		prevSurfactantName = currSurfactantName = null;
		boolean isSamesurfactant = true;
		int countSurfactant = 0;
		try {
			for (int i = 0; i < pphnList.size(); i++) {
				SaRespPphn pphnObj = (SaRespPphn) pphnList.get(i);
				if (pphnObj != null && pphnObj.getSurfactantDose() != null) {
					countSurfactant++;
					surfactantDolListPphn.add(getDayOfLife(uhid, pphnObj.getAssessmentTime()).toString());
					if (prevSurfactantName == null) {
						prevSurfactantName = currSurfactantName = pphnObj.getSufactantname();
					} else {
						currSurfactantName = pphnObj.getSufactantname();
						if (prevSurfactantName != currSurfactantName) {
							isSamesurfactant = false;
						} else {
							prevSurfactantName = currSurfactantName;
						}
					}
				}
			}

			if (!BasicUtils.isEmpty(surfactantDolListPphn)) {
				String surfactantDolListPphnString = surfactantDolListPphn.toString();
				surfactantDolListPphnString = surfactantDolListPphnString.replace("[", "");
				surfactantDolListPphnString = surfactantDolListPphnString.replace("]", "");

				if (isSamesurfactant) {
					if (countSurfactant == 1) {
						surfactantNotesPphn += "Baby was treated with " + countSurfactant + " dose of Surfactant ("
								+ currSurfactantName + ") on DOL#" + surfactantDolListPphnString + ". ";
					} else {
						surfactantNotesPphn += "Baby was treated with " + countSurfactant + " doses of Surfactant ("
								+ currSurfactantName + ") on DOL#" + surfactantDolListPphnString + " respectively. ";
					}
				} else {
					if (countSurfactant == 1) {
						surfactantNotesPphn += "Baby was treated with " + countSurfactant
								+ " dose of Surfactant on DOL#" + surfactantDolListPphnString + ". ";
					} else {
						surfactantNotesPphn += "Baby was treated with " + countSurfactant
								+ " doses of Surfactant on DOL#" + surfactantDolListPphnString + " respectively. ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return surfactantNotesPphn;
	}

	// Medication of PPHN Fetching Function
	public String getMedicationOfPphn(List<SaRespPphn> pphnList, boolean isSkip) throws InicuDatabaseExeption {
		String medicationNotesPphn = "";
		List<String> finalEventIdListPphn = new ArrayList<>();
		try {
			for (int i = 0; i < pphnList.size(); i++) {
				SaRespPphn pphnObj = (SaRespPphn) pphnList.get(i);
				if (pphnObj != null && pphnObj.getResppphnid() != null) {
					String saRespPphnIdPphn = "'" + pphnObj.getResppphnid().toString() + "'";
					finalEventIdListPphn.add(saRespPphnIdPphn);
				}
			}

			if (!BasicUtils.isEmpty(finalEventIdListPphn)) {
				String finalEventIdListStringPphn = finalEventIdListPphn.toString();
				finalEventIdListStringPphn = finalEventIdListStringPphn.replace("[", "");
				finalEventIdListStringPphn = finalEventIdListStringPphn.replace("]", "");
				medicationNotesPphn += getMedicationHelper(finalEventIdListStringPphn, "PPHN"
                        , pphnList.get(0).getUhid(), isSkip);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return medicationNotesPphn;
	}

	// Causes of PPHN Fetching Function
	public String getCausesOfPphn(List<SaRespPphn> pphnList) throws InicuDatabaseExeption {
		String causesNamePphn, causesUniqueIdPphn;
		causesNamePphn = causesUniqueIdPphn = "";
		List<String> causesIdList = new ArrayList<>();
		try {
			for (int i = 0; i < pphnList.size(); i++) {
				SaRespPphn pphnObj = (SaRespPphn) pphnList.get(i);
				if (pphnObj != null && pphnObj.getCauseofpphn() != null) {
					causesIdList.add(pphnObj.getCauseofpphn());
				}
			}

			causesUniqueIdPphn += listProcessingHelper(causesIdList);
			if (!BasicUtils.isEmpty(causesUniqueIdPphn)) {
				String[] causesNameString = causesUniqueIdPphn.split(",");
				if (!BasicUtils.isEmpty(causesNameString)) {
					if (causesNameString.length == 1) {
						causesNamePphn += "The cause of Pphn was ";
					} else {
						causesNamePphn += "The causes of Pphn were ";
					}

					int firstFactorDone = 0;
					for (String s : causesNameString) {
						s = s.trim();
						if (s.equalsIgnoreCase("'RS001'")) {
							s = "Meconium Aspiration Syndrome";
							firstFactorDone++;
						}

						if (s.equalsIgnoreCase("'RS002'")) {
							s = "Pneumonia";
							firstFactorDone++;
						}

						if (s.equalsIgnoreCase("'RS003'")) {
							s = "Asphyxia";
							firstFactorDone++;
						}

						if (firstFactorDone == 1) {
							causesNamePphn += s;
						} else {
							causesNamePphn += ", " + s;
						}
					}

					if(causesNamePphn.indexOf(",")!=-1) {
						causesNamePphn = formatString(causesNamePphn);
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return causesNamePphn;
	}

	// Old Episodes Inactive Notes of PPHN Fetching Function
	public String getOldInactiveNotesPphn(List<SaRespPphn> oldPphnList, int epCountPphn) throws InicuDatabaseExeption {
		String oldInactiveNotes = "";
		try {
			if (epCountPphn == 1) {
				return oldInactiveNotes;
			}

			for (int i = 0; i < oldPphnList.size(); i++) {
				SaRespPphn pphnObj = (SaRespPphn) oldPphnList.get(i);
				if (pphnObj.getProgressnotes() != null) {
					oldInactiveNotes = pphnObj.getProgressnotes();
				}
			}

			if (epCountPphn > 2) {
				oldInactiveNotes = oldInactiveNotes.substring(oldInactiveNotes.indexOf('\n') + 1);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return oldInactiveNotes;
	}

	/**
	 * This method generates Inactive Notes for Pneumothorax
	 *
	 * @param uhid
	 * @param pneumothorax
	 * @throws InicuDatabaseExeption
	 */
	public String generateInactiveNotesPneumothorax(InicuDao inicuDaoObj, String uhid, String continuedMedication,
			AssessmentRespSystemPOJO respSystem, String tempEventId) throws InicuDatabaseExeption {
		if (inicuDaoObj != null) {
			inicuDao = inicuDaoObj;
		}
		// Creating Inactive Notes from here
		String progressNotesPneumothorax = "";
		String htmlNextLine = System.getProperty("line.separator");
		try {
			// Fetching Current Episode Number for PPHN
			int epCountPneumothorax = 1;
			String queryEpCountPneumothorax = "SELECT MAX(episode_number) FROM sa_resp_pneumothorax WHERE uhid='" + uhid
					+ "'";
			List<Integer> epCountListPneumothorax = inicuDao.getListFromNativeQuery(queryEpCountPneumothorax);
			if (!BasicUtils.isEmpty(epCountListPneumothorax)) {
				epCountPneumothorax = epCountListPneumothorax.get(0).intValue();
				if (epCountPneumothorax != 1) {
					progressNotesPneumothorax = "Baby developed " + epCountPneumothorax + " episodes of Pneumothorax "
							+ "during hospital stay. " + htmlNextLine + " Episode 1 : ";
				}
			}

			// Old Episodes Inactive Notes List of Generating Query
			List<SaRespPneumo> oldPneumothoraxList = new ArrayList<SaRespPneumo>();
			oldPneumothoraxList = inicuDao
					.getListFromMappedObjQuery(HqlSqlQueryConstants.getOldInactivePneumothoraxList(uhid));
			if (!BasicUtils.isEmpty(oldPneumothoraxList)) {
				// Old Episodes Inactive Notes of Pneumothorax Fetching Function
				String oldInactiveNotes = getOldInactiveNotesPneumothorax(oldPneumothoraxList, epCountPneumothorax);
				progressNotesPneumothorax += oldInactiveNotes + htmlNextLine;
			}

			// Current Episode
			// progressNotesPneumothorax += "Episode " + epCountPneumothorax + " : ";
			if (epCountPneumothorax > 1) {
				progressNotesPneumothorax += "Episode " + epCountPneumothorax + " : ";
			}
			List<SaRespPneumo> pneumothoraxList = new ArrayList<SaRespPneumo>();
			pneumothoraxList = inicuDao
					.getListFromMappedObjQuery(HqlSqlQueryConstants.getPneumothoraxList(uhid, epCountPneumothorax));
			if (!BasicUtils.isEmpty(pneumothoraxList)) {
				// Age of Onset Data Fetching Function for Pneumothorax
				String ageOnsetNotes = getAgeOnsetPneumothorax(pneumothoraxList);
				progressNotesPneumothorax += ageOnsetNotes;

				// Risk Factors Fetching Function
				String riskFactorNotes = getRiskFactorPneumothorax(pneumothoraxList);
				progressNotesPneumothorax += riskFactorNotes;

				// Downes Score Data Fetching Function
				String downesScoreNotes = getDownesScorePneumothorax(pneumothoraxList, uhid, epCountPneumothorax);
				progressNotesPneumothorax += downesScoreNotes;

				// Investigation Order Detail Fetching Function
				String investigationOrderNotes = getInvestigationOrderPneumothorax(pneumothoraxList);
				progressNotesPneumothorax += investigationOrderNotes;

				// Respiratory Support Detail Fetching Function
				String respiratorySupportNotes = getRespiratorySupportPneumothorax(pneumothoraxList, uhid, tempEventId);
				progressNotesPneumothorax += respiratorySupportNotes;

				// Surfactant Detail Fetching Function
				String surfactantNotes = getSurfactantPneumothorax(pneumothoraxList, uhid);
				progressNotesPneumothorax += surfactantNotes;

				// Medication of Pneumothorax Data Fetching Function
				String medicationNotes = getMedicationOfPneumothorax(pneumothoraxList, false);
				progressNotesPneumothorax += medicationNotes + continuedMedication;

				// Causes of Pneumothorax Fetching Function
				String causesNotes = getCausesOfPneumothorax(pneumothoraxList);
				progressNotesPneumothorax += causesNotes;

				// Bpd Respiratory of Pneumothorax Fetching Function
				String bpdRespiratoryNotes = getCausesOfBpdRespiratory(uhid);
				if (!BasicUtils.isEmpty(bpdRespiratoryNotes)) {
					progressNotesPneumothorax += bpdRespiratoryNotes;
				}

			}

			// Inactive Notes ending here
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return progressNotesPneumothorax;
	}

	// Functions for Pneumothorax
	// Age Onset Data Fetching Function
	public String getAgeOnsetPneumothorax(List<SaRespPneumo> pneumothoraxList) throws InicuDatabaseExeption {
		String ageOnSetNotesPneumothorax = "";
		boolean done = false;
		try {
			for (int i = 0; i < pneumothoraxList.size(); i++) {
				SaRespPneumo pneumothoraxObj = (SaRespPneumo) pneumothoraxList.get(i);
				if (pneumothoraxObj != null && done != true && pneumothoraxObj.getAgeatonset() != null) {
					if (pneumothoraxObj.getAgeatonset().equalsIgnoreCase("0")) {
						ageOnSetNotesPneumothorax += "Baby developed Pneumothorax at birth. ";
					} else {
						if (pneumothoraxObj.getAgeinhoursdays() != null
								&& pneumothoraxObj.getAgeinhoursdays() == true) {
							ageOnSetNotesPneumothorax += "Baby developed Pneumothorax at the age of "
									+ pneumothoraxObj.getAgeatonset();
							if (pneumothoraxObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesPneumothorax += " hour. ";
							} else {
								ageOnSetNotesPneumothorax += " hours. ";
							}
						} else {
							ageOnSetNotesPneumothorax += "Baby developed Pneumothorax at the age of "
									+ pneumothoraxObj.getAgeatonset();
							if (pneumothoraxObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesPneumothorax += " day. ";
							} else {
								ageOnSetNotesPneumothorax += " days. ";
							}
						}
					}
					done = true;
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ageOnSetNotesPneumothorax;
	}

	// Risk Factor Data Fetching Function
	public String getRiskFactorPneumothorax(List<SaRespPneumo> pneumothoraxList) throws InicuDatabaseExeption {
		String riskFactorNamePneumothorax, riskFactorUniqueIdPneumothorax;
		riskFactorNamePneumothorax = riskFactorUniqueIdPneumothorax = "";
		List<String> riskFactorIdList = new ArrayList<>();
		try {
			for (int i = 0; i < pneumothoraxList.size(); i++) {
				SaRespPneumo pneumothoraxObj = (SaRespPneumo) pneumothoraxList.get(i);
				if (pneumothoraxObj != null && pneumothoraxObj.getRiskfactor() != null) {
					riskFactorIdList.add(pneumothoraxObj.getRiskfactor());
				}
			}

			riskFactorUniqueIdPneumothorax += listProcessingHelper(riskFactorIdList);
			if (!BasicUtils.isEmpty(riskFactorUniqueIdPneumothorax)) {
				String queryRiskFactorNamePneumothorax = "SELECT riskfactor FROM  ref_pneumoriskfactor "
						+ "WHERE riskfactorid IN (" + (riskFactorUniqueIdPneumothorax) + ")";
				List<String> riskFactorNameListPneumothorax = inicuDao
						.getListFromNativeQuery(queryRiskFactorNamePneumothorax);
				if (riskFactorNameListPneumothorax.size() == 1) {
					riskFactorNamePneumothorax += "The risk factor was ";
				} else {
					riskFactorNamePneumothorax += "The risk factors were ";
				}

				String riskFactorNameListStringPneumothorax = riskFactorNameListPneumothorax.toString();
				riskFactorNameListStringPneumothorax = riskFactorNameListStringPneumothorax.replace("[", "");
				riskFactorNameListStringPneumothorax = riskFactorNameListStringPneumothorax.replace("]", "");
				if(riskFactorNameListStringPneumothorax.indexOf(",")!=-1) {
					riskFactorNameListStringPneumothorax = formatString(riskFactorNameListStringPneumothorax);
				}
				riskFactorNamePneumothorax += riskFactorNameListStringPneumothorax + ". ";
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return riskFactorNamePneumothorax;
	}

	// Downes Score Data Fetching Function
	public String getDownesScorePneumothorax(List<SaRespPneumo> pneumothoraxList, String uhid, int epCountPneumothorax)
			throws InicuDatabaseExeption {
		String downesScoreNotes = "";
		boolean isInitialDownesScore = true;
		List<Integer> downesScoreIdList = new ArrayList<>();
		try {
			for (int i = 0; i < pneumothoraxList.size(); i++) {
				SaRespPneumo pneumothoraxObj = (SaRespPneumo) pneumothoraxList.get(i);
				if (pneumothoraxObj != null) {
					if (pneumothoraxObj.getDownesscoreid() != null) {
						downesScoreIdList.add(Integer.valueOf(pneumothoraxObj.getDownesscoreid()));
					} else {
						if (i == 0) {
							isInitialDownesScore = false;
						}
					}
				}
			}

			if (!BasicUtils.isEmpty(downesScoreIdList)) {
				String downesScoreIdListString = downesScoreIdList.toString();
				downesScoreIdListString = downesScoreIdListString.replace("[", "");
				downesScoreIdListString = downesScoreIdListString.replace("]", "");

				String queryDownesScorePneumothorax = "SELECT downesscore,downesscoreid from score_downes "
						+ "WHERE downesscoreid " + "IN (" + (downesScoreIdListString) + ") and "
						+ "downesscore IS NOT NULL";
				List<Object> downesScoreValueListPneumothorax = inicuDao
						.getListFromNativeQuery(queryDownesScorePneumothorax);
				if (!BasicUtils.isEmpty(downesScoreValueListPneumothorax)) {
					int worstDownesScore, initialDownesScore;
					worstDownesScore = initialDownesScore = 0;
					BigInteger worstDownesScoreId = null;
					Object[] downesScoreValueObj = (Object[]) downesScoreValueListPneumothorax.get(0);
					worstDownesScore = initialDownesScore = (int) downesScoreValueObj[0];
					for (int i = 0; i < downesScoreValueListPneumothorax.size(); i++) {
						downesScoreValueObj = (Object[]) downesScoreValueListPneumothorax.get(i);
						if (worstDownesScore <= (int) downesScoreValueObj[0]) {
							worstDownesScore = (int) downesScoreValueObj[0];
							worstDownesScoreId = (BigInteger) downesScoreValueObj[1];
						}
					}

					if (isInitialDownesScore) {
						downesScoreNotes += "The downe's score value at the time of first assessment was "
								+ initialDownesScore + ". ";
					}

					String queryWorstDownesScoreTime = "SELECT assessment_time FROM sa_resp_pneumothorax WHERE uhid='"
							+ uhid + "' and downesscoreid='" + worstDownesScoreId + "' and episode_number="
							+ epCountPneumothorax;
					List<Timestamp> worstDownesScoreTimeValue = inicuDao
							.getListFromNativeQuery(queryWorstDownesScoreTime);

					if (worstDownesScore != initialDownesScore) {
						downesScoreNotes += "During this episode, the worst downe's score values was "
								+ worstDownesScore + " at DOL#"
								+ getDayOfLife(uhid, (Timestamp) worstDownesScoreTimeValue.get(0)) + ". ";
					} else {
						if (isInitialDownesScore != true && downesScoreValueListPneumothorax.size() == 1) {
							downesScoreNotes += "During this episode, the worst downe's score values was "
									+ worstDownesScore + " at DOL#"
									+ getDayOfLife(uhid, (Timestamp) worstDownesScoreTimeValue.get(0)) + ". ";
						}
					}
				}
			}
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return downesScoreNotes;
	}

	// Investigation Order Detail Fetch Function
	public String getInvestigationOrderPneumothorax(List<SaRespPneumo> pneumothoraxList) throws InicuDatabaseExeption {
		String investigationOrderNotesPneumothorax = "";
		List<String> pneumothoraxIdList = new ArrayList<String>();
		try {
			for (int i = 0; i < pneumothoraxList.size(); i++) {
				SaRespPneumo pneumothoraxObj = (SaRespPneumo) pneumothoraxList.get(i);
				pneumothoraxIdList.add("'" + pneumothoraxObj.getResppneumothoraxid().toString() + "'");

			}

			if (!BasicUtils.isEmpty(pneumothoraxIdList)) {
				String pneumothoraxIdListString = pneumothoraxIdList.toString();
				pneumothoraxIdListString = pneumothoraxIdListString.replace("[", "");
				pneumothoraxIdListString = pneumothoraxIdListString.replace("]", "");
				List<String> investigationOrderHelperList = new ArrayList<>();
				investigationOrderHelperList = getInvestigationOrderHelper(pneumothoraxIdListString, "pneumothorax");
				if (!BasicUtils.isEmpty(investigationOrderHelperList)) {
					Set<String> uniqueInvestigationOrderHelperList = new HashSet<String>(investigationOrderHelperList);
					String uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperList.toString();
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("[",
							"");
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("]",
							"");
					if(uniqueInvestigationOrderHelperListString.indexOf(",")!=-1) {
						uniqueInvestigationOrderHelperListString = formatString(uniqueInvestigationOrderHelperListString);
					}
					if (uniqueInvestigationOrderHelperList.size() == 1) {
						investigationOrderNotesPneumothorax += "Investigation done during this episode was "
								+ uniqueInvestigationOrderHelperListString + ". ";
					} else {
						investigationOrderNotesPneumothorax += "Investigations done during this episode were "
								+ uniqueInvestigationOrderHelperListString + ". ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return investigationOrderNotesPneumothorax;
	}

	// Respiratory Support Detail Fetching Function
	public String getRespiratorySupportPneumothorax(List<SaRespPneumo> pneumothoraxList, String uhid, String eventId)
			throws InicuDatabaseExeption {
		String respiratorySupportNotesPneumothorax = "";
		List<String> respSupportIdListPneumothorax = new ArrayList<>();
		try {
			for (int i = 0; i < pneumothoraxList.size(); i++) {
				SaRespPneumo pneumothoraxObj = (SaRespPneumo) pneumothoraxList.get(i);
				respSupportIdListPneumothorax.add("'" + pneumothoraxObj.getResppneumothoraxid().toString() + "'");
			}

			if (!BasicUtils.isEmpty(respSupportIdListPneumothorax)) {
				String respSupportIdListStringPneumothorax = respSupportIdListPneumothorax.toString();
				respSupportIdListStringPneumothorax = respSupportIdListStringPneumothorax.replace("[", "");
				respSupportIdListStringPneumothorax = respSupportIdListStringPneumothorax.replace("]", "");

                if (!BasicUtils.isEmpty(eventId)) {
                    respSupportIdListStringPneumothorax += ",'" + eventId + "'";
                }

                String queryRespiratorySupport = "SELECT obj FROM RespSupport obj WHERE uhid='" + uhid + "' and eventid in (" + respSupportIdListStringPneumothorax
                        + ") OR (isEventidUpdated = 'false' and eventname = 'Pneumothorax') order by creationtime";
                List<RespSupport> respiratorySupportList = inicuDao.getListFromMappedObjQuery(queryRespiratorySupport);

                if (!BasicUtils.isEmpty(respiratorySupportList)) {
					respiratorySupportNotesPneumothorax += respiratorySupportHelper(respiratorySupportList, uhid);
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return respiratorySupportNotesPneumothorax;
	}

	// Surfactant Detail Fetch Function
	public String getSurfactantPneumothorax(List<SaRespPneumo> pneumothoraxList, String uhid)
			throws InicuDatabaseExeption {
		String surfactantNotesPneumothorax = "";
		List<String> surfactantDolListPneumothorax = new ArrayList<>();
		String prevSurfactantName, currSurfactantName;
		prevSurfactantName = currSurfactantName = null;
		boolean isSamesurfactant = true;
		int countSurfactant = 0;
		try {
			for (int i = 0; i < pneumothoraxList.size(); i++) {
				SaRespPneumo pnemothoraxObj = (SaRespPneumo) pneumothoraxList.get(i);
				if (pnemothoraxObj != null && pnemothoraxObj.getSurfactantDose() != null) {
					countSurfactant++;
					surfactantDolListPneumothorax
							.add(getDayOfLife(uhid, pnemothoraxObj.getAssessmentTime()).toString());
					if (prevSurfactantName == null) {
						prevSurfactantName = currSurfactantName = pnemothoraxObj.getSufactantname();
					} else {
						currSurfactantName = pnemothoraxObj.getSufactantname();
						if (prevSurfactantName != currSurfactantName) {
							isSamesurfactant = false;
						} else {
							prevSurfactantName = currSurfactantName;
						}
					}
				}
			}

			if (!BasicUtils.isEmpty(surfactantDolListPneumothorax)) {
				String surfactantDolListPneumothoraxString = surfactantDolListPneumothorax.toString();
				surfactantDolListPneumothoraxString = surfactantDolListPneumothoraxString.replace("[", "");
				surfactantDolListPneumothoraxString = surfactantDolListPneumothoraxString.replace("]", "");

				if (isSamesurfactant) {
					if (countSurfactant == 1) {
						surfactantNotesPneumothorax += "Baby was treated with " + countSurfactant
								+ " dose of Surfactant (" + currSurfactantName + ") on DOL#"
								+ surfactantDolListPneumothoraxString + ". ";
					} else {
						surfactantNotesPneumothorax += "Baby was treated with " + countSurfactant
								+ " doses of Surfactant (" + currSurfactantName + ") on DOL#"
								+ surfactantDolListPneumothoraxString + " respectively. ";
					}
				} else {
					if (countSurfactant == 1) {
						surfactantNotesPneumothorax += "Baby was treated with " + countSurfactant
								+ " dose of Surfactant on DOL#" + surfactantDolListPneumothoraxString + ". ";
					} else {
						surfactantNotesPneumothorax += "Baby was treated with " + countSurfactant
								+ " doses of Surfactant on DOL#" + surfactantDolListPneumothoraxString
								+ " respectively. ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return surfactantNotesPneumothorax;
	}

	// Medication of Pneumothorax Fetching Function
	public String getMedicationOfPneumothorax(List<SaRespPneumo> pneumothoraxList, boolean isSkip) throws InicuDatabaseExeption {
		String medicationNotesPneumothorax = "";
		List<String> finalEventIdListPneumothorax = new ArrayList<>();
		try {
			for (int i = 0; i < pneumothoraxList.size(); i++) {
				SaRespPneumo pneumothoraxObj = (SaRespPneumo) pneumothoraxList.get(i);
				if (pneumothoraxObj != null && pneumothoraxObj.getResppneumothoraxid() != null) {
					String saRespPneumothoraxIdPneumothorax = "'" + pneumothoraxObj.getResppneumothoraxid().toString()
							+ "'";
					finalEventIdListPneumothorax.add(saRespPneumothoraxIdPneumothorax);
				}
			}

			if (!BasicUtils.isEmpty(finalEventIdListPneumothorax)) {
				String finalEventIdListStringPneumothorax = finalEventIdListPneumothorax.toString();
				finalEventIdListStringPneumothorax = finalEventIdListStringPneumothorax.replace("[", "");
				finalEventIdListStringPneumothorax = finalEventIdListStringPneumothorax.replace("]", "");
				medicationNotesPneumothorax += getMedicationHelper(finalEventIdListStringPneumothorax
                        , "Pneumothorax",pneumothoraxList.get(0).getUhid(), isSkip);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return medicationNotesPneumothorax;
	}

	// Causes of Pneumothorax Fetching Function
	public String getCausesOfPneumothorax(List<SaRespPneumo> pneumothoraxList) throws InicuDatabaseExeption {
		String causesNamePneumothorax, causesUniqueIdPneumothorax;
		causesNamePneumothorax = causesUniqueIdPneumothorax = "";
		List<String> causesIdList = new ArrayList<>();
		for (int i = 0; i < pneumothoraxList.size(); i++) {
			SaRespPneumo pneumothoraxObj = (SaRespPneumo) pneumothoraxList.get(i);
			if (pneumothoraxObj != null && pneumothoraxObj.getCauseofpneumothorax() != null) {
				causesIdList.add(pneumothoraxObj.getCauseofpneumothorax());
			}
		}

		causesUniqueIdPneumothorax += listProcessingHelper(causesIdList);
		if (!BasicUtils.isEmpty(causesUniqueIdPneumothorax)) {
			String[] causesNameString = causesUniqueIdPneumothorax.split(",");
			if (!BasicUtils.isEmpty(causesNameString)) {
				if (causesNameString.length == 1) {
					causesNamePneumothorax += "The cause of Pneumothorax was ";
				} else {
					causesNamePneumothorax += "The causes of Pneumothorax were ";
				}

				int firstFactorDone = 0;
				for (String s : causesNameString) {
					s = s.trim();
					if (s.equalsIgnoreCase("'RS001'")) {
						s = "Spontaneous";
						firstFactorDone++;
					}

					if (s.equalsIgnoreCase("'RS002'")) {
						s = "PPV";
						firstFactorDone++;
					}

					if (s.equalsIgnoreCase("'RS003'")) {
						s = "Underlying lung disease";
						firstFactorDone++;
					}

					if (firstFactorDone == 1) {
						causesNamePneumothorax += s;
					} else {
						causesNamePneumothorax += ", " + s;
					}
				}
			}
		}
		return causesNamePneumothorax;
	}

	// Old Episodes Inactive Notes of Pneumothorax Fetching Function
	public String getOldInactiveNotesPneumothorax(List<SaRespPneumo> oldPneumothoraxList, int epCountPneumothorax)
			throws InicuDatabaseExeption {
		String oldInactiveNotes = "";
		try {
			if (epCountPneumothorax == 1) {
				return oldInactiveNotes;
			}

			for (int i = 0; i < oldPneumothoraxList.size(); i++) {
				SaRespPneumo pneumothoraxObj = (SaRespPneumo) oldPneumothoraxList.get(i);
				if (pneumothoraxObj.getProgressnotes() != null) {
					oldInactiveNotes = pneumothoraxObj.getProgressnotes();
				}
			}

			if (epCountPneumothorax > 2) {
				oldInactiveNotes = oldInactiveNotes.substring(oldInactiveNotes.indexOf('\n') + 1);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return oldInactiveNotes;
	}

	/**
	 * This method generates Inactive Notes for Asphyxia
	 *
	 * @param uhid
	 * @param asphyxia
	 * @throws InicuDatabaseExeption
	 */
	public String generateInactiveNotesAsphyxia(InicuDao inicuDaoObj, String uhid, String continuedMedication, String eventId)
			throws InicuDatabaseExeption {
		if (inicuDaoObj != null) {
			inicuDao = inicuDaoObj;
		}
		// Creating Inactive Notes from here
		String progressNotesAsphyxia = "";
		String htmlNextLine = System.getProperty("line.separator");
		try {
			// Fetching Current Episode Number for Asphyxia
			int epCountAsphyxia = 1;
			String queryEpCountAsphyxia = "SELECT MAX(episode_number) FROM sa_cns_asphyxia WHERE uhid='" + uhid + "'";
			List<Integer> epCountListAsphyxia = inicuDao.getListFromNativeQuery(queryEpCountAsphyxia);
			if (!BasicUtils.isEmpty(epCountListAsphyxia)) {
				epCountAsphyxia = epCountListAsphyxia.get(0).intValue();
				if (epCountAsphyxia != 1) {
					progressNotesAsphyxia = "Baby developed " + epCountAsphyxia + " episodes of Asphyxia "
							+ "during hospital stay. " + htmlNextLine + " Episode 1 : ";
				}
			}

			// Old Episodes Inactive Notes List of Generating Query
			List<SaCnsAsphyxia> oldAsphyxiaList = new ArrayList<SaCnsAsphyxia>();
			oldAsphyxiaList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getOldInactiveAsphyxiaList(uhid));
			if (!BasicUtils.isEmpty(oldAsphyxiaList)) {
				// Old Episodes Inactive Notes of Asphyxia Fetching Function
				String oldInactiveNotes = getOldInactiveNotesAsphyxia(oldAsphyxiaList, epCountAsphyxia);
				progressNotesAsphyxia += oldInactiveNotes + htmlNextLine;
			}

			// Current Episode
			// progressNotesAsphyxia += "Episode " + epCountAsphyxia + " : ";
			if (epCountAsphyxia > 1) {
				progressNotesAsphyxia += "Episode " + epCountAsphyxia + " : ";
			}
			List<SaCnsAsphyxia> asphyxiaList = new ArrayList<SaCnsAsphyxia>();
			asphyxiaList = inicuDao
					.getListFromMappedObjQuery(HqlSqlQueryConstants.getAsphyxiaList(uhid, epCountAsphyxia));
			if (!BasicUtils.isEmpty(asphyxiaList)) {
				// Initial Details Fetching Function
				String initialDetailsNotes = getInitialDetailAsphyxia(uhid);
				progressNotesAsphyxia += initialDetailsNotes;

				// Risk Factors Fetching Function
				String riskFactorNotes = getRiskFactorAsphyxia(asphyxiaList);
				progressNotesAsphyxia += riskFactorNotes;

				// Age of Onset Data Fetching Function for Asphyxia
				String ageOnsetNotes = getAgeOnsetAsphyxia(asphyxiaList);
				progressNotesAsphyxia += ageOnsetNotes;

				// Asphyxia Feature Fetching Function
				String featureNotes = getFeatureAsphyxia(asphyxiaList);
				progressNotesAsphyxia += featureNotes;

				// Sensorium Details Fetching Function
				String sensoriumDetailsNotes = getSensoriumDetailAsphyxia(asphyxiaList, uhid);
				progressNotesAsphyxia += sensoriumDetailsNotes;

				// Downes Score Data Fetching Function
				String downesScoreNotes = getDownesScoreAsphyxia(asphyxiaList, uhid, epCountAsphyxia);
				progressNotesAsphyxia += downesScoreNotes;

				// Thompson Score Data Fetching Function
				String thompsonScoreNotes = getThompsonsScoreAsphyxia(asphyxiaList, uhid, epCountAsphyxia);
				progressNotesAsphyxia += thompsonScoreNotes;

				// Levene and Sarnat Score Data Fetching Function
				String leveneAndSarnatNotes = getleveneAndSarnatDetailAsphyxia(asphyxiaList, uhid);
				progressNotesAsphyxia += leveneAndSarnatNotes;

				// Investigation Order Detail Fetching Function
				String investigationOrderNotes = getInvestigationOrderAsphyxia(asphyxiaList);
				progressNotesAsphyxia += investigationOrderNotes;

				// Respiratory Support Detail Fetching Function
				String respiratorySupportNotes = getRespiratorySupportAsphyxia(asphyxiaList, uhid,eventId);
				progressNotesAsphyxia += respiratorySupportNotes;

				// IV Fluid Detail Fetching Function
				String ivFluidNotes = getIvFluidDetailAsphyxia(asphyxiaList, uhid);
				progressNotesAsphyxia += ivFluidNotes;

				 //Medication of Asphyxia Data Fetching Function
				String medicationNotes = getMedicationOfAsphyxia(asphyxiaList,false);
				progressNotesAsphyxia += medicationNotes + continuedMedication;

				// Causes of Asphyxia Fetching Function
				String causesNotes = getCausesOfAsphyxia(asphyxiaList);
				progressNotesAsphyxia += causesNotes;

			}

			// Inactive Notes ending here

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return progressNotesAsphyxia;
	}

	// Functions for Asphyxia
	// Initial Details Fetching Funtion
	public String getInitialDetailAsphyxia(String uhid) throws InicuDatabaseExeption {
		String initialDetailAsphyxia, resuscitationMedicationString;
		resuscitationMedicationString = " ";
		initialDetailAsphyxia = "Baby developed perinatal asphyxia";
		List<String> resuscitationStringList = new ArrayList<>();
		String resuscitationtime = "";
		try {
			List<BirthToNicu> initialDetailList = new ArrayList<BirthToNicu>();
			initialDetailList = inicuDao
					.getListFromMappedObjQuery(HqlSqlQueryConstants.getInitialDetailAsphyxiaList(uhid));
			if (!BasicUtils.isEmpty(initialDetailList)) {
				for (int i = 0; i < initialDetailList.size(); i++) {
					BirthToNicu intialDetailObj = (BirthToNicu) initialDetailList.get(i);
					if (intialDetailObj != null) {
						if (intialDetailObj.getResuscitation() != null) {
							if (intialDetailObj.getResuscitation() == true) {
								initialDetailAsphyxia += " required resuscitation ";
								if (intialDetailObj.getResuscitationO2() != null
										&& intialDetailObj.getResuscitationO2() == true) {
									if (intialDetailObj.getResuscitationO2Duration() != null) {
										resuscitationtime = "";
										if (intialDetailObj.getDurationO2Time() != null) {
											resuscitationtime = intialDetailObj.getDurationO2Time();
										}
										resuscitationStringList.add(
												"O2 for the duration of " + intialDetailObj.getResuscitationO2Duration()
														+ " " + resuscitationtime);
									} else {
										resuscitationStringList.add("O2 ");
									}
								}

								if (intialDetailObj.getResuscitationPpv() != null
										&& intialDetailObj.getResuscitationPpv() == true) {
									if (intialDetailObj.getResuscitationPpvDuration() != null) {
										resuscitationtime = "";
										if (intialDetailObj.getPpvTime() != null) {
											resuscitationtime = intialDetailObj.getPpvTime();
										}
										resuscitationStringList.add("PPV for the duration of "
												+ intialDetailObj.getResuscitationPpvDuration() + " "
												+ resuscitationtime);
									} else {
										resuscitationStringList.add("PPV  ");
									}
								}

								if (intialDetailObj.getResuscitationChesttubeCompression() != null
										&& intialDetailObj.getResuscitationChesttubeCompression() == true) {
									if (intialDetailObj.getResuscitationChesttubeCompressionDuration() != null) {
										resuscitationtime = "";
										if (intialDetailObj.getChestCompTime() != null) {
											resuscitationtime = intialDetailObj.getChestCompTime();
										}
										resuscitationStringList.add("Chest Compression for the duration of "
												+ intialDetailObj.getResuscitationChesttubeCompressionDuration() + " "
												+ resuscitationtime);
									} else {
										resuscitationStringList.add("Chest Compression ");
									}
								}

								if (intialDetailObj.getResuscitationMedicationDetails() != null) {
									resuscitationMedicationString += "and treated with "
											+ intialDetailObj.getResuscitationMedicationDetails();
								}
								if (!BasicUtils.isEmpty(resuscitationStringList)) {
									String resuscitationString = resuscitationStringList.toString();
									resuscitationString = resuscitationString.replace("[", "");
									resuscitationString = resuscitationString.replace("]", "");
									initialDetailAsphyxia += "in the form of " + resuscitationString + ". ";
								}
							} else {
								initialDetailAsphyxia += ". ";
							}
						} else {
							initialDetailAsphyxia += ". ";
						}
					} else {
						initialDetailAsphyxia += ". ";
					}
				}
			} else {
				initialDetailAsphyxia += ". ";
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return initialDetailAsphyxia;
	}

	// Risk Factor Data Fetching Function
	public String getRiskFactorAsphyxia(List<SaCnsAsphyxia> asphyxiaList) throws InicuDatabaseExeption {
		String riskFactorNameAsphyxia, riskFactorUniqueIdAsphyxia;
		riskFactorNameAsphyxia = riskFactorUniqueIdAsphyxia = "";
		List<String> riskFactorIdList = new ArrayList<>();
		try {
			for (int i = 0; i < asphyxiaList.size(); i++) {
				SaCnsAsphyxia asphyxiaObj = (SaCnsAsphyxia) asphyxiaList.get(i);
				if (asphyxiaObj != null && asphyxiaObj.getRiskfactor() != null) {
					riskFactorIdList.add(asphyxiaObj.getRiskfactor());
				}
			}

			riskFactorUniqueIdAsphyxia += listProcessingHelper(riskFactorIdList);
			if (!BasicUtils.isEmpty(riskFactorUniqueIdAsphyxia)) {
				List<String> riskFactorNamesListAsphyxia = new ArrayList<>();
				String[] riskFactorNameString = riskFactorUniqueIdAsphyxia.split(",");
				for (String s : riskFactorNameString) {
					s = s.trim();
					if (s.equalsIgnoreCase("'RF001'")) {
						riskFactorNamesListAsphyxia.add("Increasing or decreasing maternal age");
					}
					if (s.equalsIgnoreCase("'RF002'")) {
						riskFactorNamesListAsphyxia.add("Prolonged rupture of membranes");
					}
					if (s.equalsIgnoreCase("'RF003'")) {
						riskFactorNamesListAsphyxia.add("Meconium-stained fluid");
					}
					if (s.equalsIgnoreCase("'RF004'")) {
						riskFactorNamesListAsphyxia.add("Multiple births");
					}
					if (s.equalsIgnoreCase("'RF005'")) {
						riskFactorNamesListAsphyxia.add("Lack of antenatal care");
					}
					if (s.equalsIgnoreCase("'RF006'")) {
						riskFactorNamesListAsphyxia.add("Low birth weight infants");
					}
					if (s.equalsIgnoreCase("'RF007'")) {
						riskFactorNamesListAsphyxia.add("Malpresentation");
					}
					if (s.equalsIgnoreCase("'RF008'")) {
						riskFactorNamesListAsphyxia.add("Augmentation of labour with oxytocin");
					}
				}

				if (riskFactorNamesListAsphyxia.size() == 1) {
					riskFactorNameAsphyxia += "The risk factor was ";
				} else {
					riskFactorNameAsphyxia += "The risk factors were ";
				}

				String riskFactorNameListStringAsphyxia = riskFactorNamesListAsphyxia.toString();
				riskFactorNameListStringAsphyxia = riskFactorNameListStringAsphyxia.replace("[", "");
				riskFactorNameListStringAsphyxia = riskFactorNameListStringAsphyxia.replace("]", "");
				if(riskFactorNameListStringAsphyxia.indexOf(",")!=-1) {
					riskFactorNameListStringAsphyxia = formatString(riskFactorNameListStringAsphyxia);
				}
				riskFactorNameAsphyxia += riskFactorNameListStringAsphyxia + ". ";
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return riskFactorNameAsphyxia;
	}

	// Age Onset Data Fetching Function
	public String getAgeOnsetAsphyxia(List<SaCnsAsphyxia> asphyxiaList) throws InicuDatabaseExeption {
		String ageOnSetNotesAsphyxia = "";
		boolean done = false;
		try {
			for (int i = 0; i < asphyxiaList.size(); i++) {
				SaCnsAsphyxia asphyxiaObj = (SaCnsAsphyxia) asphyxiaList.get(i);
				if (asphyxiaObj != null && done != true && asphyxiaObj.getAgeatonset() != null) {
					if (asphyxiaObj.getAgeatonset().equalsIgnoreCase("0")) {
						ageOnSetNotesAsphyxia += "At birth ";
					} else {
						if (asphyxiaObj.getAgeatonset() != null && asphyxiaObj.getAgeinhoursdays() == true) {
							ageOnSetNotesAsphyxia += "At the age of " + asphyxiaObj.getAgeatonset();
							if (asphyxiaObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesAsphyxia += " hour";
							} else {
								ageOnSetNotesAsphyxia += " hours";
							}
						} else {
							ageOnSetNotesAsphyxia += "At the age of " + asphyxiaObj.getAgeatonset();
							if (asphyxiaObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesAsphyxia += " day";
							} else {
								ageOnSetNotesAsphyxia += " days";
							}
						}
					}
					done = true;
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ageOnSetNotesAsphyxia;
	}

	// Asphyxia Feature Data Fetching Function
	public String getFeatureAsphyxia(List<SaCnsAsphyxia> asphyxiaList) throws InicuDatabaseExeption {
		String featureNotesAsphyxia = "";
		boolean done = false;
		try {
			SaCnsAsphyxia asphyxiaObj = (SaCnsAsphyxia) asphyxiaList.get(0);
			if (asphyxiaObj != null) {
				List<String> features = new ArrayList<>();
				if (asphyxiaObj.getIshypoglycemia() != null && asphyxiaObj.getIshypoglycemia() == true) {
					features.add("hypoglycemia");
				}
				if (asphyxiaObj.getIsseizures() != null && asphyxiaObj.getIsseizures() == true) {
					features.add("seizures");
				}
				if (asphyxiaObj.getIsshock() != null && asphyxiaObj.getIsshock() == true) {
					features.add("shock");
				}
				if (asphyxiaObj.getIsacidosis() != null && asphyxiaObj.getIsacidosis() == true) {
					features.add("acidosis");
				}
				if (asphyxiaObj.getIsrenal() != null && asphyxiaObj.getIsrenal() == true) {
					features.add("renal failure");
				}
				if (asphyxiaObj.getIsrds() != null && asphyxiaObj.getIsrds() == true) {
					features.add("rds");
				}
				if (asphyxiaObj.getIsPPHN() != null && asphyxiaObj.getIsPPHN() == true) {
					features.add("PPHN");
				}
				if (asphyxiaObj.getIsCHF() != null && asphyxiaObj.getIsCHF() == true) {
					features.add("CHF");
				}
				if (asphyxiaObj.getIsIVH() != null && asphyxiaObj.getIsIVH() == true) {
					features.add("IVH");
				}

				String featuresString = features.toString();
				featuresString = featuresString.replace("[", "");
				featuresString = featuresString.replace("]", "");
				if(featuresString.indexOf(",")!=-1){
					featuresString = formatString(featuresString);
				}
				if (!BasicUtils.isEmpty(featuresString)) {
					featureNotesAsphyxia += ",baby manifested features of " + featuresString + ". ";
				}
			}

			if (featureNotesAsphyxia == "") {
				featureNotesAsphyxia += ". ";
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return featureNotesAsphyxia;
	}

	// Sensorium Details Fetching Funtion
	public String getSensoriumDetailAsphyxia(List<SaCnsAsphyxia> asphyxiaList, String uhid)
			throws InicuDatabaseExeption {
		String sensoriumDetailAsphyxia, prevSensorium, prevSensoriumType, currSensorium, currSensoriumType;
		sensoriumDetailAsphyxia = prevSensorium = prevSensoriumType = currSensorium = currSensoriumType = "";
		int prevSensoriumScore, currSensoriumScore;
		prevSensoriumScore = currSensoriumScore = 0;
		boolean isFirst, isNormal;
		isFirst = isNormal = true;
		try {
			for (int i = 0; i < asphyxiaList.size(); i++) {
				SaCnsAsphyxia asphyxiaObj = (SaCnsAsphyxia) asphyxiaList.get(i);
				if (asphyxiaObj != null && asphyxiaObj.getIssensorium() != null) {
					if (asphyxiaObj.getIssensorium() != true) {
						currSensorium = "normal";
					} else {
						currSensorium = "abnormal";
						isNormal = false;
					}

					if (asphyxiaObj.getSensoriumType() != null) {
						currSensoriumType = asphyxiaObj.getSensoriumType();
						if (currSensoriumType.equalsIgnoreCase("Drowziness")) {
							currSensoriumScore = 1;
						}
						if (currSensoriumType.equalsIgnoreCase("Stuporose")) {
							currSensoriumScore = 2;
						}
						if (currSensoriumType.equalsIgnoreCase("Coma")) {
							currSensoriumScore = 3;
						}
					} else {
						currSensoriumType = null;
					}

					if (isFirst) {
						sensoriumDetailAsphyxia += "At the time of first assessment,baby's sensorium was "
								+ currSensorium;
						if (currSensorium.equalsIgnoreCase("abnormal")) {
							if (currSensoriumType != null) {
								sensoriumDetailAsphyxia += "(" + currSensoriumType + ") ";
							} else {
								sensoriumDetailAsphyxia += " ";
							}
						} else {
							sensoriumDetailAsphyxia += " ";
						}
						isFirst = false;
					} else {
						if (currSensorium.equalsIgnoreCase("abnormal")) {
							if (prevSensorium.equalsIgnoreCase("normal")) {
								sensoriumDetailAsphyxia += "baby's sensorium was worsend from " + "normal to abnormal";
								if (currSensoriumType != null) {
									sensoriumDetailAsphyxia += "(" + currSensoriumType + ") ";
								} else {
									sensoriumDetailAsphyxia += " ";
								}
							} else {
								if (currSensoriumType != null && currSensoriumScore > prevSensoriumScore) {
									sensoriumDetailAsphyxia += "baby's sensorium was worsend from " + prevSensoriumType
											+ " to " + currSensoriumType + " ";
								}

								if (currSensoriumType != null && currSensoriumScore < prevSensoriumScore) {
									sensoriumDetailAsphyxia += "baby's sensorium was improved from " + prevSensoriumType
											+ " to " + currSensoriumType + " ";
								}
							}
						} else {
							if (prevSensorium.equalsIgnoreCase("abnormal")) {
								sensoriumDetailAsphyxia += "baby's sensorium was improved from "
										+ "abnormal to normal ";
							}
						}
					}

					if (asphyxiaObj.getIsrespiration() != null) {
						if (asphyxiaObj.getIsrespiration() == false) {
							sensoriumDetailAsphyxia += "with shallow respiration ";
						} else {
							sensoriumDetailAsphyxia += "with fast respiration ";
						}
					}

					sensoriumDetailAsphyxia += "at Dol# " + getDayOfLife(uhid, asphyxiaObj.getAssessmentTime()) + ". ";

					prevSensorium = currSensorium;
					prevSensoriumType = currSensoriumType;
					prevSensoriumScore = currSensoriumScore;
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return sensoriumDetailAsphyxia;
	}

	// Downes Score Data Fetching Function
	public String getDownesScoreAsphyxia(List<SaCnsAsphyxia> asphyxiaList, String uhid, int epCountAsphyxia)
			throws InicuDatabaseExeption {
		String downesScoreNotes = "";
		boolean isInitialDownesScore = true;
		List<Integer> downesScoreIdList = new ArrayList<>();
		try {
			for (int i = 0; i < asphyxiaList.size(); i++) {
				SaCnsAsphyxia asphyxiaObj = (SaCnsAsphyxia) asphyxiaList.get(i);
				if (asphyxiaObj != null) {
					if (asphyxiaObj.getDownesscoreid() != null) {
						downesScoreIdList.add(Integer.valueOf(asphyxiaObj.getDownesscoreid()));
					} else {
						if (i == 0) {
							isInitialDownesScore = false;
						}
					}
				}
			}

			if (!BasicUtils.isEmpty(downesScoreIdList)) {
				String downesScoreIdListString = downesScoreIdList.toString();
				downesScoreIdListString = downesScoreIdListString.replace("[", "");
				downesScoreIdListString = downesScoreIdListString.replace("]", "");

				String queryDownesScoreAsphyxia = "SELECT downesscore,downesscoreid from score_downes "
						+ "WHERE downesscoreid " + "IN (" + (downesScoreIdListString) + ") and "
						+ "downesscore IS NOT NULL";
				List<Object> downesScoreValueListAsphyxia = inicuDao.getListFromNativeQuery(queryDownesScoreAsphyxia);
				if (!BasicUtils.isEmpty(downesScoreValueListAsphyxia)) {
					int worstDownesScore, initialDownesScore, finalDownesScore;
					worstDownesScore = initialDownesScore = finalDownesScore = 0;
					BigInteger worstDownesScoreId, finalDownesScoreId;
					worstDownesScoreId = finalDownesScoreId = null;
					Object[] downesScoreValueObj = (Object[]) downesScoreValueListAsphyxia.get(0);
					worstDownesScore = initialDownesScore = finalDownesScore = (int) downesScoreValueObj[0];
					for (int i = 0; i < downesScoreValueListAsphyxia.size(); i++) {
						downesScoreValueObj = (Object[]) downesScoreValueListAsphyxia.get(i);
						if (worstDownesScore <= (int) downesScoreValueObj[0]) {
							worstDownesScore = (int) downesScoreValueObj[0];
							worstDownesScoreId = (BigInteger) downesScoreValueObj[1];
						}
						finalDownesScore = (int) downesScoreValueObj[0];
						finalDownesScoreId = (BigInteger) downesScoreValueObj[1];
					}

					if (isInitialDownesScore) {
						downesScoreNotes += "The downe's score value at the time of first assessment was "
								+ initialDownesScore + ". ";
					}

					String queryWorstDownesScoreTime = "SELECT assessment_time FROM sa_cns_asphyxia WHERE uhid='" + uhid
							+ "' and downesscoreid='" + worstDownesScoreId + "' and episode_number=" + epCountAsphyxia;
					List<Timestamp> worstDownesScoreTimeValue = inicuDao
							.getListFromNativeQuery(queryWorstDownesScoreTime);

					if (worstDownesScore != initialDownesScore) {
						downesScoreNotes += "During this episode, the worst downe's score values was "
								+ worstDownesScore + " at DOL#"
								+ getDayOfLife(uhid, (Timestamp) worstDownesScoreTimeValue.get(0)) + ". ";
					} else {
						if (isInitialDownesScore != true && downesScoreValueListAsphyxia.size() == 1) {
							downesScoreNotes += "During this episode, the worst downe's score values was "
									+ worstDownesScore + " at DOL#"
									+ getDayOfLife(uhid, (Timestamp) worstDownesScoreTimeValue.get(0)) + ". ";
						}
					}

					String queryfinalDownesScoreTime = "SELECT assessment_time FROM sa_cns_asphyxia WHERE uhid='" + uhid
							+ "' and downesscoreid='" + finalDownesScoreId + "' and episode_number=" + epCountAsphyxia;
					List<Timestamp> finalDownesScoreTimeValue = inicuDao
							.getListFromNativeQuery(queryfinalDownesScoreTime);

					if (worstDownesScore != finalDownesScore) {
						downesScoreNotes += "At the end of the episode, the Downe's score was " + finalDownesScore
								+ " at DOL#" + getDayOfLife(uhid, (Timestamp) finalDownesScoreTimeValue.get(0)) + ". ";
					}
				}
			}
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return downesScoreNotes;
	}

	// Thompsons Score Data Fetching Function
	public String getThompsonsScoreAsphyxia(List<SaCnsAsphyxia> asphyxiaList, String uhid, int epCountAsphyxia)
			throws InicuDatabaseExeption {
		String thompsonsScoreNotes = "";
		boolean isInitialThompsonsScore = true;
		List<Integer> thompsonsScoreIdList = new ArrayList<>();
		try {
			for (int i = 0; i < asphyxiaList.size(); i++) {
				SaCnsAsphyxia asphyxiaObj = (SaCnsAsphyxia) asphyxiaList.get(i);
				if (asphyxiaObj != null) {
					if (asphyxiaObj.getThompsonscoreid() != null) {
						thompsonsScoreIdList.add(Integer.valueOf(asphyxiaObj.getThompsonscoreid()));
					} else {
						if (i == 0) {
							isInitialThompsonsScore = false;
						}
					}
				}
			}

			if (!BasicUtils.isEmpty(thompsonsScoreIdList)) {
				String thompsonsScoreIdListString = thompsonsScoreIdList.toString();
				thompsonsScoreIdListString = thompsonsScoreIdListString.replace("[", "");
				thompsonsScoreIdListString = thompsonsScoreIdListString.replace("]", "");

				String queryThompsonsScoreAsphyxia = "SELECT thompson_score,thompsonscoreid from score_thompson "
						+ "WHERE thompsonscoreid " + "IN (" + (thompsonsScoreIdListString) + ") and "
						+ "thompson_score IS NOT NULL";
				List<Object> thompsonsScoreValueListAsphyxia = inicuDao
						.getListFromNativeQuery(queryThompsonsScoreAsphyxia);
				if (!BasicUtils.isEmpty(thompsonsScoreValueListAsphyxia)) {
					int worstThompsonsScore, initialThompsonsScore, finalThompsonsScore;
					worstThompsonsScore = initialThompsonsScore = finalThompsonsScore = 0;
					BigInteger worstThompsonsScoreId, finalThompsonsScoreId;
					worstThompsonsScoreId = finalThompsonsScoreId = null;
					Object[] thompsonScoreValueObj = (Object[]) thompsonsScoreValueListAsphyxia.get(0);
					worstThompsonsScore = initialThompsonsScore = finalThompsonsScore = (int) thompsonScoreValueObj[0];
					for (int i = 0; i < thompsonsScoreValueListAsphyxia.size(); i++) {
						thompsonScoreValueObj = (Object[]) thompsonsScoreValueListAsphyxia.get(i);
						if (worstThompsonsScore <= (int) thompsonScoreValueObj[0]) {
							worstThompsonsScore = (int) thompsonScoreValueObj[0];
							worstThompsonsScoreId = (BigInteger) thompsonScoreValueObj[1];
						}
						finalThompsonsScore = (int) thompsonScoreValueObj[0];
						finalThompsonsScoreId = (BigInteger) thompsonScoreValueObj[1];
					}

					if (isInitialThompsonsScore) {
						thompsonsScoreNotes += "The thompson's score value at the time of first assessment was "
								+ initialThompsonsScore + ". ";
					}

					String queryWorstThompsonsScoreTime = "SELECT assessment_time FROM sa_cns_asphyxia WHERE uhid='"
							+ uhid + "' and thompsonscoreid='" + worstThompsonsScoreId + "' and episode_number="
							+ epCountAsphyxia;
					List<Timestamp> worstThompsonsScoreTimeValue = inicuDao
							.getListFromNativeQuery(queryWorstThompsonsScoreTime);

					if (worstThompsonsScore != initialThompsonsScore) {
						thompsonsScoreNotes += "During this episode, the worst thompson's score values was "
								+ worstThompsonsScore + " at DOL#"
								+ getDayOfLife(uhid, (Timestamp) worstThompsonsScoreTimeValue.get(0)) + ". ";
					} else {
						if (isInitialThompsonsScore != true && thompsonsScoreValueListAsphyxia.size() == 1) {
							thompsonsScoreNotes += "During this episode, the worst thompson's score values was "
									+ worstThompsonsScore + " at DOL#"
									+ getDayOfLife(uhid, (Timestamp) worstThompsonsScoreTimeValue.get(0)) + ". ";
						}
					}

					String queryfinalThompsonsScoreTime = "SELECT assessment_time FROM sa_cns_asphyxia WHERE uhid='"
							+ uhid + "' and thompsonscoreid='" + finalThompsonsScoreId + "' and episode_number="
							+ epCountAsphyxia;
					List<Timestamp> finalThompsonsScoreTimeValue = inicuDao
							.getListFromNativeQuery(queryfinalThompsonsScoreTime);

					if (worstThompsonsScore != finalThompsonsScore) {
						thompsonsScoreNotes += "At the end of the episode, the thompson's score was "
								+ finalThompsonsScore + " at DOL#"
								+ getDayOfLife(uhid, (Timestamp) finalThompsonsScoreTimeValue.get(0)) + ". ";
					}
				}
			}
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return thompsonsScoreNotes;
	}

	// Levene And Sarnat Detail Fetch Function
	public String getleveneAndSarnatDetailAsphyxia(List<SaCnsAsphyxia> asphyxiaList, String uhid)
			throws InicuDatabaseExeption {
		String leveneAndSarnatNotesAsphyxia = "";
		List<String> asphyxiaIdList = new ArrayList<String>();
		try {
			SaCnsAsphyxia asphyxiaObj = (SaCnsAsphyxia) asphyxiaList.get(0);
			if (asphyxiaObj != null) {
				String leveneStage, sarnatSeverity;
				leveneStage = sarnatSeverity = "";
				if (asphyxiaObj.getLevenescoreid() != null) {
					String queryLeveneScoreAsphyxia = "SELECT levenescore from score_levene " + "WHERE levenescoreid="
							+ Integer.valueOf(asphyxiaObj.getLevenescoreid()) + " and " + "levenescore IS NOT NULL";
					List<Object> leveneScoreValueListAsphyxia = inicuDao
							.getListFromNativeQuery(queryLeveneScoreAsphyxia);
					if (!BasicUtils.isEmpty(leveneScoreValueListAsphyxia)) {
						int leveneScore = (int) leveneScoreValueListAsphyxia.get(0);
						if (leveneScore == 1) {
							leveneStage = "Stage I";
						}

						if (leveneScore == 2) {
							leveneStage = "Stage II";
						}

						if (leveneScore == 3) {
							leveneStage = "Stage III";
						}
					}
				}

				if (asphyxiaObj.getSarnatscoreid() != null) {
					String querySarnatScoreAsphyxia = "SELECT sarnat_score from score_sarnat " + "WHERE sarnatscoreid="
							+ Integer.valueOf(asphyxiaObj.getSarnatscoreid()) + " and " + "sarnat_score IS NOT NULL";
					List<Object> sarnatScoreValueListAsphyxia = inicuDao
							.getListFromNativeQuery(querySarnatScoreAsphyxia);
					if (!BasicUtils.isEmpty(sarnatScoreValueListAsphyxia)) {
						int sarnatScore = (int) sarnatScoreValueListAsphyxia.get(0);
						if (sarnatScore == 1) {
							sarnatSeverity = "mild ";
						}

						if (sarnatScore == 2) {
							sarnatSeverity = "moderate ";
						}

						if (sarnatScore == 3) {
							sarnatSeverity = "severe ";
						}
					}
				}

				if (asphyxiaObj.getLevenescoreid() != null && asphyxiaObj.getSarnatscoreid() != null) {
					leveneAndSarnatNotesAsphyxia += "At the time of first assessment the severity of HIE "
							+ "as per Levene and Sarnat Classification  was " + leveneStage + " and " + sarnatSeverity
							+ "respectively. ";
				} else {
					if (asphyxiaObj.getLevenescoreid() != null) {
						leveneAndSarnatNotesAsphyxia += "At the time of first assessment, the severity of "
								+ "HIE as per Levene Classification was " + leveneStage + ". ";
					}

					if (asphyxiaObj.getSarnatscoreid() != null) {
						leveneAndSarnatNotesAsphyxia += "At the time of first assessment, the severity of "
								+ "HIE as per Sarnat Classification was " + leveneStage + ". ";
					}
				}
			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return leveneAndSarnatNotesAsphyxia;
	}

	// Investigation Order Detail Fetch Function
	public String getInvestigationOrderAsphyxia(List<SaCnsAsphyxia> asphyxiaList) throws InicuDatabaseExeption {
		String investigationOrderNotesAsphyxia = "";
		List<String> asphyxiaIdList = new ArrayList<String>();
		try {
			for (int i = 0; i < asphyxiaList.size(); i++) {
				SaCnsAsphyxia asphyxiaObj = (SaCnsAsphyxia) asphyxiaList.get(i);
				asphyxiaIdList.add("'" + asphyxiaObj.getSacnsasphyxiaid().toString() + "'");
			}

			if (!BasicUtils.isEmpty(asphyxiaIdList)) {
				String asphyxiaIdListString = asphyxiaIdList.toString();
				asphyxiaIdListString = asphyxiaIdListString.replace("[", "");
				asphyxiaIdListString = asphyxiaIdListString.replace("]", "");
				List<String> investigationOrderHelperList = new ArrayList<>();
				investigationOrderHelperList = getInvestigationOrderHelper(asphyxiaIdListString, "Asphyxia");
				if (!BasicUtils.isEmpty(investigationOrderHelperList)) {
					Set<String> uniqueInvestigationOrderHelperList = new HashSet<String>(investigationOrderHelperList);
					String uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperList.toString();
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("[",
							"");
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("]",
							"");

					if(uniqueInvestigationOrderHelperListString.indexOf(",")!=-1) {
						uniqueInvestigationOrderHelperListString = formatString(uniqueInvestigationOrderHelperListString);
					}

					if (uniqueInvestigationOrderHelperList.size() == 1) {
						investigationOrderNotesAsphyxia += "Investigation done during this episode was "
								+ uniqueInvestigationOrderHelperListString + ". ";
					} else {
						investigationOrderNotesAsphyxia += "Investigations done during this episode were "
								+ uniqueInvestigationOrderHelperListString + ". ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return investigationOrderNotesAsphyxia;
	}

	// Respiratory Support Detail Fetching Function
	public String getRespiratorySupportAsphyxia(List<SaCnsAsphyxia> asphyxiaList, String uhid, String eventId)
			throws InicuDatabaseExeption {
		String respiratorySupportNotesAsphyxia = "";
		List<String> respSupportIdListAsphyxia = new ArrayList<>();
		try {
			for (int i = 0; i < asphyxiaList.size(); i++) {
				SaCnsAsphyxia asphyxiaObj = (SaCnsAsphyxia) asphyxiaList.get(i);
				respSupportIdListAsphyxia.add("'" + asphyxiaObj.getSacnsasphyxiaid().toString() + "'");
			}

			if (!BasicUtils.isEmpty(respSupportIdListAsphyxia)) {
				String respSupportIdListStringAsphyxia = respSupportIdListAsphyxia.toString();
				respSupportIdListStringAsphyxia = respSupportIdListStringAsphyxia.replace("[", "");
				respSupportIdListStringAsphyxia = respSupportIdListStringAsphyxia.replace("]", "");

				respSupportIdListStringAsphyxia += ",'" + eventId + "'";
				
				String queryRespiratorySupport = "SELECT obj FROM RespSupport obj WHERE uhid='" + uhid + "' and eventid in (" + respSupportIdListStringAsphyxia
                        + ") OR (isEventidUpdated = 'false' and eventname = 'Asphyxia') order by creationtime";
                List<RespSupport> respiratorySupportList = inicuDao.getListFromMappedObjQuery(queryRespiratorySupport);


                if (!BasicUtils.isEmpty(respiratorySupportList)) {
					respiratorySupportNotesAsphyxia += respiratorySupportHelper(respiratorySupportList, uhid);
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return respiratorySupportNotesAsphyxia;
	}

	// IV Fluid Detail Fetching Function
	public String getIvFluidDetailAsphyxia(List<SaCnsAsphyxia> asphyxiaList, String uhid) throws InicuDatabaseExeption {
		String ivFluidNotesAsphyxia = "";
		try {
			for (int i = 0; i < asphyxiaList.size(); i++) {
				SaCnsAsphyxia asphyxiaObj = (SaCnsAsphyxia) asphyxiaList.get(i);
				if (asphyxiaObj != null && asphyxiaObj.getTreatmentaction() != null
						&& asphyxiaObj.getTreatmentaction().contains("TRE076")) {
					ivFluidNotesAsphyxia += "Baby was treated with IV Fluids on DOL#"
							+ getDayOfLife(uhid, asphyxiaObj.getAssessmentTime()) + ". ";
				}
			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ivFluidNotesAsphyxia;
	}

	// Medication of Asphyxia Fetching Function
	public String getMedicationOfAsphyxia(List<SaCnsAsphyxia> asphyxiaList, boolean isSkip) throws InicuDatabaseExeption {
		String medicationNotesAsphyxia = "";
		List<String> finalEventIdListAsphyxia = new ArrayList<>();
		try {
			for (int i = 0; i < asphyxiaList.size(); i++) {
				SaCnsAsphyxia asphyxiaObj = (SaCnsAsphyxia) asphyxiaList.get(i);
				if (asphyxiaObj != null && asphyxiaObj.getSacnsasphyxiaid() != null) {
					String saCnsAsphyxiaIdAsphyxia = "'" + asphyxiaObj.getSacnsasphyxiaid().toString() + "'";
					finalEventIdListAsphyxia.add(saCnsAsphyxiaIdAsphyxia);
				}
			}

			if (!BasicUtils.isEmpty(finalEventIdListAsphyxia)) {
				String finalEventIdListStringAsphyxia = finalEventIdListAsphyxia.toString();
				finalEventIdListStringAsphyxia = finalEventIdListStringAsphyxia.replace("[", "");
				finalEventIdListStringAsphyxia = finalEventIdListStringAsphyxia.replace("]", "");
				medicationNotesAsphyxia += getMedicationHelper(finalEventIdListStringAsphyxia, "Asphyxia"
                        , asphyxiaList.get(0).getUhid(), isSkip);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return medicationNotesAsphyxia;
	}

	// Causes of Asphyxia Fetching Function
	public String getCausesOfAsphyxia(List<SaCnsAsphyxia> asphyxiaList) throws InicuDatabaseExeption {
		String causesNameAsphyxia, causesUniqueIdAsphyxia;
		causesNameAsphyxia = causesUniqueIdAsphyxia = "";
		List<String> causesIdList = new ArrayList<>();
		for (int i = 0; i < asphyxiaList.size(); i++) {
			SaCnsAsphyxia asphyxiaObj = (SaCnsAsphyxia) asphyxiaList.get(i);
			if (asphyxiaObj != null && asphyxiaObj.getCauseofAsphyxia() != null) {
				causesIdList.add(asphyxiaObj.getCauseofAsphyxia());
			}
		}

		causesUniqueIdAsphyxia += listProcessingHelper(causesIdList);
		if (!BasicUtils.isEmpty(causesUniqueIdAsphyxia)) {
			String queryCausesNameAsphyxia = "SELECT causeofcns FROM  ref_causeofcns WHERE causeofcnsid IN ("
					+ (causesUniqueIdAsphyxia) + ")";
			List<String> causesNameListAsphyxia = inicuDao.getListFromNativeQuery(queryCausesNameAsphyxia);
			if (!BasicUtils.isEmpty(causesNameListAsphyxia)) {
				if (causesNameListAsphyxia.size() == 1) {
					causesNameAsphyxia += "The cause of Asphyxia was ";
				} else {
					causesNameAsphyxia += "The causes of Asphyxia were ";
				}

				String causesNameListStringAsphyxia = causesNameListAsphyxia.toString();
				causesNameListStringAsphyxia = causesNameListStringAsphyxia.replace("[", "");
				causesNameListStringAsphyxia = causesNameListStringAsphyxia.replace("]", "");
				if(causesNameListStringAsphyxia.indexOf(",")!=-1) {
					causesNameListStringAsphyxia = formatString(causesNameListStringAsphyxia);
				}
				causesNameAsphyxia += causesNameListStringAsphyxia + ". ";
			}
		}
		return causesNameAsphyxia;
	}

	// Old Episodes Inactive Notes of Asphyxia Fetching Function
	public String getOldInactiveNotesAsphyxia(List<SaCnsAsphyxia> oldAsphyxiaList, int epCountAsphyxia)
			throws InicuDatabaseExeption {
		String oldInactiveNotes = "";
		try {
			if (epCountAsphyxia == 1) {
				return oldInactiveNotes;
			}

			for (int i = 0; i < oldAsphyxiaList.size(); i++) {
				SaCnsAsphyxia asphyxiaObj = (SaCnsAsphyxia) oldAsphyxiaList.get(i);
				if (asphyxiaObj.getProgressnotes() != null) {
					oldInactiveNotes = asphyxiaObj.getProgressnotes();
				}
			}

			if (epCountAsphyxia > 2) {
				oldInactiveNotes = oldInactiveNotes.substring(oldInactiveNotes.indexOf('\n') + 1);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return oldInactiveNotes;
	}

	/**
	 * This method generates Inactive Notes for Seizure
	 *
	 * @param uhid
	 * @param seizure
	 * @throws InicuDatabaseExeption
	 */
	public String generateInactiveNotesSeizure(InicuDao inicuDaoObj, String uhid, String continuedMedication,String eventId)
			throws InicuDatabaseExeption {
		if (inicuDaoObj != null) {
			inicuDao = inicuDaoObj;
		}
		// Creating Inactive Notes from here
		String progressNotesSeizure = "";
		String htmlNextLine = System.getProperty("line.separator");
		try {
			// Fetching Current Episode Number for PPHN
			int epCountSeizure = 1;
			String queryEpCountSeizure = "SELECT MAX(episode_number) FROM sa_cns_seizures WHERE uhid='" + uhid + "'";
			List<Integer> epCountListSeizure = inicuDao.getListFromNativeQuery(queryEpCountSeizure);
			if (!BasicUtils.isEmpty(epCountListSeizure)) {
				epCountSeizure = epCountListSeizure.get(0).intValue();
				if (epCountSeizure != 1) {
					progressNotesSeizure = "Baby developed " + epCountSeizure
							+ " episodes of Seizure during hospital stay. " + htmlNextLine + " Episode 1 : ";
				}
			}
			// Old Episodes Inactive Notes of Seizures Fetching Function
			List<SaCnsSeizures> oldSeizureList = new ArrayList<SaCnsSeizures>();
			oldSeizureList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getOldInactiveSeizuresList(uhid));
			if (!BasicUtils.isEmpty(oldSeizureList)) {
				String oldInactiveNotes = getOldInactiveNotesSeizure(oldSeizureList, epCountSeizure);
				progressNotesSeizure += oldInactiveNotes + htmlNextLine;
			}

			// Current Episode
			// progressNotesSeizure += "Episode " + epCountSeizure + " : ";
			if (epCountSeizure > 1) {
				progressNotesSeizure += "Episode " + epCountSeizure + " : ";
			}
			List<SaCnsSeizures> seizureList = new ArrayList<SaCnsSeizures>();
			seizureList = inicuDao
					.getListFromMappedObjQuery(HqlSqlQueryConstants.getSeizuresList(uhid, epCountSeizure));
			if (!BasicUtils.isEmpty(seizureList)) {
				// Age of Onset Data Fetching Function for Seizures
				String ageOnsetNotes = getAgeOnsetSeizure(seizureList);
				progressNotesSeizure += ageOnsetNotes;

				if (!BasicUtils.isEmpty(oldSeizureList)) {
					// Seizures Details Fetching Function for Seizures
					String seizureDetailNotes = getSeizureDetailSeizure(oldSeizureList, uhid);
					progressNotesSeizure += seizureDetailNotes;
				}
				// Investigation Order Detail Fetching Function
				String investigationOrderNotes = getInvestigationOrderSeizure(seizureList);
				progressNotesSeizure += investigationOrderNotes;

				// Blood Sugar Level and Calcium Level Details Fetching Function
				String bloodSugarNotes = getBloodSugarDetailSeizure(seizureList, uhid);
				progressNotesSeizure += bloodSugarNotes;

				// Resuscitaion Details Fetching Function
				String resuscitaionNotes = getResuscitaionDetailSeizure(seizureList, uhid);
				progressNotesSeizure += resuscitaionNotes;

				// Respiratory Support Detail Fetching Function
				String respiratorySupportNotes = getRespiratorySupportSeizure(seizureList, uhid,eventId);
				progressNotesSeizure += respiratorySupportNotes;

				// Medication of Seizures Data Fetching Function
				String medicationNotes = getMedicationOfSeizure(seizureList,false);
				progressNotesSeizure += medicationNotes + continuedMedication;

				// Causes of Seizures Fetching Function
				String causesNotes = getCausesOfSeizure(seizureList);
				progressNotesSeizure += causesNotes;

			}

			// Inactive Notes ending here
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return progressNotesSeizure;
	}

	// Functions for Seizures
	// Age Onset Data Fetching Function
	public String getAgeOnsetSeizure(List<SaCnsSeizures> seizureList) throws InicuDatabaseExeption {
		String ageOnSetNotesSeizure = "";
		boolean done = false;
		try {
			for (int i = 0; i < seizureList.size(); i++) {
				SaCnsSeizures seizureObj = (SaCnsSeizures) seizureList.get(i);
				if (seizureObj != null && done != true && seizureObj.getAgeatonset() != null) {
					if (seizureObj.getAgeatonset().equalsIgnoreCase("0")) {
						ageOnSetNotesSeizure += "Baby developed Seizure at birth. ";
					} else {
						if (seizureObj.getAgeatonset() != null && seizureObj.getAgeinhoursdays() == true) {
							ageOnSetNotesSeizure += "Baby developed Seizure at the age of "
									+ seizureObj.getAgeatonset();
							if (seizureObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesSeizure += " hour.";
							} else {
								ageOnSetNotesSeizure += " hours.";
							}
						} else {
							ageOnSetNotesSeizure += "Baby developed Seizure at the age of "
									+ seizureObj.getAgeatonset();
							if (seizureObj.getAgeatonset().equalsIgnoreCase("1")) {
								ageOnSetNotesSeizure += " day.";
							} else {
								ageOnSetNotesSeizure += " days.";
							}
						}
					}
					done = true;
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ageOnSetNotesSeizure;
	}

	// Seizures Details Fetching Function for Seizures
	public String getSeizureDetailSeizure(List<SaCnsSeizures> oldSeizureList, String uhid)
			throws InicuDatabaseExeption {
		String seizureDetailNotes, seizureData;
		seizureDetailNotes = "";
		List<String> seizureDetailList = new ArrayList<>();
		int totalSeizure = 0;
		try {
			SaCnsSeizures seizuresObj = (SaCnsSeizures) oldSeizureList.get(oldSeizureList.size() - 1);
			List<NursingEpisode> nursingEpisodeListSeizure = new ArrayList<NursingEpisode>();
			nursingEpisodeListSeizure = inicuDao.getListFromMappedObjQuery(
					HqlSqlQueryConstants.getVitalDetailHelper(uhid, seizuresObj.getAssessmentTime()));
			if (!BasicUtils.isEmpty(nursingEpisodeListSeizure)) {
				for (int i = 0; i < nursingEpisodeListSeizure.size(); i++) {
					NursingEpisode nursingEpisodeObj = (NursingEpisode) nursingEpisodeListSeizure.get(i);
					if (nursingEpisodeObj != null) {
						seizureData = "";
						if (nursingEpisodeObj.getSeizures() != null && nursingEpisodeObj.getSeizures() == true) {
							totalSeizure++;
							seizureData += "Seizure developed at DOL#"
									+ getDayOfLife(uhid, nursingEpisodeObj.getCreationtime()) + " ";
							if (nursingEpisodeObj.getSymptomaticStatus() != null) {
								if (nursingEpisodeObj.getSymptomaticStatus() == false) {
									seizureData += "was asymptomatic ";
								} else {
									seizureData += "was symptomatic ";
									if (nursingEpisodeObj.getSymptomaticValue() != null) {
										seizureData += "based on symtoms like "
												+ nursingEpisodeObj.getSymptomaticValue();
									}
								}
							}

							if (nursingEpisodeObj.getSeizureType() != null) {
								if (nursingEpisodeObj.getSymptomaticStatus() != null) {
									seizureData += ",";
								}
								seizureData += "was of type " + nursingEpisodeObj.getSeizureType();
							}

							if (nursingEpisodeObj.getSeizureDuration() != null) {
								if (nursingEpisodeObj.getSymptomaticStatus() != null
										|| nursingEpisodeObj.getSeizureType() != null) {
									seizureData += " and ";
								}
								seizureData += "was for the duration of " + nursingEpisodeObj.getSeizureDuration();
								if (nursingEpisodeObj.getDuration_unit_seizure() != null) {
									seizureData += " " + nursingEpisodeObj.getDuration_unit_seizure();
								}
							}
						}
						seizureDetailList.add(seizureData);
					}
				}

				if (totalSeizure == 1) {
					seizureDetailNotes += "The cumulative number of Seizure during this episode was 1. ";
				}
				if (totalSeizure > 1) {
					seizureDetailNotes += "The cumulative number of Seizures during this episode were " + totalSeizure
							+ ". ";
				}

				String seizureDetailListString = seizureDetailList.toString();
				seizureDetailListString = seizureDetailListString.replace("[", "");
				seizureDetailListString = seizureDetailListString.replace("]", "");
				seizureDetailNotes += seizureDetailListString + ". ";
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return seizureDetailNotes;
	}

	// Investigation Order Detail Fetch Function
	public String getInvestigationOrderSeizure(List<SaCnsSeizures> seizureList) throws InicuDatabaseExeption {
		String investigationOrderNotesSeizure = "";
		List<String> seizureIdList = new ArrayList<String>();
		try {
			for (int i = 0; i < seizureList.size(); i++) {
				SaCnsSeizures seizuresObj = (SaCnsSeizures) seizureList.get(i);
				seizureIdList.add("'" + seizuresObj.getSacnsseizuresid().toString() + "'");

			}

			if (!BasicUtils.isEmpty(seizureIdList)) {
				String seizureIdListString = seizureIdList.toString();
				seizureIdListString = seizureIdListString.replace("[", "");
				seizureIdListString = seizureIdListString.replace("]", "");
				List<String> investigationOrderHelperList = new ArrayList<>();
				investigationOrderHelperList = getInvestigationOrderHelper(seizureIdListString, "Seizures");
				if (!BasicUtils.isEmpty(investigationOrderHelperList)) {
					Set<String> uniqueInvestigationOrderHelperList = new HashSet<String>(investigationOrderHelperList);
					String uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperList.toString();
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("[",
							"");
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("]",
							"");
					if(uniqueInvestigationOrderHelperListString.indexOf(",")!=-1) {
						uniqueInvestigationOrderHelperListString = formatString(uniqueInvestigationOrderHelperListString);
					}

					if (uniqueInvestigationOrderHelperList.size() == 1) {
						investigationOrderNotesSeizure += "Investigation done during this episode was "
								+ uniqueInvestigationOrderHelperListString + ". ";
					} else {
						investigationOrderNotesSeizure += "Investigations done during this episode were "
								+ uniqueInvestigationOrderHelperListString + ". ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return investigationOrderNotesSeizure;
	}

	// Blood Sugar Level and Calcium Level Details Fetching Function
	public String getBloodSugarDetailSeizure(List<SaCnsSeizures> seizureList, String uhid)
			throws InicuDatabaseExeption {
		String bloodSugarNotesSeizure = "";
		try {
			for (int i = 0; i < seizureList.size(); i++) {
				SaCnsSeizures seizuresObj = (SaCnsSeizures) seizureList.get(i);
				if (seizuresObj != null) {
					// Blood Sugar Level
					if (seizuresObj.getBloodSugarLevel() != null
							&& Integer.valueOf(seizuresObj.getBloodSugarLevel()) < 40) {
						bloodSugarNotesSeizure += "Blood sugar level was " + seizuresObj.getBloodSugarLevel()
								+ " at DOL#" + getDayOfLife(uhid, seizuresObj.getAssessmentTime()) + ". ";
					}

					// Calcium Level
					if (seizuresObj.getCalciumLevel() != null && Integer.valueOf(seizuresObj.getCalciumLevel()) < 7) {
						bloodSugarNotesSeizure += "Calcium level was " + seizuresObj.getCalciumLevel() + " at DOL#"
								+ getDayOfLife(uhid, seizuresObj.getAssessmentTime()) + ". ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return bloodSugarNotesSeizure;
	}

	// Resuscitaion Details Fetching Function getResuscitaionDetailSeizure
	public String getResuscitaionDetailSeizure(List<SaCnsSeizures> seizureList, String uhid)
			throws InicuDatabaseExeption {
		String resuscitaionDetailSeizure = "";
		try {
			for (int i = 0; i < seizureList.size(); i++) {
				SaCnsSeizures seizureObj = (SaCnsSeizures) seizureList.get(i);
				if (!BasicUtils.isEmpty(seizureObj.getResuscitationComments())) {
					resuscitaionDetailSeizure += "Baby was treated with Resuscitation("
							+ seizureObj.getResuscitationComments() + ") at DOL#"
							+ getDayOfLife(uhid, seizureObj.getAssessmentTime()) + ". ";
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return resuscitaionDetailSeizure;
	}

	// Respiratory Support Detail Fetching Function
	public String getRespiratorySupportSeizure(List<SaCnsSeizures> seizureList, String uhid, String eventId)
			throws InicuDatabaseExeption {
		String respiratorySupportNotesSeizure = "";
		List<String> respSupportIdListSeizure = new ArrayList<>();
		try {
			for (int i = 0; i < seizureList.size(); i++) {
				SaCnsSeizures seizureObj = (SaCnsSeizures) seizureList.get(i);
				respSupportIdListSeizure.add("'" + seizureObj.getSacnsseizuresid().toString() + "'");
			}

			if (!BasicUtils.isEmpty(respSupportIdListSeizure)) {
				String respSupportIdListStringSeizure = respSupportIdListSeizure.toString();
				respSupportIdListStringSeizure = respSupportIdListStringSeizure.replace("[", "");
				respSupportIdListStringSeizure = respSupportIdListStringSeizure.replace("]", "");
				
				respSupportIdListStringSeizure += ",'" + eventId + "'";

				String queryRespiratorySupport = "SELECT obj FROM RespSupport obj WHERE uhid='" + uhid + "' and eventid in (" + respSupportIdListStringSeizure
                        + ") OR (isEventidUpdated = 'false' and eventname = 'Seizures') order by creationtime";
                List<RespSupport> respiratorySupportList = inicuDao.getListFromMappedObjQuery(queryRespiratorySupport);


                if (!BasicUtils.isEmpty(respiratorySupportList)) {
					respiratorySupportNotesSeizure += respiratorySupportHelper(respiratorySupportList, uhid);
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return respiratorySupportNotesSeizure;
	}

	// Medication of Seizures Fetching Function
	public String getMedicationOfSeizure(List<SaCnsSeizures> seizureList, boolean isSkip) throws InicuDatabaseExeption {
		String medicationNotesSeizure = "";
		List<String> finalEventIdListSeizure = new ArrayList<>();
		try {
			for (int i = 0; i < seizureList.size(); i++) {
				SaCnsSeizures seizureObj = (SaCnsSeizures) seizureList.get(i);
				if (seizureObj != null && seizureObj.getSacnsseizuresid() != null) {
					String saCnsSeizuresIdSeizure = "'" + seizureObj.getSacnsseizuresid().toString() + "'";
					finalEventIdListSeizure.add(saCnsSeizuresIdSeizure);
				}
			}

			if (!BasicUtils.isEmpty(finalEventIdListSeizure)) {
				String finalEventIdListStringSeizure = finalEventIdListSeizure.toString();
				finalEventIdListStringSeizure = finalEventIdListStringSeizure.replace("[", "");
				finalEventIdListStringSeizure = finalEventIdListStringSeizure.replace("]", "");
				medicationNotesSeizure += getMedicationHelper(finalEventIdListStringSeizure, "Seizures"
                        , seizureList.get(0).getUhid(), isSkip);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return medicationNotesSeizure;
	}

	// Causes of Seizures Fetching Function
	public String getCausesOfSeizure(List<SaCnsSeizures> seizureList) throws InicuDatabaseExeption {
		String causesNameSeizure, causesUniqueIdSeizure;
		causesNameSeizure = causesUniqueIdSeizure = "";
		List<String> causesIdList = new ArrayList<>();
		for (int i = 0; i < seizureList.size(); i++) {
			SaCnsSeizures seizuresObj = (SaCnsSeizures) seizureList.get(i);
			if (seizuresObj != null && seizuresObj.getCauseofSeizures() != null) {
				causesIdList.add(seizuresObj.getCauseofSeizures());
			}
		}

		causesUniqueIdSeizure += listProcessingHelper(causesIdList);
		if (!BasicUtils.isEmpty(causesUniqueIdSeizure)) {
			String queryCausesNameSeizure = "SELECT causeofcns FROM  ref_causeofcns WHERE causeofcnsid " + "IN ("
					+ (causesUniqueIdSeizure) + ")";
			List<String> causesNameListSeizure = inicuDao.getListFromNativeQuery(queryCausesNameSeizure);
			if (!BasicUtils.isEmpty(causesNameListSeizure)) {
				if (causesNameListSeizure.size() == 1) {
					causesNameSeizure += "The cause of Seizure was ";
				} else {
					causesNameSeizure += "The causes of Seizure were ";
				}

				String causesNameListStringSeizure = causesNameListSeizure.toString();
				causesNameListStringSeizure = causesNameListStringSeizure.replace("[", "");
				causesNameListStringSeizure = causesNameListStringSeizure.replace("]", "");
				if(causesNameListStringSeizure.indexOf(",")!=-1) {
					causesNameListStringSeizure = formatString(causesNameListStringSeizure);
				}
				causesNameSeizure += causesNameListStringSeizure + ". ";
			}
		}
		return causesNameSeizure;
	}

	// Old Episodes Inactive Notes of Seizures Fetching Function
	public String getOldInactiveNotesSeizure(List<SaCnsSeizures> oldSeizureList, int epCountSeizure)
			throws InicuDatabaseExeption {
		String oldInactiveNotes = "";
		try {
			if (epCountSeizure == 1) {
				return oldInactiveNotes;
			}

			for (int i = 0; i < oldSeizureList.size(); i++) {
				SaCnsSeizures seizuresObj = (SaCnsSeizures) oldSeizureList.get(i);
				if (seizuresObj.getProgressnotes() != null) {
					oldInactiveNotes = seizuresObj.getProgressnotes();
				}
			}

			if (epCountSeizure > 2) {
				oldInactiveNotes = oldInactiveNotes.substring(oldInactiveNotes.indexOf('\n') + 1);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return oldInactiveNotes;
	}

	/**
	 * This method generates Inactive Notes for Miscellaneous
	 *
	 * @param uhid
	 * @param miscellaneous
	 * @throws InicuDatabaseExeption
	 */
	public String generateInactiveNotesMiscellaneous(InicuDao inicuDaoObj, String uhid) throws InicuDatabaseExeption {
		if (inicuDaoObj != null) {
			inicuDao = inicuDaoObj;
		}
		// Creating Inactive Notes from here
		String progressNotesMiscellaneous = "";
		String htmlNextLine = System.getProperty("line.separator");
		try {
			List<SaMiscellaneous> miscellaneousList = new ArrayList<SaMiscellaneous>();
			miscellaneousList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getMiscellaneousList(uhid));
			if (!BasicUtils.isEmpty(miscellaneousList)) {
				// Description of Miscellaneous Fetching Function
				String descriptionNotes = getDescriptionMiscellaneous(miscellaneousList);
				progressNotesMiscellaneous += descriptionNotes;

				if (!BasicUtils.isEmpty(descriptionNotes)) {
					// Investigation Order Detail Fetching Function
					String investigationOrderNotes = getInvestigationOrderMiscellaneous(miscellaneousList);
					progressNotesMiscellaneous += investigationOrderNotes;

					// Medication of Miscellaneous Data Fetching Function
					String medicationNotes = getMedicationOfMiscellaneous(miscellaneousList);
					progressNotesMiscellaneous += medicationNotes;

					// Treatment for Miscellaneous Fetching Function
					String treatmentNotes = getTreatmentMiscellaneous(miscellaneousList);
					progressNotesMiscellaneous += treatmentNotes;

					// Causes of Miscellaneous Fetching Function
					String causesNotes = getCausesOfMiscellaneous(miscellaneousList);
					progressNotesMiscellaneous += causesNotes;
				}
				// Ending Inactive Notes Here
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (BasicUtils.isEmpty(progressNotesMiscellaneous)) {
			progressNotesMiscellaneous = "No Active Miscellaneous Assessment.";
		}
		return progressNotesMiscellaneous;
	}

	// Function for Miscellaneous
	// Age of OnSet Data Fetching Function
	public String getAgeOnsetMiscellaneous(List<SaMiscellaneous> miscellaneousList, Timestamp assesmentTime)
			throws InicuDatabaseExeption {
		String ageOnSetNotesMiscellaneous = "";
		try {
			for (int i = 0; i < miscellaneousList.size(); i++) {
				SaMiscellaneous miscellaneousObj = (SaMiscellaneous) miscellaneousList.get(i);
				if (miscellaneousObj != null && miscellaneousObj.getAssessmentTime() == assesmentTime
						&& miscellaneousObj.getAgeofonset() != null) {
					if (miscellaneousObj.getAgeofonset() == 0) {
						ageOnSetNotesMiscellaneous += " at birth ";
					} else {
						if (miscellaneousObj.getIsageofonsetinhours() != null
								&& miscellaneousObj.getIsageofonsetinhours() == true) {
							ageOnSetNotesMiscellaneous += " at the age of " + miscellaneousObj.getAgeofonset();
							if (miscellaneousObj.getAgeofonset() == 1) {
								ageOnSetNotesMiscellaneous += " hour";
							} else {
								ageOnSetNotesMiscellaneous += " hours";
							}
						} else {
							ageOnSetNotesMiscellaneous += " at the age of " + miscellaneousObj.getAgeofonset();
							if (miscellaneousObj.getAgeofonset() == 1) {
								ageOnSetNotesMiscellaneous += " day";
							} else {
								ageOnSetNotesMiscellaneous += " days";
							}
						}
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ageOnSetNotesMiscellaneous;
	}

	// Description of Miscellaneous Fetching Function
	public String getDescriptionMiscellaneous(List<SaMiscellaneous> miscellaneousList) throws InicuDatabaseExeption {
		String descriptionMiscellaneousNotes = "";
		List<String> allDescriptionsNotes = new ArrayList<>();
		try {
			for (int i = 0; i < miscellaneousList.size(); i++) {
				SaMiscellaneous miscellaneousObj = (SaMiscellaneous) miscellaneousList.get(i);
				if (miscellaneousObj != null) {
					if (!BasicUtils.isEmpty(miscellaneousObj.getDescription())) {
						// Age of Onset Data Fetching Function for Miscellaneous
						String currentDescription = "";
						currentDescription += miscellaneousObj.getDescription();
						currentDescription += getAgeOnsetMiscellaneous(miscellaneousList,
								miscellaneousObj.getAssessmentTime());
						allDescriptionsNotes.add(currentDescription);
					}
				}
			}

			if (!BasicUtils.isEmpty(allDescriptionsNotes)) {
				if (allDescriptionsNotes.size() == 1) {
					descriptionMiscellaneousNotes += "Description was ";
				} else {
					descriptionMiscellaneousNotes += "Descriptions were ";
				}

				String allDescriptions = allDescriptionsNotes.toString();
				allDescriptions = allDescriptions.replace("[", "");
				allDescriptions = allDescriptions.replace("]", "");
				descriptionMiscellaneousNotes += allDescriptions;
				if (allDescriptionsNotes.size() == 1) {
					descriptionMiscellaneousNotes += " respectively. ";
					;
				} else {
					descriptionMiscellaneousNotes += " . ";
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return descriptionMiscellaneousNotes;
	}

	// Investigation Order Detail Fetch Function
	public String getInvestigationOrderMiscellaneous(List<SaMiscellaneous> miscellaneousList)
			throws InicuDatabaseExeption {
		String investigationOrderNotesMiscellaneous = "";
		List<String> miscellaneousIdList = new ArrayList<String>();
		try {
			for (int i = 0; i < miscellaneousList.size(); i++) {
				SaMiscellaneous miscellaneousObj = (SaMiscellaneous) miscellaneousList.get(i);
				miscellaneousIdList.add("'" + miscellaneousObj.getSa_miscellaneous_id().toString() + "'");
			}

			if (!BasicUtils.isEmpty(miscellaneousIdList)) {
				String miscellaneousIdListString = miscellaneousIdList.toString();
				miscellaneousIdListString = miscellaneousIdListString.replace("[", "");
				miscellaneousIdListString = miscellaneousIdListString.replace("]", "");

				List<String> investigationOrderHelperList = new ArrayList<>();
				investigationOrderHelperList = getInvestigationOrderHelper(miscellaneousIdListString, "Miscellaneous");
				if (!BasicUtils.isEmpty(investigationOrderHelperList)) {
					Set<String> uniqueInvestigationOrderHelperList = new HashSet<String>(investigationOrderHelperList);
					String uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperList.toString();
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("[",
							"");
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("]",
							"");

					if (uniqueInvestigationOrderHelperList.size() == 1) {
						investigationOrderNotesMiscellaneous += "Investigation Order was "
								+ uniqueInvestigationOrderHelperListString + ". ";
					} else {
						investigationOrderNotesMiscellaneous += "Investigations Orders were "
								+ uniqueInvestigationOrderHelperListString + ". ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return investigationOrderNotesMiscellaneous;
	}

	// Medication Used For Treating Miscellaneous Data Fetching Function
	public String getMedicationOfMiscellaneous(List<SaMiscellaneous> miscellaneousList) throws InicuDatabaseExeption {
		String medicationNotesMiscellaneous = "";
		List<String> finalEventIdListMiscellaneous = new ArrayList<>();
		try {
			for (int i = 0; i < miscellaneousList.size(); i++) {
				SaMiscellaneous miscellaneousObj = (SaMiscellaneous) miscellaneousList.get(i);
				if (miscellaneousObj != null && miscellaneousObj.getSa_miscellaneous_id() != null) {
					String saMiscellaneousId = "'" + miscellaneousObj.getSa_miscellaneous_id().toString() + "'";
					finalEventIdListMiscellaneous.add(saMiscellaneousId);
				}
			}

			if (!BasicUtils.isEmpty(finalEventIdListMiscellaneous)) {
				String finalEventIdListStringMiscellaneous = finalEventIdListMiscellaneous.toString();
				finalEventIdListStringMiscellaneous = finalEventIdListStringMiscellaneous.replace("[", "");
				finalEventIdListStringMiscellaneous = finalEventIdListStringMiscellaneous.replace("]", "");
				medicationNotesMiscellaneous += getMedicationHelper(finalEventIdListStringMiscellaneous,
						"Miscellaneous",miscellaneousList.get(0).getUhid(), false);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return medicationNotesMiscellaneous;
	}

	// Treatment for Miscellaneous Fetching Function
	public String getTreatmentMiscellaneous(List<SaMiscellaneous> miscellaneousList) throws InicuDatabaseExeption {
		String treatmentMiscellaneousNotes = "";
		List<String> allTreatmentsNotes = new ArrayList<>();
		try {
			for (int i = 0; i < miscellaneousList.size(); i++) {
				SaMiscellaneous miscellaneousObj = (SaMiscellaneous) miscellaneousList.get(i);
				if (miscellaneousObj != null) {
					if (!BasicUtils.isEmpty(miscellaneousObj.getTreatment())) {
						String currentTreatment = "";
						currentTreatment += miscellaneousObj.getTreatment();
						allTreatmentsNotes.add(currentTreatment);
					}
				}
			}

			if (!BasicUtils.isEmpty(allTreatmentsNotes)) {
				if (allTreatmentsNotes.size() == 1) {
					treatmentMiscellaneousNotes += "Treatment was ";
				} else {
					treatmentMiscellaneousNotes += "Treatments were ";
				}

				String allTreatments = allTreatmentsNotes.toString();
				allTreatments = allTreatments.replace("[", "");
				allTreatments = allTreatments.replace("]", "");
				treatmentMiscellaneousNotes += allTreatments;
				if (allTreatmentsNotes.size() == 1) {
					treatmentMiscellaneousNotes += " respectively. ";
					;
				} else {
					treatmentMiscellaneousNotes += " . ";
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return treatmentMiscellaneousNotes;
	}

	// Causes of Miscellaneous Fetching Function
	public String getCausesOfMiscellaneous(List<SaMiscellaneous> miscellaneousList) throws InicuDatabaseExeption {
		String causesOfMiscellaneousNotes = "";
		List<String> allCausesNotes = new ArrayList<>();
		try {
			for (int i = 0; i < miscellaneousList.size(); i++) {
				SaMiscellaneous miscellaneousObj = (SaMiscellaneous) miscellaneousList.get(i);
				if (miscellaneousObj != null) {
					if (!BasicUtils.isEmpty(miscellaneousObj.getCauseofmiscellaneous())) {
						String currentCause = "";
						currentCause += miscellaneousObj.getCauseofmiscellaneous();
						allCausesNotes.add(currentCause);
					}
				}
			}

			if (!BasicUtils.isEmpty(allCausesNotes)) {
				if (allCausesNotes.size() == 1) {
					causesOfMiscellaneousNotes += "The cause was ";
				} else {
					causesOfMiscellaneousNotes += "The causes were ";
				}

				String allCauses = allCausesNotes.toString();
				allCauses = allCauses.replace("[", "");
				allCauses = allCauses.replace("]", "");
				causesOfMiscellaneousNotes += allCauses;
				if (allCausesNotes.size() == 1) {
					causesOfMiscellaneousNotes += " respectively. ";
					;
				} else {
					causesOfMiscellaneousNotes += " . ";
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return causesOfMiscellaneousNotes;
	}

	/**
	 * This method generates Inactive Notes for Miscellaneous2
	 *
	 * @param uhid
	 * @param miscellaneous
	 * @throws InicuDatabaseExeption
	 */
	public String generateInactiveNotesMiscellaneous2(InicuDao inicuDaoObj, String uhid) throws InicuDatabaseExeption {
		if (inicuDaoObj != null) {
			inicuDao = inicuDaoObj;
		}
		// Creating Inactive Notes from here
		String progressNotesMiscellaneous2 = "";
		String htmlNextLine = System.getProperty("line.separator");
		try {
			List<SaMiscellaneous2> miscellaneous2List = new ArrayList<SaMiscellaneous2>();
			miscellaneous2List = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getMiscellaneous2List(uhid));
			if (!BasicUtils.isEmpty(miscellaneous2List)) {
				// Description of Miscellaneous Fetching Function
				String descriptionNotes = getDescriptionMiscellaneous2(miscellaneous2List);
				progressNotesMiscellaneous2 += descriptionNotes;

				if (!BasicUtils.isEmpty(descriptionNotes)) {
					// Investigation Order Detail Fetching Function
					String investigationOrderNotes = getInvestigationOrderMiscellaneous2(miscellaneous2List);
					progressNotesMiscellaneous2 += investigationOrderNotes;

					// Medication of Miscellaneous Data Fetching Function
					String medicationNotes = getMedicationOfMiscellaneous2(miscellaneous2List);
					progressNotesMiscellaneous2 += medicationNotes;

					// Treatment for Miscellaneous Fetching Function
					String treatmentNotes = getTreatmentMiscellaneous2(miscellaneous2List);
					progressNotesMiscellaneous2 += treatmentNotes;

					// Causes of Miscellaneous Fetching Function
					String causesNotes = getCausesOfMiscellaneous2(miscellaneous2List);
					progressNotesMiscellaneous2 += causesNotes;
				}
				// Ending Inactive Notes Here
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (BasicUtils.isEmpty(progressNotesMiscellaneous2)) {
			progressNotesMiscellaneous2 = "No Active Miscellaneous Assessment.";
		}
		return progressNotesMiscellaneous2;
	}

	// Function for Miscellaneous2
	// Age of OnSet Data Fetching Function
	public String getAgeOnsetMiscellaneous2(List<SaMiscellaneous2> miscellaneous2List, Timestamp assesmentTime)
			throws InicuDatabaseExeption {
		String ageOnSetNotesMiscellaneous2 = "";
		try {
			for (int i = 0; i < miscellaneous2List.size(); i++) {
				SaMiscellaneous2 miscellaneous2Obj = (SaMiscellaneous2) miscellaneous2List.get(i);
				if (miscellaneous2Obj != null && miscellaneous2Obj.getAssessmentTime() == assesmentTime
						&& miscellaneous2Obj.getAgeofonset() != null) {
					if (miscellaneous2Obj.getAgeofonset() == 0) {
						ageOnSetNotesMiscellaneous2 += " at birth ";
					} else {
						if (miscellaneous2Obj.getIsageofonsetinhours() != null
								&& miscellaneous2Obj.getIsageofonsetinhours() == true) {
							ageOnSetNotesMiscellaneous2 += " at the age of " + miscellaneous2Obj.getAgeofonset();
							if (miscellaneous2Obj.getAgeofonset() == 1) {
								ageOnSetNotesMiscellaneous2 += " hour";
							} else {
								ageOnSetNotesMiscellaneous2 += " hours";
							}
						} else {
							ageOnSetNotesMiscellaneous2 += " at the age of " + miscellaneous2Obj.getAgeofonset();
							if (miscellaneous2Obj.getAgeofonset() == 1) {
								ageOnSetNotesMiscellaneous2 += " day";
							} else {
								ageOnSetNotesMiscellaneous2 += " days";
							}
						}
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ageOnSetNotesMiscellaneous2;
	}

	// Description of Miscellaneous2 Fetching Function
	public String getDescriptionMiscellaneous2(List<SaMiscellaneous2> miscellaneous2List) throws InicuDatabaseExeption {
		String descriptionMiscellaneous2Notes = "";
		List<String> allDescriptionsNotes = new ArrayList<>();
		try {
			for (int i = 0; i < miscellaneous2List.size(); i++) {
				SaMiscellaneous2 miscellaneous2Obj = (SaMiscellaneous2) miscellaneous2List.get(i);
				if (miscellaneous2Obj != null) {
					if (!BasicUtils.isEmpty(miscellaneous2Obj.getDescription())) {
						// Age of Onset Data Fetching Function for Miscellaneous
						String currentDescription = "";
						currentDescription += miscellaneous2Obj.getDescription();
						currentDescription += getAgeOnsetMiscellaneous2(miscellaneous2List,
								miscellaneous2Obj.getAssessmentTime());
						allDescriptionsNotes.add(currentDescription);
					}
				}
			}

			if (!BasicUtils.isEmpty(allDescriptionsNotes)) {
				if (allDescriptionsNotes.size() == 1) {
					descriptionMiscellaneous2Notes += "Description was ";
				} else {
					descriptionMiscellaneous2Notes += "Descriptions were ";
				}

				String allDescriptions = allDescriptionsNotes.toString();
				allDescriptions = allDescriptions.replace("[", "");
				allDescriptions = allDescriptions.replace("]", "");
				descriptionMiscellaneous2Notes += allDescriptions;
				if (allDescriptionsNotes.size() == 1) {
					descriptionMiscellaneous2Notes += " respectively. ";
					;
				} else {
					descriptionMiscellaneous2Notes += " . ";
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return descriptionMiscellaneous2Notes;
	}

	// Investigation Order Detail Fetch Function
	public String getInvestigationOrderMiscellaneous2(List<SaMiscellaneous2> miscellaneous2List)
			throws InicuDatabaseExeption {
		String investigationOrderNotesMiscellaneous2 = "";
		List<String> miscellaneous2IdList = new ArrayList<String>();
		try {
			for (int i = 0; i < miscellaneous2List.size(); i++) {
				SaMiscellaneous2 miscellaneous2Obj = (SaMiscellaneous2) miscellaneous2List.get(i);
				miscellaneous2IdList.add("'" + miscellaneous2Obj.getSaMiscellaneous2Id().toString() + "'");
			}

			if (!BasicUtils.isEmpty(miscellaneous2IdList)) {
				String miscellaneous2IdListString = miscellaneous2IdList.toString();
				miscellaneous2IdListString = miscellaneous2IdListString.replace("[", "");
				miscellaneous2IdListString = miscellaneous2IdListString.replace("]", "");

				List<String> investigationOrderHelperList = new ArrayList<>();
				investigationOrderHelperList = getInvestigationOrderHelper(miscellaneous2IdListString, "Miscellaneous");
				if (!BasicUtils.isEmpty(investigationOrderHelperList)) {
					Set<String> uniqueInvestigationOrderHelperList = new HashSet<String>(investigationOrderHelperList);
					String uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperList.toString();
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("[",
							"");
					uniqueInvestigationOrderHelperListString = uniqueInvestigationOrderHelperListString.replace("]",
							"");

					if (uniqueInvestigationOrderHelperList.size() == 1) {
						investigationOrderNotesMiscellaneous2 += "Investigation Order was "
								+ uniqueInvestigationOrderHelperListString + ". ";
					} else {
						investigationOrderNotesMiscellaneous2 += "Investigations Orders were "
								+ uniqueInvestigationOrderHelperListString + ". ";
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return investigationOrderNotesMiscellaneous2;
	}

	// Medication Used For Treating Miscellaneous2 Data Fetching Function
	public String getMedicationOfMiscellaneous2(List<SaMiscellaneous2> miscellaneous2List)
			throws InicuDatabaseExeption {
		String medicationNotesMiscellaneous2 = "";
		List<String> finalEventIdListMiscellaneous2 = new ArrayList<>();
		try {
			for (int i = 0; i < miscellaneous2List.size(); i++) {
				SaMiscellaneous2 miscellaneous2Obj = (SaMiscellaneous2) miscellaneous2List.get(i);
				if (miscellaneous2Obj != null && miscellaneous2Obj.getSaMiscellaneous2Id() != null) {
					String saMiscellaneous2Id = "'" + miscellaneous2Obj.getSaMiscellaneous2Id().toString() + "'";
					finalEventIdListMiscellaneous2.add(saMiscellaneous2Id);
				}
			}

			if (!BasicUtils.isEmpty(finalEventIdListMiscellaneous2)) {
				String finalEventIdListStringMiscellaneous2 = finalEventIdListMiscellaneous2.toString();
				finalEventIdListStringMiscellaneous2 = finalEventIdListStringMiscellaneous2.replace("[", "");
				finalEventIdListStringMiscellaneous2 = finalEventIdListStringMiscellaneous2.replace("]", "");
				medicationNotesMiscellaneous2 += getMedicationHelper(finalEventIdListStringMiscellaneous2,
						"Miscellaneous2",miscellaneous2List.get(0).getUhid(), false);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return medicationNotesMiscellaneous2;
	}

	// Treatment for Miscellaneous2 Fetching Function
	public String getTreatmentMiscellaneous2(List<SaMiscellaneous2> miscellaneous2List) throws InicuDatabaseExeption {
		String treatmentMiscellaneous2Notes = "";
		List<String> allTreatmentsNotes = new ArrayList<>();
		try {
			for (int i = 0; i < miscellaneous2List.size(); i++) {
				SaMiscellaneous2 miscellaneous2Obj = (SaMiscellaneous2) miscellaneous2List.get(i);
				if (miscellaneous2Obj != null) {
					if (!BasicUtils.isEmpty(miscellaneous2Obj.getTreatment())) {
						String currentTreatment = "";
						currentTreatment += miscellaneous2Obj.getTreatment();
						allTreatmentsNotes.add(currentTreatment);
					}
				}
			}

			if (!BasicUtils.isEmpty(allTreatmentsNotes)) {
				if (allTreatmentsNotes.size() == 1) {
					treatmentMiscellaneous2Notes += "Treatment was ";
				} else {
					treatmentMiscellaneous2Notes += "Treatments were ";
				}

				String allTreatments = allTreatmentsNotes.toString();
				allTreatments = allTreatments.replace("[", "");
				allTreatments = allTreatments.replace("]", "");
				treatmentMiscellaneous2Notes += allTreatments;
				if (allTreatmentsNotes.size() == 1) {
					treatmentMiscellaneous2Notes += " respectively. ";
					;
				} else {
					treatmentMiscellaneous2Notes += " . ";
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return treatmentMiscellaneous2Notes;
	}

	// Causes of Miscellaneous2 Fetching Function
	public String getCausesOfMiscellaneous2(List<SaMiscellaneous2> miscellaneous2List) throws InicuDatabaseExeption {
		String causesOfMiscellaneous2Notes = "";
		List<String> allCausesNotes = new ArrayList<>();
		try {
			for (int i = 0; i < miscellaneous2List.size(); i++) {
				SaMiscellaneous2 miscellaneous2Obj = (SaMiscellaneous2) miscellaneous2List.get(i);
				if (miscellaneous2Obj != null) {
					if (!BasicUtils.isEmpty(miscellaneous2Obj.getCauseofmiscellaneous())) {
						String currentCause = "";
						currentCause += miscellaneous2Obj.getCauseofmiscellaneous();
						allCausesNotes.add(currentCause);
					}
				}
			}

			if (!BasicUtils.isEmpty(allCausesNotes)) {
				if (allCausesNotes.size() == 1) {
					causesOfMiscellaneous2Notes += "The cause was ";
				} else {
					causesOfMiscellaneous2Notes += "The causes were ";
				}

				String allCauses = allCausesNotes.toString();
				allCauses = allCauses.replace("[", "");
				allCauses = allCauses.replace("]", "");
				causesOfMiscellaneous2Notes += allCauses;
				if (allCausesNotes.size() == 1) {
					causesOfMiscellaneous2Notes += " respectively. ";
					;
				} else {
					causesOfMiscellaneous2Notes += " . ";
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return causesOfMiscellaneous2Notes;
	}

	// General & Helper Functions
	// DOB Fetching Function
	public Long getDayOfLife(String uhid, Timestamp otherDate) throws InicuDatabaseExeption {
		List<BabyDetail> babyList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getBabyDetailList(uhid));
		if (!BasicUtils.isEmpty(babyList)) {
			BabyDetail babyObj = babyList.get(0);
			java.sql.Timestamp dateOfBirth = new java.sql.Timestamp(babyObj.getDateofbirth().getTime());
			int hours = Integer.parseInt(babyObj.getTimeofbirth().substring(0, 2));
			int minutes = Integer.parseInt(babyObj.getTimeofbirth().substring(3, 5));
			if (babyObj.getTimeofbirth().substring(6, 8).equals("PM") && hours != 12) {
				hours = hours + 12;
			}
			dateOfBirth.setHours(hours);
			dateOfBirth.setMinutes(minutes);
			dateOfBirth.setSeconds(0);

			Long dayOfLife = (otherDate.getTime() - dateOfBirth.getTime()) / (1000 * 60 * 60 * 24);
			return dayOfLife;
		} else {
			return null;
		}
	}

	/*
	 * List Processing Helper Function which first converts a list of strings into a
	 * list of unique strings and then convert the whole list into a string
	 */
	public String listProcessingHelper(List<String> unprocessedIdList) throws InicuDatabaseExeption {
		String uniqueIdString = "";
		try {

			List<String> processedIdList = new ArrayList<>();
			for (int i = 0; i < unprocessedIdList.size(); i++) {
				String Id = "";
				if (!BasicUtils.isEmpty(unprocessedIdList.get(i))) {
					String temp = unprocessedIdList.get(i);
					temp = temp.replace("[", "");
					temp = temp.replace("]", "");
					Id += (temp);
					String[] Ids = Id.split(",");
					for (String s : Ids) {
						String str = "'" + s.trim() + "'";
						processedIdList.add(str);
					}
				}
			}

			if (!BasicUtils.isEmpty(processedIdList)) {
				Set<String> uniqueIdList = new HashSet<String>(processedIdList);
				uniqueIdString = uniqueIdList.toString();
				uniqueIdString = uniqueIdString.replace("[", "");
				uniqueIdString = uniqueIdString.replace("]", "");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return uniqueIdString;
	}

	public String listProcessingHelperJaundice(List<String> symptomIdJaundice, List<String> unprocessedIdList)
			throws InicuDatabaseExeption {
		String uniqueIdString = "";
		try {
			List<String> processedIdList = new ArrayList<>();
			for (int i = 0; i < unprocessedIdList.size(); i++) {
				String Id = "";
				if (!BasicUtils.isEmpty(unprocessedIdList.get(i))) {
					String temp = unprocessedIdList.get(i);
					temp = temp.replace("[", "");
					temp = temp.replace("]", "");
					Id += (temp);
					String[] Ids = Id.split(",");
					for (String s : Ids) {
						String str = "'" + s.trim() + "'";
						if (!str.contentEquals("'RSK00001'") && !str.contentEquals("'RSK00002'")
								&& !str.contentEquals("'RSK00004'") && !str.contentEquals("'RSK00005'")
								&& !str.contentEquals("'RSK00009'")) {
							processedIdList.add(str);
						} else {
							symptomIdJaundice.add(str);
						}
					}
				}
			}

			if (!BasicUtils.isEmpty(processedIdList)) {
				Set<String> uniqueIdList = new HashSet<String>(processedIdList);
				uniqueIdString = uniqueIdList.toString();
				uniqueIdString = uniqueIdString.replace("[", "");
				uniqueIdString = uniqueIdString.replace("]", "");
			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return uniqueIdString;
	}

	// Helper Function which Fetch the Investigation Order Details from
	// investigation_ordered table
	public List<String> getInvestigationOrderHelper(String assesmentIdListString, String assesmentType)
			throws InicuDatabaseExeption {
		List<String> investigationOrderHelperList;
		investigationOrderHelperList = new ArrayList<>();
		try {
			String queryInvestigationOrder = "SELECT testname FROM investigation_ordered where assesmentid IN ("
					+ assesmentIdListString + ") and assesment_type = '" + assesmentType + "'";
			investigationOrderHelperList = inicuDao.getListFromNativeQuery(queryInvestigationOrder);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return investigationOrderHelperList;
	}

	private static final SimpleDateFormat monthDayYearformatter = new SimpleDateFormat("dd-MM-yyyy");

	// Get Date from Timestamp
	public static String getDateFromTimestamp(Timestamp time) {
		String date = monthDayYearformatter.format((java.util.Date) time);
		return date;
	}

	// Respiratory Support Helper
	public String respiratorySupportHelper(List<RespSupport> respiratorySupportList, String uhid)
			throws InicuDatabaseExeption {
		String respiratorySupportRdsHelperString = "";
		Long time, totalDuration, durationLFO2, durationHFO2, durationCPAP, durationNIMV, durationSIMV, durationPSV, durationIMV, durationPTV,
				durationHFO, currRespDuration, invasiveDol, nonInvasiveDol, oxygenSupplmentDol;
		time = totalDuration = durationLFO2 = durationHFO2 = durationCPAP = durationNIMV = durationSIMV = durationPSV = durationHFO = currRespDuration = invasiveDol = nonInvasiveDol = oxygenSupplmentDol = durationIMV = durationPTV = 0L;
		String timeString, prevRespiratorySupport, currRespiratorySupport;
		prevRespiratorySupport = currRespiratorySupport = null;
		Timestamp startTime, stopTime, stopTimeInvasive, stopTimeNonInvasive, stopTimeOxygen;
		startTime = stopTime = stopTimeInvasive = stopTimeNonInvasive = stopTimeOxygen = null;
		try {
			for (int i = 0; i < respiratorySupportList.size(); i++) {
				RespSupport respiratorySupportObj = respiratorySupportList.get(i);
				if (!BasicUtils.isEmpty(respiratorySupportObj)) {
//                    rs_vent_type,rs_mech_vent_type,creationtime
					if (BasicUtils.isEmpty(prevRespiratorySupport) && !BasicUtils.isEmpty(respiratorySupportObj.getRsVentType())) {
						if (((String) respiratorySupportObj.getRsVentType()).equalsIgnoreCase("Mechanical Ventilation"))
							prevRespiratorySupport = currRespiratorySupport = (String) respiratorySupportObj.getRsMechVentType();
						else
							prevRespiratorySupport = currRespiratorySupport = (String) respiratorySupportObj.getRsVentType();
					} else {
						if (!BasicUtils.isEmpty(respiratorySupportObj.getRsVentType())) {
							if (((String) respiratorySupportObj.getRsVentType()).equalsIgnoreCase("Mechanical Ventilation"))
								currRespiratorySupport = (String) respiratorySupportObj.getRsMechVentType();
							else
								currRespiratorySupport = (String) respiratorySupportObj.getRsVentType();

							if (!prevRespiratorySupport.equalsIgnoreCase(currRespiratorySupport)) {
								stopTime = (Timestamp) respiratorySupportObj.getCreationtime();
								currRespDuration = Math.abs(stopTime.getTime() - startTime.getTime()) / (1000 * 60);
								totalDuration += currRespDuration;


                                if (prevRespiratorySupport.equalsIgnoreCase("PTV")) {
                                    durationPTV += currRespDuration;
                                    stopTimeInvasive = stopTime;
                                }

                                if (prevRespiratorySupport.equalsIgnoreCase("IMV")) {
                                    durationIMV += currRespDuration;
                                    stopTimeInvasive = stopTime;
                                }

								if (prevRespiratorySupport.equalsIgnoreCase("High Flow O2")) {
									durationHFO2 += currRespDuration;
									stopTimeOxygen = stopTime;
								}

								if (prevRespiratorySupport.equalsIgnoreCase("Low Flow O2")) {
									durationLFO2 += currRespDuration;
									stopTimeOxygen = stopTime;
								}
								if (prevRespiratorySupport.equalsIgnoreCase("CPAP")) {
									durationCPAP += currRespDuration;
									stopTimeNonInvasive = stopTime;
								}
								if (prevRespiratorySupport.equalsIgnoreCase("NIMV")) {
									durationNIMV += currRespDuration;
									stopTimeNonInvasive = stopTime;
								}
								if (prevRespiratorySupport.equalsIgnoreCase("SIMV")) {
									durationSIMV += currRespDuration;
									stopTimeInvasive = stopTime;
								}
								if (prevRespiratorySupport.equalsIgnoreCase("PSV")) {
									durationPSV += currRespDuration;
									stopTimeInvasive = stopTime;
								}
								if (prevRespiratorySupport.equalsIgnoreCase("HFO")) {
									durationHFO += currRespDuration;
									stopTimeInvasive = stopTime;
								}
								startTime = null;
								prevRespiratorySupport = currRespiratorySupport;
							}
						} else {

							if (i == respiratorySupportList.size() - 1) {
								if (!BasicUtils.isEmpty(respiratorySupportObj.getCreationtime()) && !BasicUtils.isEmpty(respiratorySupportObj.getIsactive()) && respiratorySupportObj.getIsactive() == false ) {
									stopTime = (Timestamp) respiratorySupportObj.getCreationtime();
								}

								if (!BasicUtils.isEmpty(stopTime) && !BasicUtils.isEmpty(startTime)) {
									currRespDuration = Math.abs(stopTime.getTime() - startTime.getTime()) / (1000 * 60);
									totalDuration += currRespDuration;

                                    if (prevRespiratorySupport.equalsIgnoreCase("PTV")) {
                                        durationPTV += currRespDuration;
                                        stopTimeInvasive = stopTime;
                                    }

                                    if (prevRespiratorySupport.equalsIgnoreCase("IMV")) {
                                        durationIMV += currRespDuration;
                                        stopTimeInvasive = stopTime;
                                    }

									if (prevRespiratorySupport.equalsIgnoreCase("High Flow O2")) {
										durationHFO2 += currRespDuration;
										stopTimeOxygen = stopTime;
									}
									if (prevRespiratorySupport.equalsIgnoreCase("Low Flow O2")) {
										durationLFO2 += currRespDuration;
										stopTimeOxygen = stopTime;
									}
									if (prevRespiratorySupport.equalsIgnoreCase("CPAP")) {
										durationCPAP += currRespDuration;
										stopTimeNonInvasive = stopTime;
									}
									if (prevRespiratorySupport.equalsIgnoreCase("NIMV")) {
										durationNIMV += currRespDuration;
										stopTimeNonInvasive = stopTime;
									}
									if (prevRespiratorySupport.equalsIgnoreCase("SIMV")) {
										durationSIMV += currRespDuration;
										stopTimeInvasive = stopTime;
									}
									if (prevRespiratorySupport.equalsIgnoreCase("PSV")) {
										durationPSV += currRespDuration;
										stopTimeInvasive = stopTime;
									}
									if (prevRespiratorySupport.equalsIgnoreCase("HFO")) {
										durationHFO += currRespDuration;
										stopTimeInvasive = stopTime;
									}
									startTime = null;
									prevRespiratorySupport = currRespiratorySupport;
								}
							}
						}
					}

					if (BasicUtils.isEmpty(startTime)) {
						startTime = (Timestamp) respiratorySupportObj.getCreationtime();
					}
				}
			}

//            List<RespSupport> respUsageList = respiratorySupportList;
//
//            List<RespSupport> respUsageListFinal = new ArrayList<RespSupport>();
//            int i =1;
//            String initialMode = "";
//            List<String> eventNames = new ArrayList<String>();
//            for(RespSupport resp : respUsageList) {
//                if(i==1) {
//                    startTime = resp.getCreationtime();
//                    if(!BasicUtils.isEmpty(resp.getRsVentType()) && !BasicUtils.isEmpty(resp.getEventname())) {
//                        if(resp.getRsVentType().equalsIgnoreCase("Mechanical Ventilation")){
//                            initialMode = resp.getRsMechVentType();
//                        }else {
//                            initialMode = resp.getRsVentType();
//                        }
//                        i=2;
//                        respUsageListFinal.add(resp);
//                        eventNames.add(resp.getEventname());
//                        //Insert without end date
//
//                    }
//                }else if(!BasicUtils.isEmpty(startTime)){
//                    if(!BasicUtils.isEmpty(resp.getIsactive()) && resp.getIsactive() && !BasicUtils.isEmpty(resp.getRsVentType())) {
//                        if(resp.getRsVentType().equalsIgnoreCase("Mechanical Ventilation") && initialMode.equalsIgnoreCase(resp.getRsMechVentType())){
//                            if(!BasicUtils.isEmpty(resp.getEventname()) && !eventNames.contains(resp.getEventname())) {
//                                eventNames.add(resp.getEventname());
//                                int length = respUsageListFinal.size();
//                                String previouseventName = respUsageListFinal.get(length-1).getEventname();
//                                previouseventName = previouseventName + ", " + resp.getEventname();
//                                respUsageListFinal.get(length-1).setEventname(previouseventName);
//                            }
//                        }else if(initialMode.equalsIgnoreCase(resp.getRsVentType())) {
//                            //Insert without end
//                            if(!BasicUtils.isEmpty(resp.getEventname()) && !eventNames.contains(resp.getEventname())) {
//                                eventNames.add(resp.getEventname());
//                                int length = respUsageListFinal.size();
//                                String previouseventName = respUsageListFinal.get(length-1).getEventname();
//                                previouseventName = previouseventName + ", " + resp.getEventname();
//                                respUsageListFinal.get(length-1).setEventname(previouseventName);
//                            }
//
//                        }else {
//                            //Pick last-> calculate end time and insert new without end date
//                            Long diffInMinutes = (resp.getCreationtime().getTime() - startTime.getTime()) / (1000 * 60);
//                            int length = respUsageListFinal.size();
//                            respUsageListFinal.get(length-1).setEndtime(resp.getCreationtime());
//                            respUsageListFinal.get(length-1).setDifferenceinmins(diffInMinutes);
//                            eventNames = new ArrayList<String>();
//                            startTime = resp.getCreationtime();
//
//                            if(resp.getRsVentType().equalsIgnoreCase("Mechanical Ventilation")){
//                                initialMode = resp.getRsMechVentType();
//                            }else {
//                                initialMode = resp.getRsVentType();
//                            }
//
//                            respUsageListFinal.add(resp);
//                            eventNames.add(resp.getEventname());
//                        }
//
//                    }else if((!BasicUtils.isEmpty(startTime)) && ((!BasicUtils.isEmpty(resp.getIsactive()) && resp.getIsactive() == false) || (BasicUtils.isEmpty(resp.getIsactive())))){
//                        //Pick last-> calculate end time
//                        Long diffInMinutes = (resp.getCreationtime().getTime() - startTime.getTime()) / (1000 * 60);
//                        int length = respUsageListFinal.size();
//                        respUsageListFinal.get(length-1).setDifferenceinmins(diffInMinutes);
//                        respUsageListFinal.get(length-1).setEndtime(resp.getCreationtime());
//                        eventNames = new ArrayList<String>();
//                        i=1;
//                    }
//                }
//            }
//
//            System.out.println("Check Value");
//            HashMap<String,Long> respMap = new HashMap<>();
//
//            for (RespSupport respObject:respUsageListFinal) {
//                String key = respObject.getRsVentType();
//
//                if(respObject.getRsVentType().equalsIgnoreCase("Mechanical Ventilation")){
//                    key = respObject.getRsMechVentType();
//                }else {
//                    key = respObject.getRsVentType();
//                }
//
//                if(respMap.containsKey(key)){
//                    long minDiff = respMap.get(key);
//                    minDiff += respObject.getDifferenceinmins();
//                    respMap.put(key,minDiff);
//                }else{
//                    respMap.put(key,respObject.getDifferenceinmins());
//                }
//            }
//
//            durationHFO2 = durationLFO2 = durationCPAP = durationNIMV = durationSIMV = durationPSV = durationHFO = durationIMV= durationPTV= 0l;
//            for (Map.Entry<String,Long> myEntry:respMap.entrySet()) {
//                String eventName = myEntry.getKey();
//                long currDuration = myEntry.getValue();
//
//                switch (myEntry.getKey()){
//                    case "High Flow O2":durationHFO2 += currDuration;
//                                        break;
//                    case "Low Flow O2": durationLFO2 += currDuration;
//                                        break;
//                    case "CPAP":        durationCPAP += currDuration;
//                                        break;
//                    case "NIMV":        durationNIMV += currDuration;
//                                        break;
//                    case "SIMV":        durationSIMV += currDuration;
//                                        break;
//                    case "PSV":         durationPSV += currDuration;
//                                        break;
//                    case "HFO":         durationHFO += currRespDuration;
//                                        break;
//                    case "PTV":         durationPTV += currRespDuration;
//                        break;
//                    case "IMV":         durationIMV += currRespDuration;
//                        break;
//                }
//                totalDuration += currDuration;
//                System.out.println("Key is :"+eventName+" and Value is :"+currDuration);
//            }


			if (totalDuration != 0) {
				boolean firstSupportdone = false;
				timeString = "minutes";
				time = totalDuration;
				if (totalDuration == 1) {
					timeString = "minute";
				}

				if (totalDuration >= (60 * 24)) {
					timeString = "day";
					if (totalDuration >= (120 * 24)) {
						timeString = "days";
                        time = (long) Math.round((float) (totalDuration) / (24 * 60));
					}else{
                        time = (long) Math.round((float) (totalDuration) / (24 * 60));
                    }

				} else {
					if (totalDuration >= (60)) {
						timeString = "hour";
						if (totalDuration >= (120)) {
							timeString = "hours";
                            time = (long) Math.round((float) (totalDuration) / (60));
						}else {
                            time = (long) Math.round((float) (totalDuration) / (60));
                        }
					}
				}

				List<String> respiratorySupportDurationList = new ArrayList<>();
				respiratorySupportRdsHelperString += "Baby was on respiratory support for the"
						+ " cumulative duration of " + time + " " + timeString + " ";
				// HFO2
				if (durationHFO2 != 0) {
					timeString = "minutes ";
					time = durationHFO2;
					if (durationHFO2 == 1) {
						timeString = "minute";
					}

					if (durationHFO2 >= (60 * 24)) {
						timeString = "day ";
						if (durationHFO2 >= (120 * 24)) {
							timeString = "days ";
                            time = (long) Math.round((float) (durationHFO2) / (24 * 60));
                        }else{
                            time = (long) Math.round((float) (durationHFO2) / (24 * 60));
                        }
					} else {
						if (durationHFO2 >= (60)) {
							timeString = "hour ";
							if (durationHFO2 >= (120)) {
								timeString = "hours ";
                                time = (long) Math.round((float) (durationHFO2) / (60));
                            }else {
                                time = (long) Math.round((float) (durationHFO2) / (60));
                            }
						}
					}

					respiratorySupportDurationList.add("High Flow O2 " + time + " " + timeString);
				}

				// LFO2
				if (durationLFO2 != 0) {
					timeString = "minutes ";
					time = durationLFO2;
					if (durationLFO2 == 1) {
						timeString = "minute";
					}

					if (durationLFO2 >= (60 * 24)) {
						timeString = "day ";
						if (durationLFO2 >= (120 * 24)) {
							timeString = "days ";
                            time = (long) Math.round((float) (durationLFO2) / (24 * 60));
                        }else{
                            time = (long) Math.round((float) (durationLFO2) / (24 * 60));
                        }
					} else {
						if (durationLFO2 >= (60)) {
							timeString = "hour ";
							if (durationLFO2 >= (120)) {
								timeString = "hours ";
                                time = (long) Math.round((float) (durationLFO2) / (60));
                            }else {
                                time = (long) Math.round((float) (durationLFO2) / (60));
                            }
						}
					}

					respiratorySupportDurationList.add("Low Flow O2 " + time + " " + timeString);
				}

				// CPAP
				if (durationCPAP != 0) {
					timeString = "minutes ";
					time = durationCPAP;
					if (durationCPAP == 1) {
						timeString = "minute";
					}

					if (durationCPAP >= (60 * 24)) {
						timeString = "day ";
						if (durationCPAP >= (120 * 24)) {
							timeString = "days ";
                            time = (long) Math.round((float) (durationCPAP) / (24 * 60));
                        }else{
                            time = (long) Math.round((float) (durationCPAP) / (24 * 60));
                        }
					} else {
						if (durationCPAP >= (60)) {
							timeString = "hour ";
							if (durationCPAP >= (120)) {
								timeString = "hours ";
                                time = (long) Math.round((float) (durationCPAP) / (60));
                            }else {
                                time = (long) Math.round((float) (durationCPAP) / (60));
                            }
						}
					}

					respiratorySupportDurationList.add("CPAP " + time + " " + timeString);
				}

				// NIMV
				if (durationNIMV != 0) {
					timeString = "minutes ";
					time = durationNIMV;
					if (durationNIMV == 1) {
						timeString = "minute";
					}

					if (durationNIMV >= (60 * 24)) {
						timeString = "day ";
						if (durationNIMV >= (120 * 24)) {
							timeString = "days ";
                            time = (long) Math.round((float) (durationNIMV) / (24 * 60));
                        }else{
                            time = (long) Math.round((float) (durationNIMV) / (24 * 60));
                        }
					} else {
						if (durationNIMV >= (60)) {
							timeString = "hour ";
							if (durationNIMV >= (120)) {
								timeString = "hours ";
                                time = (long) Math.round((float) (durationNIMV) / (60));
                            }else {
                                time = (long) Math.round((float) (durationNIMV) / (60));
                            }
						}
					}

					respiratorySupportDurationList.add("NIMV " + time + " " + timeString);
				}

				// SIMV
				if (durationSIMV != 0) {
					timeString = "minutes ";
					time = durationSIMV;
					if (durationSIMV >= (60 * 24)) {
						timeString = "days ";
                        if (durationSIMV >= (120 * 24)) {
                            timeString = "days ";
                            time = (long) Math.round((float) (durationSIMV) / (24 * 60));
                        }else{
                            time = (long) Math.round((float) (durationSIMV) / (24 * 60));
                        }
					} else {
						if (durationSIMV >= (60)) {
							timeString = "hours ";
                            if (durationSIMV >= (120)) {
                                timeString = "hours ";
                                time = (long) Math.round((float) (durationSIMV) / (60));
                            }else {
                            	time = (long) Math.round((float) (durationSIMV) / (60));
                            }
						}
					}

					respiratorySupportDurationList.add("SIMV " + time + " " + timeString);
				}

				// PSV
				if (durationPSV != 0) {
					timeString = "minutes ";
					time = durationPSV;
					if (durationPSV >= (60 * 24)) {
						timeString = "days ";
                        if (durationPSV >= (120 * 24)) {
                            timeString = "days ";
                            time = (long) Math.round((float) (durationPSV) / (24 * 60));
                        }else{
                            time = (long) Math.round((float) (durationPSV) / (24 * 60));
                        }
					} else {
						if (durationPSV >= (60)) {
							timeString = "hours ";
                            if (durationPSV >= (120)) {
                                timeString = "hours ";
                                time = (long) Math.round((float) (durationPSV) / (60));
                            }else {
                                time = (long) Math.round((float) (durationPSV) / (60));
                            }
						}
					}

					respiratorySupportDurationList.add("PSV " + time + " " + timeString);
					if (firstSupportdone == false) {
						firstSupportdone = true;
					}
				}

				// HFO
				if (durationHFO != 0) {
					timeString = "minutes ";
					time = durationHFO;
					if (durationHFO >= (60 * 24)) {
						timeString = "days ";
                        if (durationHFO >= (120 * 24)) {
                            timeString = "days ";
                            time = (long) Math.round((float) (durationHFO) / (24 * 60));
                        }else{
                            time = (long) Math.round((float) (durationHFO) / (24 * 60));
                        }
					} else {
						if (durationHFO >= (60)) {
							timeString = "hours ";
                            if (durationHFO >= (120)) {
                                timeString = "hours ";
                                time = (long) Math.round((float) (durationHFO) / (60));
                            }else {
                                time = (long) Math.round((float) (durationHFO) / (60));
                            }
						}
					}

					respiratorySupportDurationList.add("HFO " + time + " " + timeString);
				}

				// PTV
                if (durationPTV != 0) {
                    timeString = "minutes ";
                    time = durationPTV;
                    if (durationPTV >= (60 * 24)) {
                        timeString = "days ";
                        if (durationPTV >= (120 * 24)) {
                            timeString = "days ";
                            time = (long) Math.round((float) (durationPTV) / (24 * 60));
                        }else{
                            time = (long) Math.round((float) (durationPTV) / (24 * 60));
                        }
                    } else {
                        if (durationPTV >= (60)) {
                            timeString = "hours ";
                            if (durationPTV >= (120)) {
                                timeString = "hours ";
                                time = (long) Math.round((float) (durationPTV) / (60));
                            }else {
                                time = (long) Math.round((float) (durationPTV) / (60));
                            }
                        }
                    }

                    respiratorySupportDurationList.add("PTV " + time + " " + timeString);
                }

                // IMV
                if (durationIMV != 0) {
                    timeString = "minutes ";
                    time = durationIMV;
                    if (durationIMV >= (60 * 24)) {
                        timeString = "days ";
                        if (durationIMV >= (120 * 24)) {
                            timeString = "days ";
                            time = (long) Math.round((float) (durationIMV) / (24 * 60));
                        }else{
                            time = (long) Math.round((float) (durationIMV) / (24 * 60));
                        }
                    } else {
                        if (durationIMV >= (60)) {
                            timeString = "hours ";
                            if (durationIMV >= (120)) {
                                timeString = "hours ";
                                time = (long) Math.round((float) (durationIMV) / (24 * 60));
                            }else {
                                time = (long) Math.round((float) (durationIMV) / (24 * 60));
                            }
                        }
                    }

                    respiratorySupportDurationList.add("IMV " + time + " " + timeString);
                }

				String respiratorySupportDurationListString = respiratorySupportDurationList.toString();
				respiratorySupportDurationListString = respiratorySupportDurationListString.replace("[", "");
				respiratorySupportDurationListString = respiratorySupportDurationListString.replace("]", "");
				respiratorySupportRdsHelperString += "(" + respiratorySupportDurationListString + "). ";
			}

			int countDolRespSupp = 0;
			String supportStopString = "";
			if (!BasicUtils.isEmpty(stopTimeInvasive)) {
				invasiveDol = getDayOfLife(uhid, stopTimeInvasive);
				countDolRespSupp++;
				supportStopString += "Invasive Support";
			}

			if (!BasicUtils.isEmpty(stopTimeNonInvasive)) {
				nonInvasiveDol = getDayOfLife(uhid, stopTimeNonInvasive);
				countDolRespSupp++;
				if (supportStopString != "") {
					supportStopString += ", ";
				}
				supportStopString += "Non Invasive Support";
			}

			if (!BasicUtils.isEmpty(stopTimeOxygen)) {
				oxygenSupplmentDol = getDayOfLife(uhid, stopTimeOxygen);
				countDolRespSupp++;
				if (supportStopString != "") {
					supportStopString += ", ";
				}
				supportStopString += "Oxygen Supplemenation Support";
			}

			if (countDolRespSupp > 1) {
				supportStopString += " were stopped on (DOL# ";
			} else {
				if (countDolRespSupp == 1) {
					supportStopString += " was stopped on DOL# ";
				}
			}

			if (!BasicUtils.isEmpty(stopTimeInvasive)) {
				supportStopString += invasiveDol;
			}

			if (!BasicUtils.isEmpty(stopTimeNonInvasive)) {
				if (!BasicUtils.isEmpty(stopTimeInvasive)) {
					supportStopString += ", ";
				}
				supportStopString += nonInvasiveDol;
			}

			if (!BasicUtils.isEmpty(stopTimeOxygen)) {
				if (!BasicUtils.isEmpty(stopTimeInvasive) || !BasicUtils.isEmpty(stopTimeNonInvasive)) {
					supportStopString += ", ";
				}
				supportStopString += oxygenSupplmentDol;
			}

			respiratorySupportRdsHelperString += supportStopString;
			if (countDolRespSupp == 1) {
				respiratorySupportRdsHelperString += ". ";
			} else {
				if (countDolRespSupp > 1) {
					respiratorySupportRdsHelperString += ") respectively.";
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return respiratorySupportRdsHelperString;
	}



	public String getAllPrescribedMedications(String medIdString, List<Object> medicationList) {
		String medHelperStr = "";
		if(!BasicUtils.isEmpty(medicationList)) {
			for (int i = medicationList.size() - 1; i >= 0 ; i--) {
				Object[] medicationObject = (Object[]) medicationList.get(i);
				if(medicationList.size()==1)
					medHelperStr += medicationObject[0];
				else {
					if(medHelperStr==null || medHelperStr=="") {
						medHelperStr +=  medicationObject[0];
					}
					else{
						medHelperStr += ", " + medicationObject[0];
					}
				}

			}
			medHelperStr += " was prescribed. ";
			if(medHelperStr.indexOf(",")!=-1) {
				medHelperStr = formatString(medHelperStr);
			}
		}
		return medHelperStr;
	}

	// Medication Helper Function fetch the medication data from baby_prescription
		// table and convert it into a meaningful String
		public String getMedicationHelper(String medicationIdString, String assessmentType,String uhid, boolean isSkip) throws InicuDatabaseExeption {
			String medicationHelperString = "";
			Timestamp startDate, stopDate;
			startDate = stopDate = null;
			Long totalDuration, totalDay, totalHour, totalMinute;
			totalDuration = totalDay = totalHour = totalMinute = 0L;
			int offset = TimeZone.getTimeZone(BasicConstants.CLIENT_TIME_ZONE).getRawOffset()
					- TimeZone.getDefault().getRawOffset();
			try {
				if (!BasicUtils.isEmpty(medicationIdString)) {
					String queryMedication = "SELECT medicinename,min(startdate),max(enddate) FROM baby_prescription "
							+ "where eventid IN (" + (medicationIdString) + ") and eventname='" + assessmentType + "'"
							+ "group by medicinename";

                    String queryLocaleDateformatQuery = "SELECT obj FROM LocalConfigurations obj";
                    List<LocalConfigurations> localeDate = inicuDao.getListFromMappedObjQuery(queryLocaleDateformatQuery);

                    String localDate ="dd-MM-yyyy";
                    if(localeDate!=null && localeDate.size()>0){
                        localDate = localeDate.get(0).getLocalDate();
                    }

                    List<Object> medicationList = inicuDao.getListFromNativeQuery(queryMedication);

                    if (!BasicUtils.isEmpty(medicationList)) {
					    if (!isSkip) {
                            medicationHelperString += getAllPrescribedMedications(medicationIdString, medicationList);
                        }
						for (int i = medicationList.size() - 1; i >= 0 ; i--) {
							Object[] medicationObj = (Object[]) medicationList.get(i);
							if (!BasicUtils.isEmpty(medicationObj[2])) {
								startDate = (Timestamp) medicationObj[1];
								stopDate = (Timestamp) medicationObj[2];
								startDate = new Timestamp(startDate.getTime() + offset);
								stopDate = new Timestamp(stopDate.getTime() + offset);
								if (startDate != null && stopDate != null) {
									totalDuration = (stopDate.getTime() - startDate.getTime()) / (1000 * 60);
								}

								if (totalDuration != 0) {
									totalDay = totalDuration / (60 * 24);
									totalHour = totalDuration / (60) - (totalDay * 24);
									totalMinute = totalDuration - ((totalDay * 24 * 60) + (totalHour * 60));
								}

								// formate tge date as per the locale

                                SimpleDateFormat dateFormat = new SimpleDateFormat(localDate);
                                String newStartDate = getDateFromTimestamp(startDate);
                                String newEndDate = getDateFromTimestamp(stopDate);
                                try {
                                    newStartDate = dateFormat.format(startDate);
                                    newEndDate = dateFormat.format(stopDate);
                                } catch(Exception e) { //this generic but you can control another types of exception
                                    // look the origin of excption
                                }

								medicationHelperString += medicationObj[0] + " was prescribed ";
								medicationHelperString += "from " + newStartDate + " (DOL# " + getDayOfLife(uhid, startDate) + ") to "
										+ newEndDate + " (DOL# " + getDayOfLife(uhid, stopDate) + ") ";
								if (totalDay != 0) {

									if (totalDay == 1) {
										medicationHelperString += "for a duration of " + totalDay + " day ";
										if (totalHour != 0) {
											if (totalHour == 1) {
												medicationHelperString += "and " + totalHour + " hour";
											} else {
												medicationHelperString += "and " + totalHour + " hours";
											}
										}

									} else {
										medicationHelperString += "for a duration of " + totalDay + " days ";
										if (totalHour != 0) {
											if (totalHour == 1) {
												medicationHelperString += "and " + totalHour + " hour";
											} else {
												medicationHelperString += "and " + totalHour + " hours";
											}
										}

									}
								} else {
									if (totalHour != 0 || totalMinute != 0) {

										medicationHelperString += "for a duration of 1 day";
									}
								}
								medicationHelperString += ". ";
							}
						}
					}
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return medicationHelperString;
		}


public String getApneaInactiveDate(List<SaRespApnea> apneaList) throws InicuDatabaseExeption{

		String str = "";
		String dateString  = "";
		int index = apneaList.size() - 1;

        String queryLocaleDateformatQuery = "SELECT obj FROM LocalConfigurations obj";
        List<LocalConfigurations> localeDate = inicuDao.getListFromMappedObjQuery(queryLocaleDateformatQuery);

        String localDate ="dd-MM-yyyy";
        if(localeDate!=null && localeDate.size()>0){
            localDate = localeDate.get(0).getLocalDate();
        }

        if( apneaList.get(index).getAssessmentDate()!=null)
            dateString = apneaList.get(index).getAssessmentDate().toString();

        SimpleDateFormat dateFormat = new SimpleDateFormat(localDate);
        String newStartDate = getDateFromTimestamp((Timestamp) apneaList.get(index).getAssessmentDate());

        try {
            newStartDate = dateFormat.format(apneaList.get(index).getAssessmentDate());
        } catch(Exception e) { //this generic but you can control another types of exception
            // look the origin of excption
        }

        str = "Now baby is Apnea free since " + newStartDate + ". ";

//        String[] dateArr = dateString.split(" ");
//        String[] date = dateArr[0].split("-");
//        if(!BasicUtils.isEmpty(date)){
//            String dateOfApnea = date[2].trim() + "-" + date[1].trim() + "-" + date[0].trim();
//            str = "Now baby is Apnea free since " + newStartDate + ". ";
//        }
//        else{
//            str = "Now baby is Apnea free since " + newStartDate + ". ";
//        }
		return str;
	}

	@Override
	public AssessmentStatus getAssessmentsStatus(String uhid) {
		AssessmentStatus assessmentObj = new AssessmentStatus();
		assessmentObj.setRespiratory(false);
		assessmentObj.setJaundice(false);
		assessmentObj.setCns(false);
		assessmentObj.setInfection(false);
		assessmentObj.setRenal(false);
		assessmentObj.setFeedIntolerance(false);
		assessmentObj.setMetabolic(false);
		assessmentObj.setMisc(false);
		assessmentObj.setPain(false);
		assessmentObj.setShock(false);
		try {
			String assessmentMessageSql = HqlSqlQueryConstants.getDischargeBabyAssessmentStatus(uhid);
			List<Object[]> activeAssessmentList = inicuDao.getListFromNativeQuery(assessmentMessageSql);
			if (!BasicUtils.isEmpty(activeAssessmentList)) {
				String assessmentMessage = "";
				Iterator<Object[]> itr = activeAssessmentList.iterator();
				while (itr.hasNext()) {
					Object[] obj = itr.next();
					assessmentMessage = assessmentMessage.concat(obj[0] + ", ");
				}
				if (assessmentMessage.contains("Respiratory Distress") || assessmentMessage.contains("Apnea")
						|| assessmentMessage.contains("Pneumothorax") || assessmentMessage.contains("PPHN")) {
					assessmentObj.setRespiratory(true);
				} else {
					assessmentObj.setRespiratory(false);
				}
				if (assessmentMessage.contains("Jaundice")) {
					assessmentObj.setJaundice(true);
				} else {
					assessmentObj.setJaundice(false);
				}
				if (assessmentMessage.contains("Asphyxia") || assessmentMessage.contains("Seizures")
						|| assessmentMessage.contains("IVH") || assessmentMessage.contains("Neuromuscular Disorder")
						|| assessmentMessage.contains("Encephalopathy") || assessmentMessage.contains("Hydrocephalus")) {
					assessmentObj.setCns(true);
				} else {
					assessmentObj.setCns(false);
				}
				if (assessmentMessage.contains("Sepsis") || assessmentMessage.contains("Vap") || assessmentMessage.contains("Clabsi")) {
					assessmentObj.setInfection(true);
				} else {
					assessmentObj.setInfection(false);
				}
				if (assessmentMessage.contains("Renal")) {
					assessmentObj.setRenal(true);
				} else {
					assessmentObj.setRenal(false);
				}
				if (assessmentMessage.contains("FeedIntolerance")) {
					assessmentObj.setFeedIntolerance(true);
				} else {
					assessmentObj.setFeedIntolerance(false);
				}
				if (assessmentMessage.contains("Hypoglycemia")) {
					assessmentObj.setMetabolic(true);
				} else {
					assessmentObj.setMetabolic(false);
				}
				if(assessmentMessage.contains("Miscellaneous")) {
					assessmentObj.setMisc(true);
				}
				else {
					assessmentObj.setMisc(false);
				}
				if(assessmentMessage.contains("Pain")) {
					assessmentObj.setPain(true);
				}
				else {
					assessmentObj.setPain(false);
				}
				if(assessmentMessage.contains("Shock")) {
					assessmentObj.setShock(true);
				}
				else {
					assessmentObj.setShock(false);
				}
			}

		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return assessmentObj;
	}

	public ResponseMessageObject saveFeedIntoleranceJson(FeedIntorelanceJSON feedIntoleranceJson, String userId)

			throws InicuDatabaseExeption {

		ResponseMessageObject obj = new ResponseMessageObject();

		SaFeedIntolerance feedIntorelance = feedIntoleranceJson.getFeedIntolerance();
		if (BasicUtils.isEmpty(feedIntorelance.getEpisodeid()) && !BasicUtils.isEmpty(feedIntorelance.getUhid())) {
			String queryAssociatedEvents = "select episodeid from sa_feed_intolerance where uhid='"
					+ feedIntorelance.getUhid() + "' order by creationtime desc";
			List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

			if (!BasicUtils.isEmpty(listAssociatedEvents)) {
				feedIntorelance.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
			}
		}

		Timestamp assessmentTime = feedIntorelance.getAssessmentTime();

		if (!BasicUtils.isEmpty(assessmentTime)) {
			feedIntorelance.setAssessmentTime(assessmentTime);
		}


		obj.setMessage("feed intolerance saved successfully.");
		obj.setType(BasicConstants.MESSAGE_SUCCESS);
		try {
			String uhid = feedIntorelance.getUhid();
			if (feedIntorelance.getFeedIntoleranceStatus() != null
					&& !feedIntorelance.getFeedIntoleranceStatus().equalsIgnoreCase("Yes")) {

				SaFeedIntolerance feedNew = new SaFeedIntolerance();
				feedNew.setFeedIntoleranceStatus(feedIntorelance.getFeedIntoleranceStatus());
				feedNew.setAgeOfOnset(feedIntorelance.getAgeOfOnset());
				feedNew.setAgeOfOnsetInHours(feedIntorelance.getAgeOfOnsetInHours());
				feedNew.setAgeAtAssessment(feedIntorelance.getAgeAtAssessment());
                feedNew.setComment(feedIntorelance.getComment());
                feedNew.setIsNewEntry(feedIntorelance.getIsNewEntry());

				if (feedNew.getFeedIntoleranceStatus().equalsIgnoreCase("No")) {

					feedNew.setAssessmentTime(feedIntorelance.getAssessmentTime());

					if (!BasicUtils.isEmpty(feedIntorelance.getMedicationText())) {
						feedNew.setMedicationText(feedIntorelance.getMedicationText());
					}

					feedNew.setEpisodeNumber(feedIntorelance.getEpisodeNumber());

					if (!BasicUtils.isEmpty(feedIntoleranceJson)) {
						feedNew.setOrderInvestigation(feedIntoleranceJson.getOrderSelectedText());
					}
					feedNew.setMedicationText(feedIntorelance.getMedicationText());
				}
				feedNew.setAssessmentTime(feedIntorelance.getAssessmentTime());
				feedNew.setEpisodeNumber(feedIntorelance.getEpisodeNumber());

				feedIntorelance = feedNew;
			} else {
				// when feed is active
				// setting list to string

				if (!BasicUtils.isEmpty(feedIntorelance)) {
					feedIntorelance.setCauseOfFeed(feedIntorelance.getCauseOfFeed());
					// feedIntorelance.setActionType(feedIntorelance.getActionType());
					List actionTypeList = feedIntorelance.getActiontypeList();
					if (!BasicUtils.isEmpty(actionTypeList)) {
						feedIntorelance.setActionType(actionTypeList.toString());
					}
					feedIntorelance.setMedicationText(feedIntorelance.getMedicationText());
					feedIntorelance.setTreatmentActionSelected(feedIntorelance.getTreatmentActionSelected());
				}
				if (!BasicUtils.isEmpty(feedIntoleranceJson)) {
					feedIntorelance.setOrderInvestigation(feedIntoleranceJson.getOrderSelectedText());
				}

			}

			if (!BasicUtils.isEmpty(uhid)) {
				feedIntorelance.setUhid(uhid);

				{
					if (userId != null) {
						feedIntorelance.setLoggeduser(userId);

						NurseExecutionOrders order = new NurseExecutionOrders();

						// set progress notes
						if(!BasicUtils.isEmpty(feedIntorelance.getComment()) && feedIntorelance.getComment().indexOf(feedIntorelance.getLoggeduser())==-1) {
							feedIntorelance.setComment(feedIntorelance.getComment());
							order.setLoggeduser(feedIntorelance.getLoggeduser());
						}

						if(!BasicUtils.isEmpty(feedIntorelance.getPlanOther())) {
							order.setEventname("Feed Intorelance");
							order.setIsExecution(false);
							order.setOrderText(feedIntorelance.getPlanOther());
							order.setAssessmentdate(feedIntorelance.getAssessmentTime());
							order.setUhid(feedIntorelance.getUhid());
							inicuDao.saveObject(order);
						}

						if (!BasicUtils.isEmpty(feedIntoleranceJson.getFeedIntolerance().getIsNewEntry())) {
							if (feedIntoleranceJson.getFeedIntolerance().getIsNewEntry()) {
								feedIntorelance.setFeedIntoleranceId(null);
								; // due to list
									// is not
									// deatched..
								feedIntorelance.setCreationtime(null);
                                feedIntorelance = (SaFeedIntolerance) sysDAO.saveObject(feedIntorelance);
							} else {
                                if (feedIntorelance.getFeedIntoleranceStatus().equalsIgnoreCase("Inactive")) {
                                    try {
                                        String query = "update sa_feed_intolerance set comment = '" + feedIntoleranceJson.getFeedIntolerance().getComment()
                                                + "' where feedIntoleranceId = '" + feedIntoleranceJson.getFeedIntolerance().getFeedIntoleranceId()  + "'";
                                        inicuDao.updateOrDeleteNativeQuery(query);
                                    } catch (Exception ex) {
                                        ex.printStackTrace();
                                        System.out.println("Exception occured while updating progressnotes for inactive state of Feed Intolerance.");
                                    }
                                } else {
                                    feedIntorelance.setFeedIntoleranceId(
                                            feedIntoleranceJson.getFeedIntolerance().getFeedIntoleranceId());
                                    feedIntorelance
                                            .setCreationtime(feedIntoleranceJson.getFeedIntolerance().getCreationtime());
                                    feedIntorelance = (SaFeedIntolerance) sysDAO.saveObject(feedIntorelance);
                                }

							}
						}

						if (!feedIntorelance.getFeedIntoleranceStatus().equalsIgnoreCase("Inactive")) {
							List<BabyPrescription> prescriptionList = feedIntoleranceJson.getPrescriptionList();
							if (!BasicUtils.isEmpty(prescriptionList)) {
								this.savePrescriptionList(null, prescriptionList, "FeedIntolerance",
										feedIntorelance.getFeedIntoleranceId(), feedIntorelance.getAssessmentTime());
							}
						}

						// to be added later if required
						// update past progress notes for episode number
//						if (!BasicUtils.isEmpty(feedIntoleranceJson.getListfeedIntolerance())
//								&& feedIntorelance.getFeedIntoleranceStatus().equalsIgnoreCase("Inactive")) {
//
//                            updatePastFeedIntoleranceProgressNotes(feedIntorelance, feedIntoleranceJson.getListfeedIntolerance());
//						}

//						 for each of the order ordered, update to the database

						saveOrderInvestigation(feedIntoleranceJson.getTestsList(),
								feedIntorelance.getFeedIntoleranceId(), feedIntorelance.getUhid(), userId,
								"FeedIntolerance", feedIntorelance.getAssessmentTime());

					} else {
						obj.setMessage("logged user id is coming as null");
						obj.setType(BasicConstants.MESSAGE_FAILURE);
					}

				}
			} else {
				obj.setMessage("uhid is coming as null");
				obj.setType(BasicConstants.MESSAGE_FAILURE);
			}

			// save logs
			String desc = mapper.writeValueAsString(feedIntorelance);

			String action = BasicConstants.INSERT;

			if (feedIntorelance.isEdit()) {
				action = BasicConstants.UPDATE;
			}

			/**
			 * this condition to be removed once data is coming from front end.
			 */

			String loggeduser = null;
			if (!BasicUtils.isEmpty(userId)) {
				loggeduser = userId;
			} else {
				loggeduser = "1234"; // setting dummy user as of now needs to be
				// removed
			}

			String pageName = BasicConstants.SA_FEED_TOLERANCE;
			logService.saveLog(desc, action, loggeduser, uhid, pageName);

//			obj.setMessage("Feed Intolerance saved successfully.");
//			obj.setType(BasicConstants.MESSAGE_SUCCESS);
		} catch (Exception e) {
			obj.setType(BasicConstants.MESSAGE_FAILURE);
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, userId,
					feedIntorelance.getUhid(), "SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return obj;
	}

	public ResponseMessageObject saveNutritionObject(BabyfeedDetail babyfeedDetail){
		ResponseMessageObject responseMessageObject=new ResponseMessageObject();
		try {
			// empty the babyfeedid to create a new Entry in the table
			babyfeedDetail.setBabyfeedid(null);

			// save the object
			inicuDao.saveObject(babyfeedDetail);

			responseMessageObject.setStatus_code(200);
			responseMessageObject.setStatus(true);
			responseMessageObject.setMessage("Saved Successfully");
		}catch (Exception e){
			responseMessageObject.setType(BasicConstants.MESSAGE_FAILURE);
			responseMessageObject.setStatus_code(500);
			responseMessageObject.setStatus(false);
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, "",
					"", "SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return responseMessageObject;
	}




	private void PopulateTreatmentFeed(SaFeedIntolerance safeedintolerance)
	{
		String TreatmentStr = safeedintolerance.getActionType();
		if (!BasicUtils.isEmpty(TreatmentStr)) {
			String[] listTreatment = TreatmentStr.replace(" ", "").trim().replace("[", "").replace("]", "")
					.split(",");
			ArrayList<String> listTreatmentArray = new ArrayList<String>(Arrays.asList(listTreatment));
			String temptreatment = "";
			for(int i=0;i<listTreatmentArray.size();i++)
			{
				String fetchQuery = "SELECT treatment from ref_assesment_treatment where assesmenttreatmentid='"+listTreatmentArray.get(i)+"'";

				List res = inicuDao.getListFromNativeQuery(fetchQuery);
				if(!BasicUtils.isEmpty(res))
				{
					if(i==listTreatmentArray.size()-1)
					{
						temptreatment+=res.get(0).toString();
					}
					else
					{
						temptreatment+=res.get(0).toString()+",";
					}
				}
			}
			safeedintolerance.setActionType(temptreatment);
		}
	}

	public FeedIntorelanceJSON getFeedIntolerance(String uhid, String loggedUser) throws InicuDatabaseExeption {
		FeedIntorelanceJSON masterJson = new FeedIntorelanceJSON();
		ResponseMessageObject resp = new ResponseMessageObject();

		try {
			SaFeedIntolerance newSaFeedIntolerance = new SaFeedIntolerance();

			// set dummy json
			SaFeedIntolerance oldSaFeedIntolerance = new SaFeedIntolerance();

			// date of birth of baby;
			Date dateOfBirth=null;

			// get the baby Details
			String queryBabyDetails = "select obj from BabyDetail obj where uhid='" + uhid + "' order by creationtime desc";
			List<BabyDetail> babyDetailsList = inicuDao.getListFromMappedObjQuery(queryBabyDetails);

			if(!BasicUtils.isEmpty(babyDetailsList) && babyDetailsList.size()>0){
				dateOfBirth=babyDetailsList.get(0).getDateofbirth();
				newSaFeedIntolerance.setDateofbirth(dateOfBirth);
			}

			// set New Feed Intolerance values
			HashMap<Object, Object> babyBasicInformation = getBabyInformation(uhid);
			Object ageAtOnset = babyBasicInformation.get(BasicConstants.AGE_AT_ONSET);
			Object ageAtAssessment = babyBasicInformation.get(BasicConstants.AGE_AT_ONSET);

			newSaFeedIntolerance.setAgeOfOnset(Math.round(Float.valueOf(ageAtOnset.toString())));
			newSaFeedIntolerance.setAgeAtAssessment(Math.round(Float.valueOf(ageAtAssessment.toString())));

			newSaFeedIntolerance.setFeedIntoleranceStatus("YES");
			newSaFeedIntolerance.setUhid(uhid.trim());

			String query = "SELECT feedIntolerance FROM SaFeedIntolerance as feedIntolerance WHERE uhid='" + uhid.trim()
					+ "' ORDER BY creationtime DESC";

			List<SaFeedIntolerance> listFeedIntolerance = sysDAO.executeObjectQuery(query);
			if (!BasicUtils.isEmpty(listFeedIntolerance) && listFeedIntolerance.size()>0) {

				oldSaFeedIntolerance = listFeedIntolerance.get(0);
				masterJson.setListfeedIntolerance(listFeedIntolerance);

                try {
                    if ("no".equalsIgnoreCase(oldSaFeedIntolerance.getFeedIntoleranceStatus())) {
                        masterJson.setInactiveProgressNote(generateInactiveNotesFeedIntolerance(null, uhid, ""));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    logger.error("Exception while generating inactive note", e);
                }

				newSaFeedIntolerance.setFeedIntoleranceStatus(oldSaFeedIntolerance.getFeedIntoleranceStatus());

				for(SaFeedIntolerance saFeedIntolerance : listFeedIntolerance) {
					PopulateInvestigationOrdered(saFeedIntolerance);
					PopulateTreatmentFeed(saFeedIntolerance);
				}

				List<SaFeedIntolerance> list = getRiskPastListFeed(uhid);
				if (!BasicUtils.isEmpty(list)) {
					oldSaFeedIntolerance.setRiskfactors(list.get(0).getRiskfactors());
					newSaFeedIntolerance.setRiskfactors(oldSaFeedIntolerance.getRiskfactors());
				}

				if (listFeedIntolerance.get(0).getFeedIntoleranceStatus() != null
						&& !listFeedIntolerance.get(0).getFeedIntoleranceStatus().equalsIgnoreCase("inactive")) {
					newSaFeedIntolerance.setAgeOfOnset(listFeedIntolerance.get(0).getAgeOfOnset());
					newSaFeedIntolerance.setIsAgeAtAssessmentInHours(listFeedIntolerance.get(0).getAgeOfOnsetInHours());
				}

				if(BasicUtils.isEmpty(oldSaFeedIntolerance.getFeedIntoleranceId())) {
					Long assessmentId = oldSaFeedIntolerance.getFeedIntoleranceId();
					String pastInvestigationOrderStr = "";
					java.sql.Date sqlTodayDate = new java.sql.Date(new Date().getTime());
					String queryPastOrderInvestigation = "Select obj from InvestigationOrdered obj where uhid='" + uhid
							+ "' and assesmentid='" + assessmentId + "' order by creationtime desc";

					List<InvestigationOrdered> pastOrderInvestigationList = inicuDao
							.getListFromMappedObjQuery(queryPastOrderInvestigation);

					// past order investigation
					if (!BasicUtils.isEmpty(pastOrderInvestigationList)) {
						for (InvestigationOrdered order : pastOrderInvestigationList) {
							if (!BasicUtils.isEmpty(order.getTestname())) {
								if (!BasicUtils.isEmpty(pastInvestigationOrderStr)) {
									pastInvestigationOrderStr = pastInvestigationOrderStr + ", " + order.getTestname();
								} else {
									pastInvestigationOrderStr = order.getTestname();
								}
							}
						}
						newSaFeedIntolerance.setPastOrderInvestigationStr(pastInvestigationOrderStr);
					}
				}
			}

			String queryBaselineGirth = "Select min(abdomen_girth) from nursing_intake_output where uhid='" + uhid
					+ "' and abdomen_girth is not null and creationtime between (now() - interval '1 day') and now()";
			List<String> baselineGirthList = inicuDao.getListFromNativeQuery(queryBaselineGirth);

			if (!BasicUtils.isEmpty(baselineGirthList) && baselineGirthList.size()>0) {
				newSaFeedIntolerance.setBaselineAbdominalGirth(Float.parseFloat(baselineGirthList.get(0)));
			}

			// get associated events
			String queryAssociatedEvents = "select uhid,associated_event from associate_assesment_final where uhid='"
					+ uhid + "'";
			List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

			if (!BasicUtils.isEmpty(listAssociatedEvents) && listAssociatedEvents.size()>0) {
				masterJson.setAssociatedEvents(listAssociatedEvents);
			}

			// Assessment Detail details
			String queryAssessmentFeedintolerance = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment where category='FeedIntolerance' ";
			List<KeyValueObj> assessmentFeedintolerance = getRefObj(queryAssessmentFeedintolerance);

			if (!BasicUtils.isEmpty(assessmentFeedintolerance) && assessmentFeedintolerance.size()>0) {
				masterJson.setTreatmentAction(assessmentFeedintolerance);
			}

			// Get Investigation Order
			String queryInvestigationOrder = "Select obj from InvestigationOrdered obj where uhid='" + uhid
					+ "' and assesment_type='FeedIntolerance' and assesmentid='"
					+ oldSaFeedIntolerance.getFeedIntoleranceId() + "' order by creationtime desc";

			List<InvestigationOrdered> investigationOrderList = inicuDao
					.getListFromMappedObjQuery(queryInvestigationOrder);

			if (!BasicUtils.isEmpty(investigationOrderList) && investigationOrderList.size()>0) {
				ArrayList<String> investOrder = new ArrayList<>();
				for (InvestigationOrdered order : investigationOrderList) {
					if (!BasicUtils.isEmpty(order.getTestname())) {
						investOrder.add(order.getTestname());
					}
				}
				newSaFeedIntolerance.setOrderinvestigationList(investOrder);
			}

			// get tests list from ref table...
			String queryRefTestsList = "select obj from RefTestslist as obj where not (obj.assesmentCategory like ('%None%')) order by assesmentCategory, testid asc";
			List<RefTestslist> listRefTests = inicuDao.getListFromMappedObjQuery(queryRefTestsList);

			// populate drop down hash map for the tests list...
			if(!BasicUtils.isEmpty(listRefTests) && listRefTests.size()>0) {
				HashMap<Object, List<RefTestslist>> testsListMap = new HashMap<Object, List<RefTestslist>>();
				for (RefTestslist test : listRefTests) {
					List categoryList = null;
					if (testsListMap.get(test.getAssesmentCategory()) != null) {
						categoryList = testsListMap.get(test.getAssesmentCategory());
					} else {
						categoryList = new ArrayList<RefTestslist>();
					}
					categoryList.add(test);
					testsListMap.put(test.getAssesmentCategory(), categoryList);
				}

				if (!BasicUtils.isEmpty(testsListMap) && testsListMap.size()>0) {
					masterJson.setTestsList(testsListMap);
				}
			}
			
			String queryGetFrequencyRef = "select obj from RefMedfrequency obj order by frequency_int";
			List<RefMedfrequency> freqList = inicuDao.getListFromMappedObjQuery(queryGetFrequencyRef);
			masterJson.setMedicineFrequency(freqList);

			// get past prescriptions
			DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date currentDate1 = new Date();
			String currentDateFinal = dateFormat.format(currentDate1);
			String calDate = CalculateDate48HoursAgo(currentDate1);

			masterJson.setPrescriptionList(getPastPrescriptionList(uhid, calDate, currentDateFinal));

			List<KeyValueItem> feedRiskFactorList = getFeedRiskFactorList();
			if (!BasicUtils.isEmpty(feedRiskFactorList) && feedRiskFactorList.size()>0) {
				newSaFeedIntolerance.setRiskFactorList(feedRiskFactorList);
			}

			String queryFeedAbdominalList = "Select abdominal_id,abdominal_distinction from ref_feedintolerance_abdominal";
			List<KeyValueObj> feedAbdominalList = getRefObj(queryFeedAbdominalList);

			if (!BasicUtils.isEmpty(feedAbdominalList) && feedAbdominalList.size()>0) {
				newSaFeedIntolerance.setAbdominalDistinctionList(feedAbdominalList);
			}

			String queryFeedCauseList = "Select fic_id,cause from ref_feedintolerance_causes";
			List<KeyValueObj> feedCauseList = getRefObj(queryFeedCauseList);

			if (!BasicUtils.isEmpty(feedCauseList) && feedCauseList.size()>0) {
				newSaFeedIntolerance.setCauseOfFeedIntoleranceList(feedCauseList);
			}

			Timestamp currentDate = new Timestamp((new java.util.Date().getTime()));
			Timestamp yesterday = new Timestamp((new java.util.Date().getTime()));

			int offset = TimeZone.getTimeZone(BasicConstants.CLIENT_TIME_ZONE).getRawOffset()
					- TimeZone.getDefault().getRawOffset();

			yesterday.setHours(8);
			yesterday.setMinutes(0);
			yesterday.setSeconds(0);
			yesterday = new Timestamp(yesterday.getTime() - offset);

			String nursingIntakeSql = "SELECT obj FROM NursingIntakeOutput as obj WHERE uhid='" + uhid
					+ "' and creationtime BETWEEN '" + yesterday + "' and '" + currentDate
					+ "' order by creationtime desc ";

			List<NursingIntakeOutput> nursingIntakeList = inicuDao.getListFromMappedObjQuery(nursingIntakeSql);

			if (!BasicUtils.isEmpty(nursingIntakeList) && nursingIntakeList.size()>0) {
				masterJson.setNutritionList(nursingIntakeList);
			}

			// Fetch the lastes baby feed entry from BabyFeedDetail table
			String babyFeedQuery="SELECT obj FROM BabyfeedDetail as obj where uhid='"+uhid+"' order by creationtime desc";
			List<BabyfeedDetail> babyfeedDetails=inicuDao.getListFromMappedObjQuery(babyFeedQuery);

			if(!BasicUtils.isEmpty(babyfeedDetails) && babyfeedDetails.size()>0){
				masterJson.setLastBabyFeedObject(babyfeedDetails.get(0));
			}else{
				masterJson.setLastBabyFeedObject(new BabyfeedDetail());
			}

			masterJson.setFeedIntolerance(newSaFeedIntolerance);
			masterJson.setResponse(resp);
			masterJson.setUserId(loggedUser);

			resp.setType(BasicConstants.MESSAGE_SUCCESS);
			resp.setMessage("retrieve successful");

		} catch (Exception e) {
			resp.setType(BasicConstants.MESSAGE_FAILURE);
			resp.setMessage(e.getMessage());
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser, uhid,
					"SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return masterJson;
	}

	private String getCausesOfBpdRespiratory(AssessmentRespSystemPOJO respSystem) {

		String bpdRespiratoryNotes = "";

		String bpdTempNote = null;
		String querybpdRespNote = "select obj from RespSupport obj where uhid='" + respSystem.getUhid()
				+ "' and bpdRespNote is not null order by creationtime desc";
		List<RespSupport> bpdRespNoteList = inicuDao.getListFromMappedObjQuery(querybpdRespNote);
		if (!BasicUtils.isEmpty(bpdRespNoteList)) {
			bpdTempNote = bpdRespNoteList.get(0).getBpdRespNote();
		}

		if (!BasicUtils.isEmpty(respSystem)) {
			boolean bpdActive = false;
			if ((Integer) respSystem.getCurrentGestationWeek() < 32
					&& ((!bpdTempNote.contains("bpdgest") || !bpdTempNote.contains("bpdgest")) )) {
				bpdActive = true;
			} else if (respSystem.getPma().toString().contains("56") && ((!bpdTempNote.contains("bpdgest") || !bpdTempNote.contains("bpdgest")))) {
				bpdActive = true;
			}
			if (bpdActive) {
				if (!BasicUtils.isEmpty(respSystem.getBpdRespTemplate())) {
					bpdRespiratoryNotes = respSystem.getBpdRespTemplate();
				}
			}
		}
		return bpdRespiratoryNotes;
	}

    private String getCausesOfBpdRespiratory(String uhid) {

        String bpdRespiratoryNotes = "";
        String pma = null;
        Integer gestationweek = 0;
        Integer gestationday = 0;
        boolean bpd = false;

        String bpdTempNote = null;
        String querybpdRespNote = "select obj from RespSupport obj where uhid='" + uhid
                + "' and bpdRespNote is not null order by creationtime desc";
        List<RespSupport> bpdRespNoteList = inicuDao.getListFromMappedObjQuery(querybpdRespNote);
        if (!BasicUtils.isEmpty(bpdRespNoteList)) {
            bpdTempNote = bpdRespNoteList.get(0).getBpdRespNote();
        }

        if (!BasicUtils.isEmpty(bpdTempNote)) {

            String queryPma = "select obj from DashboardFinalview obj where uhid='" + uhid
                    + "' and dayoflife is not null order by creationtime desc";
            List<DashboardFinalview> pmaList = inicuDao.getListFromMappedObjQuery(queryPma);
            if (!BasicUtils.isEmpty(pmaList)) {
                pma = pmaList.get(0).getDayoflife();
            }
            String queryCurrentGestation = "select gestationweek,gestationdays from baby_visit" + " where uhid='" + uhid
                    + "' order by creationtime desc";
            List<Object[]> currentGestationList = inicuDao.getListFromNativeQuery(queryCurrentGestation);
            if (!BasicUtils.isEmpty(currentGestationList)) {
                gestationweek = parseInt(currentGestationList.get(0)[0].toString());
                gestationday = parseInt(currentGestationList.get(0)[1].toString());
            }
            // boolean bpdActive = false;
            if (gestationweek < 32
                    && (!bpdTempNote.contains("bpdgest") || !bpdTempNote.contains("bpdpma"))) {
                bpdRespiratoryNotes = bpdTempNote;
                bpd = true;
            } else if (pma.contains("56") && (!bpdTempNote.contains("bpdgest") || !bpdTempNote.contains("bpdpma"))) {
                bpdRespiratoryNotes = bpdTempNote;
                bpd = true;
            }

            if(bpd) {

                String queryDischargeStatus = "select obj from BabyDetail obj where uhid='" + uhid
                        + "' and admissionstatus = 'false' order by creationtime desc";
                List<BabyDetail> dischargeStatusList = inicuDao.getListFromMappedObjQuery(queryDischargeStatus);
                if (!BasicUtils.isEmpty(dischargeStatusList)) {
                    // discharged

                    String tempRespiratoryNote = "";
                    String queryRespSupport = "select obj from RespSupport obj where uhid='" + uhid
                            + "' order by creationtime desc";
                    List<RespSupport> respSupportList = inicuDao.getListFromMappedObjQuery(queryRespSupport);
                    if (!BasicUtils.isEmpty(respSupportList)) {
                        RespSupport respObj = respSupportList.get(0);
                        String rsVentType = "";
                        if (!BasicUtils.isEmpty(respObj.getRsVentType()) && (respObj.getRsVentType().equals("HFO")
                                || respObj.getRsVentType().equals("Mechanical Ventilation"))) {
                            tempRespiratoryNote = " severe";
                            rsVentType = respObj.getRsVentType();

                        } else if (!BasicUtils.isEmpty(respObj.getRsVentType())
                                && (respObj.getRsVentType().equals("CPAP")
                                || respObj.getRsVentType().equals("Low Flow O2")
                                || respObj.getRsVentType().equals("High Flow O2")
                                || respObj.getRsVentType().equals("NIMV"))) {
                            tempRespiratoryNote = " moderate";
                            rsVentType = respObj.getRsVentType();
                        } else {
                            tempRespiratoryNote = " mild";
                            rsVentType = "room air";
                        }
                        tempRespiratoryNote += tempRespiratoryNote + " at " + gestationweek
                                + " week of gestation.Presently the baby PMA is " + pma + " days and is on "
                                + rsVentType;
                        if (!BasicUtils.isEmpty(respObj.getRsMap())) {
                            tempRespiratoryNote += " with MAP " + respObj.getRsMap();
                        }
                        if (!BasicUtils.isEmpty(respObj.getRsFio2())) {
                            tempRespiratoryNote += " and FiO2 " + respObj.getRsFio2() + ".";
                        }
                    }
                    if (bpdTempNote.contains("bpdgest")) {
                        bpdTempNote = bpdTempNote.replace("bpdgest", tempRespiratoryNote);
                    } else if (bpdTempNote.contains("bpdpma")) {
                        bpdTempNote = bpdTempNote.replace("bpdpma", tempRespiratoryNote);
                    }
                    bpdRespiratoryNotes = bpdTempNote;
                }
            }
        }
        return bpdRespiratoryNotes;
    }

	private String getIcdCodeList(String uhid) {

		String icdCode = "";

		String queryIcdCode = "select obj from SaJaundice obj where uhid='" + uhid
				+ "' and icdCauseofjaundice is not null order by creationtime desc";
		List<SaJaundice> icdCodeList = inicuDao.getListFromMappedObjQuery(queryIcdCode);
		if (!BasicUtils.isEmpty(icdCodeList)) {

			for (SaJaundice jaun : icdCodeList) {
				if (BasicUtils.isEmpty(icdCode)) {
					icdCode += jaun.getIcdCauseofjaundice().replaceAll(",", "/").replace("[", "").replace("]", "");
				} else {
					icdCode += "/"
							+ jaun.getIcdCauseofjaundice().replaceAll(",", "/").replace("[", "").replace("]", "");
				}
			}

			String[] icdCodeArr = icdCode.split("/");
			icdCode = "";
			for (String icdCodeStr : icdCodeArr) {
				if (icdCode.isEmpty()) {
					icdCode = icdCodeStr;
				} else if (!icdCode.contains(icdCodeStr.trim())) {
					icdCode += "/ " + icdCodeStr.trim();
				}
			}
		}

		return icdCode;
	}

	private List<KeyValueItem> getFeedRiskFactorList() {

		List<KeyValueItem> mainList = new ArrayList<KeyValueItem>();

		KeyValueItem l21 = new KeyValueItem();
		l21.setKey("FEED101");
		l21.setValue("Increased");
		l21.setItem(null);

		KeyValueItem l22 = new KeyValueItem();
		l22.setKey("FEED102");
		l22.setValue("Absent");
		l22.setItem(null);

		KeyValueItem l23 = new KeyValueItem();
		l23.setKey("FEED103");
		l23.setValue("Reverse");
		l23.setItem(null);

		List<KeyValueItem> level2 = new ArrayList<KeyValueItem>();
		level2.add(l21);
		level2.add(l22);
		level2.add(l23);

		KeyValueItem l11 = new KeyValueItem();
		l11.setKey("FEED001");
		l11.setValue("Prematurity");
		l11.setItem(null);

		KeyValueItem l12 = new KeyValueItem();
		l12.setKey("FEED002");
		l12.setValue("Umblical Doppler");
		l12.setItem(level2);

		KeyValueItem l13 = new KeyValueItem();
		l13.setKey("FEED003");
		l13.setValue("Severe Growth Restriction");
		l13.setItem(null);

		KeyValueItem l14 = new KeyValueItem();
		l14.setKey("FEED004");
		l14.setValue("Low APGAR");
		l14.setItem(null);

		KeyValueItem l15 = new KeyValueItem();
		l15.setKey("FEED005");
		l15.setValue("Sepsis");
		l15.setItem(null);

		mainList.add(l11);
		mainList.add(l12);
		mainList.add(l13);
		mainList.add(l14);
		mainList.add(l15);

		return mainList;

	}

	public String formatString(String str) {

		int index = str.lastIndexOf(",");
		str = new StringBuilder(str).replace(index, index+1, " and ").toString();

		return str;

	}

	// get Pain
	@Override
	public PainPOJO getPain(String uhid, String loggedUser){
		PainPOJO json = new PainPOJO();
		SaPain oldPainObj = json.getPain();
		Long timeHours = null;
		int offset = TimeZone.getTimeZone(BasicConstants.CLIENT_TIME_ZONE).getRawOffset()
				- TimeZone.getDefault().getRawOffset();



		// get age at onset....in hours and weeks/..
		Calendar birthDateCal = null;
		Integer gestation = null;
		try {

			String queryBabyDetails = "select obj from BabyDetail obj where uhid='" + uhid + "'";

			List<BabyDetail> babyDetailsLsit = inicuDao.getListFromMappedObjQuery(queryBabyDetails);

			if (!BasicUtils.isEmpty(babyDetailsLsit)) {
				BabyDetail babyDetails = babyDetailsLsit.get(0);

				// setting gestation here....
				gestation = babyDetails.getActualgestationweek();
				Date dob = babyDetails.getDateofbirth();
				String timeOfBirth = babyDetails.getTimeofbirth();
				String[] timeArr = new String[3];
				if (!BasicUtils.isEmpty(timeOfBirth)) {
					timeArr = timeOfBirth.split(",");
				}
				birthDateCal = Calendar.getInstance();
				birthDateCal.setTime(dob);
				System.out.println(birthDateCal.getTime());
				if (timeArr.length >= 3 && !BasicUtils.isEmpty(timeArr[1])) {

					if (!BasicUtils.isEmpty(timeArr[2]) && timeArr[2].equalsIgnoreCase("AM")) {
						if (!BasicUtils.isEmpty(timeArr[0])) {
							if (Integer.valueOf(timeArr[0]) == 12) {
								birthDateCal.set(Calendar.HOUR, Integer.valueOf(timeArr[0]) - 12);
							} else {
								birthDateCal.set(Calendar.HOUR, Integer.valueOf(timeArr[0]));
							}
						}
					} else if (!BasicUtils.isEmpty(timeArr[2]) && timeArr[2].equalsIgnoreCase("PM")) {
						if (!BasicUtils.isEmpty(timeArr[0])) {
							if (Integer.valueOf(timeArr[0]) == 12) {
								birthDateCal.set(Calendar.HOUR, Integer.valueOf(timeArr[0]));
							} else {
								birthDateCal.set(Calendar.HOUR, Integer.valueOf(timeArr[0]) + 12);
							}
						}
					}
					if (!BasicUtils.isEmpty(timeArr[1]))
						birthDateCal.set(Calendar.MINUTE, Integer.valueOf(timeArr[1]));
				} else {
					birthDateCal.set(Calendar.HOUR, Integer.valueOf("0"));
					birthDateCal.set(Calendar.MINUTE, Integer.valueOf("0"));
					birthDateCal.set(Calendar.SECOND, Integer.valueOf("0"));
				}

				Calendar cal2 = Calendar.getInstance();
				Long timeDiffHours = cal2.getTime().getTime() - birthDateCal.getTime().getTime();
				int offset1 = TimeZone.getTimeZone(BasicConstants.CLIENT_TIME_ZONE).getRawOffset()
						- TimeZone.getDefault().getRawOffset();
				if (offset != 0) {
					timeDiffHours += 19800000;
				}
				timeHours = timeDiffHours / (3600 * 1000) + 1;

			}



			// get associated events....
//			String queryAssociatedEvents = "select uhid,associated_event from associate_assesment_final where uhid='"
//					+ uhid + "'";
//			List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

			List<SaPain> painList = new ArrayList<SaPain>();
			String query = "SELECT pain FROM SaPain AS pain WHERE uhid='" + uhid
					+ "' order by assessmentTime desc, painid desc";

			painList = inicuDao.getListFromMappedObjQuery(query);

			// get dropdown values


			PainDropDownsJSON dropDown = new PainDropDownsJSON();


			String queryOrderInvestigation = "SELECT testid, testname FROM ref_testslist";
			List<KeyValueObj> orderInvestigation = getRefObj(queryOrderInvestigation);
			dropDown.setOrderInvestigation(orderInvestigation);

			String queryAssessmentJaundice = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment where category='Jaundice' ";
			List<KeyValueObj> assessmentJaundice = getRefObj(queryAssessmentJaundice);
			dropDown.setTreatmentAction(assessmentJaundice);

			String queryPainProcedure = "SELECT pain_procedures_id, procedure_name FROM ref_pain_procedures_list";
			List<KeyValueObj> painProcedure = getRefObj(queryPainProcedure);
			dropDown.setProcedureList(painProcedure);

			String queryPainNonPharmacological = "SELECT pain_nonpharmacological_id, measure_name FROM ref_pain_nonpharmacological_list ";
			List<KeyValueObj> painNonPharmacological = getRefObj(queryPainNonPharmacological);
			dropDown.setNonPharmacologicalMeasures(painNonPharmacological);

			// getting hours data....
			List<String> hours = new ArrayList<String>();
			for (int i = 0; i <= 23; i++) {
				if (i < 10) {
					hours.add("0" + i);
				} else {
					hours.add(String.valueOf(i));
				}
			}
			// dropDown.setHours(hours);

			List<String> hoursValues = getTime(BasicConstants.HOURS);
			dropDown.setHours(hoursValues);
			List<String> minutesValues = getTime(BasicConstants.MINUTES);
			dropDown.setMinutes(minutesValues);

			// get tests list from ref table...
			String queryRefTestsList = "select obj from RefTestslist as obj where not (obj.assesmentCategory like ('%None%')) order by assesmentCategory, testid asc";
			List<RefTestslist> listRefTests = inicuDao.getListFromMappedObjQuery(queryRefTestsList);
			// populate drop down hash map for the tests list...
			HashMap<Object, List<RefTestslist>> testsListMap = new HashMap<Object, List<RefTestslist>>();
			for (RefTestslist test : listRefTests) {
				List categoryList = null;
				if (testsListMap.get(test.getAssesmentCategory()) != null) {
					categoryList = testsListMap.get(test.getAssesmentCategory());

				} else {
					categoryList = new ArrayList<RefTestslist>();
				}
				categoryList.add(test);
				testsListMap.put(test.getAssesmentCategory(), categoryList);
			}

			dropDown.setTestsList(testsListMap);
			json.setDropDowns(dropDown);
			// timestamp format with time zone...
			/*
			 * for (SaJaundice jaund : jaundList) { String timestr =
			 * CalendarUtility.getTimeStampFormatUI(CalendarUtility. CLIENT_CRUD_OPERATION)
			 * .format(jaund.getCreationtime()); jaund.setCreationTimeStr(timestr); }
			 */
			json.setListPain(painList);

			SaPain painCurrent = new SaPain();

			//
			Float maxTcB = Float.valueOf("0");
			List<SaPain> painListTemp = new ArrayList<SaPain>();
			for (int index = 0; index < painList.size(); index++) { // do some
				// iteration
				// stuf
				// on
				// jaundice
				// list..
				SaPain pain = painList.get(index);








				String queryInvestigationOrder = "Select obj from InvestigationOrdered obj where uhid='" + uhid
						+ "' and assesment_type='Jaundice' and assesmentid='" + painCurrent.getPainid()
						+ "' order by creationtime desc";
				List<InvestigationOrdered> investigationOrderList = inicuDao
						.getListFromMappedObjQuery(queryInvestigationOrder);
				ArrayList<String> investOrder = new ArrayList<>();
				if (!BasicUtils.isEmpty(investigationOrderList)) {
					for (InvestigationOrdered order : investigationOrderList) {
						if (!BasicUtils.isEmpty(order.getTestname())) {
							investOrder.add(order.getTestname());
						}
					}
					pain.setOrderinvestigationList(investOrder);
				}


				painListTemp.add(pain);
			}

			if (timeHours != null) {
				HashMap<Object, Object> babyInfo=getBabyInformation(uhid);
//				joundiceCurrent.setAgeofonset(Math.round(Float.valueOf(timeHours.toString())));
				painCurrent.setAgeAtAssessment(Math.round(Float.valueOf(timeHours.toString())));


			}
			if (!BasicUtils.isEmpty(painListTemp)) { // set previous data
				// entry here...
				SaPain pain = painListTemp.get(0);
				painCurrent.setPainStatus(pain.getPainStatus());
				painCurrent.setActiontypeList(new ArrayList<String>());
			}



			// set past order investigation and treatment....
			if (!BasicUtils.isEmpty(painList)) {

				Long assessmentId = painList.get(0).getPainid();
				String pastInvestigationOrderStr = "";
				java.sql.Date sqlTodayDate = new java.sql.Date(new Date().getTime());
				String queryPastOrderInvestigation = "Select obj from InvestigationOrdered obj where uhid='" + uhid
						+ "' and assesmentid='" + assessmentId + "' order by creationtime desc";
				List<InvestigationOrdered> pastOrderInvestigationList = inicuDao
						.getListFromMappedObjQuery(queryPastOrderInvestigation);
				// past order investigation
				if (!BasicUtils.isEmpty(pastOrderInvestigationList)) {
					for (InvestigationOrdered order : pastOrderInvestigationList) {
						if (!BasicUtils.isEmpty(order.getTestname())) {
							if (!BasicUtils.isEmpty(pastInvestigationOrderStr)) {
								pastInvestigationOrderStr = pastInvestigationOrderStr + ", " + order.getTestname();
							} else {
								pastInvestigationOrderStr = order.getTestname();
							}
						}
					}
					painCurrent.setPastOrderInvestigationStr(pastInvestigationOrderStr);
				}

			}

			json.setPain(painCurrent);

			Date todayDate = new Date();
			// joundiceCurrent.setAssessmentDate(todayDate);
			// joundiceCurrent.setAssessmentTime(new
			// Timestamp(System.currentTimeMillis()));
			int todayHours = todayDate.getHours();
			int todayMins = todayDate.getMinutes();

			if (todayHours > 12) {
				todayHours -= 12;
				painCurrent.setAssessmentMeridiem(false);
				if (todayHours < 10)
					painCurrent.setAssessmentHour("0" + Integer.toString(todayHours));
				else
					painCurrent.setAssessmentHour(Integer.toString(todayHours));
			} else {
				painCurrent.setAssessmentMeridiem(true);
				if (todayHours < 10)
					painCurrent.setAssessmentHour("0" + Integer.toString(todayHours));
				else
					painCurrent.setAssessmentHour(Integer.toString(todayHours));
			}
			if (todayMins < 10)
				painCurrent.setAssessmentMin("0" + Integer.toString(todayMins));
			else
				painCurrent.setAssessmentMin(Integer.toString(todayMins));

			// System.out.println(joundiceCurrent.toString());;

			// get jaundice nice chart data


			// json.setAssociatedEvents(listAssociatedEvents);

			DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date currentDate = new Date();
			String currentDateFinal = dateFormat.format(currentDate);

			String calDate = CalculateDate48HoursAgo(currentDate);

			// get past prescriptions
			json.setPrescriptionList(getPastPrescriptionList(uhid, calDate, currentDateFinal));

		} catch (Exception e) {
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser, uhid,
					"SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return json;
	}

	@Override
	public ResponseMessageObject savePain(PainPOJO sysPainObj) throws InicuDatabaseExeption {
		ResponseMessageObject obj = new ResponseMessageObject();

		SaPain pain = sysPainObj.getPain();
		if (BasicUtils.isEmpty(pain.getEpisodeid()) && !BasicUtils.isEmpty(pain.getUhid())) {
			String queryAssociatedEvents = "select episodeid from sa_pain where uhid='"

					+ pain.getUhid() + "' order by creationtime desc";
			List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

			if (!BasicUtils.isEmpty(listAssociatedEvents)) {
				pain.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
			}
		}


		obj.setMessage("Save successfully.");
		obj.setType(BasicConstants.MESSAGE_SUCCESS);
		try {
			String uhid = pain.getUhid();
			if (pain.getPainStatus() != null && !pain.getPainStatus().equalsIgnoreCase("Yes")) {
				if (pain.getPainStatus().equalsIgnoreCase("Inactive")) {

					List<BabyPrescription> prescriptionList = sysPainObj.getPrescriptionList();
					String continuedMedication = "";
					if (!BasicUtils.isEmpty(prescriptionList)) {
						for (int i = 0; i < prescriptionList.size(); i++) {
							BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
							if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
									&& babyPrescription.getContinueReason() != null
									&& babyPrescription.getIsactive()) {
								continuedMedication += babyPrescription.getMedicinename() + " ";

								if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
									continuedMedication += babyPrescription.getDose() + "("
											+ babyPrescription.getDose_unit() + "/"
											+ babyPrescription.getDose_unit_time() + ") ";

								}

								continuedMedication += "prescribed on "
										+ getDateFromTimestamp(babyPrescription.getStartdate())
										+ " and continued due to " + babyPrescription.getContinueReason() + ". ";
							}
						}
						this.savePrescriptionList(null, prescriptionList, "Pain", null,
								pain.getAssessmentTime());
					}
				}
			}

			if (!BasicUtils.isEmpty(pain.getComment())) {
				pain.setComment(pain.getComment() + "( " + pain.getLoggeduser() + " )");
			}

			if (!BasicUtils.isEmpty(sysPainObj.getPain().getIsNewEntry())) {
				if (sysPainObj.getPain().getIsNewEntry()) {
					pain.setPainid(null);
					pain.setCreationtime(null);
				} else {
					pain.setPainid(sysPainObj.getPain().getPainid());
					pain.setCreationtime(sysPainObj.getPain().getCreationtime());
				}
			}
			pain = (SaPain) sysDAO.saveObject(pain);


			if (!pain.getPainStatus().equalsIgnoreCase("Inactive")) {
				List<BabyPrescription> prescriptionList = sysPainObj.getPrescriptionList();
				if (!BasicUtils.isEmpty(prescriptionList)) {
					this.savePrescriptionList(null, prescriptionList, "Pain",
							pain.getPainid(), pain.getAssessmentTime());
				}
			}
			// for each of the order ordered, update to the database
			saveOrderInvestigation(sysPainObj.getDropDowns().getTestsList(), pain.getPainid(),
					pain.getUhid(), pain.getLoggeduser(), "Pain", pain.getAssessmentTime());



			// save logs
			String desc = mapper.writeValueAsString(pain);

			String action = BasicConstants.INSERT;

			/**
			 * this condition to be removed once data is coming from front end.
			 */

			String pageName = BasicConstants.SA_JAUNDICE;
			logService.saveLog(desc, action, pain.getLoggeduser(), uhid, pageName);
		} catch (Exception e) {
			obj.setType(BasicConstants.MESSAGE_FAILURE);
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, pain.getLoggeduser(),
					pain.getUhid(), "SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return obj;
	}

	@Override
	public ResponseMessageWithResponseObject saveNIPSScore(ScoreNIPS NIPSScore) {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
		try {
			Timestamp timestamp = new Timestamp(new Date().getTime());
			NIPSScore.setEntrydate(timestamp);
			NIPSScore = (ScoreNIPS) inicuDao.saveObject(NIPSScore);

			response.setType(BasicConstants.MESSAGE_SUCCESS);
			response.setMessage("NIPS Score Saved Successfully..!!");
			response.setReturnedObject(NIPSScore);
		} catch (Exception e) {
			response.setMessage(e.getMessage());
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, "",
					NIPSScore.getUhid(), "SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return response;
	}

	@Override
	public ResponseMessageWithResponseObject savePIPPScore(ScorePIPP PIPPScore) {
		ResponseMessageWithResponseObject response = new ResponseMessageWithResponseObject();
		try {
			Timestamp timestamp = new Timestamp(new Date().getTime());
			PIPPScore.setEntrydate(timestamp);
			PIPPScore = (ScorePIPP) inicuDao.saveObject(PIPPScore);

			response.setType(BasicConstants.MESSAGE_SUCCESS);
			response.setMessage("PIPP Score Saved Successfully..!!");
			response.setReturnedObject(PIPPScore);
		} catch (Exception e) {
			response.setMessage(e.getMessage());
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, "",
					PIPPScore.getUhid(), "SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return response;
	}

	@SuppressWarnings("unchecked")
	@Override
	public SysShockJSON getShock(String uhid, String loggedUser) throws InicuDatabaseExeption {
		SysShockJSON json = new SysShockJSON();
		SaShock oldShockObj = json.getShock();
		Long timeHours = null;
		int offset = TimeZone.getTimeZone(BasicConstants.CLIENT_TIME_ZONE).getRawOffset()
				- TimeZone.getDefault().getRawOffset();

		try {
			json.setRespSupport(getLastRespSupport(uhid));

			List<SaShock> shockList = new ArrayList<SaShock>();
			String query = "SELECT shock FROM SaShock AS shock WHERE uhid='" + uhid
					+ "' order by assessmentTime desc, sashockid desc";

			shockList = inicuDao.getListFromMappedObjQuery(query);

			// get dropdown values
			String getCauseShock = "SELECT causeofshockid, causeofshock FROM ref_causeofshock ";

			List<KeyValueObj> causeofShock = getRefObj(getCauseShock);

			ShockDropDownsJSON dropDown = new ShockDropDownsJSON();
			dropDown.setCauseOfShock(causeofShock);

			String queryOrderInvestigation = "SELECT testid, testname FROM ref_testslist";
			List<KeyValueObj> orderInvestigation = getRefObj(queryOrderInvestigation);
			dropDown.setOrderInvestigation(orderInvestigation);

			String queryAssessmentShock = "SELECT assesmenttreatmentid, treatment FROM ref_assesment_treatment where category='Shock' ";
			List<KeyValueObj> assessmentShock = getRefObj(queryAssessmentShock);
			dropDown.setTreatmentAction(assessmentShock);
			
			String queryGetFrequencyRef = "select obj from RefMedfrequency obj order by frequency_int";
			List<RefMedfrequency> freqList = inicuDao.getListFromMappedObjQuery(queryGetFrequencyRef);
			dropDown.setMedicineFrequency(freqList);

			// getting hours data....
			List<String> hours = new ArrayList<String>();
			for (int i = 0; i <= 23; i++) {
				if (i < 10) {
					hours.add("0" + i);
				} else {
					hours.add(String.valueOf(i));
				}
			}
			// dropDown.setHours(hours);

			List<String> hoursValues = getTime(BasicConstants.HOURS);
			dropDown.setHours(hoursValues);
			List<String> minutesValues = getTime(BasicConstants.MINUTES);
			dropDown.setMinutes(minutesValues);

			// get tests list from ref table...
			String queryRefTestsList = "select obj from RefTestslist as obj where not (obj.assesmentCategory like ('%None%')) order by assesmentCategory, testid asc";
			List<RefTestslist> listRefTests = inicuDao.getListFromMappedObjQuery(queryRefTestsList);
			// populate drop down hash map for the tests list...
			HashMap<Object, List<RefTestslist>> testsListMap = new HashMap<Object, List<RefTestslist>>();
			for (RefTestslist test : listRefTests) {
				List categoryList = null;
				if (testsListMap.get(test.getAssesmentCategory()) != null) {
					categoryList = testsListMap.get(test.getAssesmentCategory());

				} else {
					categoryList = new ArrayList<RefTestslist>();
				}
				categoryList.add(test);
				testsListMap.put(test.getAssesmentCategory(), categoryList);
			}

			dropDown.setTestsList(testsListMap);
			json.setDropDowns(dropDown);
			// timestamp format with time zone...
			/*
			 * for (SaJaundice jaund : jaundList) { String timestr =
			 * CalendarUtility.getTimeStampFormatUI(CalendarUtility. CLIENT_CRUD_OPERATION)
			 * .format(jaund.getCreationtime()); jaund.setCreationTimeStr(timestr); }
			 */
			json.setListShock(shockList);

			SaShock shockCurrent = new SaShock();

			List<SaShock> shockListTemp = new ArrayList<SaShock>();
			for (int index = 0; index < shockList.size(); index++) { // do some
				SaShock shock = shockList.get(index);

				String causeOfShockStr = shock.getCauseofshock();
				if (!BasicUtils.isEmpty(causeOfShockStr)) {
					String[] listSymtoms = causeOfShockStr.replace(" ", "").trim().replace("[", "").replace("]", "")
							.split(",");
					ArrayList<String> symtomsList = new ArrayList<String>(Arrays.asList(listSymtoms));
					shock.setCauseofshockList(symtomsList);
				}

				String actionTypeStr = shock.getActiontype();

				if (!BasicUtils.isEmpty(actionTypeStr)) {
					String[] listSymtoms = actionTypeStr.replace(" ", "").trim().replace("[", "").replace("]", "")
							.split(",");
					ArrayList<String> symtomsList = new ArrayList<String>(Arrays.asList(listSymtoms));
					shock.setActiontypeList(symtomsList);
				}

				String queryInvestigationOrder = "Select obj from InvestigationOrdered obj where uhid='" + uhid
						+ "' and assesment_type='Shock' and assesmentid='" + shock.getSashockid()
						+ "' order by creationtime desc";
				List<InvestigationOrdered> investigationOrderList = inicuDao
						.getListFromMappedObjQuery(queryInvestigationOrder);
				ArrayList<String> investOrder = new ArrayList<>();
				if (!BasicUtils.isEmpty(investigationOrderList)) {
					for (InvestigationOrdered order : investigationOrderList) {
						if (!BasicUtils.isEmpty(order.getTestname())) {
							investOrder.add(order.getTestname());
						}
					}
					shock.setOrderinvestigationList(investOrder);
				}


				shockListTemp.add(shock);

                if (index == 0) {
                    try {
                        if (shock.getShockStatus().equalsIgnoreCase("No")) {
                            json.setInactiveProgressNote(generateInactiveNotesShock(null, uhid, "", "") +
                                    " Baby has recovered from shock.");
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        logger.error("Exception while generating inactive note", e);
                    }
                }
			}

			try {
				HashMap<Object, Object> babyInfo = getBabyInformation(uhid);
				Integer ageAtAssessment = Integer.valueOf(babyInfo.get(BasicConstants.AGE_AT_ONSET).toString());
				shockCurrent.setAgeofonset(Math.round(Float.valueOf(babyInfo.get(BasicConstants.AGE_AT_ONSET).toString())));
				shockCurrent.setAgeatassesment(ageAtAssessment);

			}catch (Exception e){
				System.out.println("Exception Caught : "+e);
			}

			if (!BasicUtils.isEmpty(shockListTemp)) { // set previous data
				// entry here...
				SaShock shock = shockListTemp.get(0);
				shockCurrent.setShockStatus(shock.getShockStatus());
				shockCurrent.setActiontypeList(new ArrayList<String>());
				if(!BasicUtils.isEmpty(shock.getTreatmentOther()))
					shockCurrent.setPastTreatmentActionStr(shock.getTreatmentOther());
			}

			// keep previous age of onset boolean and value
			// ONLY if same episode is continuing
			if (!BasicUtils.isEmpty(shockList)) {
				if (shockList.get(0).getShockStatus() != null
						&& !shockList.get(0).getShockStatus().equalsIgnoreCase("inactive")) {
					shockCurrent.setAgeofonset(shockList.get(0).getAgeofonset());
					shockCurrent.setIsageofonsetinhours(shockList.get(0).getIsageofonsetinhours());
				}
			}

			// set past order investigation and treatment....
			if (!BasicUtils.isEmpty(shockList)) {

				if(!BasicUtils.isEmpty(shockList.get(0).getShockStatus()) && !shockList.get(0).getShockStatus().equalsIgnoreCase("Inactive")) {
					SaShock shockOld = shockList.get(0);
					if(!BasicUtils.isEmpty(shockOld.getArterial())) {
						shockCurrent.setArterial(shockOld.getArterial());
						shockCurrent.setObstructive(true);
					}
					if(!BasicUtils.isEmpty(shockOld.getInternalHemorrhage())) {
						shockCurrent.setInternalHemorrhage(shockOld.getInternalHemorrhage());
						shockCurrent.setHypovolemic(true);
					}
					if(!BasicUtils.isEmpty(shockOld.getFluidLoss())) {
						shockCurrent.setFluidLoss(shockOld.getFluidLoss());
						shockCurrent.setHypovolemic(true);
					}
					if(!BasicUtils.isEmpty(shockOld.getGiLosses())) {
						shockCurrent.setGiLosses(shockOld.getGiLosses());
						shockCurrent.setHypovolemic(true);
					}
					if(!BasicUtils.isEmpty(shockOld.getPoorFeeding())) {
						shockCurrent.setPoorFeeding(shockOld.getPoorFeeding());
						shockCurrent.setHypovolemic(true);
					}
					if(!BasicUtils.isEmpty(shockOld.getNeurologicInjury())) {
						shockCurrent.setNeurologicInjury(shockOld.getNeurologicInjury());
						shockCurrent.setDistributive(true);
					}
					if(!BasicUtils.isEmpty(shockOld.getSepsisDistributive())) {
						shockCurrent.setSepsisDistributive(shockOld.getSepsisDistributive());
					}
					if(!BasicUtils.isEmpty(shockOld.getAnaphylacticShock())) {
						shockCurrent.setAnaphylacticShock(shockOld.getAnaphylacticShock());
						shockCurrent.setDistributive(true);
					}
					if(!BasicUtils.isEmpty(shockOld.getAsphyxia())) {
						shockCurrent.setAsphyxia(shockOld.getAsphyxia());
						shockCurrent.setCardiogenic(true);
					}
					if(!BasicUtils.isEmpty(shockOld.getChd())) {
						shockCurrent.setChd(shockOld.getChd());
						shockCurrent.setCardiogenic(true);
					}
					if(!BasicUtils.isEmpty(shockOld.getMetabolic())) {
						shockCurrent.setMetabolic(shockOld.getMetabolic());
						shockCurrent.setCardiogenic(true);
					}
					if(!BasicUtils.isEmpty(shockOld.getMyocarditis())) {
						shockCurrent.setMyocarditis(shockOld.getMyocarditis());
						shockCurrent.setCardiogenic(true);
					}
					if(!BasicUtils.isEmpty(shockOld.getArrhythmia())) {
						shockCurrent.setArrhythmia(shockOld.getArrhythmia());
						shockCurrent.setCardiogenic(true);
					}
					if(!BasicUtils.isEmpty(shockOld.getVenous())) {
						shockCurrent.setVenous(shockOld.getVenous());
						shockCurrent.setObstructive(true);
					}
					if(!BasicUtils.isEmpty(shockOld.getPoorFeeding())) {
						shockCurrent.setPoorFeeding(shockOld.getPoorFeeding());
					}
				}


				Long assessmentId = shockList.get(0).getSashockid();
				String pastInvestigationOrderStr = "";
				java.sql.Date sqlTodayDate = new java.sql.Date(new Date().getTime());
				String queryPastOrderInvestigation = "Select obj from InvestigationOrdered obj where uhid='" + uhid
						+ "' and assesmentid='" + assessmentId + "' order by creationtime desc";
				List<InvestigationOrdered> pastOrderInvestigationList = inicuDao
						.getListFromMappedObjQuery(queryPastOrderInvestigation);
				// past order investigation
				if (!BasicUtils.isEmpty(pastOrderInvestigationList)) {
					for (InvestigationOrdered order : pastOrderInvestigationList) {
						if (!BasicUtils.isEmpty(order.getTestname())) {
							if (!BasicUtils.isEmpty(pastInvestigationOrderStr)) {
								pastInvestigationOrderStr = pastInvestigationOrderStr + ", " + order.getTestname();
							} else {
								pastInvestigationOrderStr = order.getTestname();
							}
						}
					}
					shockCurrent.setPastOrderInvestigationStr(pastInvestigationOrderStr);
				}

			}


			// Cycle runs from 8AM to 8AM.
			Timestamp currentDate = new Timestamp((new java.util.Date().getTime()));
			Timestamp yesterday = new Timestamp(new java.util.Date().getTime() - 86400000);

			offset = TimeZone.getTimeZone(BasicConstants.CLIENT_TIME_ZONE).getRawOffset()
					- TimeZone.getDefault().getRawOffset();

			long duration = ((currentDate.getTime() - yesterday.getTime()) / (1000 * 60 * 60));

			float urineTotal = 0;
			float todayWeight = 0;

			String sql = "SELECT workingweight FROM baby_visit where uhid='" + uhid
					+ "' order by visitdate desc, visittime desc limit 1";
			List<Object> babyWeight = (List<Object>) inicuDao.getListFromNativeQuery(sql);
			if (!BasicUtils.isEmpty(babyWeight)) {
				todayWeight = (Float) babyWeight.get(0) / 1000;
			}

			HashMap<Float, Integer> feedMap = new HashMap<Float, Integer>();

			List<NursingIntakeOutput> pastNursingIntakeList = inicuDao.getListFromMappedObjQuery(
					HqlSqlQueryConstants.getNursingIntakeOutputList(uhid, yesterday, currentDate));
			for (NursingIntakeOutput item : pastNursingIntakeList) {
				if (item.getUrinePassed() != null && item.getUrinePassed() && item.getUrine() != null) {
					urineTotal += Float.parseFloat(item.getUrine());
				}
			}
		    DecimalFormat df2 = new DecimalFormat("#.##");

			if (urineTotal > 0 && todayWeight > 0) {
				urineTotal = (urineTotal) / (todayWeight * duration);
				urineTotal = Float.parseFloat(df2.format(urineTotal));
				if(urineTotal > 0)
					shockCurrent.setUrine(urineTotal);
			}

			currentDate = new Timestamp(currentDate.getTime() + offset);
			yesterday = new Timestamp(yesterday.getTime() + offset);

			String queryVital = "select obj from NursingVitalparameter obj where uhid='" + uhid + "' and entrydate <= '"
					+ currentDate + "' and entrydate >= '" + yesterday + "' order by entrydate desc";
			List<NursingVitalparameter> listVitalsInfo = notesDao.getListFromMappedObjNativeQuery(queryVital);
			if (!BasicUtils.isEmpty(listVitalsInfo)) {


				if (!BasicUtils.isEmpty(listVitalsInfo.get(0).getPulserate())) {
					shockCurrent.setHeartrate(Integer.parseInt(listVitalsInfo.get(0).getPulserate()));
				}
				if (!BasicUtils.isEmpty(listVitalsInfo.get(0).getHrRate())) {
					shockCurrent.setHeartrate(Math.round(listVitalsInfo.get(0).getHrRate()));
				}
				if (!BasicUtils.isEmpty(listVitalsInfo.get(0).getDiastBp())) {
					shockCurrent.setShockdiastbp(Integer.parseInt(listVitalsInfo.get(0).getDiastBp()));
				}
				if (!BasicUtils.isEmpty(listVitalsInfo.get(0).getSystBp())) {
					shockCurrent.setShocksystbp(Integer.parseInt(listVitalsInfo.get(0).getSystBp()));
				}
				if (!BasicUtils.isEmpty(listVitalsInfo.get(0).getMeaniBp())) {
					shockCurrent.setShockmeanbp(Math.round(listVitalsInfo.get(0).getMeaniBp()));
				}
				if (!BasicUtils.isEmpty(listVitalsInfo.get(0).getMeanBp())) {
					shockCurrent.setShockmeanbp(Integer.parseInt(listVitalsInfo.get(0).getMeanBp()));
				}
				if (!BasicUtils.isEmpty(listVitalsInfo.get(0).getCentraltemp()) && !BasicUtils.isEmpty(listVitalsInfo.get(0).getPeripheraltemp())) {
					shockCurrent.setTemperatureDiff(listVitalsInfo.get(0).getCentraltemp() - listVitalsInfo.get(0).getPeripheraltemp());
				}
				if (!BasicUtils.isEmpty(listVitalsInfo.get(0).getRrRate())) {
					shockCurrent.setRespiratoryrate(Math.round(listVitalsInfo.get(0).getRrRate()));
				}
				if (!BasicUtils.isEmpty(listVitalsInfo.get(0).getSpo2())) {
					shockCurrent.setSaturation(Integer.parseInt(listVitalsInfo.get(0).getSpo2()));
				}
				if (!BasicUtils.isEmpty(listVitalsInfo.get(0).getCft())) {
					shockCurrent.setCrt(Integer.parseInt(listVitalsInfo.get(0).getCft()));
				}
				if (!BasicUtils.isEmpty(listVitalsInfo.get(0).getConsciousness())) {
					shockCurrent.setConsciousness(listVitalsInfo.get(0).getConsciousness());
				}
				if (!BasicUtils.isEmpty(listVitalsInfo.get(0).getCvp())) {
					shockCurrent.setCvp(listVitalsInfo.get(0).getCvp());
				}
				if (!BasicUtils.isEmpty(listVitalsInfo.get(0).getEtco2())) {
					shockCurrent.setEtco2(listVitalsInfo.get(0).getEtco2());
				}
				if(!BasicUtils.isEmpty(listVitalsInfo.get(0).getCvpUnit())) {
					shockCurrent.setCvpUnit(listVitalsInfo.get(0).getCvpUnit());
				}else {
					shockCurrent.setCvpUnit("mmHg");
				}
			}else {
				shockCurrent.setCvpUnit("mmHg");
			}



			json.setShock(shockCurrent);

			Date todayDate = new Date();
			// joundiceCurrent.setAssessmentDate(todayDate);
			// joundiceCurrent.setAssessmentTime(new
			// Timestamp(System.currentTimeMillis()));
			int todayHours = todayDate.getHours();
			int todayMins = todayDate.getMinutes();

			if (todayHours > 12) {
				todayHours -= 12;
				shockCurrent.setAssessmentMeridiem(false);
				if (todayHours < 10)
					shockCurrent.setAssessmentHour("0" + Integer.toString(todayHours));
				else
					shockCurrent.setAssessmentHour(Integer.toString(todayHours));
			} else {
				shockCurrent.setAssessmentMeridiem(true);
				if (todayHours < 10)
					shockCurrent.setAssessmentHour("0" + Integer.toString(todayHours));
				else
					shockCurrent.setAssessmentHour(Integer.toString(todayHours));
			}
			if (todayMins < 10)
				shockCurrent.setAssessmentMin("0" + Integer.toString(todayMins));
			else
				shockCurrent.setAssessmentMin(Integer.toString(todayMins));

			// System.out.println(joundiceCurrent.toString());;

			DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date currentDateNow = new Date();
			String currentDateFinal = dateFormat.format(currentDateNow);

			String calDate = CalculateDate48HoursAgo(currentDateNow);

			// get past prescriptions
			json.setPrescriptionList(getPastPrescriptionList(uhid, calDate, currentDateFinal));


			// Fetch the lastes baby feed entry from BabyFeedDetail table
			String babyFeedQuery="SELECT obj FROM BabyfeedDetail as obj where uhid='"+uhid+"' order by creationtime desc";
			List<BabyfeedDetail> babyfeedDetails=inicuDao.getListFromMappedObjQuery(babyFeedQuery);

			if(!BasicUtils.isEmpty(babyfeedDetails) && babyfeedDetails.size()>0){
				json.setLastBabyFeedObject(babyfeedDetails.get(0));
			}else{
				json.setLastBabyFeedObject(new BabyfeedDetail());
			}

            json.setRespUsage(getRespSupportUsage(uhid));

			// get the inotropes list for the current baby
            String getInotropesQuery = "SELECT obj FROM BabyPrescription as obj where uhid ='" + uhid + "' and medicationtype='TYPE0004' order by startdate desc";
            List<BabyPrescription> intropesList = inicuDao.getListFromMappedObjQuery(getInotropesQuery);
            if(!BasicUtils.isEmpty(intropesList) && intropesList.size()>0){
                json.setInotropesList(intropesList);
            }

		} catch (Exception e) {
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, loggedUser, uhid,
					"SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return json;
	}

	@Override
	public ResponseMessageObject saveShock(SysShockJSON sysShockObj, String userId) throws InicuDatabaseExeption {
		ResponseMessageObject obj = new ResponseMessageObject();

		SaShock shock = sysShockObj.getShock();
		if (BasicUtils.isEmpty(shock.getEpisodeid()) && !BasicUtils.isEmpty(shock.getUhid())) {
			String queryAssociatedEvents = "select episodeid from sa_shock where uhid='"
					+ shock.getUhid() + "' order by creationtime desc";
			List<Object[]> listAssociatedEvents = inicuDao.getListFromNativeQuery(queryAssociatedEvents);

			if (!BasicUtils.isEmpty(listAssociatedEvents)) {
				shock.setEpisodeid(String.valueOf(listAssociatedEvents.get(0)));
			}
		}
		Timestamp assessmentTime = shock.getAssessmentTime();

		if (!BasicUtils.isEmpty(assessmentTime)) {
			shock.setAssessmentTime(assessmentTime);
		}

		obj.setMessage("Save successfully.");
		obj.setType(BasicConstants.MESSAGE_SUCCESS);
		try {
			String uhid = shock.getUhid();
			if (shock.getShockStatus() != null && !shock.getShockStatus().equalsIgnoreCase("Yes")) {
				SaShock shocknew = new SaShock();
				shocknew.setShockStatus(shock.getShockStatus());
				shocknew.setAgeofonset(shock.getAgeofonset());
				shocknew.setIsageofonsetinhours(shock.getIsageofonsetinhours());
				shocknew.setAgeatassesment(shock.getAgeatassesment());
				shocknew.setAssessmentHour(shock.getAssessmentHour());
				shocknew.setAssessmentMin(shock.getAssessmentMin());
                shocknew.setComment(shock.getComment());
                shocknew.setIsNewEntry(shock.getIsNewEntry());

				if (shocknew.getShockStatus().equalsIgnoreCase("No")) {

					shocknew.setAssessmentTime(shock.getAssessmentTime());

					if (!BasicUtils.isEmpty(shock.getMedicationStr())) {
						shocknew.setMedicationStr(shock.getMedicationStr());
					}

					shocknew.setEpisodeNumber(shock.getEpisodeNumber());

				} else if (shocknew.getShockStatus().equalsIgnoreCase("Inactive")) {
					List<SaShock> shockList = new ArrayList<SaShock>();
					String query = "SELECT shock FROM SaShock AS shock WHERE uhid='" + uhid
							+ "' and shockStatus='Inactive' " + "order by assessmentTime desc";
					shockList = inicuDao.getListFromMappedObjQuery(query);
					Long inActiveShockId = null;
					if (shockList != null && shockList.size() > 0) {
						inActiveShockId = shockList.get(0).getSashockid();
					} else {
						inActiveShockId = (long) 0;
					}

					List<SaShock> shockListToCalculate = new ArrayList<SaShock>();
					String queryToCalculate = "SELECT shock FROM SaShock AS shock WHERE uhid='" + uhid
							+ "' and sashockid>'" + inActiveShockId + "' " + "order by assessmentTime desc";
					shockListToCalculate = inicuDao.getListFromMappedObjQuery(queryToCalculate);
					if (!BasicUtils.isEmpty(shockListToCalculate)) {
						SaShock firstShock = shockListToCalculate.get(shockListToCalculate.size() - 1);
						SaShock lastShock = shockListToCalculate.get(0);
						long assessmentDuration = (lastShock.getAssessmentTime().getTime()
								- firstShock.getAssessmentTime().getTime()) / (1000 * 60 * 60 * 24);


						shock.setDurationOfEpisode((int) assessmentDuration);
					}
					shocknew.setAssessmentTime(shock.getAssessmentTime());
					shocknew.setEpisodeNumber(shock.getEpisodeNumber());
				}
				shock = shocknew;
			} else {

				// setting list to string
				List causeOfShockList = shock.getCauseofshockList();
				if (!BasicUtils.isEmpty(causeOfShockList)) {
					shock.setCauseofshock(causeOfShockList.toString());
				}

				List actionTypeList = shock.getActiontypeList();
				if (!BasicUtils.isEmpty(actionTypeList)) {
					shock.setActiontype(actionTypeList.toString());
				}

				List orderInvList = shock.getOrderinvestigationList();
				if (!BasicUtils.isEmpty(orderInvList)) {
					shock.setOrderinvestigation(orderInvList.toString());
				}
			}

			if (!BasicUtils.isEmpty(uhid)) {
				shock.setUhid(uhid);
				{
					if (userId != null) {
						shock.setLoggeduser(userId);

						// set progress notes
						if (!BasicUtils.isEmpty(shock.getComment())) {
							shock.setComment(shock.getComment());
						}
						if (!BasicUtils.isEmpty(shock.getComment())) {
								if(!BasicUtils.isEmpty(shock.getComment()) && shock.getComment().indexOf(shock.getLoggeduser())==-1) {
									shock.setComment(shock.getComment());
							 }
							}
//						if (!BasicUtils.isEmpty(jaundice.getComment())) {
//							jaundice.setComment(jaundice.getComment() + "( " + jaundice.getLoggeduser() + " )");
//						}

						if (!BasicUtils.isEmpty(sysShockObj.getShock().getIsNewEntry())) {
							if (sysShockObj.getShock().getIsNewEntry()) {
								shock.setSashockid(null); // due to list
																// is not
																// deatched..
								shock.setCreationtime(null);
							} else {
                                if (shock.getShockStatus().equalsIgnoreCase("Inactive")) {
                                    try {
                                        String query = "update sa_shock set comment = '" + shock.getComment()
                                                + "' where sashockid = '" + sysShockObj.getShock().getSashockid() + "'";
                                        inicuDao.updateOrDeleteNativeQuery(query);
                                    } catch (Exception ex) {
                                        ex.printStackTrace();
                                        System.out.println("Exception occured while updating progressnotes for inactive state");
                                    }
                                } else {
                                    shock.setSashockid(sysShockObj.getShock().getSashockid());
                                    shock.setCreationtime(sysShockObj.getShock().getCreationtime());
                                }
							}
						}
						shock = (SaShock) sysDAO.saveObject(shock);

						if (!shock.getShockStatus().equalsIgnoreCase("Inactive")) {
							List<BabyPrescription> prescriptionList = sysShockObj.getPrescriptionList();
							if (!BasicUtils.isEmpty(prescriptionList)) {
								this.savePrescriptionList(null, prescriptionList, "Shock",
										shock.getSashockid(), shock.getAssessmentTime());
							}
						}
						// update past progress notes for episode number
						if (!BasicUtils.isEmpty(sysShockObj.getListShock())
								&& shock.getShockStatus().equalsIgnoreCase("inactive")) {
                            try {
                                String query = "update respsupport set eventid = '" + sysShockObj.getShock().getSashockid()
                                        + "', is_eventid_updated = 'true' where respsupportid = (select respsupportid from respsupport where uhid='" + uhid
                                        + "' and eventname = 'Shock' and is_eventid_updated = 'false' order by creationtime desc limit 1)";
                                inicuDao.updateOrDeleteNativeQuery(query);
                            } catch (Exception ex) {
                                ex.printStackTrace();
                                System.out.println("Exception occured while updating eventid in resp support for inactive state");
                                logger.error("Exception occured while updating eventid in resp support for inactive state", ex);
                            }
							//updatePastShockProgressNotes(shock, sysShockObj.getListShock());
						}

						// for each of the order ordered, update to the database
						saveOrderInvestigation(sysShockObj.getDropDowns().getTestsList(), shock.getSashockid(),
								shock.getUhid(), userId, "Shock", shock.getAssessmentTime());

					} else {
						obj.setMessage("logged user id is coming as null");
						obj.setType(BasicConstants.MESSAGE_FAILURE);
					}

				}
			} else {
				obj.setMessage("uhid is coming as null");
				obj.setType(BasicConstants.MESSAGE_FAILURE);
			}


			RespSupport respSupport = sysShockObj.getRespSupport();
			respSupport.setUhid(uhid);
			respSupport.setEventname("Shock");
			respSupport.setCreationtime(shock.getAssessmentTime());
            respSupport.setModificationtime(shock.getAssessmentTime());

            if (shock.getShockStatus().equalsIgnoreCase("Yes")) {
                respSupport.setEventid(shock.getSashockid().toString());
                String treatmentStr = "";
				if(!BasicUtils.isEmpty(shock.getActiontype())) {
					treatmentStr = shock.getActiontype().toString();
				}

				if (BasicUtils.isEmpty(treatmentStr) || !treatmentStr.contains("TRE108")) {
					if (BasicUtils.isEmpty(respSupport.getIsactive()) || respSupport.getIsactive() == true) {
						respSupport.setIsactive(false);
						respSupport.setRsVentType(null);
						respSupport = (RespSupport) inicuDao.saveObject(respSupport);
					} else {
						if (!BasicUtils.isEmpty(respSupport) && !BasicUtils.isEmpty(respSupport.getBpdRespNote())) {
							String query = "update respsupport " + "Set bpd_resp_note = '"
									+ respSupport.getBpdRespNote() + "' " + "WHERE uhid = '" + respSupport.getUhid()
									+ "' " + "AND bpd_resp_note is not null ";
							inicuDao.updateOrDeleteNativeQuery(query);
						}
					}
				} else if (treatmentStr.contains("TRE108")) {
					respSupport.setIsactive(true);
					respSupport = (RespSupport) inicuDao.saveObject(respSupport);
				}
			}
//			} else if (respSystem.getRespSystemObject().isStopTreatmentFlag()) {
//				respSupport.setIsactive(false);
//				respSupport.setRsVentType(null);
//				respSupport = (RespSupport) inicuDao.saveObject(respSupport);
//			}
			// save logs
			String desc = mapper.writeValueAsString(shock);

			String action = BasicConstants.INSERT;

			if (shock.getIsEdit() != null && shock.getIsEdit()) {
				action = BasicConstants.UPDATE;
			}

			/**
			 * this condition to be removed once data is coming from front end.
			 */

			String loggeduser = null;
			if (!BasicUtils.isEmpty(userId)) {
				loggeduser = userId;
			} else {
				loggeduser = "1234"; // setting dummy user as of now needs to be
				// removed
			}

			String pageName = BasicConstants.SA_JAUNDICE;
			logService.saveLog(desc, action, loggeduser, uhid, pageName);
		} catch (Exception e) {
			obj.setType(BasicConstants.MESSAGE_FAILURE);
			e.printStackTrace();
			String[] receiverArray = { BasicConstants.MAIL_ID_RECIEVER };
			databaseException.newException(receiverArray, RecipientType.TO, BasicConstants.COMPANY_ID, userId,
					shock.getUhid(), "SAVE_OBJECT", BasicUtils.convertErrorStacktoString(e));
		}
		return obj;
	}
	
	public String generateInactiveNotesShock(InicuDao inicuDaoObj, String uhid, String continuedMedication,
                                             String tempRespEventId)
			throws InicuDatabaseExeption {
		if (inicuDaoObj != null) {
			inicuDao = inicuDaoObj;
		}
		// Creating Inactive Notes from here
		String progressNotesShock = "";
		String htmlNextLine = System.getProperty("line.separator");
		try {

			// Fetching Current Episode Number for Shock
			int epCountShock = 1;
			String queryEpCountShock = "SELECT MAX(episode_number) FROM sa_shock WHERE uhid='" + uhid + "'";
			List<Integer> epCountListShock = inicuDao.getListFromNativeQuery(queryEpCountShock);
			if (!BasicUtils.isEmpty(epCountListShock)) {
				epCountShock = epCountListShock.get(0).intValue();
				if (epCountShock != 1) {
					progressNotesShock += "Baby developed " + epCountShock + " episodes of Shock"
							+ " during hospital stay. " + htmlNextLine;
					if (epCountShock < 3) {
						progressNotesShock += "Episode 1: ";
					} else {
						progressNotesShock += " ";
					}

				}
			}

			// Old Episodes Inactive Notes List of Shock Generating Query
			List<SaShock> oldShockList = new ArrayList<SaShock>();
			oldShockList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getOldInactiveShockList(uhid));
			if (!BasicUtils.isEmpty(oldShockList)) {
				// Old Episodes Inactive Notes of Jaundice Fetching Function
				String oldInactiveNotes = getOldInactiveNotesShock(oldShockList, epCountShock);
				progressNotesShock += oldInactiveNotes + htmlNextLine;
			}

			// Current Episode
			if (epCountShock > 1) {
				progressNotesShock += "Episode " + epCountShock + " : ";
			}
			List<SaShock> shockList = new ArrayList<SaShock>();
			shockList = inicuDao
					.getListFromMappedObjQuery(HqlSqlQueryConstants.getShockList(uhid, epCountShock));

			if (!BasicUtils.isEmpty(shockList)) {
				// Age of Onset Data Fetching Function for Shock
				String ageOnsetNotes = getAgeOnsetShock(shockList);
				progressNotesShock += ageOnsetNotes;

				// Investigation Order Detail Fetching Function
				String investigationOrderNotes = getInvestigationOrderShock(shockList);
				progressNotesShock += investigationOrderNotes;
				
				// Investigation Order Detail Fetching Function
				String echoFindingsNotes = getEchoFindingsShock(shockList);
				progressNotesShock += echoFindingsNotes;
				
				// Respiratory Support Detail Fetching Function
				String respiratorySupportNotes = getRespiratorySupportShock(shockList, uhid, tempRespEventId);
				progressNotesShock += respiratorySupportNotes;

				// Medication of Shock Data Fetching Function
				String medicationNotes = getMedicationOfShock(shockList);
				progressNotesShock += medicationNotes + continuedMedication;

				// Causes of Shock Fetching Function
				String causesNotes = getCausesOfShock(shockList);
				progressNotesShock += causesNotes;
				
				// Inactive Notes End Here
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return progressNotesShock;
	}

	@Override
	public Float urineOutputDuration(String uhid, Integer urineOutputDuration) {
		Timestamp currentDate = new Timestamp((new java.util.Date().getTime()));
		Timestamp yesterday = new Timestamp(new java.util.Date().getTime() - (urineOutputDuration * 60 * 60 * 1000));

		int offset = TimeZone.getTimeZone(BasicConstants.CLIENT_TIME_ZONE).getRawOffset()
				- TimeZone.getDefault().getRawOffset();

		long duration = ((currentDate.getTime() - yesterday.getTime()) / (1000 * 60 * 60));

		float urineTotal = 0;
		float todayWeight = 0;

		String sql = "SELECT workingweight FROM baby_visit where uhid='" + uhid
				+ "' order by visitdate desc, visittime desc limit 1";
		List<Object> babyWeight = (List<Object>) inicuDao.getListFromNativeQuery(sql);
		if (!BasicUtils.isEmpty(babyWeight)) {
			todayWeight = (Float) babyWeight.get(0) / 1000;
		}

		HashMap<Float, Integer> feedMap = new HashMap<Float, Integer>();

		List<NursingIntakeOutput> pastNursingIntakeList = inicuDao.getListFromMappedObjQuery(
				HqlSqlQueryConstants.getNursingIntakeOutputList(uhid, yesterday, currentDate));
		for (NursingIntakeOutput item : pastNursingIntakeList) {
			if (item.getUrinePassed() != null && item.getUrinePassed() && item.getUrine() != null) {
				urineTotal += Float.parseFloat(item.getUrine());
			}
		}

		 DecimalFormat df2 = new DecimalFormat("#.##");

		if (urineTotal > 0 && todayWeight > 0) {
			urineTotal = (urineTotal) / (todayWeight * duration);
			urineTotal = Float.parseFloat(df2.format(urineTotal));
		}

		return urineTotal;
	}

    /*To get latest rbs and tcb value either from lab reports, stable notes or nursing charts.
Also give true when Jaundice and Hypoglycemia is Active otherwise false.*/
    public AssessmentStatus getJuandiceHypoglycemiaStatus(String uhid, String status, String assesment) {
        AssessmentStatus assessmentObj = new AssessmentStatus();
        assessmentObj.setJaundice(false);
        assessmentObj.setMetabolic(false);


        System.out.println("uhid : " + uhid + ", status : "+ status + ", assesment : " + assesment);
        try {
            if (!BasicUtils.isEmpty(status) && "active".equals(status)) {
                if (!BasicUtils.isEmpty(assesment)) {
                    if ("jaundice".equalsIgnoreCase(assesment)) {
                        assessmentObj.setJaundice(true);
                    } else if ("Hypoglycemia".equalsIgnoreCase(assesment)) {
                        assessmentObj.setMetabolic(true);
                    }
                }

            } else {

                String assessmentMessageSql = HqlSqlQueryConstants.getJaundiceHypoglycemiaAssessmentStatus(uhid);
                List<Object[]> activeAssessmentList = inicuDao.getListFromNativeQuery(assessmentMessageSql);
                if (!BasicUtils.isEmpty(activeAssessmentList)) {
                    String assessmentMessage = "";
                    Iterator<Object[]> itr = activeAssessmentList.iterator();
                    while (itr.hasNext()) {
                        Object[] obj = itr.next();
                        assessmentMessage = assessmentMessage.concat(obj[0] + ", ");
                    }

                    if (assessmentMessage.contains("Jaundice")) {
                        assessmentObj.setJaundice(true);
                    } else {
                        assessmentObj.setJaundice(false);
                    }

                    if (assessmentMessage.contains("Hypoglycemia")) {
                        assessmentObj.setMetabolic(true);
                    } else {
                        assessmentObj.setMetabolic(false);
                    }
                }
            }

            System.out.println("getJaundice : " + assessmentObj.getJaundice() + ", getMetabolic : "+ assessmentObj.getMetabolic());
            String latestRbs = "";
            Timestamp rbsCreationTime = null;
            String latestTcb = "";
            Timestamp tcbCreationTime = null;
            String stblNotesNrsngAssQuery = "select creationtime,tcb,rbs from nursing_vitalparameters where uhid='" + uhid
                    + "' UNION " +
                    "select creationtime,tcb,rbs from stable_notes where uhid='" + uhid + "' order by creationtime desc";

            System.out.println("stblNotesNrsngAssQuery --> " + stblNotesNrsngAssQuery);
            logger.info("stblNotesNrsngAssQuery --> " + stblNotesNrsngAssQuery);
            List<Object[]> stblNotesNrsngAssQueryList = inicuDao.getListFromNativeQuery(stblNotesNrsngAssQuery);
            if (!BasicUtils.isEmpty(stblNotesNrsngAssQueryList)) {
                Iterator<Object[]> itr = stblNotesNrsngAssQueryList.iterator();
                while (itr.hasNext()) {
                    Object[] obj = itr.next();
                    if (BasicUtils.isEmpty(latestTcb) && !BasicUtils.isEmpty(obj[1])) {
                        latestTcb = (String) obj[1];
                        tcbCreationTime = (Timestamp) obj[0];
                    }

                    if (BasicUtils.isEmpty(latestRbs) && !BasicUtils.isEmpty(obj[2])) {
                        latestRbs = String.valueOf((Float) obj[2]);
                        rbsCreationTime = (Timestamp) obj[0];
                    }

                    if (!BasicUtils.isEmpty(latestTcb) && !BasicUtils.isEmpty(latestRbs)) {
                        break;
                    }
                }
            }

            String jaundiceTcb = "";
            Timestamp jaundiceTcbCreationTime = null;
            String jaundiceQuery = "select obj from SaJaundice obj where uhid='" + uhid
                    + "' order by creationtime desc";
            System.out.println("jaundiceQuery --> " + jaundiceQuery);
            logger.info("jaundiceQuery --> " + jaundiceQuery);
            List<SaJaundice> jaundiceList = inicuDao.getListFromMappedObjQuery(jaundiceQuery);
            if (!BasicUtils.isEmpty(jaundiceList)) {
                for (SaJaundice jaundice : jaundiceList) {
                    if (BasicUtils.isEmpty(jaundiceTcb) && !BasicUtils.isEmpty(jaundice.getTbcvalue())) {
                        jaundiceTcb = String.valueOf(jaundice.getTbcvalue());
                        jaundiceTcbCreationTime = jaundice.getCreationtime();

                        if (!BasicUtils.isEmpty(latestTcb)) {
                            if (tcbCreationTime.compareTo(jaundiceTcbCreationTime) < 0) {
                                latestTcb = jaundiceTcb;
	                            tcbCreationTime = jaundiceTcbCreationTime;
                                break;
                            }
                        } else {
                            latestTcb = jaundiceTcb;
	                        tcbCreationTime = jaundiceTcbCreationTime;
                            break;
                        }
                    }
                }
            }



            String labReportTcb = "";
            Timestamp labReportTcbCreationtime = null;

            String tcbTestQuery = "select obj from RefTestslist as obj where assesment_category = 'Jaundice Panel' and testcode = 'TSB '";
            List<RefTestslist> tcbTestList = inicuDao.getListFromMappedObjQuery(tcbTestQuery);

            System.out.println("tcbTestQuery --> " + tcbTestQuery);
            logger.info("tcbTestQuery --> " + tcbTestQuery);
            if(!BasicUtils.isEmpty(tcbTestList)) {
                String fetchType = "SELECT vendortestid FROM TestslistMapping as obj WHERE obj.inicutestid = '"
                        + tcbTestList.get(0).getTestid().trim() + "'";
                List<String> result = inicuDao.getListFromMappedObjQuery(fetchType);
                System.out.println("fetchType --> " + fetchType);
                logger.info("fetchType --> " + fetchType);

                if (!BasicUtils.isEmpty(result)) {
                    String testResultQuery = "select testid,lab_report_date,itemvalue, rn from " +
                            "( SELECT testid,lab_report_date,itemvalue,ROW_NUMBER() OVER (PARTITION BY lab_report_date ORDER BY MAX(lab_report_date) DESC ) AS rn " +
                            " from test_result where testid = '"+ result.get(0).toString().trim() +"' and prn ='" + uhid + "'" +
                            " GROUP BY  testid,lab_report_date,itemvalue ) " +
                            " AS t WHERE rn <= 1 ORDER BY rn, lab_report_date desc";

                    System.out.println("testResultQuery --> " + testResultQuery);
                    logger.info("testResultQuery --> " + testResultQuery);

                    List<Object[]> resultList1 = inicuDao.getListFromNativeQuery(testResultQuery);
                    if(!BasicUtils.isEmpty(resultList1)) {
                        Iterator<Object[]> itr = resultList1.iterator();
                        while (itr.hasNext()) {
                            Object[] obj = itr.next();

                            if (BasicUtils.isEmpty(labReportTcb) && !BasicUtils.isEmpty(obj[2])) {
                                labReportTcb = (String) obj[2];
                                labReportTcbCreationtime = (Timestamp) obj[1];
                            }

                            if (!BasicUtils.isEmpty(labReportTcb)) {
                                break;
                            }
                        }
                    }
                }
            }


            String labReportRbs = "";
            Timestamp labReportRbsCreationtime = null;

            String rbsTestQuery = "select obj from RefTestslist as obj where assesment_category = 'Metabolic' and testcode = 'RBS'";
            List<RefTestslist> rbsTestList = inicuDao.getListFromMappedObjQuery(rbsTestQuery);
            System.out.println("rbsTestQuery --> " + rbsTestQuery);
            logger.info("rbsTestQuery --> " + rbsTestQuery);
            if(!BasicUtils.isEmpty(rbsTestList)) {
                String fetchType = "SELECT vendortestid FROM TestslistMapping as obj WHERE obj.inicutestid = '"
                        + rbsTestList.get(0).getTestid().trim() + "'";
                List<String> result = inicuDao.getListFromMappedObjQuery(fetchType);
                System.out.println("fetchType --> " + fetchType);
                logger.info("fetchType --> " + fetchType);

                if (!BasicUtils.isEmpty(result)) {
                    String testResultQuery = "select testid,lab_report_date,itemvalue, rn from " +
                            "( SELECT testid,lab_report_date,itemvalue,ROW_NUMBER() OVER (PARTITION BY lab_report_date ORDER BY MAX(lab_report_date) DESC ) AS rn " +
                            " from test_result where testid = '"+ result.get(0).toString().trim() +"' and prn ='" + uhid + "'" +
                            " GROUP BY  testid,lab_report_date,itemvalue ) " +
                            " AS t WHERE rn <= 1 ORDER BY rn, lab_report_date desc";

                    System.out.println("testResultQuery rbs--> " + testResultQuery);
                    logger.info("testResultQuery rbs--> " + testResultQuery);

                    List<Object[]> resultList2 = inicuDao.getListFromNativeQuery(testResultQuery);
                    if(!BasicUtils.isEmpty(resultList2)) {
                        Iterator<Object[]> itr = resultList2.iterator();
                        while (itr.hasNext()) {
                            Object[] obj = itr.next();

                            if (BasicUtils.isEmpty(labReportRbs) && !BasicUtils.isEmpty(obj[2])) {
                                labReportRbs = (String) obj[2];
                                labReportRbsCreationtime = (Timestamp) obj[1];
                            }

                            if (!BasicUtils.isEmpty(labReportRbs)) {
                                break;
                            }
                        }
                    }
                }
            }

            if (!BasicUtils.isEmpty(rbsCreationTime) && !BasicUtils.isEmpty(labReportRbsCreationtime)) {
                if (rbsCreationTime.compareTo(labReportRbsCreationtime) < 0) {
                    latestRbs = labReportRbs;
	                rbsCreationTime = labReportRbsCreationtime;
                }
            } else if (BasicUtils.isEmpty(latestRbs)) {
                latestRbs = labReportRbs;
	            rbsCreationTime = labReportRbsCreationtime;
            }

            if (!BasicUtils.isEmpty(tcbCreationTime) && !BasicUtils.isEmpty(labReportTcbCreationtime)) {
                if (tcbCreationTime.compareTo(labReportTcbCreationtime) < 0) {
                    latestTcb = labReportTcb;
	                tcbCreationTime = labReportTcbCreationtime;
                    assessmentObj.setTSB(true);
                    assessmentObj.setLabTestDateTime(labReportTcbCreationtime);
                }
            } else if (BasicUtils.isEmpty(latestTcb)) {
                latestTcb = labReportTcb;
	            tcbCreationTime = labReportTcbCreationtime;
                assessmentObj.setTSB(true);
                assessmentObj.setLabTestDateTime(labReportTcbCreationtime);
            }

            System.out.println("latestTcb : "+ latestTcb + ", latestRbs : " + latestRbs);
            if (!BasicUtils.isEmpty(latestTcb)) {
                double d = Double.parseDouble(latestTcb);
                if (d == 0) {
                    latestTcb = "";
                } else if (d % 1 == 0) {
                    latestTcb = String.valueOf((int) d);
                }
            }
            if (!BasicUtils.isEmpty(latestRbs) && Double.parseDouble(latestRbs) == 0) {
                latestRbs = "";
            }

            assessmentObj.setTcb(latestTcb);
            assessmentObj.setRbs(latestRbs);
            assessmentObj.setLastestTcbTime(tcbCreationTime);
	        assessmentObj.setLatestRbsTime(rbsCreationTime);

        } catch (Exception ex) {
            ex.printStackTrace();
            logger.error("Error while executing getJuandiceHypoglycemiaStatus()", ex);
        }
        return assessmentObj;
    }

    @Override
    public Map<String, Object> getHematologyStatus(String uhid) {
        Map<String, Object> data = new HashMap<>();
        boolean isHematologyActive = false;
        Timestamp miscTimestamp = null;
        Timestamp bloodProductTimestamp = null;
        try {
            List<String> diseaseList = Arrays.asList("Heamophilia","Thalassemia","Polycythemia","Thrombocytopenia",
                    "Thrombocytosis","Leukocytosis","Leukopenia","Anaemia");

            String misc1Query = "select obj from SaMiscellaneous as obj where uhid= '" + uhid + "' order by creationtime desc";
            System.out.println("misc1Query --> " + misc1Query);
            logger.info("misc1Query --> " + misc1Query);
            List<SaMiscellaneous> saMiscellaneousList = inicuDao.getListFromMappedObjQuery(misc1Query);
            if(!BasicUtils.isEmpty(saMiscellaneousList)) {
                if ("yes".equalsIgnoreCase(saMiscellaneousList.get(0).getMiscellaneousstatus())) {
                    if (!BasicUtils.isEmpty(saMiscellaneousList.get(0).getDisease())
                            && diseaseList.contains(saMiscellaneousList.get(0).getDisease())) {
                        miscTimestamp = saMiscellaneousList.get(0).getAssessmentTime();
                        isHematologyActive = true;
                    }
                }
            }

            if (!isHematologyActive) {
                String misc2Query = "select obj from SaMiscellaneous2 as obj where uhid= '" + uhid + "' order by creationtime desc";
                System.out.println("misc2Query --> " + misc2Query);
                logger.info("misc2Query --> " + misc2Query);
                List<SaMiscellaneous2> saMiscellaneous2List = inicuDao.getListFromMappedObjQuery(misc2Query);
                if(!BasicUtils.isEmpty(saMiscellaneous2List)) {
                    if ("yes".equalsIgnoreCase(saMiscellaneous2List.get(0).getMiscellaneousstatus())) {
                        if (!BasicUtils.isEmpty(saMiscellaneous2List.get(0).getDisease())
                                && diseaseList.contains(saMiscellaneous2List.get(0).getDisease())) {
                            miscTimestamp = saMiscellaneous2List.get(0).getAssessmentTime();
                            isHematologyActive = true;
                        }
                    }
                }
            }

            if (!isHematologyActive) {
                LocalDate now = LocalDate.now();
                Timestamp bloodProducttimestamp = Timestamp.valueOf(now.atStartOfDay());

                int offset = TimeZone.getTimeZone(BasicConstants.CLIENT_TIME_ZONE).getRawOffset()
                        - TimeZone.getDefault().getRawOffset();
                Timestamp fromDateOffsetTwentFourHour = new Timestamp(bloodProducttimestamp.getTime() - offset);

                String bloodProductQuery = "select obj from DoctorBloodProducts as obj where uhid= '" + uhid
                        + "' and assessment_time >= '" + fromDateOffsetTwentFourHour + "' order by creationtime desc";
                System.out.println("bloodProductQuery --> " + bloodProductQuery);
                logger.info("bloodProductQuery --> " + bloodProductQuery);
                List<DoctorBloodProducts> bloodProductsList = inicuDao.getListFromMappedObjQuery(bloodProductQuery);
                if(!BasicUtils.isEmpty(bloodProductsList)) {
                    for (DoctorBloodProducts bloodProduct : bloodProductsList) {
                        if (isHematologyActive) {
                            break;
                        }

                        if (!BasicUtils.isEmpty(bloodProduct.getBlood_product())) {
                            bloodProductTimestamp = bloodProduct.getAssessment_time();
                            isHematologyActive = true;
                        }
                    }
                }
            }

            data.put("isHematologyActive", isHematologyActive);
            data.put("miscTimestamp", miscTimestamp);
            data.put("bloodProductTimestamp", bloodProductTimestamp);
            System.out.println("isHematologyActive map object: " + data.toString());
        }catch (Exception e){
            System.out.println("Exception: " + e);
            logger.error("Error while executing getHematologyStatus()", e);
        }
        return data;
    }

    public GeneralResponseObject generateRespSupportNote(String assesment, String fromWhere, AssessmentRespSystemPOJO respSystem) {
        GeneralResponseObject generalResponseObject = new GeneralResponseObject();
        try {
            if (!BasicUtils.isEmpty(respSystem.getUhid())) {
                String uhid = respSystem.getUhid();
                String progressNotes = "";
                if (!BasicUtils.isEmpty(uhid) && !BasicUtils.isEmpty(assesment)) {
                    String loggedUser = respSystem.getLoggedUser();
                    if ("RDS".equalsIgnoreCase(assesment)) {

                        SaRespRds currentRespiratoryDistress = respSystem.getRespSystemObject().getRespiratoryDistress()
                                .getCurrentRespDistress();

                        // Fetching Latest Episode Number for Rds
                        int epCountRds = 1;
                        String queryEpCountRds = "SELECT MAX(episode_number) FROM sa_resp_rds WHERE uhid='" + uhid + "'";
                        List<Integer> epCountListRds = inicuDao.getListFromNativeQuery(queryEpCountRds);
                        if (!BasicUtils.isEmpty(epCountListRds)) {
                            epCountRds = (int) epCountListRds.get(0);
                        }

                        List<SaRespRds> rdsList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getRdsList(uhid, epCountRds));
                        if ("respSupport".equalsIgnoreCase(fromWhere)) {
                            if (!BasicUtils.isEmpty(rdsList)) {
                                RespSupport respSupport = respSystem.getRespSystemObject().getRespSupport();
                                respSupport.setUhid(uhid);
                                respSupport.setEventname("Respiratory Distress");
                                int randomNumber = new Random().nextInt((999999999 - 100000) + 1) + 100000;
                                respSupport.setEventid(String.valueOf(randomNumber));
                                respSupport.setCreationtime(currentRespiratoryDistress.getAssessmentTime());
                                respSupport.setModificationtime(currentRespiratoryDistress.getAssessmentTime());
                                respSupport.setIsactive(false);
                                respSupport.setRsVentType(null);
                                respSupport.setEventidUpdated(false);
                                respSupport = (RespSupport) inicuDao.saveObject(respSupport);

                                NurseExecutionOrders order = new NurseExecutionOrders();
                                order.setEventname("Respiratory Support");
                                order.setIsExecution(false);
                                order.setOrderText("Baby is removed from Respiratory Support");
                                order.setAssessmentdate(currentRespiratoryDistress.getAssessmentTime());
                                order.setUhid(uhid);
                                order.setLoggeduser(loggedUser);
                                inicuDao.saveObject(order);

                                // Respiratory Support Detail Fetching Function
                                //String respiratorySupportNotes = getRespiratorySupportRds(rdsList, uhid, respSupport.getEventid());
                                String respiratorySupportNotes = generateInactiveNotesRds(null, uhid, ""
                                        , null, respSupport.getEventid());
                                progressNotes += respiratorySupportNotes;
                            }
                        } else if ("medication".equalsIgnoreCase(fromWhere)) {

                            List<BabyPrescription> prescriptionList = respSystem.getRespSystemObject()
                                    .getRespiratoryDistress().getPrescriptionList();
                            String continuedMedication = "";
                            if (!BasicUtils.isEmpty(prescriptionList)) {
                                for (int i = 0; i < prescriptionList.size(); i++) {
                                    BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
                                    if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
                                            && babyPrescription.getContinueReason() != null
                                            && babyPrescription.getIsactive()) {
                                        continuedMedication += babyPrescription.getMedicinename() + " ";
                                        if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
                                            continuedMedication += babyPrescription.getDose() + "("
                                                    + babyPrescription.getDose_unit() + "/"
                                                    + babyPrescription.getDose_unit_time() + ") ";
                                        }
                                        continuedMedication += "prescribed on "
                                                + getDateFromTimestamp(babyPrescription.getStartdate())
                                                + " and continued due to " + babyPrescription.getContinueReason() + ". ";
                                    }
                                }
                                this.savePrescriptionList(null, prescriptionList, "RDS", null,
                                        currentRespiratoryDistress.getAssessmentTime());
                            }

                            //String medicationNotes = getMedicationOfRds(rdsList, true);
                            String medicationNotes = generateInactiveNotesRds(null, uhid, continuedMedication, null, "");
                            progressNotes += medicationNotes;
                        }
                    } else if ("Apnea".equalsIgnoreCase(assesment)) {

                        SaRespApnea currentApnea = respSystem.getRespSystemObject().getApnea().getCurrentApnea();

                        // Fetching Latest Episode Number for Rds
                        int epCountRds = 1;
                        String queryEpCountRds = "SELECT MAX(episode_number) FROM sa_resp_apnea WHERE uhid='" + uhid + "'";
                        List<Integer> epCountListRds = inicuDao.getListFromNativeQuery(queryEpCountRds);
                        if (!BasicUtils.isEmpty(epCountListRds)) {
                            epCountRds = (int) epCountListRds.get(0);
                        }

                        List<SaRespApnea> apneaList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getApneaList(uhid, epCountRds));
                        if ("respSupport".equalsIgnoreCase(fromWhere)) {
                            if (!BasicUtils.isEmpty(apneaList)) {
                                RespSupport respSupport = respSystem.getRespSystemObject().getRespSupport();
                                respSupport.setUhid(uhid);
                                respSupport.setEventname("apnea");
                                int randomNumber = new Random().nextInt((999999999 - 100000) + 1) + 100000;
                                respSupport.setEventid(String.valueOf(randomNumber));
                                respSupport.setCreationtime(currentApnea.getAssessmentTime());
                                respSupport.setModificationtime(currentApnea.getAssessmentTime());
                                respSupport.setIsactive(false);
                                respSupport.setRsVentType(null);
                                respSupport.setEventidUpdated(false);
                                respSupport = (RespSupport) inicuDao.saveObject(respSupport);

                                NurseExecutionOrders order = new NurseExecutionOrders();
                                order.setEventname("Respiratory Support");
                                order.setIsExecution(false);
                                order.setOrderText("Baby is removed from Respiratory Support");
                                order.setAssessmentdate(currentApnea.getAssessmentTime());
                                order.setUhid(uhid);
                                order.setLoggeduser(loggedUser);
                                inicuDao.saveObject(order);

                                // Respiratory Support Detail Fetching Function
                                //String respiratorySupportNotes = getRespiratorySupportApnea(apneaList, uhid, respSupport.getEventid());
                                String respiratorySupportNotes = generateInactiveNotesApnea(null, uhid, ""
                                        , null, respSupport.getEventid());
                                progressNotes += respiratorySupportNotes;
                            }
                        } else if ("medication".equalsIgnoreCase(fromWhere)) {

                            List<BabyPrescription> prescriptionList = respSystem.getRespSystemObject().getApnea()
                                    .getPrescriptionList();
                            String continuedMedication = "";
                            if (!BasicUtils.isEmpty(prescriptionList)) {
                                for (int i = 0; i < prescriptionList.size(); i++) {
                                    BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
                                    if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
                                            && babyPrescription.getContinueReason() != null && babyPrescription.getIsactive()) {
                                        continuedMedication += babyPrescription.getMedicinename() + " ";
                                        if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
                                            continuedMedication += babyPrescription.getDose() + "("
                                                    + babyPrescription.getDose_unit() + "/"
                                                    + babyPrescription.getDose_unit_time() + ") ";
                                        }
                                        continuedMedication += "prescribed on "
                                                + getDateFromTimestamp(babyPrescription.getStartdate())
                                                + " and continued due to " + babyPrescription.getContinueReason() + ". ";
                                    }
                                }
                                this.savePrescriptionList(null, prescriptionList, "Apnea", null,
                                        currentApnea.getAssessmentTime());
                            }

                            //String medicationNotes = getMedicationOfApnea(apneaList, true);
                            String medicationNotes = generateInactiveNotesApnea(null, uhid, continuedMedication, null, "");
                            progressNotes += medicationNotes;
                        }
                    } else if ("PPHN".equalsIgnoreCase(assesment)) {

                        SaRespPphn currentPphn = respSystem.getRespSystemObject().getPphn().getCurrentPphn();

                        // Fetching Latest Episode Number for Rds
                        int epCountRds = 1;
                        String queryEpCountRds = "SELECT MAX(episode_number) FROM sa_resp_pphn WHERE uhid='" + uhid + "'";
                        List<Integer> epCountListRds = inicuDao.getListFromNativeQuery(queryEpCountRds);
                        if (!BasicUtils.isEmpty(epCountListRds)) {
                            epCountRds = (int) epCountListRds.get(0);
                        }

                        List<SaRespPphn> pphnList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getPPHNList(uhid, epCountRds));
                        if ("respSupport".equalsIgnoreCase(fromWhere)) {
                            if (!BasicUtils.isEmpty(pphnList)) {
                                RespSupport respSupport = respSystem.getRespSystemObject().getRespSupport();
                                respSupport.setUhid(uhid);
                                respSupport.setEventname("PPHN");
                                int randomNumber = new Random().nextInt((999999999 - 100000) + 1) + 100000;
                                respSupport.setEventid(String.valueOf(randomNumber));
                                respSupport.setCreationtime(currentPphn.getAssessmentTime());
                                respSupport.setModificationtime(currentPphn.getAssessmentTime());
                                respSupport.setIsactive(false);
                                respSupport.setRsVentType(null);
                                respSupport.setEventidUpdated(false);
                                respSupport = (RespSupport) inicuDao.saveObject(respSupport);

                                NurseExecutionOrders order = new NurseExecutionOrders();
                                order.setEventname("Respiratory Support");
                                order.setIsExecution(false);
                                order.setOrderText("Baby is removed from Respiratory Support");
                                order.setAssessmentdate(currentPphn.getAssessmentTime());
                                order.setUhid(uhid);
                                order.setLoggeduser(loggedUser);
                                inicuDao.saveObject(order);

                                // Respiratory Support Detail Fetching Function
                                //String respiratorySupportNotes = getRespiratorySupportPphn(pphnList, uhid, respSupport.getEventid());
                                String respiratorySupportNotes = generateInactiveNotesPPHN(null, uhid, ""
                                        , null, respSupport.getEventid());
                                progressNotes += respiratorySupportNotes;
                            }
                        } else if ("medication".equalsIgnoreCase(fromWhere)) {

                                // progress notes...
                                List<BabyPrescription> prescriptionList = respSystem.getRespSystemObject().getPphn()
                                        .getPrescriptionList();
                                String continuedMedication = "";
                                if (!BasicUtils.isEmpty(prescriptionList)) {
                                    for (int i = 0; i < prescriptionList.size(); i++) {
                                        BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
                                        if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
                                                && babyPrescription.getContinueReason() != null
                                                && babyPrescription.getIsactive()) {
                                            continuedMedication += babyPrescription.getMedicinename() + " ";
                                            if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
                                                continuedMedication += babyPrescription.getDose() + "("
                                                        + babyPrescription.getDose_unit() + "/"
                                                        + babyPrescription.getDose_unit_time() + ") ";
                                            }
                                            continuedMedication += "prescribed on "
                                                    + getDateFromTimestamp(babyPrescription.getStartdate())
                                                    + " and continued due to " + babyPrescription.getContinueReason() + ". ";
                                        }
                                    }
                                    this.savePrescriptionList(null, prescriptionList, "PPHN", null,
                                            currentPphn.getAssessmentTime());
                                }


                            //String medicationNotes = getMedicationOfPphn(pphnList, true);
                            String medicationNotes = generateInactiveNotesPPHN(null, uhid, continuedMedication, null, "");
                            progressNotes += medicationNotes;
                        }
                    } else if ("Pneumothorax".equalsIgnoreCase(assesment)) {

                        SaRespPneumo currentPneumothorax = respSystem.getRespSystemObject().getPneumothorax()
                                .getCurrentRespPneumo();

                        // Fetching Latest Episode Number for Rds
                        int epCountRds = 1;
                        String queryEpCountRds = "SELECT MAX(episode_number) FROM sa_resp_pneumothorax WHERE uhid='" + uhid + "'";
                        List<Integer> epCountListRds = inicuDao.getListFromNativeQuery(queryEpCountRds);
                        if (!BasicUtils.isEmpty(epCountListRds)) {
                            epCountRds = (int) epCountListRds.get(0);
                        }

                        List<SaRespPneumo> pneumothoraxList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getPneumothoraxList(uhid, epCountRds));
                        if ("respSupport".equalsIgnoreCase(fromWhere)) {
                            if (!BasicUtils.isEmpty(pneumothoraxList)) {
                                RespSupport respSupport = respSystem.getRespSystemObject().getRespSupport();
                                respSupport.setUhid(uhid);
                                respSupport.setEventname("Pneumothorax");
                                int randomNumber = new Random().nextInt((999999999 - 100000) + 1) + 100000;
                                respSupport.setEventid(String.valueOf(randomNumber));
                                respSupport.setCreationtime(currentPneumothorax.getAssessmentTime());
                                respSupport.setModificationtime(currentPneumothorax.getAssessmentTime());
                                respSupport.setIsactive(false);
                                respSupport.setRsVentType(null);
                                respSupport.setEventidUpdated(false);
                                respSupport = (RespSupport) inicuDao.saveObject(respSupport);

                                NurseExecutionOrders order = new NurseExecutionOrders();
                                order.setEventname("Respiratory Support");
                                order.setIsExecution(false);
                                order.setOrderText("Baby is removed from Respiratory Support");
                                order.setAssessmentdate(currentPneumothorax.getAssessmentTime());
                                order.setUhid(uhid);
                                order.setLoggeduser(loggedUser);
                                inicuDao.saveObject(order);

                                // Respiratory Support Detail Fetching Function
                                //String respiratorySupportNotes = getRespiratorySupportPneumothorax(pneumothoraxList, uhid, respSupport.getEventid());
                                String respiratorySupportNotes = generateInactiveNotesPneumothorax(null, uhid, ""
                                        , null, respSupport.getEventid());
                                progressNotes += respiratorySupportNotes;
                            }
                        } else if ("medication".equalsIgnoreCase(fromWhere)) {

                            // progress notes...
                            List<BabyPrescription> prescriptionList = respSystem.getRespSystemObject().getPneumothorax()
                                    .getPrescriptionList();
                            String continuedMedication = "";
                            if (!BasicUtils.isEmpty(prescriptionList)) {
                                for (int i = 0; i < prescriptionList.size(); i++) {
                                    BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
                                    if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
                                            && babyPrescription.getContinueReason() != null
                                            && babyPrescription.getIsactive()) {
                                        continuedMedication += babyPrescription.getMedicinename() + " ";
                                        if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
                                            continuedMedication += babyPrescription.getDose() + "("
                                                    + babyPrescription.getDose_unit() + "/"
                                                    + babyPrescription.getDose_unit_time() + ") ";
                                        }
                                        continuedMedication += "prescribed on "
                                                + getDateFromTimestamp(babyPrescription.getStartdate())
                                                + " and continued due to " + babyPrescription.getContinueReason() + ". ";
                                    }
                                }
                                this.savePrescriptionList(null, prescriptionList, "Pneumothorax", null,
                                        currentPneumothorax.getAssessmentTime());
                            }

                            //String medicationNotes = getMedicationOfPneumothorax(pneumothoraxList, true);
                            String medicationNotes = generateInactiveNotesPneumothorax(null, uhid, continuedMedication, null, "");
                            progressNotes += medicationNotes;
                        }
                    }

                    if (!BasicUtils.isEmpty(progressNotes)) {
                        generalResponseObject=BasicUtils.getResonseObject(true,200,"Success", progressNotes);
                    } else {
                        generalResponseObject=BasicUtils.getResonseObject(true,204,"No Content",null);
                    }
                }
            } else {
                generalResponseObject=BasicUtils.getResonseObject(true,400,"Bad Request",null);
            }

        } catch (Exception e){
            generalResponseObject=BasicUtils.getResonseObject(false, 500 ,"Internal Server Error", null);
            System.out.printf("Exception: "+e);
            logger.error("Internal Server Error while executing generateRespSupportNote() ", e);
        }
        return generalResponseObject;
    }
    
    
    public GeneralResponseObject generateMedicationSupportInfection(String assesment, String fromWhere, AssessmentInfectionSystemPOJO infectSystemObj) {
        GeneralResponseObject generalResponseObject = new GeneralResponseObject();
        try {
        	
        	String progressNotes = "";
        	String uhid = infectSystemObj.getUhid();
        	
        	if(assesment.equalsIgnoreCase("Sepsis")) {
        		SaSepsis currentSepsis = infectSystemObj.getInfectionEventObject().getSepsisEvent().getCurrentEvent();
            	
                // Fetching Latest Episode Number for Rds
                int epCountSepsis = 1;
                String queryEpCountSepsis = "SELECT MAX(episode_number) FROM sa_infection_sepsis WHERE uhid='" + uhid + "'";
                List<Integer> epCountListSepsis = inicuDao.getListFromNativeQuery(queryEpCountSepsis);
                if (!BasicUtils.isEmpty(epCountListSepsis)) {
                    epCountSepsis = (int) epCountListSepsis.get(0);
                }

                List<SaSepsis> sepsisList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getSepsisList(uhid, epCountSepsis));
            	
            	if ("medication".equalsIgnoreCase(fromWhere)) {

                    List<BabyPrescription> prescriptionList = infectSystemObj.getInfectionEventObject()
                            .getSepsisEvent().getPrescriptionList();
                    String continuedMedication = "";
                    if (!BasicUtils.isEmpty(prescriptionList)) {
                        for (int i = 0; i < prescriptionList.size(); i++) {
                            BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
                            if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
                                    && babyPrescription.getContinueReason() != null
                                    && babyPrescription.getIsactive()) {
                                continuedMedication += babyPrescription.getMedicinename() + " ";
                                if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
                                    continuedMedication += babyPrescription.getDose() + "("
                                            + babyPrescription.getDose_unit() + "/"
                                            + babyPrescription.getDose_unit_time() + ") ";
                                }
                                continuedMedication += "prescribed on "
                                        + getDateFromTimestamp(babyPrescription.getStartdate())
                                        + " and continued due to " + babyPrescription.getContinueReason() + ". ";
                            }
                        }
                        this.savePrescriptionList(null, prescriptionList, "Sepsis", null,
                                currentSepsis.getAssessmentTime());
                    }
                    
                    if(currentSepsis.getAgeinhoursdays()!=null && currentSepsis.getAgeinhoursdays() == true) {
   					 if(Integer.parseInt(currentSepsis.getAgeatonset())<72) {
   						 currentSepsis.setEarlyLateOnset("Early Onset");
   					 }
   					 else {
   						 currentSepsis.setEarlyLateOnset("Late Onset"); 
   					 }
   				 }
   				 else {
   					 if(Integer.parseInt(currentSepsis.getAgeatonset())<3) {
   						 currentSepsis.setEarlyLateOnset("Early Onset");
   					 }
   					 else {
   						 currentSepsis.setEarlyLateOnset("Late Onset"); 
   					 }
   				 }

                    String medicationNotes = generateInactiveNotesSepsis(null, uhid, continuedMedication, currentSepsis.getAssessmentTime(), currentSepsis.getEarlyLateOnset());
                    progressNotes += medicationNotes + continuedMedication;
                }
        	}
        	else if(assesment.equalsIgnoreCase("Vap")) {
        		SaInfectVap currentVap = infectSystemObj.getInfectionEventObject().getVapEvent().getCurrentEvent();
            	
                // Fetching Latest Episode Number for Rds
                int epCountVap = 1;
                String queryEpCountVap = "SELECT MAX(episode_number) FROM sa_infection_vap WHERE uhid='" + uhid + "'";
                List<Integer> epCountListVap = inicuDao.getListFromNativeQuery(queryEpCountVap);
                if (!BasicUtils.isEmpty(epCountListVap)) {
                	epCountVap = (int) epCountListVap.get(0);
                }

                List<SaInfectVap> vapList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getVapList(uhid, epCountVap));
            	
            	if ("medication".equalsIgnoreCase(fromWhere)) {

                    List<BabyPrescription> prescriptionList = infectSystemObj.getInfectionEventObject()
                            .getVapEvent().getPrescriptionList();
                    String continuedMedication = "";
                    if (!BasicUtils.isEmpty(prescriptionList)) {
                        for (int i = 0; i < prescriptionList.size(); i++) {
                            BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
                            if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
                                    && babyPrescription.getContinueReason() != null
                                    && babyPrescription.getIsactive()) {
                                continuedMedication += babyPrescription.getMedicinename() + " ";
                                if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
                                    continuedMedication += babyPrescription.getDose() + "("
                                            + babyPrescription.getDose_unit() + "/"
                                            + babyPrescription.getDose_unit_time() + ") ";
                                }
                                continuedMedication += "prescribed on "
                                        + getDateFromTimestamp(babyPrescription.getStartdate())
                                        + " and continued due to " + babyPrescription.getContinueReason() + ". ";
                            }
                        }
                        this.savePrescriptionList(null, prescriptionList, "Vap", null,
                                currentVap.getAssessmentTime());
                    }

                    String medicationNotes = generateInactiveNotesVap(null, uhid, continuedMedication);
                    progressNotes += medicationNotes + continuedMedication;
                }
            } else if(assesment.equalsIgnoreCase("NEC")) {
                SaNec currentNec = infectSystemObj.getInfectionEventObject().getNecEvent().getCurrentEvent();
                List<BabyPrescription> prescriptionList = infectSystemObj.getInfectionEventObject()
                        .getNecEvent().getPrescriptionList();
                String continuedMedication = "";
                if (!BasicUtils.isEmpty(prescriptionList)) {
                    for (int i = 0; i < prescriptionList.size(); i++) {
                        BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
                        if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
                                && babyPrescription.getContinueReason() != null
                                && babyPrescription.getIsactive()) {
                            continuedMedication += babyPrescription.getMedicinename() + " ";
                            if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
                                continuedMedication += babyPrescription.getDose() + "("
                                        + babyPrescription.getDose_unit() + "/"
                                        + babyPrescription.getDose_unit_time() + ") ";
                            }
                            continuedMedication += "prescribed on "
                                    + getDateFromTimestamp(babyPrescription.getStartdate())
                                    + " and continued due to " + babyPrescription.getContinueReason() + ". ";
                        }
                    }
                    this.savePrescriptionList(null, prescriptionList, "NEC", null,
                            currentNec.getAssessmentTime());
                }

                String medicationNotes = generateInactiveNotesNec(null, uhid, continuedMedication);
                progressNotes += medicationNotes;
            }
        	
        	 if (!BasicUtils.isEmpty(progressNotes)) {
                 generalResponseObject=BasicUtils.getResonseObject(true,200,"Success", progressNotes);
             } else {
                 generalResponseObject=BasicUtils.getResonseObject(true,204,"No Content",null);
             }
        	
        }
        catch (Exception e){
            generalResponseObject=BasicUtils.getResonseObject(false, 500 ,"Internal Server Error", null);
            System.out.printf("Exception: "+e);
            logger.error("Internal Server Error while executing generateRespSupportNote() ", e);
        }
        return generalResponseObject;
        }
    
    
   public GeneralResponseObject generateRespSupportCns(String assesment, String fromWhere, AssessmentCNSSystemPOJO cnsSystem) {
    	
	   GeneralResponseObject generalResponseObject = new GeneralResponseObject();
	   try {
	   
			   String progressNotes = "";
		   	String uhid = cnsSystem.getUhid();
			if(assesment.equalsIgnoreCase("Asphyxia")) {
			   	SaCnsAsphyxia currentAsphyxia = cnsSystem.getCNSEventObject().getAsphyxiaEvent().getCurrentEvent().getSaCnsAsphyxia();
			   	
			       // Fetching Latest Episode Number for Rds
			       int epCountAsphyxia = 1;
			       String queryEpCountAsphyxia = "SELECT MAX(episode_number) FROM sa_cns_asphyxia WHERE uhid='" + uhid + "'";
			       List<Integer> epCountListAsphyxia = inicuDao.getListFromNativeQuery(queryEpCountAsphyxia);
			       if (!BasicUtils.isEmpty(epCountListAsphyxia)) {
			    	   epCountAsphyxia = (int) epCountListAsphyxia.get(0);
			       }
			
			       List<SaCnsAsphyxia> asphyxiaList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getAsphyxiaList(uhid, epCountAsphyxia));
	
			       if ("respSupport".equalsIgnoreCase(fromWhere)) {
	
	                   if (!BasicUtils.isEmpty(asphyxiaList)) {
	                       // Respiratory Support Detail Fetching Function
	                       
	
	                       RespSupport respSupport = cnsSystem.getCNSEventObject().getCommonEventsInfo().getRespSupport();
	                       respSupport.setUhid(uhid);
	                       respSupport.setEventname("Asphyxia");
	                       int randomNumber = new Random().nextInt((999999999 - 100000) + 1) + 100000;
	                       respSupport.setEventid(String.valueOf(randomNumber));
	                       respSupport.setCreationtime(currentAsphyxia.getAssessmentTime());
	                       respSupport.setModificationtime(currentAsphyxia.getAssessmentTime());
	                       respSupport.setIsactive(false);
	                       respSupport.setRsVentType(null);
	                       respSupport.setEventidUpdated(false);
	                       respSupport = (RespSupport) inicuDao.saveObject(respSupport);
	
	                       NurseExecutionOrders order = new NurseExecutionOrders();
	                       order.setEventname("Asphyxia");
	                       order.setIsExecution(false);
	                       order.setOrderText("Baby is removed from Respiratory Support");
	                       order.setAssessmentdate(currentAsphyxia.getAssessmentTime());
	                       order.setUhid(uhid);
	                       order.setLoggeduser(cnsSystem.getLoggedUser());
	                       inicuDao.saveObject(order);
	                       
	                      // String respiratorySupportNotes = getRespiratorySupportAsphyxia(asphyxiaList, uhid, respSupport.getEventid());
	                       String respiratorySupportNotes = generateInactiveNotesAsphyxia(null, uhid, "", respSupport.getEventid());
	                       progressNotes += respiratorySupportNotes;
	                   }
	               } 
			       else if ("medication".equalsIgnoreCase(fromWhere)) {
	
	                List<BabyPrescription> prescriptionList = cnsSystem.getCNSEventObject()
	                        .getAsphyxiaEvent().getPrescriptionList();
	                String continuedMedication = "";
	                if (!BasicUtils.isEmpty(prescriptionList)) {
	                    for (int i = 0; i < prescriptionList.size(); i++) {
	                        BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
	                        if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
	                                && babyPrescription.getContinueReason() != null
	                                && babyPrescription.getIsactive()) {
	                            continuedMedication += babyPrescription.getMedicinename() + " ";
	                            if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
	                                continuedMedication += babyPrescription.getDose() + "("
	                                        + babyPrescription.getDose_unit() + "/"
	                                        + babyPrescription.getDose_unit_time() + ") ";
	                            }
	                            continuedMedication += "prescribed on "
	                                    + getDateFromTimestamp(babyPrescription.getStartdate())
	                                    + " and continued due to " + babyPrescription.getContinueReason() + ". ";
	                        }
	                    }
	                    this.savePrescriptionList(null, prescriptionList, "Asphyxia", null,
	                    		currentAsphyxia.getAssessmentTime());
	                }
	
	                //String medicationNotes = getMedicationOfAsphyxia(asphyxiaList,true);
	                String medicationNotes = generateInactiveNotesAsphyxia(null, uhid, continuedMedication, "");
	                progressNotes += medicationNotes + continuedMedication;
	            }
			}
			
			else if(assesment.equalsIgnoreCase("Seizures")) {

			   	SaCnsSeizures currentSeizures = cnsSystem.getCNSEventObject().getSeizuresEvent().getCurrentEvent().getCurrentSeizures();
			   	
			       // Fetching Latest Episode Number for Rds
			       int epCountSeizures = 1;
			       String queryEpCountSeizures = "SELECT MAX(episode_number) FROM sa_cns_seizures WHERE uhid='" + uhid + "'";
			       List<Integer> epCountListSeizures = inicuDao.getListFromNativeQuery(queryEpCountSeizures);
			       if (!BasicUtils.isEmpty(epCountListSeizures)) {
			    	   epCountSeizures = (int) epCountListSeizures.get(0);
			       }
			
			       List<SaCnsSeizures> seizuresList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getSeizuresList(uhid, epCountSeizures));
	
			       if ("respSupport".equalsIgnoreCase(fromWhere)) {
	
	                   if (!BasicUtils.isEmpty(seizuresList)) {
	                       // Respiratory Support Detail Fetching Function
	                       
	
	                       RespSupport respSupport = cnsSystem.getCNSEventObject().getCommonEventsInfo().getRespSupport();
	                       respSupport.setUhid(uhid);
	                       respSupport.setEventname("Seizures");
	                       int randomNumber = new Random().nextInt((999999999 - 100000) + 1) + 100000;
	                       respSupport.setEventid(String.valueOf(randomNumber));
	                       respSupport.setCreationtime(currentSeizures.getAssessmentTime());
	                       respSupport.setModificationtime(currentSeizures.getAssessmentTime());
	                       respSupport.setIsactive(false);
	                       respSupport.setRsVentType(null);
	                       respSupport.setEventidUpdated(false);
	                       respSupport = (RespSupport) inicuDao.saveObject(respSupport);
	
	                       NurseExecutionOrders order = new NurseExecutionOrders();
	                       order.setEventname("Seizures");
	                       order.setIsExecution(false);
	                       order.setOrderText("Baby is removed from Respiratory Support");
	                       order.setAssessmentdate(currentSeizures.getAssessmentTime());
	                       order.setUhid(uhid);
	                       order.setLoggeduser(cnsSystem.getLoggedUser());
	                       inicuDao.saveObject(order);
	                       String respiratorySupportNotes = generateInactiveNotesSeizure(null, uhid, "" ,respSupport.getEventid());
	                       progressNotes += respiratorySupportNotes;
	                   }
	               } 
			       else if ("medication".equalsIgnoreCase(fromWhere)) {
	
	                List<BabyPrescription> prescriptionList = cnsSystem.getCNSEventObject()
	                        .getSeizuresEvent().getPrescriptionList();
	                String continuedMedication = "";
	                if (!BasicUtils.isEmpty(prescriptionList)) {
	                    for (int i = 0; i < prescriptionList.size(); i++) {
	                        BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
	                        if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
	                                && babyPrescription.getContinueReason() != null
	                                && babyPrescription.getIsactive()) {
	                            continuedMedication += babyPrescription.getMedicinename() + " ";
	                            if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
	                                continuedMedication += babyPrescription.getDose() + "("
	                                        + babyPrescription.getDose_unit() + "/"
	                                        + babyPrescription.getDose_unit_time() + ") ";
	                            }
	                            continuedMedication += "prescribed on "
	                                    + getDateFromTimestamp(babyPrescription.getStartdate())
	                                    + " and continued due to " + babyPrescription.getContinueReason() + ". ";
	                        }
	                    }
	                    this.savePrescriptionList(null, prescriptionList, "Seizures", null,
	                    		currentSeizures.getAssessmentTime());
	                }
	
	               // String medicationNotes = getMedicationOfSeizure(seizuresList,true);
                    String medicationNotes = generateInactiveNotesSeizure(null, uhid, continuedMedication ,"");
	                progressNotes += medicationNotes + continuedMedication;
	            }

			}
		       
		       if (!BasicUtils.isEmpty(progressNotes)) {
                   generalResponseObject=BasicUtils.getResonseObject(true,200,"Success", progressNotes);
               } else {
                   generalResponseObject=BasicUtils.getResonseObject(true,204,"No Content",null);
               }
    }
   
	   catch (Exception e){
	       generalResponseObject=BasicUtils.getResonseObject(false, 500 ,"Internal Server Error", null);
	       System.out.printf("Exception: "+e);
	       logger.error("Internal Server Error while executing generateRespSupportNote() ", e);
	   }
       return generalResponseObject;
	   
   }


    public GeneralResponseObject generateJaundiceInactiveNote(SysJaundJSON sysJaundObj) {
        GeneralResponseObject generalResponseObject = new GeneralResponseObject();
        try {
            if (!BasicUtils.isEmpty(sysJaundObj.getJaundice())) {
                String uhid = sysJaundObj.getJaundice().getUhid();
                String progressNotes = "";
                if (!BasicUtils.isEmpty(uhid)) {
                    String loggedUser = sysJaundObj.getJaundice().getLoggeduser();

                        SaJaundice jaundice = sysJaundObj.getJaundice();

                        // Fetching Current Episode Number for Jaundice
                        int epCountJaundice = 1;
                        String queryEpCountJaundice = "SELECT MAX(episode_number) FROM sa_jaundice WHERE uhid='" + uhid + "'";
                        List<Integer> epCountListJaundice = inicuDao.getListFromNativeQuery(queryEpCountJaundice);
                        if (!BasicUtils.isEmpty(epCountListJaundice)) {
                            epCountJaundice = epCountListJaundice.get(0).intValue();
                        }

                        List<SaJaundice> jaundiceList = new ArrayList<SaJaundice>();
                        jaundiceList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getJaundiceList(uhid, epCountJaundice));

                        List<BabyPrescription> prescriptionList = sysJaundObj.getPrescriptionList();
                        String continuedMedication = "";
                        if (!BasicUtils.isEmpty(prescriptionList)) {
                            for (int i = 0; i < prescriptionList.size(); i++) {
                                BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
                                if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
                                        && babyPrescription.getContinueReason() != null
                                        && babyPrescription.getIsactive()) {
                                    continuedMedication += babyPrescription.getMedicinename() + " ";

                                    if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
                                        continuedMedication += babyPrescription.getDose() + "("
                                                + babyPrescription.getDose_unit() + "/"
                                                + babyPrescription.getDose_unit_time() + ") ";

                                    }

                                    continuedMedication += "prescribed on "
                                            + getDateFromTimestamp(babyPrescription.getStartdate())
                                            + " and continued due to " + babyPrescription.getContinueReason() + ". ";
                                }
                            }
                            this.savePrescriptionList(null, prescriptionList, "Jaundice", null,
                                    jaundice.getAssessmentTime());
                        }

                        //String medicationNotes = getMedicationOfJaundice(jaundiceList, true);
                        String medicationNotes = generateInactiveNotesJaundice(null, uhid, continuedMedication);
                        progressNotes += medicationNotes;

                }

                if (!BasicUtils.isEmpty(progressNotes)) {
                    generalResponseObject=BasicUtils.getResonseObject(true,200,"Success", progressNotes);
                } else {
                    generalResponseObject=BasicUtils.getResonseObject(true,204,"No Content",null);
                }

            } else {
                generalResponseObject=BasicUtils.getResonseObject(true,400,"Bad Request",null);
            }

        } catch (Exception e){
            generalResponseObject=BasicUtils.getResonseObject(false, 500 ,"Internal Server Error", null);
            System.out.printf("Exception: "+e);
            logger.error("Internal Server Error while executing generateRespSupportNote() ", e);
        }
        return generalResponseObject;
    }

    public GeneralResponseObject generateRenalInactiveNote(RenalFailureJSON renalFailureJSON) {
        GeneralResponseObject generalResponseObject = new GeneralResponseObject();
        try {
            if (!BasicUtils.isEmpty(renalFailureJSON.getRenalFailure())) {
                String uhid = renalFailureJSON.getRenalFailure().getUhid();
                String progressNotes = "";
                if (!BasicUtils.isEmpty(uhid)) {
                    SaRenalfailure renal = renalFailureJSON.getRenalFailure();

                    List<BabyPrescription> prescriptionList = renalFailureJSON.getPrescriptionList();
                    String continuedMedication = "";
                    if (!BasicUtils.isEmpty(prescriptionList)) {
                        for (int i = 0; i < prescriptionList.size(); i++) {
                            BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
                            if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
                                    && babyPrescription.getContinueReason() != null
                                    && babyPrescription.getIsactive()) {
                                continuedMedication += babyPrescription.getMedicinename() + " ";

                                if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
                                    continuedMedication += babyPrescription.getDose() + "("
                                            + babyPrescription.getDose_unit() + "/"
                                            + babyPrescription.getDose_unit_time() + ") ";

                                }

                                continuedMedication += "prescribed on "
                                        + getDateFromTimestamp(babyPrescription.getStartdate())
                                        + " and continued due to " + babyPrescription.getContinueReason() + ". ";
                            }
                        }
                        this.savePrescriptionList(null, prescriptionList, "Renal", null,
                                renal.getAssessmentTime());
                    }

                    String medicationNotes = generateInactiveNotesRenal(null, uhid, continuedMedication);
                    progressNotes = medicationNotes;
                }

                if (!BasicUtils.isEmpty(progressNotes)) {
                    generalResponseObject=BasicUtils.getResonseObject(true,200,"Success", progressNotes);
                } else {
                    generalResponseObject=BasicUtils.getResonseObject(true,204,"No Content",null);
                }

            } else {
                generalResponseObject=BasicUtils.getResonseObject(true,400,"Bad Request",null);
            }

        } catch (Exception e){
            generalResponseObject=BasicUtils.getResonseObject(false, 500 ,"Internal Server Error", null);
            System.out.printf("Exception: "+e);
            logger.error("Internal Server Error while executing generateRespSupportNote() ", e);
        }
        return generalResponseObject;
    }

    public GeneralResponseObject generateFeedIntoleranceInactiveNote(FeedIntorelanceJSON feedIntorelanceJSON) {
        GeneralResponseObject generalResponseObject = new GeneralResponseObject();
        try {
            if (!BasicUtils.isEmpty(feedIntorelanceJSON.getFeedIntolerance())) {
                String uhid = feedIntorelanceJSON.getFeedIntolerance().getUhid();
                String progressNotes = "";
                if (!BasicUtils.isEmpty(uhid)) {
                    SaFeedIntolerance feedIntolerance = feedIntorelanceJSON.getFeedIntolerance();

                    List<BabyPrescription> prescriptionList = feedIntorelanceJSON.getPrescriptionList();
                    String continuedMedication = "";
                    if (!BasicUtils.isEmpty(prescriptionList)) {
                        for (int i = 0; i < prescriptionList.size(); i++) {
                            BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
                            if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
                                    && babyPrescription.getContinueReason() != null
                                    && babyPrescription.getIsactive()) {
                                continuedMedication += babyPrescription.getMedicinename() + " ";

                                if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
                                    continuedMedication += babyPrescription.getDose() + "("
                                            + babyPrescription.getDose_unit() + "/"
                                            + babyPrescription.getDose_unit_time() + ") ";

                                }

                                continuedMedication += "prescribed on "
                                        + getDateFromTimestamp(babyPrescription.getStartdate())
                                        + " and continued due to " + babyPrescription.getContinueReason() + ". ";
                            }
                        }
                        this.savePrescriptionList(null, prescriptionList, "FeedIntolerance", null,
                                feedIntolerance.getAssessmentTime());
                    }

                    progressNotes = generateInactiveNotesFeedIntolerance(null, uhid, continuedMedication);;
                }

                if (!BasicUtils.isEmpty(progressNotes)) {
                    generalResponseObject=BasicUtils.getResonseObject(true,200,"Success", progressNotes);
                } else {
                    generalResponseObject=BasicUtils.getResonseObject(true,204,"No Content",null);
                }

            } else {
                generalResponseObject=BasicUtils.getResonseObject(true,400,"Bad Request",null);
            }

        } catch (Exception e){
            generalResponseObject=BasicUtils.getResonseObject(false, 500 ,"Internal Server Error", null);
            System.out.printf("Exception: "+e);
            logger.error("Internal Server Error while executing generateRespSupportNote() ", e);
        }
        return generalResponseObject;
    }


    public GeneralResponseObject generateMiscellaneousInactiveNote(SaMiscellaneousJSON saMiscellaneousJSON, String assesment) {
        GeneralResponseObject generalResponseObject = new GeneralResponseObject();
        try {
            if (!BasicUtils.isEmpty(saMiscellaneousJSON) && !BasicUtils.isEmpty(assesment)) {
                String progressNotes = "";
                if ("misc".equalsIgnoreCase(assesment)) {
                    String uhid = saMiscellaneousJSON.getMiscellaneous().getUhid();
                    SaMiscellaneous saMiscellaneous = saMiscellaneousJSON.getMiscellaneous();

                    List<BabyPrescription> prescriptionList = saMiscellaneousJSON.getPrescriptionList();
                    String continuedMedication = "";
                    if (!BasicUtils.isEmpty(prescriptionList)) {
                        for (int i = 0; i < prescriptionList.size(); i++) {
                            BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
                            if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
                                    && babyPrescription.getContinueReason() != null
                                    && babyPrescription.getIsactive()) {
                                continuedMedication += babyPrescription.getMedicinename() + " ";

                                if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
                                    continuedMedication += babyPrescription.getDose() + "("
                                            + babyPrescription.getDose_unit() + "/"
                                            + babyPrescription.getDose_unit_time() + ") ";

                                }

                                continuedMedication += "prescribed on "
                                        + getDateFromTimestamp(babyPrescription.getStartdate())
                                        + " and continued due to " + babyPrescription.getContinueReason() + ". ";
                            }
                        }
                        this.savePrescriptionList(null, prescriptionList, "Miscellaneous", null,
                                saMiscellaneous.getAssessmentTime());

                        /*if (!BasicUtils.isEmpty(sysMiscellaneousObj.getPrescriptionList())) {
                            this.savePrescriptionList(null, sysMiscellaneousObj.getPrescriptionList(), "Miscellaneous",
                                    miscellaneous.getSa_miscellaneous_id(), miscellaneous.getAssessmentTime());
                        }*/
                    }

                    List<SaMiscellaneous> miscellaneousList = new ArrayList<SaMiscellaneous>();
                    miscellaneousList = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getMiscellaneousList(uhid));

                    // Medication of Miscellaneous Data Fetching Function
                    String medicationNotes = getMedicationOfMiscellaneous(miscellaneousList);
                    progressNotes = medicationNotes + continuedMedication + " ";

                    if(!BasicUtils.isEmpty(saMiscellaneous.getDisease()) && saMiscellaneous.getDisease().equalsIgnoreCase("Others")){
                        progressNotes += saMiscellaneous.getOtherDisease() + " has resolved.";
                    }else{
                        progressNotes += saMiscellaneous.getDisease() + " has resolved.";
                    }

                } else if ("misc2".equalsIgnoreCase(assesment)) {
                    String uhid = saMiscellaneousJSON.getMiscellaneous2().getUhid();
                    SaMiscellaneous2 saMiscellaneous2 = saMiscellaneousJSON.getMiscellaneous2();

                    List<BabyPrescription> prescriptionList = saMiscellaneousJSON.getPrescriptionList();
                    String continuedMedication = "";
                    if (!BasicUtils.isEmpty(prescriptionList)) {
                        for (int i = 0; i < prescriptionList.size(); i++) {
                            BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
                            if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
                                    && babyPrescription.getContinueReason() != null
                                    && babyPrescription.getIsactive()) {
                                continuedMedication += babyPrescription.getMedicinename() + " ";

                                if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
                                    continuedMedication += babyPrescription.getDose() + "("
                                            + babyPrescription.getDose_unit() + "/"
                                            + babyPrescription.getDose_unit_time() + ") ";

                                }

                                continuedMedication += "prescribed on "
                                        + getDateFromTimestamp(babyPrescription.getStartdate())
                                        + " and continued due to " + babyPrescription.getContinueReason() + ". ";
                            }
                        }
                        this.savePrescriptionList(null, prescriptionList, "Miscellaneous2", null,
                                saMiscellaneous2.getAssessmentTime());

                        /*if (!BasicUtils.isEmpty(sysMiscellaneousObj.getPrescriptionList())) {
                            this.savePrescriptionList(null, sysMiscellaneousObj.getPrescriptionList(), "Miscellaneous",
                                    miscellaneous.getSa_miscellaneous_id(), miscellaneous.getAssessmentTime());
                        }*/
                    }

                    List<SaMiscellaneous2> miscellaneous2List = new ArrayList<SaMiscellaneous2>();
                    miscellaneous2List = inicuDao.getListFromMappedObjQuery(HqlSqlQueryConstants.getMiscellaneous2List(uhid));

                    // Medication of Miscellaneous Data Fetching Function
                    String medicationNotes = getMedicationOfMiscellaneous2(miscellaneous2List);

                    progressNotes = medicationNotes + continuedMedication + " ";

                    if(!BasicUtils.isEmpty(saMiscellaneous2.getDisease()) && saMiscellaneous2.getDisease().equalsIgnoreCase("Others")){
                        progressNotes += saMiscellaneous2.getOtherDisease() + " has resolved.";
                    }else{
                        progressNotes += saMiscellaneous2.getDisease() + " has resolved.";
                    }
                }

                if (!BasicUtils.isEmpty(progressNotes)) {
                    generalResponseObject=BasicUtils.getResonseObject(true,200,"Success", progressNotes);
                } else {
                    generalResponseObject=BasicUtils.getResonseObject(true,204,"No Content",null);
                }

            } else {
                generalResponseObject=BasicUtils.getResonseObject(true,400,"Bad Request",null);
            }

        } catch (Exception e){
            generalResponseObject=BasicUtils.getResonseObject(false, 500 ,"Internal Server Error", null);
            System.out.printf("Exception: "+e);
            logger.error("Internal Server Error while executing generateRespSupportNote() ", e);
        }
        return generalResponseObject;
    }

    public GeneralResponseObject generateShockInactiveNote(SysShockJSON shockJSON, String fromWhere) {
        GeneralResponseObject generalResponseObject = new GeneralResponseObject();
        try {
            if (!BasicUtils.isEmpty(shockJSON.getShock())) {
                String uhid = shockJSON.getShock().getUhid();
                String progressNotes = "";
                //if (!BasicUtils.isEmpty(uhid) && !BasicUtils.isEmpty(assesment)) {
                    String loggedUser = shockJSON.getUserId();
                    //if ("RDS".equalsIgnoreCase(assesment)) {

                        SaShock shock = shockJSON.getShock();
                        if ("respSupport".equalsIgnoreCase(fromWhere)) {

                                RespSupport respSupport = shockJSON.getRespSupport();
                                respSupport.setUhid(uhid);
                                respSupport.setEventname("Shock");
                                int randomNumber = new Random().nextInt((999999999 - 100000) + 1) + 100000;
                                respSupport.setEventid(String.valueOf(randomNumber));
                                respSupport.setCreationtime(shock.getAssessmentTime());
                                respSupport.setModificationtime(shock.getAssessmentTime());
                                respSupport.setIsactive(false);
                                respSupport.setRsVentType(null);
                                respSupport.setEventidUpdated(false);
                                respSupport = (RespSupport) inicuDao.saveObject(respSupport);

                                NurseExecutionOrders order = new NurseExecutionOrders();
                                order.setEventname("Respiratory Support");
                                order.setIsExecution(false);
                                order.setOrderText("Baby is removed from Respiratory Support");
                                order.setAssessmentdate(shock.getAssessmentTime());
                                order.setUhid(uhid);
                                order.setLoggeduser(loggedUser);
                                inicuDao.saveObject(order);

                                // Respiratory Support Detail Fetching Function
                                String respiratorySupportNotes = generateInactiveNotesShock(null, uhid, ""
                                        , respSupport.getEventid());
                                progressNotes += respiratorySupportNotes +  " Baby has recovered from shock.";

                        } else if ("medication".equalsIgnoreCase(fromWhere)) {

                            List<BabyPrescription> prescriptionList = shockJSON.getPrescriptionList();
                            String continuedMedication = "";
                            if (!BasicUtils.isEmpty(prescriptionList)) {
                                for (int i = 0; i < prescriptionList.size(); i++) {
                                    BabyPrescription babyPrescription = (BabyPrescription) prescriptionList.get(i);
                                    if (babyPrescription.getIsContinue() != null && babyPrescription.getIsContinue()
                                            && babyPrescription.getContinueReason() != null
                                            && babyPrescription.getIsactive()) {
                                        continuedMedication += babyPrescription.getMedicinename() + " ";
                                        if (!BasicUtils.isEmpty(babyPrescription.getDose())) {
                                            continuedMedication += babyPrescription.getDose() + "("
                                                    + babyPrescription.getDose_unit() + "/"
                                                    + babyPrescription.getDose_unit_time() + ") ";
                                        }
                                        continuedMedication += "prescribed on "
                                                + getDateFromTimestamp(babyPrescription.getStartdate())
                                                + " and continued due to " + babyPrescription.getContinueReason() + ". ";
                                    }
                                }
                                this.savePrescriptionList(null, prescriptionList, "Shock", null,
                                        shock.getAssessmentTime());
                            }

                            String medicationNotes = generateInactiveNotesShock(null, uhid, continuedMedication, "");
                            progressNotes += medicationNotes +  " Baby has recovered from shock.";
                        }

                    //}

                    if (!BasicUtils.isEmpty(progressNotes)) {
                        generalResponseObject=BasicUtils.getResonseObject(true,200,"Success", progressNotes);
                    } else {
                        generalResponseObject=BasicUtils.getResonseObject(true,204,"No Content",null);
                    }

            } else {
                generalResponseObject=BasicUtils.getResonseObject(true,400,"Bad Request",null);
            }

        } catch (Exception e){
            generalResponseObject=BasicUtils.getResonseObject(false, 500 ,"Internal Server Error", null);
            System.out.printf("Exception: "+e);
            logger.error("Internal Server Error while executing generateRespSupportNote() ", e);
        }
        return generalResponseObject;
    }


}
