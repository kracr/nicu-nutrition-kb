{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red42\green0\blue255;}
{\*\expandedcolortbl;;\csgenericrgb\c16471\c0\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 //Shock\
\
CREATE SEQUENCE apollo.sashock_seq\
  INCREMENT 1\
  MINVALUE 1\
  MAXVALUE 9223372036854775807\
  START 1\
  CACHE 1;\
ALTER TABLE apollo.sashock_seq\
  OWNER TO postgres;\
\
\
CREATE OR REPLACE FUNCTION apollo.sashock_creationtime()\
  RETURNS trigger AS\
$BODY$\
    BEGIN\
        NEW.creationtime := current_timestamp;\
        NEW.modificationtime := current_timestamp;\
        RETURN NEW;\
    END;\
$BODY$\
  LANGUAGE plpgsql VOLATILE\
  COST 100;\
ALTER FUNCTION apollo.sashock_creationtime()\
  OWNER TO postgres;\
\
\
\
CREATE OR REPLACE FUNCTION apollo.sashock_modificationtime()\
  RETURNS trigger AS\
$BODY$\
    BEGIN\
        NEW.modificationtime := current_timestamp;\
        RETURN NEW;\
    END;\
$BODY$\
  LANGUAGE plpgsql VOLATILE\
  COST 100;\
ALTER FUNCTION apollo.sashock_modificationtime()\
  OWNER TO postgres;\
\
\
CREATE TABLE apollo.sa_shock\
(\
  sashockid bigint NOT NULL DEFAULT nextval('apollo.sashock_seq'::regclass),\
  ageatassesment real,\
  isactiondurationinhours character varying(10),\
  ageofonset integer,\
  causeofshock character varying(50),\
  creationtime timestamp with time zone NOT NULL,\
  modificationtime timestamp with time zone NOT NULL,\
  uhid character varying(50) NOT NULL,\
  loggeduser character varying(100) NOT NULL,\
  comment text,\
  isageofonsetinhours boolean,\
  actiontype character varying(50),\
  otheractiontype character varying(100),\
  actionduration integer,\
  isageofassesmentinhours boolean,\
  orderinvestigation character varying(100),\
  shockstatus character varying(20),\
  isinvestigationodered boolean,\
  othercause text,\
  treatmentother character varying(100),\
  planother text,\
  assessment_date date,\
  assessment_meridiem boolean,\
  assessment_time timestamp with time zone,\
  assessment_hour character varying,\
  assessment_min character varying,\
  pulses character varying(20),\
  peripheries character varying(20),\
  heartrate integer,\
  respiratoryrate integer,\
  saturation integer,\
  crt integer,\
  shocksystbp integer,\
  shockdiastbp integer,\
  temperature_diff real,\
  lactate real,\
  urine real,\
  arrhythmia boolean,\
  metabolic boolean,\
  arterial boolean,\
  internal_hemorrhage boolean,\
  external_hemorrhage boolean,\
  asphyxia boolean,\
  venous boolean,\
  myocarditis boolean,\
  chd boolean,\
  sepsis_distributive boolean,\
  episode_number integer,\
  medication_str text,\
  episodeid character varying(50),\
  reason text,\
  echo_findings text,\
  feeding boolean,\
  feeding_continue character varying(20),\
  babyfeedid bigint,\
  anaphylactic_shock boolean,\
  neurologic_injury boolean,\
  fluid_loss boolean,\
  capillary_leak boolean,\
  CONSTRAINT sa_shock_pkey PRIMARY KEY (sashockid)\
)\
WITH (\
  OIDS=FALSE\
);\
ALTER TABLE apollo.sa_shock\
  OWNER TO postgres;\
\
\
CREATE TRIGGER set_creationtime\
  BEFORE INSERT\
  ON apollo.sa_shock\
  FOR EACH ROW\
  EXECUTE PROCEDURE apollo.sashock_creationtime();\
\
CREATE TRIGGER set_modificationtime\
  BEFORE UPDATE\
  ON apollo.sa_shock\
  FOR EACH ROW\
  EXECUTE PROCEDURE apollo.sashock_modificationtime();\
\
CREATE TABLE apollo.ref_causeofshock\
(\
  causeofshockid character varying(10) NOT NULL,\
  causeofshock character varying(50) NOT NULL,\
  description character varying(50) NOT NULL,\
  seq integer,\
  CONSTRAINT ref_causeofshock_pkey PRIMARY KEY (causeofshockid)\
)\
WITH (\
  OIDS=FALSE\
);\
ALTER TABLE apollo.ref_causeofshock\
  OWNER TO postgres;\
\
\
INSERT INTO apollo.ref_causeofshock(causeofshockid,causeofshock,description,seq) VALUES ('SHO0001','Hypovolemia','Hypovolemia',1);\
INSERT INTO apollo.ref_causeofshock(causeofshockid,causeofshock,description,seq) VALUES ('SHO0002','Asphyxia','Asphyxia',2);\
INSERT INTO apollo.ref_causeofshock(causeofshockid,causeofshock,description,seq) VALUES ('SHO0003','Cardiogenic','Cardiogenic',3);\
INSERT INTO apollo.ref_causeofshock(causeofshockid,causeofshock,description,seq) VALUES ('SHO0004','Sepsis','Sepsis',4);\
INSERT INTO apollo.ref_causeofshock(causeofshockid,causeofshock,description,seq) VALUES ('SHO0005','Hypocarbia','Hypocarbia',5);\
INSERT INTO apollo.ref_causeofshock(causeofshockid,causeofshock,description,seq) VALUES ('SHO0006','Obstruction of Venous return','Obstruction of Venous return',6);\
INSERT INTO apollo.ref_causeofshock(causeofshockid,causeofshock,description,seq) VALUES ('SHO0007','Others','Others',7);\
\
\
INSERT INTO apollo.ref_assesment_treatment(assesmenttreatmentid,category,treatment,description) VALUES ('TRE108','Shock','Respiratory Support','Respiratory Support');\
INSERT INTO apollo.ref_assesment_treatment(assesmenttreatmentid,category,treatment,description) VALUES ('TRE109','Shock','Feeding','Feeding');\
INSERT INTO apollo.ref_assesment_treatment(assesmenttreatmentid,category,treatment,description) VALUES ('TRE110','Shock','Medications','Medications');\
INSERT INTO apollo.ref_assesment_treatment(assesmenttreatmentid,category,treatment,description) VALUES ('TRE111','Shock','Others','Others');\
\
ALTER TABLE apollo.sa_shock ADD COLUMN consciousness character varying(20);\
ALTER TABLE apollo.sa_shock ADD COLUMN etco2 character varying(20);\
ALTER TABLE apollo.sa_shock ADD COLUMN cvp character varying(20);\
\
\
\
-- View: apollo.vw_doctornotes_list_raw\
\
-- DROP VIEW apollo.vw_doctornotes_list_raw;\
\
CREATE OR REPLACE VIEW apollo.vw_doctornotes_list_raw AS \
 SELECT j.sajaundiceid AS assesmentid,\
    j.uhid,\
    j.assessment_time AS creationtime,\
    j.modificationtime,\
    'Jaundice'::text AS sa_event,\
    j.actiontype AS treatment,\
    ((('Plan is to reasses after'::text || ' '::text) || j.actionduration) || ' '::text) || j.isactiondurationinhours::text AS plan,\
    i.testname,\
    j.comment AS progressnotes\
   FROM apollo.sa_jaundice j\
     LEFT JOIN apollo.investigation_ordered i ON i.assesmentid::text = j.sajaundiceid::text AND lower(i.assesment_type::text) = 'jaundice'::text\
UNION\
 SELECT j.resprdsid AS assesmentid,\
    j.uhid,\
    j.assessment_time AS creationtime,\
    j.modificationtime,\
    'RDS'::text AS sa_event,\
    j.treatmentaction AS treatment,\
    ((('Plan is to reasses after'::text || ' '::text) || j.reassestime::text) || ' '::text) || j.reasseshoursdays::text AS plan,\
    i.testname,\
    j.progressnotes\
   FROM apollo.sa_resp_rds j\
     LEFT JOIN apollo.investigation_ordered i ON i.assesmentid::text = j.resprdsid::text AND lower(i.assesment_type::text) = 'respiratory'::text\
UNION\
 SELECT j.resppphnid AS assesmentid,\
    j.uhid,\
    j.assessment_time AS creationtime,\
    j.modificationtime,\
    'PPHN'::text AS sa_event,\
    j.treatmentaction AS treatment,\
    ((('Plan is to reasses after'::text || ' '::text) || j.reassestime::text) || ' '::text) || j.reassestime_type::text AS plan,\
    i.testname,\
    j.progressnotes\
   FROM apollo.sa_resp_pphn j\
     LEFT JOIN apollo.investigation_ordered i ON i.assesmentid::text = j.resppphnid::text AND lower(i.assesment_type::text) = 'pphn'::text\
UNION\
 SELECT j.resppneumothoraxid AS assesmentid,\
    j.uhid,\
    j.assessment_time AS creationtime,\
    j.modificationtime,\
    'Pneumothorax'::text AS sa_event,\
    j.treatmentaction AS treatment,\
    ((('Plan is to reasses after'::text || ' '::text) || j.reassestime::text) || ' '::text) || j.reassestime_type::text AS plan,\
    i.testname,\
    j.progressnotes\
   FROM apollo.sa_resp_pneumothorax j\
     LEFT JOIN apollo.investigation_ordered i ON i.assesmentid::text = j.resppneumothoraxid::text AND lower(i.assesment_type::text) = 'pneumothorax'::text\
UNION\
 SELECT j.apneaid AS assesmentid,\
    j.uhid,\
    j.assessment_time AS creationtime,\
    j.modificationtime,\
    'Apnea'::text AS sa_event,\
    j.actiontype AS treatment,\
    ((('Plan is to reasses after'::text || ' '::text) || j.action_plan_time::text) || ' '::text) || j.action_plan_timetype::text AS plan,\
    i.testname,\
    j.apnea_comment AS progressnotes\
   FROM apollo.sa_resp_apnea j\
     LEFT JOIN apollo.investigation_ordered i ON i.assesmentid::text = j.apneaid::text AND lower(i.assesment_type::text) = 'apnea'::text\
UNION\
 SELECT j.sacnsasphyxiaid AS assesmentid,\
    j.uhid,\
    j.assessment_time AS creationtime,\
    j.modificationtime,\
    'Asphyxia'::text AS sa_event,\
    j.treatmentaction AS treatment,\
    ((('Plan is to reasses after'::text || ' '::text) || j.reassestime::text) || ' '::text) || j.reassestime_type::text AS plan,\
    i.testname,\
    j.progressnotes\
   FROM apollo.sa_cns_asphyxia j\
     LEFT JOIN apollo.investigation_ordered i ON i.assesmentid::text = j.sacnsasphyxiaid::text AND lower(i.assesment_type::text) = 'asphyxia'::text\
UNION\
 SELECT j.sacnsseizuresid AS assesmentid,\
    j.uhid,\
    j.assessment_time AS creationtime,\
    j.modificationtime,\
    'Seizures'::text AS sa_event,\
    j.treatmentaction AS treatment,\
    ((('Plan is to reasses after'::text || ' '::text) || j.reassestime::text) || ' '::text) || j.reassestime_type::text AS plan,\
    i.testname,\
    j.progressnotes\
   FROM apollo.sa_cns_seizures j\
     LEFT JOIN apollo.investigation_ordered i ON i.assesmentid::text = j.sacnsseizuresid::text AND lower(i.assesment_type::text) = 'seizures'::text\
UNION\
 SELECT j.sacnsivhid AS assesmentid,\
    j.uhid,\
    j.creationtime,\
    j.modificationtime,\
    'IVH'::text AS sa_event,\
    j.treatmentaction AS treatment,\
    ((('Plan is to reasses after'::text || ' '::text) || j.reassestime::text) || ' '::text) || j.reassestime_type::text AS plan,\
    i.testname,\
    j.progressnotes\
   FROM apollo.sa_cns_ivh j\
     LEFT JOIN apollo.investigation_ordered i ON i.assesmentid::text = j.sacnsivhid::text AND lower(i.assesment_type::text) = 'ivh'::text\
UNION\
 SELECT j.sasepsisid AS assesmentid,\
    j.uhid,\
    j.assessment_time AS creationtime,\
    j.modificationtime,\
    'Sepsis'::text AS sa_event,\
    j.treatmentaction AS treatment,\
    ((('Plan is to reasses after'::text || ' '::text) || j.reassestime::text) || ' '::text) || j.reassestime_type::text AS plan,\
    i.testname,\
    j.progressnotes\
   FROM apollo.sa_infection_sepsis j\
     LEFT JOIN apollo.investigation_ordered i ON i.assesmentid::text = j.sasepsisid::text AND lower(i.assesment_type::text) = 'sepsis'::text\
UNION\
 SELECT sn.id AS assesmentid,\
    sn.uhid,\
    sn.entrytime AS creationtime,\
    sn.modificationtime,\
    'Stable Notes'::text AS sa_event,\
    'NA'::text AS treatment,\
    'NA'::text AS plan,\
    'NA'::text AS testname,\
    sn.provisionaltemplate AS progressnotes\
   FROM apollo.stable_notes sn\
UNION\
 SELECT j.sa_miscellaneous_id AS assesmentid,\
    j.uhid,\
    j.assessment_time AS creationtime,\
    j.modificationtime,\
    'Misc'::text AS sa_event,\
    j.treatment,\
    ((('Plan is to reasses after'::text || ' '::text) || j.actionduration::text) || ' '::text) || j.isactiondurationinhours::text AS plan,\
    i.testname,\
    j.comment AS progressnotes\
   FROM apollo.sa_miscellaneous j\
     LEFT JOIN apollo.investigation_ordered i ON i.assesmentid::text = j.sa_miscellaneous_id::text AND lower(i.assesment_type::text) = 'miscellaneous'::text\
UNION\
 SELECT j.renalid AS assesmentid,\
    j.uhid,\
    j.assessment_time AS creationtime,\
    j.modificationtime,\
    'Renal'::text AS sa_event,\
    j.action_type AS treatment,\
    ((('Plan is to reasses after'::text || ' '::text) || j.actionduration::text) || ' '::text) || j.isactiondurationinhours::text AS plan,\
    i.testname,\
    j.comment AS progressnotes\
   FROM apollo.sa_renalfailure j\
     LEFT JOIN apollo.investigation_ordered i ON i.assesmentid::text = j.renalid::text AND lower(i.assesment_type::text) = 'renal'::text\
UNION\
 SELECT j.feedintoleranceid AS assesmentid,\
    j.uhid,\
    j.assessment_time AS creationtime,\
    j.modificationtime,\
    'Feed Intolerance'::text AS sa_event,\
    j.action_type AS treatment,\
    ' '::text AS plan,\
    i.testname,\
    j.comment AS progressnotes\
   FROM apollo.sa_feed_intolerance j\
     LEFT JOIN apollo.investigation_ordered i ON i.assesmentid::text = j.feedintoleranceid::text AND lower(i.assesment_type::text) = 'feedintolerance'::text\
UNION\
 SELECT j.sashockid AS assesmentid,\
    j.uhid,\
    j.assessment_time AS creationtime,\
    j.modificationtime,\
    'Shock'::text AS sa_event,\
    j.actiontype AS treatment,\
    ' '::text AS plan,\
    i.testname,\
    j.comment AS progressnotes \
   FROM apollo.sa_shock j\
     LEFT JOIN apollo.investigation_ordered i ON i.assesmentid::text = j.sashockid::text AND lower(i.assesment_type::text) = 'Shock'::text\
UNION\
 SELECT j.painid AS assesmentid,\
    j.uhid,\
    j.assessment_time AS creationtime,\
    j.modificationtime,\
    'Pain'::text AS sa_event,\
    j.action_string AS treatment,\
    ' '::text AS plan,\
    i.testname,\
    j.comment AS progressnotes\
   FROM apollo.sa_pain j\
     LEFT JOIN apollo.investigation_ordered i ON i.assesmentid::text = j.painid::text AND lower(i.assesment_type::text) = 'Pain'::text\
UNION\
 SELECT j.sanec_id AS assesmentid,\
    j.uhid,\
    j.assessment_time AS creationtime,\
    j.modificationtime,\
    'NEC'::text AS sa_event,\
    j.treatmentaction AS treatment,\
    ' '::text AS plan,\
    i.testname,\
    j.progressnotes\
   FROM apollo.sa_infection_nec j\
     LEFT JOIN apollo.investigation_ordered i ON i.assesmentid::text = j.sanec_id::text AND lower(i.assesment_type::text) = 'NEC'::text;\
\
ALTER TABLE apollo.vw_doctornotes_list_raw\
  OWNER TO postgres;\
\
\
\pard\pardeftab720\partightenfactor0

\f1\fs22 \cf2 ALTER TABLE apollo.systemic_exam ADD COLUMN shock boolean;\
ALTER TABLE apollo.systemic_examination_notes ADD COLUMN progressnotes_cvs_shock text;\
\
\
\
\
\
CREATE OR REPLACE VIEW apollo.vw_sa_assesment_count_raw AS \
 SELECT j.uhid,\
    count(j.uhid) AS eventcount,\
    'jaundice'::text AS sa_event,\
    j.creationtime::date AS creationtime,\
    j.episodeid\
   FROM apollo.sa_jaundice j\
  WHERE (j.uhid::text IN ( SELECT baby_detail.uhid\
           FROM apollo.baby_detail\
          WHERE baby_detail.admissionstatus = true))\
  GROUP BY j.uhid, (j.creationtime::date), j.episodeid\
UNION ALL\
 SELECT r.uhid,\
    count(r.uhid) AS eventcount,\
    'rds'::text AS sa_event,\
    r.creationtime::date AS creationtime,\
    r.episodeid\
   FROM apollo.sa_resp_rds r\
  WHERE (r.uhid::text IN ( SELECT baby_detail.uhid\
           FROM apollo.baby_detail\
          WHERE baby_detail.admissionstatus = true))\
  GROUP BY r.uhid, (r.creationtime::date), r.episodeid\
UNION ALL\
 SELECT r.uhid,\
    count(r.uhid) AS eventcount,\
    'sepsis'::text AS sa_event,\
    r.creationtime::date AS creationtime,\
    r.episodeid\
   FROM apollo.sa_infection_sepsis r\
  WHERE (r.uhid::text IN ( SELECT baby_detail.uhid\
           FROM apollo.baby_detail\
          WHERE baby_detail.admissionstatus = true))\
  GROUP BY r.uhid, (r.creationtime::date), r.episodeid\
UNION ALL\
 SELECT a.uhid,\
    count(a.uhid) AS eventcount,\
    'apnea'::text AS sa_event,\
    a.creationtime::date AS creationtime,\
    a.episodeid\
   FROM apollo.sa_resp_apnea a\
  WHERE (a.uhid::text IN ( SELECT baby_detail.uhid\
           FROM apollo.baby_detail\
          WHERE baby_detail.admissionstatus = true))\
  GROUP BY a.uhid, (a.creationtime::date), a.episodeid\
UNION ALL\
 SELECT p.uhid,\
    count(p.uhid) AS eventcount,\
    'pphn'::text AS sa_event,\
    p.creationtime::date AS creationtime,\
    p.episodeid\
   FROM apollo.sa_resp_pphn p\
  WHERE (p.uhid::text IN ( SELECT baby_detail.uhid\
           FROM apollo.baby_detail\
          WHERE baby_detail.admissionstatus = true))\
  GROUP BY p.uhid, (p.creationtime::date), p.episodeid\
UNION ALL\
 SELECT n.uhid,\
    count(n.uhid) AS eventcount,\
    'pneumothorax'::text AS sa_event,\
    n.creationtime::date AS creationtime,\
    n.episodeid\
   FROM apollo.sa_resp_pneumothorax n\
  WHERE (n.uhid::text IN ( SELECT baby_detail.uhid\
           FROM apollo.baby_detail\
          WHERE baby_detail.admissionstatus = true))\
  GROUP BY n.uhid, (n.creationtime::date), n.episodeid\
UNION ALL\
 SELECT go.uhid,\
    count(go.uhid) AS eventcount,\
    'hypoglycemia'::text AS sa_event,\
    go.creationtime::date AS creationtime,\
    go.episodeid\
   FROM apollo.sa_hypoglycemia go\
  WHERE (go.uhid::text IN ( SELECT baby_detail.uhid\
           FROM apollo.baby_detail\
          WHERE baby_detail.admissionstatus = true))\
  GROUP BY go.uhid, (go.creationtime::date), go.episodeid\
UNION ALL\
 SELECT gy.uhid,\
    count(gy.uhid) AS eventcount,\
    'hyperglycemia'::text AS sa_event,\
    gy.creationtime::date AS creationtime,\
    '0'::character varying AS episodeid\
   FROM apollo.sa_hyperglycemia gy\
  WHERE (gy.uhid::text IN ( SELECT baby_detail.uhid\
           FROM apollo.baby_detail\
          WHERE baby_detail.admissionstatus = true))\
  GROUP BY gy.uhid, (gy.creationtime::date)\
UNION ALL\
 SELECT co.uhid,\
    count(co.uhid) AS eventcount,\
    'hypocalcemia'::text AS sa_event,\
    co.creationtime::date AS creationtime,\
    '0'::character varying AS episodeid\
   FROM apollo.sa_hypocalcemia co\
  WHERE (co.uhid::text IN ( SELECT baby_detail.uhid\
           FROM apollo.baby_detail\
          WHERE baby_detail.admissionstatus = true))\
  GROUP BY co.uhid, (co.creationtime::date)\
UNION ALL\
 SELECT cr.uhid,\
    count(cr.uhid) AS eventcount,\
    'hypercalcemia'::text AS sa_event,\
    cr.creationtime::date AS creationtime,\
    '0'::character varying AS episodeid\
   FROM apollo.sa_hypercalcemia cr\
  WHERE (cr.uhid::text IN ( SELECT baby_detail.uhid\
           FROM apollo.baby_detail\
          WHERE baby_detail.admissionstatus = true))\
  GROUP BY cr.uhid, (cr.creationtime::date)\
UNION ALL\
 SELECT ko.uhid,\
    count(ko.uhid) AS eventcount,\
    'hypokalemia'::text AS sa_event,\
    ko.creationtime::date AS creationtime,\
    '0'::character varying AS episodeid\
   FROM apollo.sa_hyperkalemia ko\
  WHERE (ko.uhid::text IN ( SELECT baby_detail.uhid\
           FROM apollo.baby_detail\
          WHERE baby_detail.admissionstatus = true))\
  GROUP BY ko.uhid, (ko.creationtime::date)\
UNION ALL\
 SELECT kr.uhid,\
    count(kr.uhid) AS eventcount,\
    'hyperkalemia'::text AS sa_event,\
    kr.creationtime::date AS creationtime,\
    '0'::character varying AS episodeid\
   FROM apollo.sa_hyperkalemia kr\
  WHERE (kr.uhid::text IN ( SELECT baby_detail.uhid\
           FROM apollo.baby_detail\
          WHERE baby_detail.admissionstatus = true))\
  GROUP BY kr.uhid, (kr.creationtime::date)\
UNION ALL\
 SELECT no.uhid,\
    count(no.uhid) AS eventcount,\
    'hyponatremia'::text AS sa_event,\
    no.creationtime::date AS creationtime,\
    '0'::character varying AS episodeid\
   FROM apollo.sa_hyponatremia no\
  WHERE (no.uhid::text IN ( SELECT baby_detail.uhid\
           FROM apollo.baby_detail\
          WHERE baby_detail.admissionstatus = true))\
  GROUP BY no.uhid, (no.creationtime::date)\
UNION ALL\
 SELECT nr.uhid,\
    count(nr.uhid) AS eventcount,\
    'hypernatremia'::text AS sa_event,\
    nr.creationtime::date AS creationtime,\
    '0'::character varying AS episodeid\
   FROM apollo.sa_hypernatremia nr\
  WHERE (nr.uhid::text IN ( SELECT baby_detail.uhid\
           FROM apollo.baby_detail\
          WHERE baby_detail.admissionstatus = true))\
  GROUP BY nr.uhid, (nr.creationtime::date)\
UNION ALL\
 SELECT ac.uhid,\
    count(ac.uhid) AS eventcount,\
    'acidosis'::text AS sa_event,\
    ac.creationtime::date AS creationtime,\
    '0'::character varying AS episodeid\
   FROM apollo.sa_acidosis ac\
  WHERE (ac.uhid::text IN ( SELECT baby_detail.uhid\
           FROM apollo.baby_detail\
          WHERE baby_detail.admissionstatus = true))\
  GROUP BY ac.uhid, (ac.creationtime::date)\
UNION ALL\
 SELECT ie.uhid,\
    count(ie.uhid) AS eventcount,\
    'iem'::text AS sa_event,\
    ie.creationtime::date AS creationtime,\
    '0'::character varying AS episodeid\
   FROM apollo.sa_iem ie\
  WHERE (ie.uhid::text IN ( SELECT baby_detail.uhid\
           FROM apollo.baby_detail\
          WHERE baby_detail.admissionstatus = true))\
  GROUP BY ie.uhid, (ie.creationtime::date)\
UNION ALL\
 SELECT asp.uhid,\
    count(asp.uhid) AS eventcount,\
    'asphyxia'::text AS sa_event,\
    asp.creationtime::date AS creationtime,\
    asp.episodeid\
   FROM apollo.sa_cns_asphyxia asp\
  WHERE (asp.uhid::text IN ( SELECT baby_detail.uhid\
           FROM apollo.baby_detail\
          WHERE baby_detail.admissionstatus = true))\
  GROUP BY asp.uhid, (asp.creationtime::date), asp.episodeid\
UNION ALL\
 SELECT sei.uhid,\
    count(sei.uhid) AS eventcount,\
    'seizure'::text AS sa_event,\
    sei.creationtime::date AS creationtime,\
    sei.episodeid\
   FROM apollo.sa_cns_seizures sei\
  WHERE (sei.uhid::text IN ( SELECT baby_detail.uhid\
           FROM apollo.baby_detail\
          WHERE baby_detail.admissionstatus = true))\
  GROUP BY sei.uhid, (sei.creationtime::date), sei.episodeid\
UNION ALL\
 SELECT ivh.uhid,\
    count(ivh.uhid) AS eventcount,\
    'ivh'::text AS sa_event,\
    ivh.creationtime::date AS creationtime,\
    ivh.episodeid\
   FROM apollo.sa_cns_ivh ivh\
  WHERE (ivh.uhid::text IN ( SELECT baby_detail.uhid\
           FROM apollo.baby_detail\
          WHERE baby_detail.admissionstatus = true))\
  GROUP BY ivh.uhid, (ivh.creationtime::date), ivh.episodeid\
UNION ALL\
 SELECT renal.uhid,\
    count(renal.uhid) AS eventcount,\
    'renal'::text AS sa_event,\
    renal.creationtime::date AS creationtime,\
    renal.episodeid\
   FROM apollo.sa_renalfailure renal\
  WHERE (renal.uhid::text IN ( SELECT baby_detail.uhid\
           FROM apollo.baby_detail\
          WHERE baby_detail.admissionstatus = true))\
  GROUP BY renal.uhid, (renal.creationtime::date), renal.episodeid\
UNION ALL\
 SELECT feed.uhid,\
    count(feed.uhid) AS eventcount,\
    'feed'::text AS sa_event,\
    feed.creationtime::date AS creationtime,\
    feed.episodeid\
   FROM apollo.sa_feed_intolerance feed\
  WHERE (feed.uhid::text IN ( SELECT baby_detail.uhid\
           FROM apollo.baby_detail\
          WHERE baby_detail.admissionstatus = true))\
  GROUP BY feed.uhid, (feed.creationtime::date), feed.episodeid\
UNION ALL\
 SELECT nec.uhid,\
    count(nec.uhid) AS eventcount,\
    'nec'::text AS sa_event,\
    nec.creationtime::date AS creationtime,\
    nec.episodeid\
   FROM apollo.sa_infection_nec nec\
  WHERE (nec.uhid::text IN ( SELECT baby_detail.uhid\
           FROM apollo.baby_detail\
          WHERE baby_detail.admissionstatus = true))\
  GROUP BY nec.uhid, (nec.creationtime::date), nec.episodeid\
UNION ALL\
 SELECT shock.uhid,\
    count(shock.uhid) AS eventcount,\
    'shock'::text AS sa_event,\
    shock.creationtime::date AS creationtime,\
    shock.episodeid\
   FROM apollo.sa_shock shock\
  WHERE (shock.uhid::text IN ( SELECT baby_detail.uhid\
           FROM apollo.baby_detail\
          WHERE baby_detail.admissionstatus = true))\
  GROUP BY shock.uhid, (shock.creationtime::date), shock.episodeid;\
\
ALTER TABLE apollo.vw_sa_assesment_count_raw\
  OWNER TO postgres;\
\
\
\
CREATE OR REPLACE VIEW apollo.vw_sa_assesment_count_control AS \
 SELECT s.uhid,\
    s.creationtime,\
    max(\
        CASE s.sa_event\
            WHEN 'jaundice'::text THEN s.eventcount::text\
            ELSE '0'::text\
        END) AS jaundice,\
    max(\
        CASE s.sa_event\
            WHEN 'rds'::text THEN s.eventcount::text\
            ELSE '0'::text\
        END) AS rds,\
    max(\
        CASE s.sa_event\
            WHEN 'apnea'::text THEN s.eventcount::text\
            ELSE '0'::text\
        END) AS apnea,\
    max(\
        CASE s.sa_event\
            WHEN 'pphn'::text THEN s.eventcount::text\
            ELSE '0'::text\
        END) AS pphn,\
    max(\
        CASE s.sa_event\
            WHEN 'pneumothorax'::text THEN s.eventcount::text\
            ELSE '0'::text\
        END) AS pneumothorax,\
    max(\
        CASE s.sa_event\
            WHEN 'hypoglycemia'::text THEN s.eventcount::text\
            ELSE '0'::text\
        END) AS hypoglycemia,\
    max(\
        CASE s.sa_event\
            WHEN 'hyperglycemia'::text THEN s.eventcount::text\
            ELSE '0'::text\
        END) AS hyperglycemia,\
    max(\
        CASE s.sa_event\
            WHEN 'hypocalcemia'::text THEN s.eventcount::text\
            ELSE '0'::text\
        END) AS hypocalcemia,\
    max(\
        CASE s.sa_event\
            WHEN 'hypercalcemia'::text THEN s.eventcount::text\
            ELSE '0'::text\
        END) AS hypercalcemia,\
    max(\
        CASE s.sa_event\
            WHEN 'hypokalemia'::text THEN s.eventcount::text\
            ELSE '0'::text\
        END) AS hypokalemia,\
    max(\
        CASE s.sa_event\
            WHEN 'hyperkalemia'::text THEN s.eventcount::text\
            ELSE '0'::text\
        END) AS hyperkalemia,\
    max(\
        CASE s.sa_event\
            WHEN 'hyponatremia'::text THEN s.eventcount::text\
            ELSE '0'::text\
        END) AS hyponatremia,\
    max(\
        CASE s.sa_event\
            WHEN 'hypernatremia'::text THEN s.eventcount::text\
            ELSE '0'::text\
        END) AS hypernatremia,\
    max(\
        CASE s.sa_event\
            WHEN 'acidosis'::text THEN s.eventcount::text\
            ELSE '0'::text\
        END) AS acidosis,\
    max(\
        CASE s.sa_event\
            WHEN 'iem'::text THEN s.eventcount::text\
            ELSE '0'::text\
        END) AS iem,\
    max(\
        CASE s.sa_event\
            WHEN 'asphyxia'::text THEN s.eventcount::text\
            ELSE '0'::text\
        END) AS asphyxia,\
    max(\
        CASE s.sa_event\
            WHEN 'seizure'::text THEN s.eventcount::text\
            ELSE '0'::text\
        END) AS seizure,\
    max(\
        CASE s.sa_event\
            WHEN 'ivh'::text THEN s.eventcount::text\
            ELSE '0'::text\
        END) AS ivh,\
    max(\
        CASE s.sa_event\
            WHEN 'sepsis'::text THEN s.eventcount::text\
            ELSE '0'::text\
        END) AS sepsis,\
    max(\
        CASE s.sa_event\
            WHEN 'renal'::text THEN s.eventcount::text\
            ELSE '0'::text\
        END) AS renal,\
    max(\
        CASE s.sa_event\
            WHEN 'feed'::text THEN s.eventcount::text\
            ELSE '0'::text\
        END) AS feed,\
    max(\
        CASE s.sa_event\
            WHEN 'nec'::text THEN s.eventcount::text\
            ELSE '0'::text\
        END) AS nec,\
            s.episodeid,\
\
	max(\
	CASE s.sa_event\
	    WHEN 'shock'::text THEN s.eventcount::text\
	    ELSE '0'::text\
	END) AS shock\
    \
   FROM ( SELECT r.uhid,\
            r.sa_event,\
            r.eventcount,\
            r.creationtime,\
            r.episodeid\
           FROM apollo.vw_sa_assesment_count_raw r\
          GROUP BY r.uhid, r.sa_event, r.eventcount, r.creationtime, r.episodeid) s\
  GROUP BY s.uhid, s.creationtime, s.episodeid\
  ORDER BY s.creationtime;\
\
ALTER TABLE apollo.vw_sa_assesment_count_control\
  OWNER TO postgres;\
\
\
CREATE OR REPLACE VIEW apollo.vw_sa_assesment_count_rule AS \
 SELECT DISTINCT r.uhid,\
        CASE\
            WHEN r.jaundice::integer > 0 THEN 'Jaundice'::text\
            ELSE ','::text\
        END AS jaundice,\
        CASE\
            WHEN r.rds::integer > 0 THEN 'Respiratory Distress'::text\
            ELSE ','::text\
        END AS rds,\
        CASE\
            WHEN r.apnea::integer > 0 THEN 'Apnea'::text\
            ELSE ','::text\
        END AS apnea,\
        CASE\
            WHEN r.pphn::integer > 0 THEN 'PPHN'::text\
            ELSE ','::text\
        END AS pphn,\
        CASE\
            WHEN r.pneumothorax::integer > 0 THEN 'Pneumothorax'::text\
            ELSE ','::text\
        END AS pneumothorax,\
        CASE\
            WHEN r.hypoglycemia::integer > 0 THEN 'Hypoglycemia'::text\
            ELSE ','::text\
        END AS hypoglycemia,\
        CASE\
            WHEN r.hyperglycemia::integer > 0 THEN 'Hyperglycemia'::text\
            ELSE ','::text\
        END AS hyperglycemia,\
        CASE\
            WHEN r.hypocalcemia::integer > 0 THEN 'Hypocalcemia'::text\
            ELSE ','::text\
        END AS hypocalcemia,\
        CASE\
            WHEN r.hypercalcemia::integer > 0 THEN 'Hypercalcemia'::text\
            ELSE ','::text\
        END AS hypercalcemia,\
        CASE\
            WHEN r.hypokalemia::integer > 0 THEN 'Hypokalemia'::text\
            ELSE ','::text\
        END AS hypokalemia,\
        CASE\
            WHEN r.hyperkalemia::integer > 0 THEN 'Hyperkalemia'::text\
            ELSE ','::text\
        END AS hyperkalemia,\
        CASE\
            WHEN r.hyponatremia::integer > 0 THEN 'Hyponatremia'::text\
            ELSE ','::text\
        END AS hyponatremia,\
        CASE\
            WHEN r.hypernatremia::integer > 0 THEN 'Hypernatremia'::text\
            ELSE ','::text\
        END AS hypernatremia,\
        CASE\
            WHEN r.acidosis::integer > 0 THEN 'Acidosis'::text\
            ELSE ','::text\
        END AS acidosis,\
        CASE\
            WHEN r.iem::integer > 0 THEN 'IEM'::text\
            ELSE ','::text\
        END AS iem,\
        CASE\
            WHEN r.asphyxia::integer > 0 THEN 'Asphyxia'::text\
            ELSE ','::text\
        END AS asphyxia,\
        CASE\
            WHEN r.seizure::integer > 0 THEN 'Seizure'::text\
            ELSE ','::text\
        END AS seizure,\
        CASE\
            WHEN r.ivh::integer > 0 THEN 'IVH'::text\
            ELSE ','::text\
        END AS ivh,\
        CASE\
            WHEN r.sepsis::integer > 0 THEN 'Sepsis'::text\
            ELSE ','::text\
        END AS sepsis,\
        CASE\
            WHEN r.renal::integer > 0 THEN 'Renal'::text\
            ELSE ','::text\
        END AS renal,\
        CASE\
            WHEN r.feed::integer > 0 THEN 'FeedIntolerance'::text\
            ELSE ','::text\
        END AS feed,\
        CASE\
            WHEN r.nec::integer > 0 THEN 'NEC'::text\
            ELSE ','::text\
        END AS nec,\
    r.episodeid,\
    CASE\
            WHEN r.shock::integer > 0 THEN 'Shock'::text\
            ELSE ','::text\
        END AS shock\
   FROM apollo.vw_sa_assesment_count_control r;\
\
ALTER TABLE apollo.vw_sa_assesment_count_rule\
  OWNER TO postgres;\
\
\
CREATE OR REPLACE VIEW apollo.vw_sa_assesment_count_rule1 AS \
 SELECT DISTINCT r.uhid,\
    btrim(((((((((((((((((((((((((((((((((((((((((((r.shock || ',' ::text) || r.nec || ','::text) || r.jaundice) || ','::text) || r.rds) || ','::text) || r.apnea) || ','::text) || r.pphn) || ','::text) || r.pneumothorax) || ','::text) || r.hypoglycemia) || ','::text) || r.hyperglycemia) || ','::text) || r.hypocalcemia) || ','::text) || r.hypercalcemia) || ','::text) || r.hypokalemia) || ','::text) || r.hyperkalemia) || ','::text) || r.hyponatremia) || ','::text) || r.hypernatremia) || ','::text) || r.acidosis) || ','::text) || r.iem) || ','::text) || r.sepsis) || ','::text) || r.asphyxia) || ','::text) || r.seizure) || ','::text) || r.ivh) || ','::text) || r.renal) || ','::text) || r.feed, ','::text) AS eventlist,\
    r.episodeid\
   FROM apollo.vw_sa_assesment_count_rule r;\
\
ALTER TABLE apollo.vw_sa_assesment_count_rule1\
  OWNER TO postgres;\
\
\
\
\
\
}